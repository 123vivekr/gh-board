{"issues":[{"repoOwner":"coala","repoName":"coala","updatedAtMs":1533576774000,"issue":{"htmlUrl":"https://github.com/coala/coala/issues/5695","number":5695,"title":"Add graphQL in language definitions","body":"https://github.com/coala/coala/tree/master/coalib/bearlib/languages/definitions","comments":0,"createdAt":"2018-08-06T17:31:30Z","updatedAt":"2018-08-06T17:32:54Z","closedAt":null,"state":"open","user":{"login":"virresh","avatarUrl":"https://avatars0.githubusercontent.com/u/10978108?v=4"},"owner":{"login":"virresh","avatarUrl":"https://avatars0.githubusercontent.com/u/10978108?v=4"},"labels":[{"name":"area/aspects","color":"000000"},{"name":"area/documentation","color":"bfe5bf"}]}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1533581367000,"issue":{"htmlUrl":"https://github.com/coala/coala/issues/5692","number":5692,"title":"Add XML language in definitions","body":"c.f https://gitlab.com/coala/bears/coala-antlr/merge_requests/25/diffs?commit_id=36142dfb4456b6dd9ee4255e042ab313eab894b2#note_92551492\nRequired by XMLIndentBear","comments":1,"createdAt":"2018-08-05T16:36:07Z","updatedAt":"2018-08-06T18:49:27Z","closedAt":"2018-08-06T18:49:27Z","state":"closed","user":{"login":"virresh","avatarUrl":"https://avatars0.githubusercontent.com/u/10978108?v=4"},"owner":{"login":"virresh","avatarUrl":"https://avatars0.githubusercontent.com/u/10978108?v=4"},"assignee":{"login":"virresh","avatarUrl":"https://avatars0.githubusercontent.com/u/10978108?v=4"},"labels":[{"name":"area/aspects","color":"000000"},{"name":"area/documentation","color":"bfe5bf"},{"name":"area/languages","color":"d4c5f9"}]}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1533541805000,"issue":{"htmlUrl":"https://github.com/coala/coala/issues/5694","number":5694,"title":"Modify `Linter` module for aspects","body":"Linter module needs to be modified so that the Result object makes use of aspects. It can be made similar to the implementation in the Result module plus more features can be added to make it even more usable.","comments":0,"createdAt":"2018-08-06T07:45:07Z","updatedAt":"2018-08-06T07:50:05Z","closedAt":null,"state":"open","user":{"login":"pareksha","avatarUrl":"https://avatars1.githubusercontent.com/u/32385407?v=4"},"owner":{"login":"pareksha","avatarUrl":"https://avatars1.githubusercontent.com/u/32385407?v=4"},"labels":[{"name":"area/aspects","color":"000000"},{"name":"area/documentation","color":"bfe5bf"}]}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1532856395000,"issue":{"htmlUrl":"https://github.com/coala/coala/issues/5676","number":5676,"title":"Fix the API breakage problem because of `debugger` flag in bear base class","body":"For further information https://github.com/coala/coala/pull/5599/files#r203964627","comments":6,"createdAt":"2018-07-28T10:40:37Z","updatedAt":"2018-07-29T09:26:35Z","closedAt":null,"state":"open","user":{"login":"RaiVaibhav","avatarUrl":"https://avatars3.githubusercontent.com/u/22278438?v=4"},"owner":{"login":"RaiVaibhav","avatarUrl":"https://avatars3.githubusercontent.com/u/22278438?v=4"},"assignee":{"login":"RaiVaibhav","avatarUrl":"https://avatars3.githubusercontent.com/u/22278438?v=4"},"labels":[]}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1533005406000,"issue":{"htmlUrl":"https://github.com/coala/coala/issues/5683","number":5683,"title":"deprecate_settings to support splitting a value to two new args","body":"I would like to split the checkstyle_configs arg into two args, as they are two different data-types.\nIt seems @deprecate_settings and FunctionMetadata cant support this, as they expect a deprecated arg to only be used once.\nHere is a more detailed look at what I tried to do, and failed.\ndef get_name(value):\n    if value in known_checkstyles.keys():\n        return value\n\ndef get_path(value):\n    if value not in known_checkstyles.keys():\n        return value\n\nclass CheckstyleBear:\n    ...\n\n    @deprecate_settings(\n        java_style_name=('checkstyle_configs',\n                         get_name),\n        checkstyle_config=('checkstyle_configs',\n                           get_path),\n    )\n    def create_arguments(\n            self, filename, file, config_file,\n            checkstyle_config: path = None,\n            java_style_name: CheckstyleStyle = 'google',\n            ...","comments":0,"createdAt":"2018-07-31T02:49:26Z","updatedAt":"2018-07-31T02:50:06Z","closedAt":null,"state":"open","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"type/feature","color":"0052cc"}]}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1533555354000,"issue":{"htmlUrl":"https://github.com/coala/coala/issues/5685","number":5685,"title":"Inappropriate prompt message","body":"When coala is invoked with --single-action, a menu is shown with a prompt saying [ ] Enter number (Ctrl-D to exit): but valid input is a letter, not a number.\nNeeds a fix in:\nSTR_ENTER_NUMBER = 'Enter number (Ctrl-{} to exit): '.format('Z' if platform.system() == 'Windows' else 'D')\nDifficulty: Newcomer","comments":6,"createdAt":"2018-08-04T09:35:38Z","updatedAt":"2018-08-06T11:35:54Z","closedAt":"2018-08-06T11:35:54Z","state":"closed","user":{"login":"ksdme","avatarUrl":"https://avatars1.githubusercontent.com/u/12156014?v=4"},"owner":{"login":"ksdme","avatarUrl":"https://avatars1.githubusercontent.com/u/12156014?v=4"},"assignee":{"login":"Utkarsh1308","avatarUrl":"https://avatars0.githubusercontent.com/u/23418707?v=4"},"labels":[{"name":"difficulty/newcomer","color":"65C8FF"},{"name":"type/bug","color":"e11d21"}]}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1533480161000,"issue":{"htmlUrl":"https://github.com/coala/coala/issues/5689","number":5689,"title":"Add tag based section filters.","body":"We need to have a way using which sections can be tagged and specific tags can be invoked. For example:\n[samples]\ntags = tag_one\nbears = SomeLongBear\n\n[other_sample]\nbears = SomeLongBear\n\nWhen run using coala --tags tag_one tag_two only samples section should be invoked.\nPart of cEP-0028.","comments":1,"createdAt":"2018-08-05T14:41:33Z","updatedAt":"2018-08-05T14:42:41Z","closedAt":null,"state":"open","user":{"login":"ksdme","avatarUrl":"https://avatars1.githubusercontent.com/u/12156014?v=4"},"owner":{"login":"ksdme","avatarUrl":"https://avatars1.githubusercontent.com/u/12156014?v=4"},"labels":[]}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1532251618000,"issue":{"htmlUrl":"https://github.com/coala/coala/issues/5657","number":5657,"title":"Languages incorrectly claims it is a tuple","body":"It should be a mapping, but the bug is it claims to be a tuple.\nReplace with 'object'.","comments":0,"createdAt":"2018-07-22T09:21:31Z","updatedAt":"2018-07-22T09:26:58Z","closedAt":null,"state":"open","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"assignee":{"login":"pareksha","avatarUrl":"https://avatars1.githubusercontent.com/u/32385407?v=4"},"labels":[{"name":"area/languages","color":"d4c5f9"},{"name":"type/bug","color":"e11d21"}]}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1532251742000,"issue":{"htmlUrl":"https://github.com/coala/coala/issues/5658","number":5658,"title":"Languages should be a Mapping","body":"#5657 first. Then make Languages a Mapping and Iterable class (see collections)","comments":0,"createdAt":"2018-07-22T09:29:02Z","updatedAt":"2018-07-22T09:29:02Z","closedAt":null,"state":"open","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"area/languages","color":"d4c5f9"}]}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1532463974000,"issue":{"htmlUrl":"https://github.com/coala/coala/issues/5659","number":5659,"title":"coala verbose mode","body":"If coala verbose setting is used then if a linter bear also has verbose mode it should also be used.","comments":12,"createdAt":"2018-07-22T11:20:36Z","updatedAt":"2018-07-24T20:26:14Z","closedAt":null,"state":"open","user":{"login":"anctartica","avatarUrl":"https://avatars0.githubusercontent.com/u/7020962?v=4"},"owner":{"login":"anctartica","avatarUrl":"https://avatars0.githubusercontent.com/u/7020962?v=4"},"assignee":{"login":"RaiVaibhav","avatarUrl":"https://avatars3.githubusercontent.com/u/22278438?v=4"},"labels":[{"name":"area/CLI","color":"006b75"},{"name":"type/feature","color":"0052cc"}]}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1532681642000,"issue":{"htmlUrl":"https://github.com/coala/coala/issues/5664","number":5664,"title":"Installation error: ModuleNotFoundError: No module named 'appdirs'","body":"Installing coala-bears resulted in this , which I havent seen before.\n$ pip install -r requirements.txt \".[alldeps]\"\nProcessing /home/travis/build/jayvdb/coala-bears\nCollecting coala-0.12.0.dev99999999999999 from git+https://github.com/coala/coala#egg=coala-0.12.0.dev99999999999999 (from -r requirements.txt (line 3))\n  Cloning https://github.com/coala/coala to /tmp/pip-build-d6jpvz9r/coala-0.12.0.dev99999999999999\n  Running setup.py (path:/tmp/pip-build-d6jpvz9r/coala-0.12.0.dev99999999999999/setup.py) egg_info for package coala-0.12.0.dev99999999999999 produced metadata for project name coala. Fix your #egg=coala-0.12.0.dev99999999999999 fragments.\nCollecting HTTPolice~=0.5.2 (from -r bear-requirements.txt (line 1))\n  Using cached https://files.pythonhosted.org/packages/3a/b4/ad13fae41373a0734388b7fee1418fb9cdc57662ef46e25bcf805428c187/HTTPolice-0.5.2-py2.py3-none-any.whl\nCollecting aenum~=2.0.8 (from -r bear-requirements.txt (line 2))\n  Using cached https://files.pythonhosted.org/packages/01/11/e0b5efc82daace980210c1b5f1458676ccc6513514955678801b44f9169c/aenum-2.0.10-py3-none-any.whl\nCollecting apertium-lint~=0.29 (from -r bear-requirements.txt (line 3))\nCollecting autoflake~=0.7 (from -r bear-requirements.txt (line 4))\nCollecting autopep8~=1.2 (from -r bear-requirements.txt (line 5))\nCollecting bandit~=1.2 (from -r bear-requirements.txt (line 6))\n  Using cached https://files.pythonhosted.org/packages/77/41/d57366098a30a86af1821e231949221d2b6b896cc4bdd060cc1be27fdd47/bandit-1.4.0-py2.py3-none-any.whl\nCollecting cmakelint~=1.3 (from -r bear-requirements.txt (line 7))\nCollecting cppclean~=0.12.0 (from -r bear-requirements.txt (line 8))\nCollecting cpplint~=1.3 (from -r bear-requirements.txt (line 9))\nCollecting dennis~=0.9 (from -r bear-requirements.txt (line 10))\n  Using cached https://files.pythonhosted.org/packages/2d/2e/2cb43a5e787387b558d2eeefc2713305d2df97c4622cee37b1e6f5505031/dennis-0.9-py2.py3-none-any.whl\nCollecting docutils-ast-writer~=0.1.2 (from -r bear-requirements.txt (line 11))\nCollecting eradicate~=0.1.6 (from -r bear-requirements.txt (line 12))\nCollecting git-url-parse~=1.1.0 (from -r bear-requirements.txt (line 13))\n  Using cached https://files.pythonhosted.org/packages/0d/66/3f4a12c4e13aae46aaa8062c3bef12e86478aac1ed31f4c05c3e1887d367/git_url_parse-1.1.0-py3-none-any.whl\nCollecting guess-language-spirit~=0.5.2 (from -r bear-requirements.txt (line 14))\nCollecting html-linter~=0.4.0 (from -r bear-requirements.txt (line 15))\nCollecting isort~=4.2 (from -r bear-requirements.txt (line 16))\n  Using cached https://files.pythonhosted.org/packages/1f/2c/22eee714d7199ae0464beda6ad5fedec8fee6a2f7ffd1e8f1840928fe318/isort-4.3.4-py3-none-any.whl\nCollecting language-check~=1.0 (from -r bear-requirements.txt (line 17))\nCollecting libclang-py3~=3.4.0 (from -r bear-requirements.txt (line 18))\nCollecting lxml==3.6.0 (from -r bear-requirements.txt (line 19))\nCollecting memento_client~=0.6.1 (from -r bear-requirements.txt (line 20))\n  Using cached https://files.pythonhosted.org/packages/41/8d/8dfc683c1228779b2eb6e80681e70d450b20fce58d53483fb6e5c7f6ff34/memento_client-0.6.1-py2.py3-none-any.whl\nCollecting munkres3~=1.0 (from -r bear-requirements.txt (line 21))\nCollecting mypy-lang~=0.4.6 (from -r bear-requirements.txt (line 22))\nCollecting nbformat~=4.1 (from -r bear-requirements.txt (line 23))\n  Using cached https://files.pythonhosted.org/packages/da/27/9a654d2b6cc1eaa517d1c5a4405166c7f6d72f04f6e7eea41855fe808a46/nbformat-4.4.0-py2.py3-none-any.whl\nCollecting nltk~=3.2 (from -r bear-requirements.txt (line 24))\nCollecting proselint~=0.7.0 (from -r bear-requirements.txt (line 25))\nCollecting pycodestyle~=2.2 (from -r bear-requirements.txt (line 26))\n  Using cached https://files.pythonhosted.org/packages/e5/c6/ce130213489969aa58610042dff1d908c25c731c9575af6935c2dfad03aa/pycodestyle-2.4.0-py2.py3-none-any.whl\nCollecting pydocstyle~=2.0 (from -r bear-requirements.txt (line 27))\n  Using cached https://files.pythonhosted.org/packages/43/8a/f1141af0c8406788a5c38ad5001d4163d903b5384a6517239d2ac42734c8/pydocstyle-2.1.1-py3-none-any.whl\nCollecting pyflakes~=1.5.0 (from -r bear-requirements.txt (line 28))\n  Using cached https://files.pythonhosted.org/packages/27/49/924098b3b85c286696f37e014475d79471ffc44509613af420645a3c12cb/pyflakes-1.5.0-py2.py3-none-any.whl\nCollecting pylint~=1.7.2 (from -r bear-requirements.txt (line 29))\n  Using cached https://files.pythonhosted.org/packages/f8/86/410d53faff049641f34951843245d168261512aea787a1f9f05c3fa025a0/pylint-1.7.6-py2.py3-none-any.whl\nCollecting pyroma~=2.2.0 (from -r bear-requirements.txt (line 30))\nCollecting pyyaml~=3.12 (from -r bear-requirements.txt (line 31))\nCollecting radon==1.4.0 (from -r bear-requirements.txt (line 32))\n  Using cached https://files.pythonhosted.org/packages/b1/24/594df18af8141787d8e2d694fbc898fd26f0aa26597fe6f6652cdb773a7f/radon-1.4.0-py2.py3-none-any.whl\nCollecting restructuredtext-lint~=1.0.0 (from -r bear-requirements.txt (line 33))\nCollecting rstcheck~=3.1 (from -r bear-requirements.txt (line 34))\nCollecting safety~=1.8.2 (from -r bear-requirements.txt (line 35))\n  Downloading https://files.pythonhosted.org/packages/20/58/701d0b61562a63b7f0008bcfd673617b277ddaa2cde217a398f82c146cd4/safety-1.8.2-py2.py3-none-any.whl\nCollecting scspell3k~=2.0 (from -r bear-requirements.txt (line 36))\nCollecting vim-vint!=0.3.19,~=0.3.12 (from -r bear-requirements.txt (line 37))\nCollecting vulture~=0.25.0 (from -r bear-requirements.txt (line 38))\n  Using cached https://files.pythonhosted.org/packages/98/d7/3cc454c33422f1c43255928e7b4bac77a0bcabb113a946997edc60a2a176/vulture-0.25-py2.py3-none-any.whl\nCollecting yamllint~=1.6.1 (from -r bear-requirements.txt (line 39))\n  Using cached https://files.pythonhosted.org/packages/07/cf/213a023883122cc527bdc5cab135a4e30af93c1a0feaa6cabc16aaee68ac/yamllint-1.6.1-py2.py3-none-any.whl\nCollecting yapf~=0.21.0 (from -r bear-requirements.txt (line 40))\n  Using cached https://files.pythonhosted.org/packages/6d/0c/65c7318a7f134270ef565d1cdfffdb714a0de1526f9a6c71452552633da7/yapf-0.21.0-py2.py3-none-any.whl\nCollecting coala>0.11.* (from coala-bears==0.12.0.dev99999999999999)\n  Downloading https://files.pythonhosted.org/packages/24/5c/15242d3079510651c410f56672e6eceabda5b4e53b97344419c79e4239b3/coala-0.12.0.dev20180101025653-py34.py35.py36-none-any.whl (236kB)\n    100% |████████████████████████████████| 245kB 4.8MB/s \nCollecting appdirs~=1.4 (from coala->-r requirements.txt (line 3))\n  Using cached https://files.pythonhosted.org/packages/56/eb/810e700ed1349edde4cbdc1b2a21e28cdf115f9faf263f6bbf8447c1abf3/appdirs-1.4.3-py2.py3-none-any.whl\nCollecting cached_property~=1.4.3 (from coala->-r requirements.txt (line 3))\n  Using cached https://files.pythonhosted.org/packages/88/09/4b7a484f96cbceda746e03f0167021c909c3ceae1c6f2e844d79476cb70e/cached_property-1.4.3-py2.py3-none-any.whl\nCollecting cli_helpers~=1.0.2 (from coala->-r requirements.txt (line 3))\n  Using cached https://files.pythonhosted.org/packages/bf/4a/f3a506a57619978e1775279d2bc4435821db1c391087ac02aa20137f765d/cli_helpers-1.0.2-py3-none-any.whl\nCollecting coala_utils (from coala->-r requirements.txt (line 3))\n  Using cached https://files.pythonhosted.org/packages/93/7d/65d619f7a64ac2ea6d43b047e63a8605d1c7193195b52a59c7ea342f5a53/coala_utils-0.7.0-py3-none-any.whl\nCollecting colorlog<4.0,>=2.7 (from coala->-r requirements.txt (line 3))\n  Using cached https://files.pythonhosted.org/packages/69/eb/58ae10d3c46a0195ffdd0e3943d255d0d5029d71e5457785ecd665bcf0f3/colorlog-3.1.4-py2.py3-none-any.whl\nCollecting dependency_management (from coala->-r requirements.txt (line 3))\n  Using cached https://files.pythonhosted.org/packages/1d/c7/e1ff3d4b90b1a4197e90bb43c87200ce89c677e26dadbc55cc9f943de47b/dependency_management-0.4.0-py3-none-any.whl\nCollecting packaging>=16.8 (from coala->-r requirements.txt (line 3))\n  Downloading https://files.pythonhosted.org/packages/ad/c2/b500ea05d5f9f361a562f089fc91f77ed3b4783e13a08a3daf82069b1224/packaging-17.1-py2.py3-none-any.whl\nCollecting Pygments~=2.1 (from coala->-r requirements.txt (line 3))\n  Using cached https://files.pythonhosted.org/packages/02/ee/b6e02dc6529e82b75bb06823ff7d005b141037cb1416b10c6f00fc419dca/Pygments-2.2.0-py2.py3-none-any.whl\nCollecting PyPrint~=0.2.6 (from coala->-r requirements.txt (line 3))\n  Using cached https://files.pythonhosted.org/packages/b0/45/8912d660c6accfe665f6649433362aa0eb9a94a3a71ee3a71d8956f0a4ed/PyPrint-0.2.6-py3-none-any.whl\nCollecting requests~=2.12 (from coala->-r requirements.txt (line 3))\n  Using cached https://files.pythonhosted.org/packages/65/47/7e02164a2a3db50ed6d8a6ab1d6d60b69c4c3fdf57a284257925dfc12bda/requests-2.19.1-py2.py3-none-any.whl\nRequirement already satisfied: setuptools>=21.0.0 in /home/travis/virtualenv/python3.6.3/lib/python3.6/site-packages (from coala->-r requirements.txt (line 3))\nCollecting unidiff~=0.5.2 (from coala->-r requirements.txt (line 3))\n  Using cached https://files.pythonhosted.org/packages/68/52/c7278fc3c17d1aaade84597968d88f97f0f4ec7288ddedb6970a341c5170/unidiff-0.5.5-py2.py3-none-any.whl\nCollecting dominate>=2.2.0 (from HTTPolice~=0.5.2->-r bear-requirements.txt (line 1))\nCollecting bitstring>=3.1.4 (from HTTPolice~=0.5.2->-r bear-requirements.txt (line 1))\nRequirement already satisfied: six>=1.10.0 in /home/travis/virtualenv/python3.6.3/lib/python3.6/site-packages (from HTTPolice~=0.5.2->-r bear-requirements.txt (line 1))\nCollecting singledispatch>=3.4.0.3 (from HTTPolice~=0.5.2->-r bear-requirements.txt (line 1))\n  Using cached https://files.pythonhosted.org/packages/c5/10/369f50bcd4621b263927b0a1519987a04383d4a98fb10438042ad410cf88/singledispatch-3.4.0.3-py2.py3-none-any.whl\nCollecting defusedxml>=0.5.0 (from HTTPolice~=0.5.2->-r bear-requirements.txt (line 1))\n  Using cached https://files.pythonhosted.org/packages/87/1c/17f3e3935a913dfe2a5ca85fa5ccbef366bfd82eb318b1f75dadbf0affca/defusedxml-0.5.0-py2.py3-none-any.whl\nCollecting brotlipy>=0.5.1 (from HTTPolice~=0.5.2->-r bear-requirements.txt (line 1))\n  Using cached https://files.pythonhosted.org/packages/b8/e6/be86d2d6565fcf4bd82cca288ac1e264a50dbfa41bef86b63b5d69252fca/brotlipy-0.7.0-cp36-cp36m-manylinux1_x86_64.whl\nCollecting GitPython>=1.0.1 (from bandit~=1.2->-r bear-requirements.txt (line 6))\n  Downloading https://files.pythonhosted.org/packages/fe/e5/fafe827507644c32d6dc553a1c435cdf882e0c28918a5bab29f7fbebfb70/GitPython-2.1.11-py2.py3-none-any.whl (448kB)\n    100% |████████████████████████████████| 450kB 2.7MB/s \nCollecting stevedore>=1.17.1 (from bandit~=1.2->-r bear-requirements.txt (line 6))\n  Downloading https://files.pythonhosted.org/packages/a1/d9/93a975469c53a9ee85de9ec0deb12345aa777748b4c263860668592344fe/stevedore-1.29.0-py2.py3-none-any.whl\nCollecting click>=6 (from dennis~=0.9->-r bear-requirements.txt (line 10))\n  Using cached https://files.pythonhosted.org/packages/34/c1/8806f99713ddb993c5366c362b2f908f18269f8d792aff1abfd700775a77/click-6.7-py2.py3-none-any.whl\nCollecting polib>=1.0.8 (from dennis~=0.9->-r bear-requirements.txt (line 10))\n  Using cached https://files.pythonhosted.org/packages/30/a2/e407c3b00cace3d7fc8df14d364deeecfeb96044e1a317de583bc26eae58/polib-1.1.0-py2.py3-none-any.whl\nCollecting docutils>=0.12 (from docutils-ast-writer~=0.1.2->-r bear-requirements.txt (line 11))\n  Using cached https://files.pythonhosted.org/packages/36/fa/08e9e6e0e3cbd1d362c3bbee8d01d0aedb2155c4ac112b19ef3cae8eed8d/docutils-0.14-py3-none-any.whl\nRequirement already satisfied: pbr in /home/travis/virtualenv/python3.6.3/lib/python3.6/site-packages (from git-url-parse~=1.1.0->-r bear-requirements.txt (line 13))\nCollecting docopt>=0.6.1 (from html-linter~=0.4.0->-r bear-requirements.txt (line 15))\nCollecting template-remover (from html-linter~=0.4.0->-r bear-requirements.txt (line 15))\nCollecting traitlets>=4.1 (from nbformat~=4.1->-r bear-requirements.txt (line 23))\n  Using cached https://files.pythonhosted.org/packages/93/d6/abcb22de61d78e2fc3959c964628a5771e47e7cc60d53e9342e21ed6cc9a/traitlets-4.3.2-py2.py3-none-any.whl\nCollecting jupyter-core (from nbformat~=4.1->-r bear-requirements.txt (line 23))\n  Using cached https://files.pythonhosted.org/packages/1d/44/065d2d7bae7bebc06f1dd70d23c36da8c50c0f08b4236716743d706762a8/jupyter_core-4.4.0-py2.py3-none-any.whl\nCollecting jsonschema!=2.5.0,>=2.4 (from nbformat~=4.1->-r bear-requirements.txt (line 23))\n  Using cached https://files.pythonhosted.org/packages/77/de/47e35a97b2b05c2fadbec67d44cfcdcd09b8086951b331d82de90d2912da/jsonschema-2.6.0-py2.py3-none-any.whl\nCollecting ipython-genutils (from nbformat~=4.1->-r bear-requirements.txt (line 23))\n  Using cached https://files.pythonhosted.org/packages/fa/bc/9bd3b5c2b4774d5f33b2d544f1460be9df7df2fe42f352135381c347c69a/ipython_genutils-0.2.0-py2.py3-none-any.whl\nCollecting future (from proselint~=0.7.0->-r bear-requirements.txt (line 25))\nCollecting snowballstemmer (from pydocstyle~=2.0->-r bear-requirements.txt (line 27))\n  Using cached https://files.pythonhosted.org/packages/d4/6c/8a935e2c7b54a37714656d753e4187ee0631988184ed50c0cf6476858566/snowballstemmer-1.2.1-py2.py3-none-any.whl\nCollecting astroid<1.6,>=1.5.1 (from pylint~=1.7.2->-r bear-requirements.txt (line 29))\n  Using cached https://files.pythonhosted.org/packages/9a/a7/d8155abf1c58457f1c65a20208ff128ec403d810dd55c40a39047f1bbddd/astroid-1.5.3-py2.py3-none-any.whl\nCollecting mccabe (from pylint~=1.7.2->-r bear-requirements.txt (line 29))\n  Using cached https://files.pythonhosted.org/packages/87/89/479dc97e18549e21354893e4ee4ef36db1d237534982482c3681ee6e7b57/mccabe-0.6.1-py2.py3-none-any.whl\nCollecting colorama<0.4,>=0.3 (from radon==1.4.0->-r bear-requirements.txt (line 32))\n  Using cached https://files.pythonhosted.org/packages/db/c8/7dcf9dbcb22429512708fe3a547f8b6101c0d02137acbd892505aee57adf/colorama-0.3.9-py2.py3-none-any.whl\nCollecting mando<0.4,>=0.3 (from radon==1.4.0->-r bear-requirements.txt (line 32))\n  Using cached https://files.pythonhosted.org/packages/4a/77/180f0b61dca785a6b76c4f1ba611100fbc628abeb8415fa7c5c4c5d99e0b/mando-0.3.3-py2.py3-none-any.whl\nRequirement already satisfied: pip in /home/travis/virtualenv/python3.6.3/lib/python3.6/site-packages (from safety~=1.8.2->-r bear-requirements.txt (line 35))\nCollecting dparse>=0.4.1 (from safety~=1.8.2->-r bear-requirements.txt (line 35))\n  Downloading https://files.pythonhosted.org/packages/8d/89/39cdc1b885e0af65fd172be21c318c3c750d1fbca0582c7b7ffe9873ed78/dparse-0.4.1.tar.gz\nCollecting chardet>=2.3.0 (from vim-vint!=0.3.19,~=0.3.12->-r bear-requirements.txt (line 37))\n  Using cached https://files.pythonhosted.org/packages/bc/a9/01ffebfb562e4274b6487b4bb1ddec7ca55ec7510b22e4c51f14098443b8/chardet-3.0.4-py2.py3-none-any.whl\nCollecting ansicolor~=0.2.4 (from vim-vint!=0.3.19,~=0.3.12->-r bear-requirements.txt (line 37))\n  Using cached https://files.pythonhosted.org/packages/42/0b/f370fae6d0070758e8bbf46c77da779e4ea79870ea5197893b2678848aeb/ansicolor-0.2.6-py2.py3-none-any.whl\nCollecting testfixtures~=4.14.3 (from coala>0.11.*->coala-bears==0.12.0.dev99999999999999)\n  Downloading https://files.pythonhosted.org/packages/6c/4e/0381a0ead1f270f0bd2854e3ad40c24242bcf9ee99093e786111f831cad2/testfixtures-4.14.3-py2.py3-none-any.whl (77kB)\n    100% |████████████████████████████████| 81kB 10.4MB/s \nCollecting tabulate[widechars]>=0.8.2 (from cli_helpers~=1.0.2->coala->-r requirements.txt (line 3))\nCollecting terminaltables>=3.0.0 (from cli_helpers~=1.0.2->coala->-r requirements.txt (line 3))\nCollecting sarge~=0.1.4 (from dependency_management->coala->-r requirements.txt (line 3))\nCollecting pyparsing>=2.0.2 (from packaging>=16.8->coala->-r requirements.txt (line 3))\n  Using cached https://files.pythonhosted.org/packages/6a/8a/718fd7d3458f9fab8e67186b00abdd345b639976bc7fb3ae722e1b026a50/pyparsing-2.2.0-py2.py3-none-any.whl\nCollecting termcolor~=1.1.0 (from PyPrint~=0.2.6->coala->-r requirements.txt (line 3))\nCollecting certifi>=2017.4.17 (from requests~=2.12->coala->-r requirements.txt (line 3))\n  Using cached https://files.pythonhosted.org/packages/7c/e6/92ad559b7192d846975fc916b65f667c7b8c3a32bea7372340bfe9a15fa5/certifi-2018.4.16-py2.py3-none-any.whl\nCollecting idna<2.8,>=2.5 (from requests~=2.12->coala->-r requirements.txt (line 3))\n  Using cached https://files.pythonhosted.org/packages/4b/2a/0276479a4b3caeb8a8c1af2f8e4355746a97fab05a372e4a2c6a6b876165/idna-2.7-py2.py3-none-any.whl\nCollecting urllib3<1.24,>=1.21.1 (from requests~=2.12->coala->-r requirements.txt (line 3))\n  Using cached https://files.pythonhosted.org/packages/bd/c9/6fdd990019071a4a32a5e7cb78a1d92c53851ef4f56f62a3486e6a7d8ffb/urllib3-1.23-py2.py3-none-any.whl\nCollecting cffi>=1.0.0 (from brotlipy>=0.5.1->HTTPolice~=0.5.2->-r bear-requirements.txt (line 1))\n  Using cached https://files.pythonhosted.org/packages/6d/c0/47db8f624f3e4e2f3f27be03a93379d1ba16a1450a7b1aacfa0366e2c0dd/cffi-1.11.5-cp36-cp36m-manylinux1_x86_64.whl\nCollecting gitdb2>=2.0.0 (from GitPython>=1.0.1->bandit~=1.2->-r bear-requirements.txt (line 6))\n  Downloading https://files.pythonhosted.org/packages/a9/fb/d3afc4e2a8d506a07af19f125f7a473ae1b56f942ed2ba80776eb8ae23b1/gitdb2-2.0.4-py2.py3-none-any.whl (62kB)\n    100% |████████████████████████████████| 71kB 10.8MB/s \nCollecting decorator (from traitlets>=4.1->nbformat~=4.1->-r bear-requirements.txt (line 23))\n  Using cached https://files.pythonhosted.org/packages/bc/bb/a24838832ba35baf52f32ab1a49b906b5f82fb7c76b2f6a7e35e140bac30/decorator-4.3.0-py2.py3-none-any.whl\nCollecting lazy-object-proxy (from astroid<1.6,>=1.5.1->pylint~=1.7.2->-r bear-requirements.txt (line 29))\n  Using cached https://files.pythonhosted.org/packages/65/1f/2043ec33066e779905ed7e6580384425fdc7dc2ac64d6931060c75b0c5a3/lazy_object_proxy-1.3.1-cp36-cp36m-manylinux1_x86_64.whl\nCollecting wrapt (from astroid<1.6,>=1.5.1->pylint~=1.7.2->-r bear-requirements.txt (line 29))\nCollecting wcwidth; extra == \"widechars\" (from tabulate[widechars]>=0.8.2->cli_helpers~=1.0.2->coala->-r requirements.txt (line 3))\n  Using cached https://files.pythonhosted.org/packages/7e/9f/526a6947247599b084ee5232e4f9190a38f398d7300d866af3ab571a5bfe/wcwidth-0.1.7-py2.py3-none-any.whl\nCollecting pycparser (from cffi>=1.0.0->brotlipy>=0.5.1->HTTPolice~=0.5.2->-r bear-requirements.txt (line 1))\nCollecting smmap2>=2.0.0 (from gitdb2>=2.0.0->GitPython>=1.0.1->bandit~=1.2->-r bear-requirements.txt (line 6))\n  Downloading https://files.pythonhosted.org/packages/0f/14/e3112808b727f72df9531fc2f00b84d4966e66001748b6883a21c767e902/smmap2-2.0.4-py2.py3-none-any.whl\nBuilding wheels for collected packages: coala-bears, dparse\n  Running setup.py bdist_wheel for coala-bears ... done\n  Stored in directory: /home/travis/.cache/pip/wheels/b2/ca/19/7a08b6c420c1b225baecb51100ae57c6fcfa6399dbca4158c2\n  Running setup.py bdist_wheel for dparse ... done\n  Stored in directory: /home/travis/.cache/pip/wheels/4a/8d/fa/d8d1526ad5615bc0fc10502e16dfc2a70802106cba099d2518\nSuccessfully built coala-bears dparse\nInstalling collected packages: coala, dominate, bitstring, lxml, singledispatch, defusedxml, pycparser, cffi, brotlipy, HTTPolice, aenum, apertium-lint, pyflakes, autoflake, pycodestyle, autopep8, smmap2, gitdb2, GitPython, pyyaml, stevedore, bandit, cmakelint, cppclean, cpplint, click, polib, dennis, docutils, docutils-ast-writer, eradicate, git-url-parse, guess-language-spirit, docopt, template-remover, html-linter, isort, language-check, libclang-py3, certifi, idna, urllib3, chardet, requests, memento-client, munkres3, mypy-lang, decorator, ipython-genutils, traitlets, jupyter-core, jsonschema, nbformat, nltk, future, proselint, snowballstemmer, pydocstyle, lazy-object-proxy, wrapt, astroid, mccabe, pylint, pyroma, colorama, mando, radon, restructuredtext-lint, rstcheck, pyparsing, packaging, dparse, safety, scspell3k, ansicolor, vim-vint, vulture, yamllint, yapf, appdirs, cached-property, wcwidth, tabulate, terminaltables, cli-helpers, testfixtures, termcolor, PyPrint, coala-utils, colorlog, sarge, dependency-management, Pygments, unidiff, coala, coala-bears\n  Running setup.py install for coala ... error\n    Complete output from command /home/travis/virtualenv/python3.6.3/bin/python -u -c \"import setuptools, tokenize;__file__='/tmp/pip-build-d6jpvz9r/coala-0.12.0.dev99999999999999/setup.py';f=getattr(tokenize, 'open', open)(__file__);code=f.read().replace('\\r\\n', '\\n');f.close();exec(compile(code, __file__, 'exec'))\" install --record /tmp/pip-n6ktgc2w-record/install-record.txt --single-version-externally-managed --compile --install-headers /home/travis/virtualenv/python3.6.3/include/site/python3.6/coala:\n    running install\n    running build\n    running build_py\n    running build_manpage\n    Traceback (most recent call last):\n      File \"<string>\", line 1, in <module>\n      File \"/tmp/pip-build-d6jpvz9r/coala-0.12.0.dev99999999999999/setup.py\", line 244, in <module>\n        cmdclass=SETUP_COMMANDS,\n      File \"/home/travis/virtualenv/python3.6.3/lib/python3.6/site-packages/setuptools/__init__.py\", line 129, in setup\n        return distutils.core.setup(**attrs)\n      File \"/opt/python/3.6.3/lib/python3.6/distutils/core.py\", line 148, in setup\n        dist.run_commands()\n      File \"/opt/python/3.6.3/lib/python3.6/distutils/dist.py\", line 955, in run_commands\n        self.run_command(cmd)\n      File \"/opt/python/3.6.3/lib/python3.6/distutils/dist.py\", line 974, in run_command\n        cmd_obj.run()\n      File \"/home/travis/virtualenv/python3.6.3/lib/python3.6/site-packages/setuptools/command/install.py\", line 61, in run\n        return orig.install.run(self)\n      File \"/opt/python/3.6.3/lib/python3.6/distutils/command/install.py\", line 545, in run\n        self.run_command('build')\n      File \"/opt/python/3.6.3/lib/python3.6/distutils/cmd.py\", line 313, in run_command\n        self.distribution.run_command(command)\n      File \"/opt/python/3.6.3/lib/python3.6/distutils/dist.py\", line 974, in run_command\n        cmd_obj.run()\n      File \"/opt/python/3.6.3/lib/python3.6/distutils/command/build.py\", line 135, in run\n        self.run_command(cmd_name)\n      File \"/opt/python/3.6.3/lib/python3.6/distutils/cmd.py\", line 313, in run_command\n        self.distribution.run_command(command)\n      File \"/opt/python/3.6.3/lib/python3.6/distutils/dist.py\", line 974, in run_command\n        cmd_obj.run()\n      File \"/tmp/pip-build-d6jpvz9r/coala-0.12.0.dev99999999999999/setup.py\", line 38, in run\n        self.run_command('build_manpage')\n      File \"/opt/python/3.6.3/lib/python3.6/distutils/cmd.py\", line 313, in run_command\n        self.distribution.run_command(command)\n      File \"/opt/python/3.6.3/lib/python3.6/distutils/dist.py\", line 973, in run_command\n        cmd_obj.ensure_finalized()\n      File \"/opt/python/3.6.3/lib/python3.6/distutils/cmd.py\", line 107, in ensure_finalized\n        self.finalize_options()\n      File \"/tmp/pip-build-d6jpvz9r/coala-0.12.0.dev99999999999999/coalib/misc/BuildManPage.py\", line 57, in finalize_options\n        mod = __import__(mod_name, fromlist=fromlist)\n      File \"/tmp/pip-build-d6jpvz9r/coala-0.12.0.dev99999999999999/coalib/parsing/DefaultArgParser.py\", line 4, in <module>\n        from coalib.misc import Constants\n      File \"/tmp/pip-build-d6jpvz9r/coala-0.12.0.dev99999999999999/coalib/misc/Constants.py\", line 3, in <module>\n        import appdirs\n    ModuleNotFoundError: No module named 'appdirs'\n    \n    ----------------------------------------\nCommand \"/home/travis/virtualenv/python3.6.3/bin/python -u -c \"import setuptools, tokenize;__file__='/tmp/pip-build-d6jpvz9r/coala-0.12.0.dev99999999999999/setup.py';f=getattr(tokenize, 'open', open)(__file__);code=f.read().replace('\\r\\n', '\\n');f.close();exec(compile(code, __file__, 'exec'))\" install --record /tmp/pip-n6ktgc2w-record/install-record.txt --single-version-externally-managed --compile --install-headers /home/travis/virtualenv/python3.6.3/include/site/python3.6/coala\" failed with error code 1 in /tmp/pip-build-d6jpvz9r/coala-0.12.0.dev99999999999999/\n\nhttps://travis-ci.org/jayvdb/coala-bears/jobs/407420330","comments":3,"createdAt":"2018-07-24T02:50:36Z","updatedAt":"2018-07-27T08:54:02Z","closedAt":"2018-07-27T08:54:02Z","state":"closed","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"type/bug","color":"e11d21"}]}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1533378692000,"issue":{"htmlUrl":"https://github.com/coala/coala/issues/5667","number":5667,"title":"Can not invoke coala as a Python modules","body":"$ python3.7 -m coala --bears TextLintBear --files README.rst \n/bin/python3.7: No module named coala\npython3.7 -m coalib --bears TextLintBear --files README.rst \n/bin/python3.7: No module named coalib","comments":8,"createdAt":"2018-07-26T09:09:26Z","updatedAt":"2018-08-04T10:31:32Z","closedAt":null,"state":"open","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"assignee":{"login":"Naveenaidu","avatarUrl":"https://avatars1.githubusercontent.com/u/30195193?v=4"},"labels":[{"name":"area/CLI","color":"006b75"},{"name":"difficulty/low","color":"207de5"},{"name":"importance/medium","color":"fbca04"},{"name":"type/feature","color":"0052cc"}]}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1532603592000,"issue":{"htmlUrl":"https://github.com/coala/coala/issues/5668","number":5668,"title":"Add Jekyll Liquid language","body":"We use Liquid language in Jekyll sites.\nWe should have a language definition for it.","comments":1,"createdAt":"2018-07-26T10:53:09Z","updatedAt":"2018-07-26T11:13:12Z","closedAt":null,"state":"open","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"difficulty/low","color":"207de5"},{"name":"importance/medium","color":"fbca04"}]}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1532669629000,"issue":{"htmlUrl":"https://github.com/coala/coala/issues/5671","number":5671,"title":"coalaJSONTest has useless patch","body":"Patching of coalib.parsing.DefaultArgParser.get_all_bears_names in f9e46c8 is a bit unnecessary.\nShould look for other cases where two patches are used together","comments":1,"createdAt":"2018-07-27T02:49:19Z","updatedAt":"2018-07-27T05:33:49Z","closedAt":"2018-07-27T05:33:49Z","state":"closed","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"assignee":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"area/CLI","color":"006b75"},{"name":"area/tests","color":"bfd4f2"},{"name":"difficulty/low","color":"207de5"},{"name":"importance/low","color":"70E870"}]}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1533413053000,"issue":{"htmlUrl":"https://github.com/coala/coala/issues/5674","number":5674,"title":"TestUtilities.execute_coala should check for timeouts","body":"If there was a timeout during a test using execute_coala, pytest-timeout will emit Failed: Timeout >35.0s (number may change) and the timeout failure will be lost inside execute_coala/bear_test_module.\nThe test module will continue with the assertions, and cause various errors, as these coala output will be in a strange incomplete state.\nThis is one of the problems affecting #5571 and #5390\nA quick workaround is to detect Failed: Timeout is stderr inside execute_coala and re-raise the problem with the complete stderr and stdout for debugging purposes.","comments":3,"createdAt":"2018-07-28T02:19:42Z","updatedAt":"2018-08-04T20:04:13Z","closedAt":null,"state":"open","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"assignee":{"login":"starlord1311","avatarUrl":"https://avatars3.githubusercontent.com/u/32419214?v=4"},"labels":[{"name":"area/upstream","color":"5319e7"},{"name":"difficulty/low","color":"207de5"},{"name":"importance/high","color":"eb6420"}]}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1531320156000,"issue":{"htmlUrl":"https://github.com/coala/coala/issues/5615","number":5615,"title":"coala fails on latest dependency_management","body":"When changing the dependency to use the latest package management version, like jayvdb@e135727 , the build fails on missing CabalRequirement.\nAt least https://gitlab.com/coala/package_manager/issues/177 needs to be fixed.\nThere could also be other issues.","comments":1,"createdAt":"2018-07-09T05:42:18Z","updatedAt":"2018-07-11T14:42:36Z","closedAt":null,"state":"open","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"assignee":{"login":"anctartica","avatarUrl":"https://avatars0.githubusercontent.com/u/7020962?v=4"},"labels":[{"name":"type/bug","color":"e11d21"}]}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1531213063000,"issue":{"htmlUrl":"https://github.com/coala/coala/issues/5619","number":5619,"title":"coala fails to ignore file","body":"The rstcheck section of the .coafile ignores docs/Developers/coala_settings.rst\nhttps://github.com/anctartica/coala/blob/master/.coafile#L123.\nHowever, running coala --ci on Appveyor build throws the following warning related to the ignored file:\nExecuting section rst...\nExecuting section rstcheck...\n[WARNING][08:47:25] RSTcheckBear: This result has no patch attached.\ndocs\\Developers\\coala_settings.rst\n[   4] ..·argparse::\n**** RSTcheckBear [Section: rstcheck | Severity: INFO] ****\n!    ! (INFO/1) No directive entry for \"argparse\" in module \"docutils.parsers.rst.languages.en\".\nExecuting section text...\n\nhttps://ci.appveyor.com/project/anctartica/coala/build/1.0.30/job/nl99jijb782fnhj8#L1599","comments":0,"createdAt":"2018-07-10T08:57:43Z","updatedAt":"2018-07-10T08:57:43Z","closedAt":null,"state":"open","user":{"login":"anctartica","avatarUrl":"https://avatars0.githubusercontent.com/u/7020962?v=4"},"owner":{"login":"anctartica","avatarUrl":"https://avatars0.githubusercontent.com/u/7020962?v=4"},"labels":[]}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1532193021000,"issue":{"htmlUrl":"https://github.com/coala/coala/issues/5621","number":5621,"title":"Create doc page about moban","body":"moban is now fairly established in coala repos.\nIt is time for some docs.\nEspecially about how to do sync PR whenever it is needed.","comments":2,"createdAt":"2018-07-10T14:16:38Z","updatedAt":"2018-07-21T17:10:21Z","closedAt":null,"state":"open","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"difficulty/low","color":"207de5"},{"name":"importance/medium","color":"fbca04"}]}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1531668324000,"issue":{"htmlUrl":"https://github.com/coala/coala/issues/5625","number":5625,"title":"Add self on `run` method of TooManyLinesBear","body":"https://api.coala.io/en/latest/Developers/Testing_Bears.html#understanding-through-examples\ndifficulty/newcomer","comments":3,"createdAt":"2018-07-11T10:13:51Z","updatedAt":"2018-07-15T15:25:24Z","closedAt":"2018-07-15T15:25:24Z","state":"closed","user":{"login":"RaiVaibhav","avatarUrl":"https://avatars3.githubusercontent.com/u/22278438?v=4"},"owner":{"login":"RaiVaibhav","avatarUrl":"https://avatars3.githubusercontent.com/u/22278438?v=4"},"assignee":{"login":"sinscary","avatarUrl":"https://avatars0.githubusercontent.com/u/13782355?v=4"},"labels":[{"name":"area/CI","color":"eb6420"},{"name":"difficulty/newcomer","color":"65C8FF"}]}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1531731484000,"issue":{"htmlUrl":"https://github.com/coala/coala/issues/5626","number":5626,"title":"class name docs should use CapWords convention","body":"Files to be fixed are Redundancy.py, Metadata.py, root.py, Formatting.py, Smell.py, Security.py, Spelling.py.","comments":2,"createdAt":"2018-07-11T12:30:10Z","updatedAt":"2018-07-16T08:58:04Z","closedAt":"2018-07-16T08:58:04Z","state":"closed","user":{"login":"MacBox7","avatarUrl":"https://avatars0.githubusercontent.com/u/15063552?v=4"},"owner":{"login":"MacBox7","avatarUrl":"https://avatars0.githubusercontent.com/u/15063552?v=4"},"assignee":{"login":"pareksha","avatarUrl":"https://avatars1.githubusercontent.com/u/32385407?v=4"},"labels":[{"name":"difficulty/low","color":"207de5"},{"name":"type/codestyle","color":"d4c5f9"}]}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1531640333000,"issue":{"htmlUrl":"https://github.com/coala/coala/issues/5628","number":5628,"title":"CI build failure because of httpstat.us SSL certificate error","body":"https://travis-ci.org/virresh/coala/jobs/402970785#L1642\nhttps://ci.appveyor.com/project/anctartica/coala\nhttps://circleci.com/gh/virresh/coala/6\ndifficulty/low\nimportance/high","comments":4,"createdAt":"2018-07-12T09:52:08Z","updatedAt":"2018-07-15T07:38:53Z","closedAt":"2018-07-15T07:38:53Z","state":"closed","user":{"login":"RaiVaibhav","avatarUrl":"https://avatars3.githubusercontent.com/u/22278438?v=4"},"owner":{"login":"RaiVaibhav","avatarUrl":"https://avatars3.githubusercontent.com/u/22278438?v=4"},"labels":[{"name":"area/CI","color":"eb6420"},{"name":"area/tests","color":"bfd4f2"},{"name":"type/bug","color":"e11d21"}]}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1532987662000,"issue":{"htmlUrl":"https://github.com/coala/coala/issues/5631","number":5631,"title":"Newcomers_Guide.rst: fix link color in \"Struggling with this? ...\" message","body":"On Newcomers Guide page there is a block saying:\n\nStruggling with this? We have a very verbose guide on this topic in our Google Code In resources which can help you find a suitable repository and run coala on a bigger project.\n\nwhere \"our Google Code In resources\" is a link. However, it is underlined with dark color (on dark background) making it unnoticeable for reader. Maybe it would be a good idea to change border color to a lighter one.\nI attach the screenshot of this block to make things more clear:","comments":2,"createdAt":"2018-07-14T16:01:23Z","updatedAt":"2018-07-30T21:54:22Z","closedAt":"2018-07-30T21:54:21Z","state":"closed","user":{"login":"nikitavbv","avatarUrl":"https://avatars1.githubusercontent.com/u/24596921?v=4"},"owner":{"login":"nikitavbv","avatarUrl":"https://avatars1.githubusercontent.com/u/24596921?v=4"},"labels":[{"name":"area/documentation","color":"bfe5bf"}]}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1531818454000,"issue":{"htmlUrl":"https://github.com/coala/coala/issues/5636","number":5636,"title":"Python 3.3 unsupported check failing due to pytest 3.6.1 not available for that version","body":"Collecting pytest~=3.6.1 (from -r requirements.txt (line 20))\n  Could not find a version that satisfies the requirement pytest~=3.6.1 (from -r requirements.txt (line 20)) (from versions: 2.0.0, 2.0.1, 2.0.2, 2.0.3, 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.2.0, 2.2.1, 2.2.2, 2.2.3, 2.2.4, 2.3.0, 2.3.1, 2.3.2, 2.3.3, 2.3.4, 2.3.5, 2.4.0, 2.4.1, 2.4.2, 2.5.0, 2.5.1, 2.5.2, 2.6.0, 2.6.1, 2.6.2, 2.6.3, 2.6.4, 2.7.0, 2.7.1, 2.7.2, 2.7.3, 2.8.0, 2.8.1, 2.8.2, 2.8.3, 2.8.4, 2.8.5, 2.8.6, 2.8.7, 2.9.0, 2.9.1, 2.9.2, 3.0.0, 3.0.1, 3.0.2, 3.0.3, 3.0.4, 3.0.5, 3.0.6, 3.0.7, 3.1.0, 3.1.1, 3.1.2, 3.1.3, 3.2.0, 3.2.1, 3.2.2, 3.2.3, 3.2.4, 3.2.5)\nNo matching distribution found for pytest~=3.6.1 (from -r requirements.txt (line 20))\n\nSee https://travis-ci.org/coala/coala/builds/404413480 for example","comments":0,"createdAt":"2018-07-17T09:02:11Z","updatedAt":"2018-07-17T09:07:34Z","closedAt":null,"state":"open","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"type/bug","color":"e11d21"}]}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1533312840000,"issue":{"htmlUrl":"https://github.com/coala/coala/issues/5637","number":5637,"title":"Make `LocalBearTestHelper` compatible with aspects","body":"LocalBearTestHelper needs to be modified to use aspects as well in order to test aspect functionality in bears.","comments":0,"createdAt":"2018-07-18T07:05:34Z","updatedAt":"2018-08-03T16:14:00Z","closedAt":"2018-08-03T16:14:00Z","state":"closed","user":{"login":"pareksha","avatarUrl":"https://avatars1.githubusercontent.com/u/32385407?v=4"},"owner":{"login":"pareksha","avatarUrl":"https://avatars1.githubusercontent.com/u/32385407?v=4"},"assignee":{"login":"pareksha","avatarUrl":"https://avatars1.githubusercontent.com/u/32385407?v=4"},"labels":[{"name":"area/aspects","color":"000000"},{"name":"area/documentation","color":"bfe5bf"}]}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1531990784000,"issue":{"htmlUrl":"https://github.com/coala/coala/issues/5640","number":5640,"title":"Sync moban","body":"Appveyor should now run coala --ci","comments":0,"createdAt":"2018-07-19T05:16:32Z","updatedAt":"2018-07-19T08:59:44Z","closedAt":"2018-07-19T08:59:44Z","state":"closed","user":{"login":"anctartica","avatarUrl":"https://avatars0.githubusercontent.com/u/7020962?v=4"},"owner":{"login":"anctartica","avatarUrl":"https://avatars0.githubusercontent.com/u/7020962?v=4"},"labels":[{"name":"platform/windows","color":"0052cc"},{"name":"type/bug","color":"e11d21"}]}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1532963285000,"issue":{"htmlUrl":"https://github.com/coala/coala/issues/5642","number":5642,"title":"CachingUtilities.py: Remove unused local variable","body":"Difficulty: Newcomer","comments":13,"createdAt":"2018-07-19T07:11:29Z","updatedAt":"2018-07-30T15:08:05Z","closedAt":"2018-07-30T15:08:05Z","state":"closed","user":{"login":"MacBox7","avatarUrl":"https://avatars0.githubusercontent.com/u/15063552?v=4"},"owner":{"login":"MacBox7","avatarUrl":"https://avatars0.githubusercontent.com/u/15063552?v=4"},"labels":[{"name":"difficulty/newcomer","color":"65C8FF"},{"name":"type/codestyle","color":"d4c5f9"}]}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1532426167000,"issue":{"htmlUrl":"https://github.com/coala/coala/issues/5643","number":5643,"title":"ConsoleInteraction.py: Remove unused import","body":"Pyflakes error report =>\n./output/ConsoleInteraction.py:39: 'pygments.formatters.TerminalFormatter' imported but unused\n\nDifficulty: Newcomer","comments":1,"createdAt":"2018-07-19T11:18:05Z","updatedAt":"2018-07-24T09:56:07Z","closedAt":"2018-07-24T09:56:07Z","state":"closed","user":{"login":"MacBox7","avatarUrl":"https://avatars0.githubusercontent.com/u/15063552?v=4"},"owner":{"login":"MacBox7","avatarUrl":"https://avatars0.githubusercontent.com/u/15063552?v=4"},"assignee":{"login":"XDoubleU","avatarUrl":"https://avatars3.githubusercontent.com/u/28691666?v=4"},"labels":[{"name":"difficulty/newcomer","color":"65C8FF"},{"name":"type/codestyle","color":"d4c5f9"}]}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1532515291000,"issue":{"htmlUrl":"https://github.com/coala/coala/issues/5644","number":5644,"title":"Handle pyflakes errors on languages and aspects","body":"Pyflakes error report =>\n./bearlib/languages/__init__.py:6: '.Language.Language' imported but unused\n./bearlib/languages/__init__.py:7: '.Language.Languages' imported but unused\n./bearlib/languages/__init__.py:9: '.definitions.Unknown.Unknown' imported but unused\n./bearlib/languages/__init__.py:10: '.definitions.C.C' imported but unused\n./bearlib/languages/__init__.py:11: '.definitions.CPP.CPP' imported but unused\n./bearlib/languages/__init__.py:12: '.definitions.CSharp.CSharp' imported but unused\n./bearlib/languages/__init__.py:13: '.definitions.CSS.CSS' imported but unused\n./bearlib/languages/__init__.py:14: '.definitions.Fortran.Fortran' imported but unused\n./bearlib/languages/__init__.py:15: '.definitions.Golang.Golang' imported but unused\n./bearlib/languages/__init__.py:16: '.definitions.html.HTML' imported but unused\n./bearlib/languages/__init__.py:17: '.definitions.Java.Java' imported but unused\n./bearlib/languages/__init__.py:18: '.definitions.JavaScript.JavaScript' imported but unused\n./bearlib/languages/__init__.py:19: '.definitions.JSP.JSP' imported but unused\n./bearlib/languages/__init__.py:20: '.definitions.Matlab.Matlab' imported but unused\n./bearlib/languages/__init__.py:21: '.definitions.Markdown.Markdown' imported but unused\n./bearlib/languages/__init__.py:22: '.definitions.ObjectiveC.ObjectiveC' imported but unused\n./bearlib/languages/__init__.py:23: '.definitions.PHP.PHP' imported but unused\n./bearlib/languages/__init__.py:24: '.definitions.PLSQL.PLSQL' imported but unused\n./bearlib/languages/__init__.py:25: '.definitions.Python.Python' imported but unused\n./bearlib/languages/__init__.py:26: '.definitions.Ruby.Ruby' imported but unused\n./bearlib/languages/__init__.py:27: '.definitions.Scala.Scala' imported but unused\n./bearlib/languages/__init__.py:28: '.definitions.Swift.Swift' imported but unused\n./bearlib/languages/__init__.py:29: '.definitions.Vala.Vala' imported but unused\n./bearlib/languages/__init__.py:30: '.definitions.TypeScript.TypeScript' imported but unused\n./bearlib/languages/__init__.py:31: '.definitions.Shell.Shell' imported but unused\n./bearlib/languages/__init__.py:32: '.definitions.Jinja2.Jinja2' imported but unused\n./bearlib/aspects/Metadata.py:271: redefinition of unused 'Length' from line 161\n\nDiffuculty: Low\nNeeds Discussion\nAspects","comments":1,"createdAt":"2018-07-19T11:20:49Z","updatedAt":"2018-07-25T10:41:31Z","closedAt":null,"state":"open","user":{"login":"MacBox7","avatarUrl":"https://avatars0.githubusercontent.com/u/15063552?v=4"},"owner":{"login":"MacBox7","avatarUrl":"https://avatars0.githubusercontent.com/u/15063552?v=4"},"assignee":{"login":"pareksha","avatarUrl":"https://avatars1.githubusercontent.com/u/32385407?v=4"},"labels":[{"name":"difficulty/low","color":"207de5"},{"name":"importance/low","color":"70E870"},{"name":"type/codestyle","color":"d4c5f9"}]}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1532085957000,"issue":{"htmlUrl":"https://github.com/coala/coala/issues/5646","number":5646,"title":"Section: Set files to ignore list from another section","body":"It is quite common to have two sections with opposite sets of files included.\ne.g. one section might use line length = 80 and the other section uses 120\nAt the moment, to do this requires listing the same files twice.","comments":0,"createdAt":"2018-07-20T11:25:57Z","updatedAt":"2018-07-20T11:25:57Z","closedAt":null,"state":"open","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"type/feature","color":"0052cc"}]}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1532585253000,"issue":{"htmlUrl":"https://github.com/coala/coala/issues/5654","number":5654,"title":"JSON Bear list is not sorted","body":"If I test the result against a sorted list, it gives different results.\n    def test_show_all_bears(self):\n        with bear_test_module():\n            retval, stdout, stderr = execute_coala(\n                coala.main, 'coala', '--json', '-B', '-I')\n            self.assertEqual(retval, 0)\n            output = json.loads(stdout)\n            self.assertEqual(len(output['bears']), TEST_BEARS_COUNT)\n            self.assertFalse(stderr)\n            self.assertEqual(output,\n>                            {'bears': list(TEST_BEAR_NAMES)})\nE           AssertionError: {'bea[103 chars]r', 'RaiseTestBear', 'SpaceConsistencyTestBear[119 chars]AA']} != {'bea[103 chars]r', 'SpaceConsistencyTestBear', 'RaiseTestBear[119 chars]AA']}\nE             {'bears': ['AspectTestBear',\nE                        'DependentBear',\nE                        'EchoBear',\nE                        'ErrorTestBear',\nE                        'JavaTestBear',\nE                        'LineCountTestBear',\nE           +            'SpaceConsistencyTestBear',\nE                        'RaiseTestBear',\nE           -            'SpaceConsistencyTestBear',\nE                        'TestBear',\nE                        'TestDepBearA',\nE                        'TestDepBearAA',\nE                        'TestDepBearBDependsA',\nE                        'TestDepBearCDependsB',\nE                        'TestDepBearDependsAAndAA']}","comments":3,"createdAt":"2018-07-22T05:45:53Z","updatedAt":"2018-07-26T06:07:33Z","closedAt":"2018-07-26T06:07:33Z","state":"closed","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"assignee":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"difficulty/low","color":"207de5"},{"name":"importance/high","color":"eb6420"},{"name":"type/bug","color":"e11d21"}]}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1532603040000,"issue":{"htmlUrl":"https://github.com/coala/coala/issues/5655","number":5655,"title":"General bears require `languages=all` when using aspects","body":"For migrating bears to aspects, till now we have to specify the language which must not be for general bears. So, something like languages=All for general bears is required (only when using aspects).","comments":1,"createdAt":"2018-07-22T06:15:04Z","updatedAt":"2018-07-26T11:04:00Z","closedAt":"2018-07-26T11:04:00Z","state":"closed","user":{"login":"pareksha","avatarUrl":"https://avatars1.githubusercontent.com/u/32385407?v=4"},"owner":{"login":"pareksha","avatarUrl":"https://avatars1.githubusercontent.com/u/32385407?v=4"},"assignee":{"login":"pareksha","avatarUrl":"https://avatars1.githubusercontent.com/u/32385407?v=4"},"labels":[{"name":"area/aspects","color":"000000"},{"name":"area/documentation","color":"bfe5bf"},{"name":"area/languages","color":"d4c5f9"},{"name":"type/bug","color":"e11d21"}]}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1533484589000,"issue":{"htmlUrl":"https://github.com/coala/coala/issues/5550","number":5550,"title":"Improve the Review Doc","body":"Recently I saw this happen #5521 (comment)\nBoth the duplicate PRs had reviews from developers even I was about to review it when I found out that both the newcomers didn't ask for assignment on the related issue thread.\nMaybe we should add a few points to our review docs http://api.coala.io/en/latest/Developers/Review.html#for-the-reviewers that the reviewers should check for whether the author asked for assignment or not and what to do in case there are duplicate PRs for the same issue and neither have been assigned to their respective authors (imo all of the unassigned ones should be closed)\nThis seems like a newcomer issue","comments":2,"createdAt":"2018-06-21T15:48:13Z","updatedAt":"2018-08-05T15:56:29Z","closedAt":null,"state":"open","user":{"login":"palash25","avatarUrl":"https://avatars0.githubusercontent.com/u/21367710?v=4"},"owner":{"login":"palash25","avatarUrl":"https://avatars0.githubusercontent.com/u/21367710?v=4"},"labels":[{"name":"area/documentation","color":"bfe5bf"},{"name":"difficulty/low","color":"207de5"},{"name":"importance/low","color":"70E870"},{"name":"status/blocked","color":"e11d21"}]}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1531974298000,"issue":{"htmlUrl":"https://github.com/coala/coala/issues/5571","number":5571,"title":"AppVeyor failure: PermissionError: [WinError 5] Access is denied","body":"https://ci.appveyor.com/project/coala/coala/build/1.0.13331/job/7stk9roj690frdq6\ntests\\coalaTest.py ......\n+++++++++++++++++++++++++++++++++++ Timeout ++++++++++++++++++++++++++++++++++++\n~~~~~~~~~~~~~~~~~~~~~~~~~~ Stack of MainThread (552) ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  File \"c:\\python34\\lib\\runpy.py\", line 170, in _run_module_as_main\n    \"__main__\", mod_spec)\n  File \"c:\\python34\\lib\\runpy.py\", line 85, in _run_code\n    exec(code, run_globals)\n  File \"C:\\Python34\\Scripts\\py.test.exe\\__main__.py\", line 9, in <module>\n    sys.exit(main())\n  File \"c:\\python34\\lib\\site-packages\\_pytest\\config\\__init__.py\", line 65, in main\n    return config.hook.pytest_cmdline_main(config=config)\n  File \"c:\\python34\\lib\\site-packages\\pluggy\\__init__.py\", line 617, in __call__\n    return self._hookexec(self, self._nonwrappers + self._wrappers, kwargs)\n  File \"c:\\python34\\lib\\site-packages\\pluggy\\__init__.py\", line 222, in _hookexec\n    return self._inner_hookexec(hook, methods, kwargs)\n  File \"c:\\python34\\lib\\site-packages\\pluggy\\__init__.py\", line 216, in <lambda>\n    firstresult=hook.spec_opts.get('firstresult'),\n  File \"c:\\python34\\lib\\site-packages\\pluggy\\callers.py\", line 180, in _multicall\n    res = hook_impl.function(*args)\n  File \"c:\\python34\\lib\\site-packages\\_pytest\\main.py\", line 208, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"c:\\python34\\lib\\site-packages\\_pytest\\main.py\", line 178, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"c:\\python34\\lib\\site-packages\\_pytest\\main.py\", line 215, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"c:\\python34\\lib\\site-packages\\pluggy\\__init__.py\", line 617, in __call__\n    return self._hookexec(self, self._nonwrappers + self._wrappers, kwargs)\n  File \"c:\\python34\\lib\\site-packages\\pluggy\\__init__.py\", line 222, in _hookexec\n    return self._inner_hookexec(hook, methods, kwargs)\n  File \"c:\\python34\\lib\\site-packages\\pluggy\\__init__.py\", line 216, in <lambda>\n    firstresult=hook.spec_opts.get('firstresult'),\n  File \"c:\\python34\\lib\\site-packages\\pluggy\\callers.py\", line 180, in _multicall\n    res = hook_impl.function(*args)\n  File \"c:\\python34\\lib\\site-packages\\_pytest\\main.py\", line 236, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"c:\\python34\\lib\\site-packages\\pluggy\\__init__.py\", line 617, in __call__\n    return self._hookexec(self, self._nonwrappers + self._wrappers, kwargs)\n  File \"c:\\python34\\lib\\site-packages\\pluggy\\__init__.py\", line 222, in _hookexec\n    return self._inner_hookexec(hook, methods, kwargs)\n  File \"c:\\python34\\lib\\site-packages\\pluggy\\__init__.py\", line 216, in <lambda>\n    firstresult=hook.spec_opts.get('firstresult'),\n  File \"c:\\python34\\lib\\site-packages\\pluggy\\callers.py\", line 180, in _multicall\n    res = hook_impl.function(*args)\n  File \"c:\\python34\\lib\\site-packages\\_pytest\\runner.py\", line 64, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"c:\\python34\\lib\\site-packages\\_pytest\\runner.py\", line 79, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"c:\\python34\\lib\\site-packages\\_pytest\\runner.py\", line 159, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"c:\\python34\\lib\\site-packages\\_pytest\\runner.py\", line 183, in call_runtest_hook\n    treat_keyboard_interrupt_as_exception=item.config.getvalue(\"usepdb\"),\n  File \"c:\\python34\\lib\\site-packages\\_pytest\\runner.py\", line 198, in __init__\n    self.result = func()\n  File \"c:\\python34\\lib\\site-packages\\_pytest\\runner.py\", line 181, in <lambda>\n    lambda: ihook(item=item, **kwds),\n  File \"c:\\python34\\lib\\site-packages\\pluggy\\__init__.py\", line 617, in __call__\n    return self._hookexec(self, self._nonwrappers + self._wrappers, kwargs)\n  File \"c:\\python34\\lib\\site-packages\\pluggy\\__init__.py\", line 222, in _hookexec\n    return self._inner_hookexec(hook, methods, kwargs)\n  File \"c:\\python34\\lib\\site-packages\\pluggy\\__init__.py\", line 216, in <lambda>\n    firstresult=hook.spec_opts.get('firstresult'),\n  File \"c:\\python34\\lib\\site-packages\\pluggy\\callers.py\", line 180, in _multicall\n    res = hook_impl.function(*args)\n  File \"c:\\python34\\lib\\site-packages\\_pytest\\runner.py\", line 109, in pytest_runtest_call\n    item.runtest()\n  File \"c:\\python34\\lib\\site-packages\\_pytest\\unittest.py\", line 186, in runtest\n    self._testcase(result=self)\n  File \"c:\\python34\\lib\\unittest\\case.py\", line 628, in __call__\n    return self.run(*args, **kwds)\n  File \"c:\\python34\\lib\\unittest\\case.py\", line 580, in run\n    testMethod()\n  File \"C:\\projects\\coala\\tests\\coalaTest.py\", line 303, in test_coala_with_color\n    coala.main, 'coala')\n  File \"C:\\projects\\coala\\tests\\TestUtilities.py\", line 44, in execute_coala\n    retval = func(debug=debug)\n  File \"C:\\projects\\coala\\coalib\\coala.py\", line 120, in main\n    return mode_normal(console_printer, None, args, debug=debug)\n  File \"C:\\projects\\coala\\coalib\\coala_modes.py\", line 28, in mode_normal\n    debug=debug)\n  File \"C:\\projects\\coala\\coalib\\coala_main.py\", line 184, in run_coala\n    False))\n  File \"C:\\projects\\coala\\coalib\\processes\\Processing.py\", line 790, in execute_section\n    use_raw_files=use_raw_files)\n  File \"C:\\projects\\coala\\coalib\\processes\\Processing.py\", line 400, in instantiate_processes\n    manager = processing.Manager()\n+++++++++++++++++++++++++++++++++++ Timeout ++++++++++++++++++++++++++++++++++++\nTraceback (most recent call last):\n  File \"<string>\", line 1, in <module>\n  File \"c:\\python34\\lib\\multiprocessing\\spawn.py\", line 100, in spawn_main\n    new_handle = steal_handle(parent_pid, pipe_handle)\n  File \"c:\\python34\\lib\\multiprocessing\\reduction.py\", line 86, in steal_handle\n    _winapi.DUPLICATE_SAME_ACCESS | _winapi.DUPLICATE_CLOSE_SOURCE)\nPermissionError: [WinError 5] Access is denied\nCommand exited with code 1","comments":4,"createdAt":"2018-06-26T13:32:06Z","updatedAt":"2018-07-19T04:24:58Z","closedAt":null,"state":"open","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"platform/linux","color":"c2e0c6"},{"name":"platform/windows","color":"0052cc"},{"name":"type/bug","color":"e11d21"}]}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1531136347000,"issue":{"htmlUrl":"https://github.com/coala/coala/issues/5578","number":5578,"title":"Create Visual Basic language file","body":"Visual Basic has some interesting language components for strings and quotes.","comments":0,"createdAt":"2018-06-28T11:40:20Z","updatedAt":"2018-07-09T11:39:07Z","closedAt":"2018-07-09T11:39:07Z","state":"closed","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"assignee":{"login":"pareksha","avatarUrl":"https://avatars1.githubusercontent.com/u/32385407?v=4"},"labels":[{"name":"area/languages","color":"d4c5f9"},{"name":"difficulty/low","color":"207de5"},{"name":"importance/low","color":"70E870"}]}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1531080889000,"issue":{"htmlUrl":"https://github.com/coala/coala/issues/5584","number":5584,"title":"NextGen-Core test fail for persistent_hash on Python 3.7","body":"Using Python 3.7 on docker from image python:3.7.0b5-stretch:\n=========================================================== test session starts ============================================================\nplatform linux -- Python 3.7.0b5, pytest-3.6.2, py-1.5.4, pluggy-0.6.0\nrootdir: /home, inifile: setup.cfg\nplugins: requests-mock-1.5.0, xdist-1.22.2, timeout-1.3.0, reqs-0.0.7, reorder-0.1.1, profiling-1.3.0, mock-1.10.0, instafail-0.3.0, forked-0.2, error-for-skips-1.0.0, env-0.6.2, cov-2.5.1\ntimeout: 35.0s\ntimeout method: signal\ntimeout func_only: False\ncollected 978 items / 849 deselected                                                                                                       \n\ncoalib/core/Bear.py ....                                                                                                             [  3%]\ncoalib/core/Core.py .                                                                                                                [  3%]\ncoalib/core/DependencyTracker.py ............                                                                                        [ 12%]\ncoalib/core/Graphs.py .                                                                                                              [ 13%]\ntests/core/BearTest.py ..............                                                                                                [ 24%]\ntests/core/CircularDependencyErrorTest.py ..                                                                                         [ 25%]\ntests/core/CoreTest.py ..................................................                                                            [ 64%]\ntests/core/DependencyBearTest.py .........                                                                                           [ 70%]\ntests/core/DependencyTrackerTest.py .........                                                                                        [ 77%]\ntests/core/FileBearTest.py .......                                                                                                   [ 83%]\ntests/core/GraphsTest.py .............                                                                                               [ 93%]\ntests/core/PersistentHashTest.py F\n\n_______________________________________________________ PersistentHashTest.test_int ________________________________________________________\n\nself = <tests.core.PersistentHashTest.PersistentHashTest testMethod=test_int>\n\n    def test_int(self):\n        self.assertEqual(\n            persistent_hash(3),\n>           b'\\xd8YA\\x03x|c\"@\\xe8\\x8b~\\xb9\\xb6\\x8d\\x95\\x8dzp\\x8a')\nE       AssertionError: b'\\xf9\\x85\\xb9\\x15H\\xa0\\x8f\\xb7;\\xb3\\xa8\\xc3\\x82\\xa3\\xe8\\xe0!\\xf7\\xfc\\xfc' != b'\\xd8YA\\x03x|c\"@\\xe8\\x8b~\\xb9\\xb6\\x8d\\x95\\x8dzp\\x8a'\n\ntests/core/PersistentHashTest.py:11: AssertionError\n\ntests/core/PersistentHashTest.py .                                                                                                   [ 94%]\ntests/core/ProjectBearTest.py .......                                                                                                [100%]\n========================================================= short test summary info ==========================================================\nFAIL tests/core/PersistentHashTest.py::PersistentHashTest::test_int\n\n========================================== 1 failed, 130 passed, 849 deselected in 10.49 seconds ===========================================\nroot@216ee8a992f9:/home# \nThe persistent_hash test failing could be nearly treated as \"expected\". Pickle data and thus hash representation might change for different Python versions. From usability perspective this is not a problem, but we would have to rethink how to write tests for persistent_hash. But since this might be flaky as well as this issue, I would raise a bug only when we really face it on our CI for master / we are finally going to test on Python 3.7.\nInstall commands in docker:\napt update\napt install -y python3-dev  # not sure this is required\npip3 install pyyaml==4.2b1\npip3 install -r requirements.txt -r test-requirements.txt\n# Test step\npytest -k core","comments":2,"createdAt":"2018-07-01T21:13:08Z","updatedAt":"2018-07-08T20:14:49Z","closedAt":null,"state":"open","user":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4"},"owner":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4"},"labels":[{"name":"area/tests","color":"bfd4f2"},{"name":"importance/high","color":"eb6420"},{"name":"type/bug","color":"e11d21"}]}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1531056429000,"issue":{"htmlUrl":"https://github.com/coala/coala/issues/5589","number":5589,"title":".gitignore sync moban","body":"Disable py36 build on coala","comments":0,"createdAt":"2018-07-03T10:30:49Z","updatedAt":"2018-07-08T13:27:09Z","closedAt":"2018-07-08T13:27:09Z","state":"closed","user":{"login":"anctartica","avatarUrl":"https://avatars0.githubusercontent.com/u/7020962?v=4"},"owner":{"login":"anctartica","avatarUrl":"https://avatars0.githubusercontent.com/u/7020962?v=4"},"labels":[{"name":"platform/windows","color":"0052cc"},{"name":"type/bug","color":"e11d21"}]}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1532192405000,"issue":{"htmlUrl":"https://github.com/coala/coala/issues/5592","number":5592,"title":"Replace coala-header.png with SVG and CSS","body":"https://github.com/coala/coala/blob/master/docs/_static/images/coala-header.png has been replaced with HTML + CSS in coala/artwork#37 .\nThis can be used to remove the png in this repo.","comments":3,"createdAt":"2018-07-03T17:43:58Z","updatedAt":"2018-07-21T17:00:05Z","closedAt":null,"state":"open","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"assignee":{"login":"sangamcse","avatarUrl":"https://avatars2.githubusercontent.com/u/26381717?v=4"},"labels":[{"name":"area/documentation","color":"bfe5bf"},{"name":"difficulty/low","color":"207de5"},{"name":"importance/low","color":"70E870"}]}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1531121648000,"issue":{"htmlUrl":"https://github.com/coala/coala/issues/5604","number":5604,"title":"docs: Replace the Basic rST link with a working link","body":"Steps to reproduce:\n\nHead to https://api.coala.io/en/latest/Developers/Useful_Links.html.\nClick on the Basic rST in rST-Links\n\nThe page would show a permission denied error.\nReplace the link with a proper working link.","comments":2,"createdAt":"2018-07-07T08:08:02Z","updatedAt":"2018-07-09T07:34:08Z","closedAt":"2018-07-09T07:34:08Z","state":"closed","user":{"login":"shikharvaish28","avatarUrl":"https://avatars1.githubusercontent.com/u/22795943?v=4"},"owner":{"login":"shikharvaish28","avatarUrl":"https://avatars1.githubusercontent.com/u/22795943?v=4"},"assignee":{"login":"m3rc3n4ry","avatarUrl":"https://avatars2.githubusercontent.com/u/29359259?v=4"},"labels":[{"name":"area/documentation","color":"bfe5bf"},{"name":"difficulty/newcomer","color":"65C8FF"}]}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1532166924000,"issue":{"htmlUrl":"https://github.com/coala/coala/issues/5605","number":5605,"title":"Newcomers_Guide.rst: display \"move on to more difficult issues\" message as note block","body":"On Newcomers Guide page there is a message saying:\n\nNote: After you have solved a difficulty/newcomer issue, please don’t take up any more. Instead, move on to more difficult issues.\n\nAs this message starts with \"Note:\", maybe it would be more logical to have this marked as \"Note\" block (similar to \"Don’t just fix a newcomer issue!\" message which is lower on that page).","comments":0,"createdAt":"2018-07-07T15:08:50Z","updatedAt":"2018-07-21T09:55:24Z","closedAt":null,"state":"open","user":{"login":"nikitavbv","avatarUrl":"https://avatars1.githubusercontent.com/u/24596921?v=4"},"owner":{"login":"nikitavbv","avatarUrl":"https://avatars1.githubusercontent.com/u/24596921?v=4"},"assignee":{"login":"InquiridorTechie","avatarUrl":"https://avatars1.githubusercontent.com/u/31249906?v=4"},"labels":[{"name":"area/documentation","color":"bfe5bf"},{"name":"difficulty/newcomer","color":"65C8FF"}]}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1531177496000,"issue":{"htmlUrl":"https://github.com/coala/coala/issues/5613","number":5613,"title":"FileFactory: Use `cached-property` package instead of manual written `memoize_property` decorator","body":"A package for exactly that exists, so we should use it. Then we can remove some code on our side.\nAcceptance criteria:\n\nFileFactory uses @cached_property from the package cached-property instead of @memoized_property for all annotated fields.\nFileFactory.__init__ does not initialize self.cache = {} any more.\nThe file memoized_property.py is deleted.","comments":0,"createdAt":"2018-07-08T19:42:46Z","updatedAt":"2018-07-09T23:04:56Z","closedAt":"2018-07-09T23:04:56Z","state":"closed","user":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4"},"owner":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4"},"assignee":{"login":"palash25","avatarUrl":"https://avatars0.githubusercontent.com/u/21367710?v=4"},"labels":[{"name":"area/core","color":"eb6420"},{"name":"difficulty/newcomer","color":"65C8FF"},{"name":"importance/high","color":"eb6420"}]}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1531112582000,"issue":{"htmlUrl":"https://github.com/coala/coala/issues/5614","number":5614,"title":"Travis docs cache invalidated","body":"Each master travis job ends with\nchange detected (content changed, file is created, or file is deleted):\n/home/travis/build/coala/coala/docs/_build/doctrees/coalib.bearlib.abstractions.doctree\n/home/travis/build/coala/coala/docs/_build/doctrees/coalib.bearlib.aspects.doctree\n/home/travis/build/coala/coala/docs/_build/doctrees/coalib.bearlib.doctree\n/home/travis/build/coala/coala/docs/_build/doctrees/coalib.bearlib.languages.definitions.doctree\n/home/travis/build/coala/coala/docs/_build/doctrees/coalib.bearlib.languages.doctree\n/home/travis/build/coala/coala/docs/_build/doctrees/coalib.bearlib.languages.documentation.doctree\n/home/travis/build/coala/coala/docs/_build/doctrees/coalib.bearlib.naming_conventions.doctree\n/home/travis/build/coala/coala/docs/_build/doctrees/coalib.bearlib.spacing.doctree\n/home/travis/build/coala/coala/docs/_build/doctrees/coalib.bears.doctree\n/home/travis/build/coala/coala/docs/_build/doctrees/coalib.collecting.doctree\n/home/travis/build/coala/coala/docs/_build/doctrees/coalib.core.doctree\n/home/travis/build/coala/coala/docs/_build/doctrees/coalib.doctree\n...\n\nThis is happening even when the job doesnt modify the source for the docs, like\nhttps://travis-ci.org/coala/coala/builds/401439163\nOne reason is these are binary files (pickles?), and they include the full path of each file, which on travis means that the masters catch entry includes /home/travis/build/coala/coala/ while the fork contains /home/travis/build/jayvdb/coala/.  As this is happening on master builds also, there is also something else in these files causing it to be invalidated.\nIn that directory is also a environment.pickle and index.doctree, and they are not being invalidated.\nThey should be cached, especially environment.pickle which is very large.","comments":2,"createdAt":"2018-07-09T03:03:53Z","updatedAt":"2018-07-09T05:03:02Z","closedAt":null,"state":"open","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"area/documentation","color":"bfe5bf"}]}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1532442049000,"issue":{"htmlUrl":"https://github.com/coala/coala/issues/5415","number":5415,"title":"process_output_corrected should not treat \\n as reason to empty a file","body":"If there is an error on stderr, usually stdout is \\n.\nprocess_output_corrected should interpret \\n as intended to be the corrected file being an empty file.  It should emit an INFO message to say \\n was ignored.\nPossibly an extra flag might be added to allow \\n to really mean an empty file, if there is no way that the linter ever has an empty file except when it is recommending an empty file (but #2821 , that is almost never correct, which is why it is stupid to let empty files be created.)\nc.f. coala/coala-bears#2414 (comment)\nAlso this will probably fix the regular problems we have with MarkdownBear.","comments":3,"createdAt":"2018-04-21T13:56:13Z","updatedAt":"2018-07-24T14:20:49Z","closedAt":null,"state":"open","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"area/lintbears","color":"ededed"},{"name":"type/bug","color":"e11d21"}]}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1532741765000,"issue":{"htmlUrl":"https://github.com/coala/coala/issues/5440","number":5440,"title":"Constants.default_coafile is confusing","body":"coalib.misc.Constants has a default_coafile which is now quite confusing because it is the system coafile there is also a file called default_coafile.\nCreate a new constant system_coafile which has the same value as default_coafile, and remove usages of default_coafile.","comments":4,"createdAt":"2018-05-05T01:19:55Z","updatedAt":"2018-07-28T01:36:05Z","closedAt":null,"state":"open","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"assignee":{"login":"PrajwalM2212","avatarUrl":"https://avatars3.githubusercontent.com/u/30733262?v=4"},"labels":[{"name":"difficulty/low","color":"207de5"},{"name":"importance/medium","color":"fbca04"}]}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1532442883000,"issue":{"htmlUrl":"https://github.com/coala/coala/issues/5456","number":5456,"title":"coala should ask for the proper bear name if it is misspelled","body":"many bear names have capital alphabets in b/w them which is hard to remember. If an invalid bear name is encountered, try to match it with the closest possible bear name from the list of installed bears, and ask the user whether he meant that bear (y,N)? Can be integrated with cib to ask for the installation of the bear too if its not installed yet.","comments":4,"createdAt":"2018-05-10T18:55:17Z","updatedAt":"2018-07-24T14:34:43Z","closedAt":null,"state":"open","user":{"login":"ishanSrt","avatarUrl":"https://avatars2.githubusercontent.com/u/29859362?v=4"},"owner":{"login":"ishanSrt","avatarUrl":"https://avatars2.githubusercontent.com/u/29859362?v=4"},"labels":[]}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1533601780000,"issue":{"htmlUrl":"https://github.com/coala/coala/issues/5510","number":5510,"title":"Typo in parse_cli","body":"docstring and function signature for parse_cli method uses variable name comment_seperators, should be comment_separators to fix spelling and to align with function signature of Setting class definition.\nProbably a good newcomer issue.","comments":10,"createdAt":"2018-06-10T00:37:26Z","updatedAt":"2018-08-07T00:29:40Z","closedAt":null,"state":"open","user":{"login":"CCInCharge","avatarUrl":"https://avatars2.githubusercontent.com/u/7788704?v=4"},"owner":{"login":"CCInCharge","avatarUrl":"https://avatars2.githubusercontent.com/u/7788704?v=4"},"assignee":{"login":"shashwatmishra76","avatarUrl":"https://avatars2.githubusercontent.com/u/24711156?v=4"},"labels":[{"name":"area/documentation","color":"bfe5bf"},{"name":"difficulty/low","color":"207de5"},{"name":"importance/low","color":"70E870"}]}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1532873405000,"issue":{"htmlUrl":"https://github.com/coala/coala/issues/5513","number":5513,"title":"Add meta-review documentation","body":"Documentation regarding 'what is meta-review & how the ranking list is generated' is needed.\nThis is part of GSoC'18 meta-review project.\nPlease kindly assign this issue to me ;)","comments":0,"createdAt":"2018-06-11T04:08:11Z","updatedAt":"2018-07-29T14:10:05Z","closedAt":"2018-07-29T14:10:05Z","state":"closed","user":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4"},"owner":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4"},"assignee":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4"},"labels":[{"name":"area/documentation","color":"bfe5bf"},{"name":"difficulty/medium","color":"0052cc"}]}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1533585114000,"issue":{"htmlUrl":"https://github.com/coala/coala/issues/5532","number":5532,"title":"Multiple += in single settings section","body":"The following should work\n[foo]\nignore += blah\nignore += baz","comments":6,"createdAt":"2018-06-16T04:13:00Z","updatedAt":"2018-08-06T19:51:54Z","closedAt":null,"state":"open","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"difficulty/low","color":"207de5"},{"name":"type/bug","color":"e11d21"}]}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1532944042000,"issue":{"htmlUrl":"https://github.com/coala/coala/issues/5537","number":5537,"title":"Add module docstrings to core nextgen components","body":"As part of #5359 , nextgen core component (coalib/core/) needs module docstrings which explain the purpose of each module.\nThey should conform with pep257, and be tested with pydocstyle.","comments":2,"createdAt":"2018-06-17T03:48:18Z","updatedAt":"2018-07-30T09:47:22Z","closedAt":null,"state":"open","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"assignee":{"login":"palash25","avatarUrl":"https://avatars0.githubusercontent.com/u/21367710?v=4"},"labels":[{"name":"area/core","color":"eb6420"},{"name":"area/documentation","color":"bfe5bf"}]}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1532527871000,"issue":{"htmlUrl":"https://github.com/coala/coala/issues/5232","number":5232,"title":"Is ShowAppliedPatchAction really neccessary?","body":"When the DIFF_EXCERPT_MAX_SIZE is greater than 4, then both Show Patch and Show Applied Patches is shown. The output shown by both is almost the same.\nscibase-ieee-V3.py\n[   1] ##·This·script·combines·both·extact_article_from·issue.py·and·Extract_Issue_Links.py\n**** PEP8Bear [Section: cli | Severity: NORMAL] ****\n!    ! The code does not comply to PEP8.\n!    ! +1 -1 in /home/theprophet/test-coala/scibase-ieee-V3.py\n[    ] *0. Do (N)othing\n[    ]  1. (O)pen file\n[    ]  2. (A)pply patch\n[    ]  3. (S)how patch\n[    ]  4. Add (I)gnore comment\n[    ]  5. Show Applied (P)atches\n[    ]  6. (G)enerate patches\n[    ] Enter number (Ctrl-D to exit): 3\n\n--> The sample output when (S)how Patch  is selected\n[----] /home/theprophet/test-coala/scibase-ieee-V3.py\n[++++] /home/theprophet/test-coala/scibase-ieee-V3.py\n[   1] ## This script combines both extact_article_from issue.py and Extract_Issue_Links.py\n[   1] # This script combines both extact_article_from issue.py and Extract_Issue_Links.py\n[    ] Displayed patch successfully.\n\n\n--> The sample output when Show Applied (P)atches is selected\n**** PEP8Bear [Section: cli] ****\n**** Action Applied: ShowPatchAction ****\n\n!    ! [Severity: NORMAL]\n[----] /home/theprophet/test-coala/scibase-ieee-V3.py\n[++++] /home/theprophet/test-coala/scibase-ieee-V3.py\n[   1] ## This script combines both extact_article_from issue.py and Extract_Issue_Links.py\n[   1] # This script combines both extact_article_from issue.py and Extract_Issue_Links.py\n\n**************\n\n\nIf I am not wrong  ShowAppliedPatchesAction()  loops through all the applied actions and then actually calls  ShowPatchAction() and then adds extra bit of information to the output of ShowPatchAction(). Is a seperate action for this work  really necessary? Why not incorporate the action done by ShowAppliedPatchesAction() into the ShowPatchAction(). I think the Show Applied Patches is a redundant option.\nStatus:- Needs Discussion.","comments":10,"createdAt":"2018-03-03T16:44:20Z","updatedAt":"2018-07-25T14:11:11Z","closedAt":null,"state":"open","user":{"login":"Naveenaidu","avatarUrl":"https://avatars1.githubusercontent.com/u/30195193?v=4"},"owner":{"login":"Naveenaidu","avatarUrl":"https://avatars1.githubusercontent.com/u/30195193?v=4"},"assignee":{"login":"Naveenaidu","avatarUrl":"https://avatars1.githubusercontent.com/u/30195193?v=4"},"labels":[{"name":"area/actions","color":"207de5"},{"name":"difficulty/medium","color":"0052cc"}]}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1532831588000,"issue":{"htmlUrl":"https://github.com/coala/coala/issues/5329","number":5329,"title":"Diff.py: Update ``split_diff`` docstring","body":"In the docstring of split_diff function, Line 323 should be updated to - If ``-1`` is given, every change....\nThis is needed to prevent bear developers from using any arbitrary negative value (and use a common value) in order to ease out the process of implementing changes to the current behavior in future.\ndifficulty/newcomer\narea/documentation","comments":3,"createdAt":"2018-04-06T15:29:52Z","updatedAt":"2018-07-29T02:33:08Z","closedAt":null,"state":"open","user":{"login":"manankalra","avatarUrl":"https://avatars3.githubusercontent.com/u/12759088?v=4"},"owner":{"login":"manankalra","avatarUrl":"https://avatars3.githubusercontent.com/u/12759088?v=4"},"assignee":{"login":"mohit2872","avatarUrl":"https://avatars0.githubusercontent.com/u/17459912?v=4"},"labels":[{"name":"area/documentation","color":"bfe5bf"},{"name":"difficulty/newcomer","color":"65C8FF"}]}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1531745649000,"issue":{"htmlUrl":"https://github.com/coala/coala/issues/5335","number":5335,"title":"Move testfixtures requirement to test-requirements.txt","body":"","comments":14,"createdAt":"2018-04-07T14:16:37Z","updatedAt":"2018-07-16T12:54:09Z","closedAt":"2018-07-16T12:54:09Z","state":"closed","user":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4"},"owner":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4"},"assignee":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"difficulty/low","color":"207de5"},{"name":"importance/critical","color":"e11d21"}]}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1533471909000,"issue":{"htmlUrl":"https://github.com/coala/coala/issues/5341","number":5341,"title":"Processing.instantiate_processes: Remove superfluous parameter in inner function call to `collect_files`","body":"The None in here is unnecessary:\n    filename_list = collect_files(\n        glob_list(section.get('files', '')),\n        None,\n        ...","comments":4,"createdAt":"2018-04-08T12:17:06Z","updatedAt":"2018-08-05T12:25:09Z","closedAt":null,"state":"open","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"assignee":{"login":"riddhyasona","avatarUrl":"https://avatars1.githubusercontent.com/u/32356489?v=4"},"labels":[{"name":"difficulty/newcomer","color":"65C8FF"},{"name":"importance/low","color":"70E870"},{"name":"type/codestyle","color":"d4c5f9"}]}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1531404046000,"issue":{"htmlUrl":"https://github.com/coala/coala/issues/5343","number":5343,"title":"Model flow language definition","body":"This is required for supporting JSStandardBear settings.\nFlow is a derivative of a specific javascript version, therefore needs to be defined carefully.","comments":2,"createdAt":"2018-04-08T13:36:05Z","updatedAt":"2018-07-12T14:00:46Z","closedAt":null,"state":"open","user":{"login":"anctartica","avatarUrl":"https://avatars0.githubusercontent.com/u/7020962?v=4"},"owner":{"login":"anctartica","avatarUrl":"https://avatars0.githubusercontent.com/u/7020962?v=4"},"labels":[{"name":"area/bears","color":"eb6420"},{"name":"area/languages","color":"d4c5f9"},{"name":"difficulty/low","color":"207de5"},{"name":"status/needs design","color":"5319e7"}]}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1532171235000,"issue":{"htmlUrl":"https://github.com/coala/coala/issues/5364","number":5364,"title":"Fix typo in docstring of Smell.py","body":"There is a bracket typo at coalib/bearlib/aspects/Smell.py\nChange public class Customer… to public class Customer {\nNewcomers are welcome for this issue.","comments":11,"createdAt":"2018-04-11T09:24:46Z","updatedAt":"2018-07-21T11:07:15Z","closedAt":"2018-07-21T11:07:15Z","state":"closed","user":{"login":"pareksha","avatarUrl":"https://avatars1.githubusercontent.com/u/32385407?v=4"},"owner":{"login":"pareksha","avatarUrl":"https://avatars1.githubusercontent.com/u/32385407?v=4"},"labels":[{"name":"area/documentation","color":"bfe5bf"},{"name":"difficulty/newcomer","color":"65C8FF"}]}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1532969439000,"issue":{"htmlUrl":"https://github.com/coala/coala/issues/5375","number":5375,"title":"Change .coafile as circle.yml no more exists","body":"In the yml section of the .coafile we have circle.yml which no more exists\nChange it to its new path","comments":4,"createdAt":"2018-04-13T12:08:08Z","updatedAt":"2018-07-30T16:50:39Z","closedAt":"2018-07-30T16:50:39Z","state":"closed","user":{"login":"harshhx17","avatarUrl":"https://avatars2.githubusercontent.com/u/31805694?v=4"},"owner":{"login":"harshhx17","avatarUrl":"https://avatars2.githubusercontent.com/u/31805694?v=4"},"assignee":{"login":"souravbadami","avatarUrl":"https://avatars0.githubusercontent.com/u/11073943?v=4"},"labels":[{"name":"area/CI","color":"eb6420"},{"name":"difficulty/newcomer","color":"65C8FF"},{"name":"importance/medium","color":"fbca04"},{"name":"type/codestyle","color":"d4c5f9"}]}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1533552560000,"issue":{"htmlUrl":"https://github.com/coala/coala/issues/5389","number":5389,"title":"Remove E133, E242 and E303 from pycodestyle_ignore list of .coafile","body":"These 2 checks are important to select and will not affect any code.\ndifficulty/newcomer","comments":7,"createdAt":"2018-04-15T14:40:05Z","updatedAt":"2018-08-06T10:49:20Z","closedAt":"2018-08-06T10:49:20Z","state":"closed","user":{"login":"sangamcse","avatarUrl":"https://avatars2.githubusercontent.com/u/26381717?v=4"},"owner":{"login":"sangamcse","avatarUrl":"https://avatars2.githubusercontent.com/u/26381717?v=4"},"assignee":{"login":"shashwatmishra76","avatarUrl":"https://avatars2.githubusercontent.com/u/24711156?v=4"},"labels":[{"name":"difficulty/newcomer","color":"65C8FF"},{"name":"importance/medium","color":"fbca04"}]}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1531977190000,"issue":{"htmlUrl":"https://github.com/coala/coala/issues/5390","number":5390,"title":"test_coala_with|without_color fails","body":"Rather random failure in these two tests\nhttps://circleci.com/gh/coala/coala/16945\nFor without color,\n            for err in errors:\n>               self.assertRegex(err, '^\\[WARNING\\]')\nE               AssertionError: Regex didn't match: '^\\\\[WARNING\\\\]' not found in '[ERROR][15:31:29] An unknown error occurred. This is a bug. We are sorry for the inconvenience. Please contact the developers for assistance. During execution of coala an exception was raised. This should never happen. When asked for, the following information may help investigating:'","comments":2,"createdAt":"2018-04-15T15:45:10Z","updatedAt":"2018-07-19T05:13:10Z","closedAt":null,"state":"open","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"type/bug","color":"e11d21"}]}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1532076556000,"issue":{"htmlUrl":"https://github.com/coala/coala/issues/4972","number":4972,"title":"coala_modes.py: Deprecate log_printer param for mode_normal","body":"Issue\nlog_printer param is now deprecated and unused.\nProposal\nProvide a deprecation warning (with logging.warn) if log_printer param is used.\nEDIT by @Makman2:\nRemoved DeprecationWarning and rephrased to not confuse with the class from the warnings module (as we don't use those warnings, at least not yet)","comments":14,"createdAt":"2017-12-14T07:26:42Z","updatedAt":"2018-07-20T08:49:16Z","closedAt":"2018-07-20T08:49:16Z","state":"closed","user":{"login":"vrishank97","avatarUrl":"https://avatars2.githubusercontent.com/u/14790428?v=4"},"owner":{"login":"vrishank97","avatarUrl":"https://avatars2.githubusercontent.com/u/14790428?v=4"},"assignee":{"login":"gabi0348","avatarUrl":"https://avatars2.githubusercontent.com/u/32877573?v=4"},"labels":[{"name":"area/CLI","color":"006b75"},{"name":"difficulty/low","color":"207de5"}]}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1531105709000,"issue":{"htmlUrl":"https://github.com/coala/coala/issues/5060","number":5060,"title":"Allow sphinx version 1.6.6 in docs-requirements.txt","body":"Same as coala/coala-bears#2225\nThe solution from coala/coala-bears#2225 should be copied here. In case there's no solution yet, you can still investigate and apply it here, so coala/coala-bears#2225 can take over the solution from this issue / repository.","comments":5,"createdAt":"2018-01-08T20:30:04Z","updatedAt":"2018-07-09T03:08:29Z","closedAt":null,"state":"open","user":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4"},"owner":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4"},"labels":[{"name":"area/CI","color":"eb6420"},{"name":"difficulty/medium","color":"0052cc"},{"name":"importance/low","color":"70E870"}]}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1531987359000,"issue":{"htmlUrl":"https://github.com/coala/coala/issues/5115","number":5115,"title":"Throw error for conflicting cli args: `config` and `no_config`","body":"coala should throw error if we are using both cli options( -c and -I ) at same time, as these options are conflicting to each other.\ncoala -c .confile --no-config\nor\ncoala -c .confile -I","comments":3,"createdAt":"2018-01-27T19:21:57Z","updatedAt":"2018-07-19T08:02:39Z","closedAt":"2018-07-19T08:02:39Z","state":"closed","user":{"login":"khanchi97","avatarUrl":"https://avatars0.githubusercontent.com/u/22270415?v=4"},"owner":{"login":"khanchi97","avatarUrl":"https://avatars0.githubusercontent.com/u/22270415?v=4"},"assignee":{"login":"raduklb","avatarUrl":"https://avatars2.githubusercontent.com/u/36372694?v=4"},"labels":[{"name":"area/CLI","color":"006b75"},{"name":"difficulty/low","color":"207de5"},{"name":"type/bug","color":"e11d21"}]}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1531274645000,"issue":{"htmlUrl":"https://github.com/coala/coala/issues/5154","number":5154,"title":"Any plans for a 0.12 release?","body":"There hasn't been any new releases for awhile and the documentation appears to point to features that are only available in unreleased versions (such as section inheritance). Wondering if there's any plans to have a new release in the near future?","comments":2,"createdAt":"2018-02-13T02:09:42Z","updatedAt":"2018-07-11T02:04:05Z","closedAt":"2018-07-11T02:03:48Z","state":"closed","user":{"login":"zxiiro","avatarUrl":"https://avatars2.githubusercontent.com/u/150177?v=4"},"owner":{"login":"zxiiro","avatarUrl":"https://avatars2.githubusercontent.com/u/150177?v=4"},"labels":[{"name":"importance/high","color":"eb6420"}]}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1531277936000,"issue":{"htmlUrl":"https://github.com/coala/coala/issues/5157","number":5157,"title":"Release 0.12","body":"freeze\n changelog\n ascii art\n pypi push","comments":7,"createdAt":"2018-02-13T15:25:49Z","updatedAt":"2018-07-11T02:58:56Z","closedAt":null,"state":"open","user":{"login":"Mixih","avatarUrl":"https://avatars2.githubusercontent.com/u/5818750?v=4"},"owner":{"login":"Mixih","avatarUrl":"https://avatars2.githubusercontent.com/u/5818750?v=4"},"milestone":{"title":"0.12","createdAt":"2017-04-08T16:02:24Z","dueOn":null,"state":"open","htmlUrl":"https://github.com/coala/coala/milestone/16","description":""},"labels":[]}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1531983504000,"issue":{"htmlUrl":"https://github.com/coala/coala/issues/5225","number":5225,"title":"Enhance the error message when user enters an invalid choice","body":"As discussed in #5214, I propose to do the following changes to the error message:\n\nuse ! ! instead of [ ] for the error message\nmake the message of a different colour\nmaybe we can show the erroneous character, that was entered, in the error message. So, it might look something like this:\n\n!  ! (X) is not a valid letter.\n\nThis should make the error message more conspicuous and helpful.","comments":6,"createdAt":"2018-03-01T16:49:59Z","updatedAt":"2018-07-19T06:58:24Z","closedAt":"2018-07-19T06:58:24Z","state":"closed","user":{"login":"nityeshaga","avatarUrl":"https://avatars1.githubusercontent.com/u/24698858?v=4"},"owner":{"login":"nityeshaga","avatarUrl":"https://avatars1.githubusercontent.com/u/24698858?v=4"},"assignee":{"login":"kwsohn","avatarUrl":"https://avatars0.githubusercontent.com/u/17075274?v=4"},"labels":[{"name":"area/CLI","color":"006b75"},{"name":"difficulty/low","color":"207de5"}]}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1532094267000,"issue":{"htmlUrl":"https://github.com/coala/coala/issues/4529","number":4529,"title":"Fail fast in Session._schedule_bears","body":"there's a warning about stuff that could go wrong if some other stuff isn't properly coded; those kinds of warnings are usually never used and result in unneeded complexity","comments":12,"createdAt":"2017-07-22T15:35:01Z","updatedAt":"2018-07-20T13:44:27Z","closedAt":null,"state":"open","user":{"login":"sils","avatarUrl":"https://avatars0.githubusercontent.com/u/5716520?v=4"},"owner":{"login":"sils","avatarUrl":"https://avatars0.githubusercontent.com/u/5716520?v=4"},"assignee":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4"},"milestone":{"title":"Nextgen-Core","createdAt":"2017-06-09T22:33:56Z","dueOn":null,"state":"open","htmlUrl":"https://github.com/coala/coala/milestone/18","description":""},"labels":[{"name":"area/core","color":"eb6420"},{"name":"difficulty/high","color":"B319e7"}]}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1532987804000,"issue":{"htmlUrl":"https://github.com/coala/coala/issues/4648","number":4648,"title":"Change hyperlink style in docs to appear more visible - Hyperlinks not visible for some browsers/OSes","body":"The hyperlinks of the notes boxes at \"http://api.coala.io/en/latest/Developers/Newcomers_Guide.html\" have very low visibility. It is hard to distinguish from regular text. Although this doesn't seem to be a browser related, still the screenshot was taken on \"Google Chrome Version 59.0.3071.115 (Official Build) (64-bit)\".","comments":18,"createdAt":"2017-08-19T20:13:44Z","updatedAt":"2018-07-30T21:56:44Z","closedAt":null,"state":"open","user":{"login":"stellargo","avatarUrl":"https://avatars0.githubusercontent.com/u/27735438?v=4"},"owner":{"login":"stellargo","avatarUrl":"https://avatars0.githubusercontent.com/u/27735438?v=4"},"labels":[{"name":"area/documentation","color":"bfe5bf"},{"name":"difficulty/low","color":"207de5"},{"name":"status/blocked","color":"e11d21"}]}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1532315591000,"issue":{"htmlUrl":"https://github.com/coala/coala/issues/4391","number":4391,"title":"Aspect __eq__ should check language","body":"https://github.com/coala/coala/blob/master/coalib/bearlib/aspects/base.py#L40\n>>> Root.Metadata('py') is not Root.Metadata('cs')\nTrue\narea/aspects difficulty/low","comments":7,"createdAt":"2017-06-23T06:35:22Z","updatedAt":"2018-07-23T03:13:11Z","closedAt":null,"state":"open","user":{"login":"adhikasp","avatarUrl":"https://avatars2.githubusercontent.com/u/6151302?v=4"},"owner":{"login":"adhikasp","avatarUrl":"https://avatars2.githubusercontent.com/u/6151302?v=4"},"assignee":{"login":"adhikasp","avatarUrl":"https://avatars2.githubusercontent.com/u/6151302?v=4"},"milestone":{"title":"#aspectsYEAH","createdAt":"2017-05-09T22:10:19Z","dueOn":null,"state":"open","htmlUrl":"https://github.com/coala/coala/milestone/17","description":"The mother of all futures of coala!\r\n\r\nhttps://github.com/orgs/coala/projects/3\r\n\r\nhttps://github.com/orgs/coala/projects/2\r\n"},"labels":[{"name":"area/aspects","color":"000000"},{"name":"difficulty/low","color":"207de5"}]}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1532414623000,"issue":{"htmlUrl":"https://github.com/coala/coala/issues/4188","number":4188,"title":"argparse.ArgumentParser is wrongly named ArgParser several times","body":"(In doc strings)\nRealized while reviewing: #4161 (comment)\n> grep -R ArgParser coalib\ncoalib/coala.py:from coalib.parsing.DefaultArgParser import default_arg_parser\ncoalib/coala_main.py:    :param arg_parser:              Instance of ArgParser that is used to parse\ncoalib/coala_main.py.orig:    :param arg_parser:              Instance of ArgParser that is used to parse\ncoalib/misc/BuildManPage.py:            --parser=coalib.parsing.DefaultArgParser:default_arg_parser\ncoalib/parsing/CliParsing.py:from coalib.parsing.DefaultArgParser import default_arg_parser\ncoalib/parsing/CliParsing.py:    :param arg_parser:                  Instance of ArgParser that is used to\ncoalib/parsing/DefaultArgParser.py:    This function creates an ArgParser to parse command line arguments.\ncoalib/parsing/DefaultArgParser.py.orig:    This function creates an ArgParser to parse command line arguments.\ncoalib/settings/ConfigurationGathering.py:    :param arg_parser:  An ``ArgParser`` object.\ncoalib/settings/ConfigurationGathering.py:    :param arg_parser:       Instance of ArgParser that is used to parse\n\nBut actually argparse.ArgumentParser is meant there. So those occurrences should be changed accordingly to clearly know what is meant. Otherwise it looks like some coala-internal ArgParser class\n@Udayan12167 @supergr35 @JohnS-01","comments":12,"createdAt":"2017-05-07T19:55:11Z","updatedAt":"2018-07-24T06:43:43Z","closedAt":null,"state":"open","user":{"login":"userzimmermann","avatarUrl":"https://avatars3.githubusercontent.com/u/2088633?v=4"},"owner":{"login":"userzimmermann","avatarUrl":"https://avatars3.githubusercontent.com/u/2088633?v=4"},"labels":[{"name":"area/CLI","color":"006b75"},{"name":"area/documentation","color":"bfe5bf"},{"name":"difficulty/newcomer","color":"65C8FF"},{"name":"importance/low","color":"70E870"}]}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1532925652000,"issue":{"htmlUrl":"https://github.com/coala/coala/issues/4207","number":4207,"title":"coala --json returns `\"aspect\": \"NoneType\"` instead of null","body":"json has a null type, just run coala on anything that has results and you'll get \"aspect\": \"NoneType\" instead of \"aspect\": null\nCC @coala/aspects-developers","comments":1,"createdAt":"2017-05-09T12:42:03Z","updatedAt":"2018-07-30T04:40:52Z","closedAt":null,"state":"open","user":{"login":"sils","avatarUrl":"https://avatars0.githubusercontent.com/u/5716520?v=4"},"owner":{"login":"sils","avatarUrl":"https://avatars0.githubusercontent.com/u/5716520?v=4"},"assignee":{"login":"userzimmermann","avatarUrl":"https://avatars3.githubusercontent.com/u/2088633?v=4"},"milestone":{"title":"0.12","createdAt":"2017-04-08T16:02:24Z","dueOn":null,"state":"open","htmlUrl":"https://github.com/coala/coala/milestone/16","description":""},"labels":[{"name":"area/CLI","color":"006b75"},{"name":"area/aspects","color":"000000"},{"name":"importance/critical","color":"e11d21"},{"name":"type/bug","color":"e11d21"}]}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1531105542000,"issue":{"htmlUrl":"https://github.com/coala/coala/issues/4280","number":4280,"title":"sphinx-build fails on docutils 0.14rc1","body":"docutils released a version 0.14rc1 resulting in\nsphinx-build -b html -d _build/doctrees  -W . _build/html\nTraceback (most recent call last):\n  File \"/home/travis/virtualenv/python3.6.1/bin/sphinx-build\", line 11, in <module>\n    sys.exit(main())\n  File \"/home/travis/virtualenv/python3.6.1/lib/python3.6/site-packages/sphinx/__init__.py\", line 51, in main\n    sys.exit(build_main(argv))\n  File \"/home/travis/virtualenv/python3.6.1/lib/python3.6/site-packages/sphinx/__init__.py\", line 61, in build_main\n    from sphinx import cmdline\n  File \"/home/travis/virtualenv/python3.6.1/lib/python3.6/site-packages/sphinx/cmdline.py\", line 23, in <module>\n    from sphinx.application import Sphinx\n  File \"/home/travis/virtualenv/python3.6.1/lib/python3.6/site-packages/sphinx/application.py\", line 35, in <module>\n    from sphinx.domains import ObjType, BUILTIN_DOMAINS\n  File \"/home/travis/virtualenv/python3.6.1/lib/python3.6/site-packages/sphinx/domains/__init__.py\", line 281, in <module>\n    from sphinx.domains.cpp import CPPDomain                 # noqa\n  File \"/home/travis/virtualenv/python3.6.1/lib/python3.6/site-packages/sphinx/domains/cpp.py\", line 24, in <module>\n    from sphinx.util.compat import Directive\n  File \"/home/travis/virtualenv/python3.6.1/lib/python3.6/site-packages/sphinx/util/compat.py\", line 17, in <module>\n    docutils_version = tuple(int(x) for x in _du_version.split('.')[:2])\n  File \"/home/travis/virtualenv/python3.6.1/lib/python3.6/site-packages/sphinx/util/compat.py\", line 17, in <genexpr>\n    docutils_version = tuple(int(x) for x in _du_version.split('.')[:2])\nValueError: invalid literal for int() with base 10: '14rc1'\nmake: *** [html] Error 1","comments":2,"createdAt":"2017-05-27T18:26:36Z","updatedAt":"2018-07-09T03:05:42Z","closedAt":"2018-07-09T03:05:41Z","state":"closed","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"area/upstream","color":"5319e7"}]}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1532680907000,"issue":{"htmlUrl":"https://github.com/coala/coala/issues/4019","number":4019,"title":"Add `exclude-sections` argument for the cli","body":"This will allow users to avoid execution of some sections when desired\nOpened via gitter by @satwikkansal","comments":15,"createdAt":"2017-03-29T11:26:21Z","updatedAt":"2018-07-27T08:41:47Z","closedAt":null,"state":"open","user":{"login":"coala-bot","avatarUrl":"https://avatars0.githubusercontent.com/u/22034293?v=4"},"owner":{"login":"coala-bot","avatarUrl":"https://avatars0.githubusercontent.com/u/22034293?v=4"},"assignee":{"login":"aashraybhandar1","avatarUrl":"https://avatars0.githubusercontent.com/u/12982393?v=4"},"labels":[{"name":"area/CLI","color":"006b75"},{"name":"difficulty/low","color":"207de5"},{"name":"hacktoberfest","color":"e99695"}]}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1532427132000,"issue":{"htmlUrl":"https://github.com/coala/coala/issues/3855","number":3855,"title":"Developers/Writing_Tests.rst: unwanted quotes appear in text","body":"Unwanted back-quotes appear in the file due to the ** and the `` tags being used together. Link https://github.com/coala/coala/blob/master/docs/Developers/Writing_Tests.rst#actually-writing-a-test\nHave a look at the emboldened setUp() and tearDown(). I don't think that was meant to appear that way.","comments":6,"createdAt":"2017-03-06T08:12:34Z","updatedAt":"2018-07-24T10:12:12Z","closedAt":"2018-07-24T10:12:12Z","state":"closed","user":{"login":"blooops","avatarUrl":"https://avatars2.githubusercontent.com/u/19331172?v=4"},"owner":{"login":"blooops","avatarUrl":"https://avatars2.githubusercontent.com/u/19331172?v=4"},"assignee":{"login":"JoeSiew","avatarUrl":"https://avatars3.githubusercontent.com/u/40135419?v=4"},"labels":[{"name":"area/documentation","color":"bfe5bf"},{"name":"difficulty/newcomer","color":"65C8FF"}]}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1531786519000,"issue":{"htmlUrl":"https://github.com/coala/coala/issues/3545","number":3545,"title":"Replace pkg_resources with implicit namespace packages","body":"pkg_resources breaks in an unrecoverable/unmanagable way when there is a VersionConflict.\nIf we empty out the root namespace of bears (blocked by coala/coala-bears#1199), we can use implicit namespace packages (PEP 420), which allows us to iterate over the subpackages of the namespace bears, and also allows the namespace bears to be filled by multiple pypi distribution packages. e.g. pypi 'coala-bears-python' could provide bears/python/.","comments":3,"createdAt":"2017-01-13T09:39:02Z","updatedAt":"2018-07-17T00:15:19Z","closedAt":null,"state":"open","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"area/bears","color":"eb6420"},{"name":"difficulty/very-high","color":"e11d21"},{"name":"status/blocked","color":"e11d21"},{"name":"type/performance","color":"fef2c0"}]}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1533660589000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/issues/2660","number":2660,"title":"Allow version 1.3.x for autopep8","body":"PEP8 bear should also allow version 1.3.x","comments":2,"createdAt":"2018-08-07T16:34:00Z","updatedAt":"2018-08-07T16:49:49Z","closedAt":null,"state":"open","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"assignee":{"login":"anctartica","avatarUrl":"https://avatars0.githubusercontent.com/u/7020962?v=4"},"labels":[{"name":"area/ci","color":"d93f0b"},{"name":"type/dependencies","color":"b60205"}]}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1533646619000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/issues/2656","number":2656,"title":"Migrate `PycodestyleBear` to aspects","body":"Migrate PycodestyleBear to the Root.Formatting.Length.LineLength aspect with max_line_length as taste.","comments":0,"createdAt":"2018-08-05T18:17:57Z","updatedAt":"2018-08-07T12:56:59Z","closedAt":"2018-08-07T12:56:59Z","state":"closed","user":{"login":"pareksha","avatarUrl":"https://avatars1.githubusercontent.com/u/32385407?v=4"},"owner":{"login":"pareksha","avatarUrl":"https://avatars1.githubusercontent.com/u/32385407?v=4"},"assignee":{"login":"pareksha","avatarUrl":"https://avatars1.githubusercontent.com/u/32385407?v=4"},"labels":[{"name":"area/aspects","color":"000000"}]}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1533566205000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/issues/2659","number":2659,"title":"Jinja2Bear: Allow end of block to not have a comment","body":"The docstring of this bear mentions \"Control labels: ...\" and requires a trailing comment for every block\n                {% for x in y %}\n                  do something\n                {% endfor %}{# for x in y %}\nThat might seem nice, but it creates a mess when the for or if is a complicated expression.\nAs a result we have turned off the bear on some repos.\nAdd the ability for this rule to be disabled, so that we can continue using the rest of the bears functionality.","comments":1,"createdAt":"2018-08-06T14:33:52Z","updatedAt":"2018-08-06T14:36:45Z","closedAt":null,"state":"open","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"assignee":{"login":"gutsytechster","avatarUrl":"https://avatars3.githubusercontent.com/u/31796326?v=4"},"labels":[{"name":"difficulty/low","color":"207de5"},{"name":"importance/medium","color":"fbca04"}]}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1532971485000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/issues/2644","number":2644,"title":"textlint npm warnings","body":"TextLintBear was added since the last release; we should investigate deprecation warnings before the next release as something might break..\nnpm WARN deprecated textlint-formatter@1.8.0: See https://github.com/textlint/textlint/issues/455\nnpm WARN deprecated txt-ast-traverse@1.2.1: See https://github.com/textlint/textlint/issues/455\nnpm WARN deprecated textlint-plugin-markdown@1.1.0: See https://github.com/textlint/textlint/issues/455\nnpm WARN deprecated textlint-plugin-text@1.1.4: See https://github.com/textlint/textlint/issues/455\nnpm WARN deprecated textlint-ast-test@1.1.4: See https://github.com/textlint/textlint/issues/455","comments":4,"createdAt":"2018-07-26T13:12:03Z","updatedAt":"2018-07-30T17:24:45Z","closedAt":null,"state":"open","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"assignee":{"login":"sladyn98","avatarUrl":"https://avatars1.githubusercontent.com/u/28837406?v=4"},"labels":[{"name":"difficulty/low","color":"207de5"},{"name":"importance/high","color":"eb6420"},{"name":"type/dependencies","color":"b60205"}]}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1532845036000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/issues/2650","number":2650,"title":"Update setup.cfg, remove tests.sh and env_variables.sh","body":"coverage-env-plugin provides the same functionality as tests.sh and env_variables.sh\nThe setup.cfg template provides this automatically.\nIt is blocked by #2615","comments":0,"createdAt":"2018-07-29T06:17:16Z","updatedAt":"2018-07-29T06:17:16Z","closedAt":null,"state":"open","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"area/ci","color":"d93f0b"},{"name":"status/blocked","color":"e11d21"}]}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1533349624000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/issues/2651","number":2651,"title":"Bump lxml version?","body":"Any particular reason that we are pinning lxml==3.6.0 despite the newest being 4.2.3? The new version fixes installation issues on my Mac (macos 10.13, Python 3.7.0).","comments":2,"createdAt":"2018-08-01T06:40:36Z","updatedAt":"2018-08-04T02:27:04Z","closedAt":null,"state":"open","user":{"login":"yzgyyang","avatarUrl":"https://avatars0.githubusercontent.com/u/16748524?v=4"},"owner":{"login":"yzgyyang","avatarUrl":"https://avatars0.githubusercontent.com/u/16748524?v=4"},"labels":[{"name":"area/ci","color":"d93f0b"},{"name":"type/dependencies","color":"b60205"}]}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1533447128000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/issues/2653","number":2653,"title":"Migrate `PEP8Bear` to aspects","body":"Migrate PEP8Bear to the Root.Formatting.Length.LineLength aspect with max_line_length as taste.","comments":0,"createdAt":"2018-08-05T05:31:28Z","updatedAt":"2018-08-05T05:32:08Z","closedAt":null,"state":"open","user":{"login":"pareksha","avatarUrl":"https://avatars1.githubusercontent.com/u/32385407?v=4"},"owner":{"login":"pareksha","avatarUrl":"https://avatars1.githubusercontent.com/u/32385407?v=4"},"labels":[{"name":"area/aspects","color":"000000"}]}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1532305069000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/issues/2629","number":2629,"title":"Fix spelling mistake ","body":"parseable ---> parsable\nhttps://github.com/coala/coala-bears/blob/master/bears/python/requirements/PySafetyBear.py#L97\ndifficulty/newcommer","comments":3,"createdAt":"2018-07-21T08:22:04Z","updatedAt":"2018-07-23T00:17:49Z","closedAt":"2018-07-23T00:17:49Z","state":"closed","user":{"login":"RaiVaibhav","avatarUrl":"https://avatars3.githubusercontent.com/u/22278438?v=4"},"owner":{"login":"RaiVaibhav","avatarUrl":"https://avatars3.githubusercontent.com/u/22278438?v=4"},"assignee":{"login":"Pranav1999","avatarUrl":"https://avatars0.githubusercontent.com/u/25407486?v=4"},"labels":[{"name":"difficulty/newcomer","color":"65C8FF"},{"name":"type/spelling","color":"50b5f4"}]}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1532237325000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/issues/2632","number":2632,"title":"No response generated ","body":"No response is being generated on filling search bar and pressing 'Enter' at https://coala.io/#/languages","comments":2,"createdAt":"2018-07-21T19:07:21Z","updatedAt":"2018-07-22T05:28:45Z","closedAt":null,"state":"open","user":{"login":"prankshaw","avatarUrl":"https://avatars3.githubusercontent.com/u/22571701?v=4"},"owner":{"login":"prankshaw","avatarUrl":"https://avatars3.githubusercontent.com/u/22571701?v=4"},"assignee":{"login":"sks444","avatarUrl":"https://avatars0.githubusercontent.com/u/22263040?v=4"},"labels":[{"name":"type/bug","color":"e11d21"}]}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1532281839000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/issues/2633","number":2633,"title":"CI failing due to release of pip 18.0","body":"","comments":1,"createdAt":"2018-07-22T11:03:18Z","updatedAt":"2018-07-22T17:50:39Z","closedAt":"2018-07-22T17:50:39Z","state":"closed","user":{"login":"MacBox7","avatarUrl":"https://avatars0.githubusercontent.com/u/15063552?v=4"},"owner":{"login":"MacBox7","avatarUrl":"https://avatars0.githubusercontent.com/u/15063552?v=4"},"labels":[{"name":"type/bug","color":"e11d21"}]}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1532309614000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/issues/2635","number":2635,"title":"Add settings for EslintBear","body":"Add language setting to EslintBear to support using various parsers and plugins available for the linter.","comments":1,"createdAt":"2018-07-22T11:22:43Z","updatedAt":"2018-07-23T01:33:34Z","closedAt":null,"state":"open","user":{"login":"anctartica","avatarUrl":"https://avatars0.githubusercontent.com/u/7020962?v=4"},"owner":{"login":"anctartica","avatarUrl":"https://avatars0.githubusercontent.com/u/7020962?v=4"},"assignee":{"login":"anctartica","avatarUrl":"https://avatars0.githubusercontent.com/u/7020962?v=4"},"labels":[{"name":"area/ci","color":"d93f0b"}]}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1533125209000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/issues/2637","number":2637,"title":"xo eslint cli","body":"https://github.com/xojs/xo\nAnother eslint based linter than can be a separate bear , easily, after the eslintbear upgrade @anctartica is working on","comments":1,"createdAt":"2018-07-23T09:12:23Z","updatedAt":"2018-08-01T12:06:49Z","closedAt":null,"state":"open","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[]}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1532741975000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/issues/2638","number":2638,"title":"Standardise on installing to XDG paths ( ~/.local/ )","body":"A lot of this was done in #2594 , as a substitute for installing into root only locations.\nBut the more we use consistent locations, the less fiddling required to PATH, and the more likely the scripts can be reused on other platforms.","comments":1,"createdAt":"2018-07-23T14:45:49Z","updatedAt":"2018-07-28T01:39:35Z","closedAt":null,"state":"open","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"difficulty/medium","color":"0052cc"},{"name":"importance/medium","color":"fbca04"}]}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1532691235000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/issues/2640","number":2640,"title":"Make VultureBear configurable","body":"VultureBear hasn't been configured to work with --sort-by-size and --min-confidence.\nA major problem is no room for whitelisting. Vulture has a provision using --make-whitelist but we can have our own logic implemented so that no additional files gets created.","comments":4,"createdAt":"2018-07-24T08:44:31Z","updatedAt":"2018-07-27T11:33:55Z","closedAt":null,"state":"open","user":{"login":"MacBox7","avatarUrl":"https://avatars0.githubusercontent.com/u/15063552?v=4"},"owner":{"login":"MacBox7","avatarUrl":"https://avatars0.githubusercontent.com/u/15063552?v=4"},"assignee":{"login":"Naveenaidu","avatarUrl":"https://avatars1.githubusercontent.com/u/30195193?v=4"},"labels":[{"name":"difficulty/low","color":"207de5"},{"name":"status/blocked","color":"e11d21"}]}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1532566362000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/issues/2642","number":2642,"title":"CommitBear: IndexError: list index out of range","body":"If there is no body for a commit, the following occurs\nTraceback (most recent call last):\n  File \"/home/travis/virtualenv/python3.6.3/lib/python3.6/site-packages/coalib/bears/Bear.py\", line 282, in execute\n    return [] if result is None else list(result)\n  File \"/home/travis/virtualenv/python3.6.3/lib/python3.6/site-packages/bears/vcs/git/GitCommitBear.py\", line 135, in run\n    **self.get_issue_checks_metadata().filter_parameters(kwargs))\n  File \"/home/travis/virtualenv/python3.6.3/lib/python3.6/site-packages/bears/vcs/git/GitCommitBear.py\", line 303, in check_issue_reference\n    body = body.splitlines()[-1]\nIndexError: list index out of range","comments":1,"createdAt":"2018-07-26T00:46:26Z","updatedAt":"2018-07-26T00:52:42Z","closedAt":"2018-07-26T00:52:41Z","state":"closed","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"difficulty/low","color":"207de5"},{"name":"importance/medium","color":"fbca04"},{"name":"type/bug","color":"e11d21"}]}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1531124109000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/issues/2591","number":2591,"title":"apt-get fails because there were unauthenticated packages","body":"The packages pulled from the ppas frequently result in:\nWARNING: The following packages cannot be authenticated!\n  ocaml-base-nox ocaml-compiler-libs ocaml-interp ocaml-nox camlp4\n  camlp4-extra ocaml-base ocaml ocaml-native-compilers opam-docs opam\n  cabal-install-1.24\nE: There were unauthenticated packages and -y was used without --allow-unauthenticated\n\nWe then need to restart the job, or developer pushes a new commit.\nThis occurs on both Travis and Circle, and is caused by Ubuntu Keyserver problems","comments":2,"createdAt":"2018-07-08T09:03:26Z","updatedAt":"2018-07-09T08:15:09Z","closedAt":null,"state":"open","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"assignee":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"area/ci","color":"d93f0b"},{"name":"upstream","color":"fbca04"}]}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1531176577000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/issues/2592","number":2592,"title":"Disable sudo on Travis","body":"","comments":0,"createdAt":"2018-07-08T12:42:51Z","updatedAt":"2018-07-09T22:49:37Z","closedAt":"2018-07-09T22:49:37Z","state":"closed","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"assignee":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"area/ci","color":"d93f0b"},{"name":"type/bug","color":"e11d21"}]}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1531138809000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/issues/2596","number":2596,"title":"Use gometalinter installer for all golang syntax checkers ","body":"Most of the go linters are installed using gometalinter which keeps a versioned copy of the dependencies.\nHowever we still have the manual install of\ngo get -u sourcegraph.com/sqs/goreturns\ngo get -u github.com/BurntSushi/toml/cmd/tomlv\n\ntomlv isnt a linter of go language, so it wont be suitable for gometalinter, but it is less likely to break with go versions because it doesnt check go syntax which changes with each golang version and doesnt depend on golang syntax parsers which improves (aka breaks) with each golang version.\ngoreturns could be  proposed to gometalinter, allowing us to maintain all go syntax linters via gometalinter\n(See #2599 for removal of unnecessary go gets)","comments":1,"createdAt":"2018-07-09T05:26:37Z","updatedAt":"2018-07-09T12:20:09Z","closedAt":null,"state":"open","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"assignee":{"login":"yzgyyang","avatarUrl":"https://avatars0.githubusercontent.com/u/16748524?v=4"},"labels":[{"name":"type/dependencies","color":"b60205"},{"name":"upstream","color":"fbca04"}]}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1532877279000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/issues/2601","number":2601,"title":"MypyBear uses outdated version of mypy","body":"MypyBear currently depends on the package mypy-lang~=0.4.6. However, mypy has moved from mypy-lang to the mypy package and seen several releases since that version, and (among other things) is now fully compatible with Python 3.6. It would be helpful if the MypyBear could be migrated to the latest version to benefit from that.","comments":3,"createdAt":"2018-07-09T08:35:40Z","updatedAt":"2018-07-29T15:14:39Z","closedAt":"2018-07-29T15:14:39Z","state":"closed","user":{"login":"mwolting","avatarUrl":"https://avatars3.githubusercontent.com/u/815869?v=4"},"owner":{"login":"mwolting","avatarUrl":"https://avatars3.githubusercontent.com/u/815869?v=4"},"assignee":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"area/ci","color":"d93f0b"},{"name":"difficulty/low","color":"207de5"},{"name":"importance/high","color":"eb6420"},{"name":"type/dependencies","color":"b60205"}]}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1533342711000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/issues/2602","number":2602,"title":"Migrate `LineLengthBear` to aspects","body":"Migrate LineLengthBear to the following aspects and tastes:\nRoot.Formatting.Length.LineLength aspect with max_line_length as taste.","comments":0,"createdAt":"2018-07-10T05:54:50Z","updatedAt":"2018-08-04T00:31:51Z","closedAt":"2018-08-04T00:31:51Z","state":"closed","user":{"login":"pareksha","avatarUrl":"https://avatars1.githubusercontent.com/u/32385407?v=4"},"owner":{"login":"pareksha","avatarUrl":"https://avatars1.githubusercontent.com/u/32385407?v=4"},"assignee":{"login":"pareksha","avatarUrl":"https://avatars1.githubusercontent.com/u/32385407?v=4"},"labels":[]}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1531461405000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/issues/2607","number":2607,"title":"ESLintBear emits a warning for files on its default ignore list","body":"Previously an unhandled exception in the bear, now the bear emits the warning from eslint when the source file is in its default ignore list.\nSee for background\n#2533 (comment)\nThe problem is that a generic glob like **.js might result in the eslint message, which becomes a coala message, and an error.\nProbably the simplest way to deal with this is to reduce the severity level of the message so that it is seen, but doesnt cause an error.\nHowever that means one file is not processed.\neslint has the option of unignoring it, with a negated ignore pattern (like \"--ignore-pattern '!<relative/path/to/filename>'.\nThis may need further analysis before that solution is used, as eslint may not like its own config files.","comments":0,"createdAt":"2018-07-13T05:56:07Z","updatedAt":"2018-07-13T05:56:45Z","closedAt":null,"state":"open","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"type/bug","color":"e11d21"}]}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1531738537000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/issues/2609","number":2609,"title":"JSStandardBearTest and HappinessLintBearTest.test_invalid_files failures","body":"These are intermittent failures, and restarting the job usually causes the problem to disappear.\nAs the jobs are restarted, evidence is usually disappeared.\nCurrent case is : https://travis-ci.org/coala/coala-bears/jobs/399813492\nand https://travis-ci.org/coala/coala-bears/jobs/399813493\nI wont restart the second one.  I'll force amend to keep the evidence","comments":1,"createdAt":"2018-07-16T09:49:31Z","updatedAt":"2018-07-16T10:55:37Z","closedAt":null,"state":"open","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"type/bug","color":"e11d21"}]}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1531740158000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/issues/2610","number":2610,"title":"Proposal: GitIgnoreBear","body":"Checks that no files in the repository match the entries in GitIgnore\ni.e.\nruns git ls-files | git check-ignore --no-index --stdin -v","comments":0,"createdAt":"2018-07-16T11:22:38Z","updatedAt":"2018-07-16T11:22:38Z","closedAt":null,"state":"open","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"bear proposal","color":"ADFF2F"}]}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1531785039000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/issues/2611","number":2611,"title":"coala requires 3.4.4 but coala-bears requires 3.4.0","body":"coala/coala#4350 updated the minimum version of Python to 3.4.4, and coala-bears version checks were not updated at the same time.\nWe have two jobs which check the error message for other versions of Python, and even after 6906e54 they passed.  They should have failed.\nThose jobs were still installing the released package of coala, not the master.\nThe cause of that was https://gitlab.com/coala/mobans/issues/63","comments":0,"createdAt":"2018-07-16T23:50:26Z","updatedAt":"2018-07-16T23:50:39Z","closedAt":null,"state":"open","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"assignee":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"type/bug","color":"e11d21"}]}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1532158032000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/issues/2617","number":2617,"title":"Generate Haskell cabal dependencies","body":".ci/generate_bear_requirements.py generates bear-requirements.yaml which [moban[(https://github.com/moremoban/moban) uses to generate package.json, bear-requirements.txt and Gemfile.\nThe same process should generate Haskell cabal requirements in an format usable by a Haskell cabal dependency management tool, using jinja2 templates.\nWe already have one file\nhttps://github.com/coala/coala-bears/blob/master/coala-bears.cabal\nWhich is used by\nhttps://github.com/coala/coala-bears/blob/master/.ci/deps.cabal.sh","comments":0,"createdAt":"2018-07-19T04:50:29Z","updatedAt":"2018-07-21T07:27:12Z","closedAt":"2018-07-21T07:27:12Z","state":"closed","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"assignee":{"login":"anctartica","avatarUrl":"https://avatars0.githubusercontent.com/u/7020962?v=4"},"labels":[{"name":"difficulty/low","color":"207de5"},{"name":"importance/medium","color":"fbca04"}]}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1531976090000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/issues/2618","number":2618,"title":"Generate php composer dependencies","body":".ci/generate_bear_requirements.py generates bear-requirements.yaml which [moban[(https://github.com/moremoban/moban) uses to generate package.json, bear-requirements.txt and Gemfile.\nThe same process should generate composer requirements in an format usable by php composer, using jinja2 templates.","comments":0,"createdAt":"2018-07-19T04:54:50Z","updatedAt":"2018-07-19T04:54:50Z","closedAt":null,"state":"open","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"difficulty/low","color":"207de5"},{"name":"importance/low","color":"70e870"}]}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1532265110000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/issues/2619","number":2619,"title":"Sync moban","body":"Appveyor ci should now run coala --ci","comments":0,"createdAt":"2018-07-19T05:24:00Z","updatedAt":"2018-07-22T13:11:50Z","closedAt":"2018-07-22T13:11:50Z","state":"closed","user":{"login":"anctartica","avatarUrl":"https://avatars0.githubusercontent.com/u/7020962?v=4"},"owner":{"login":"anctartica","avatarUrl":"https://avatars0.githubusercontent.com/u/7020962?v=4"},"labels":[{"name":"type/test","color":"207de5"}]}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1533581461000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/issues/2621","number":2621,"title":"Bump pyflakes version to 2.0.0","body":"Difficulty: Newcomer","comments":1,"createdAt":"2018-07-19T07:10:45Z","updatedAt":"2018-08-06T18:51:01Z","closedAt":"2018-08-06T18:51:01Z","state":"closed","user":{"login":"MacBox7","avatarUrl":"https://avatars0.githubusercontent.com/u/15063552?v=4"},"owner":{"login":"MacBox7","avatarUrl":"https://avatars0.githubusercontent.com/u/15063552?v=4"},"assignee":{"login":"MacBox7","avatarUrl":"https://avatars0.githubusercontent.com/u/15063552?v=4"},"labels":[{"name":"status/blocked","color":"e11d21"}]}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1532849053000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/issues/2622","number":2622,"title":"generate_package.py: redefinition of unused 'glob'","body":"Error: bears/generate_package.py:14: redefinition of unused 'glob' from line 2\nImportation of glob on line 2 is unnecessary and should be removed.\ndifficulty/newcomer","comments":1,"createdAt":"2018-07-19T11:29:57Z","updatedAt":"2018-07-29T07:24:13Z","closedAt":"2018-07-29T07:24:13Z","state":"closed","user":{"login":"MacBox7","avatarUrl":"https://avatars0.githubusercontent.com/u/15063552?v=4"},"owner":{"login":"MacBox7","avatarUrl":"https://avatars0.githubusercontent.com/u/15063552?v=4"},"assignee":{"login":"sladyn98","avatarUrl":"https://avatars1.githubusercontent.com/u/28837406?v=4"},"labels":[{"name":"difficulty/newcomer","color":"65C8FF"},{"name":"type/style","color":"168fe0"}]}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1532366608000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/issues/2623","number":2623,"title":"Constants.py: Put VERSION inside __all__","body":"Put VERSION inside all. Run pyflakes==2.0.0 and ensure no errors.\ndifficulty/newcomer","comments":2,"createdAt":"2018-07-19T11:37:15Z","updatedAt":"2018-07-23T17:23:28Z","closedAt":"2018-07-23T17:23:28Z","state":"closed","user":{"login":"MacBox7","avatarUrl":"https://avatars0.githubusercontent.com/u/15063552?v=4"},"owner":{"login":"MacBox7","avatarUrl":"https://avatars0.githubusercontent.com/u/15063552?v=4"},"assignee":{"login":"ShashwatNigam99","avatarUrl":"https://avatars3.githubusercontent.com/u/30972206?v=4"},"labels":[{"name":"difficulty/newcomer","color":"65C8FF"}]}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1532143870000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/issues/2628","number":2628,"title":"TextLintBear failures on master","body":"Reason for failure -> https://coala.io is dead. (request to https://coala.io failed, reason: unable to verify the first certificate)\n=================================== FAILURES ===================================\n_______________________ TextLintBearTest.test_good_file ________________________\nself = <tests.general.TextLintBearTest.TextLintBearTest testMethod=test_good_file>\n    def test_good_file(self):\n        file_contents = load_testfile('good_file.md')\n        self.check_results(\n            self.uut,\n            file_contents,\n            [],\n>           filename=get_testfile_path('good_file.md'))\ntests/general/TextLintBearTest.py:187: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../virtualenv/python3.6.3/lib/python3.6/site-packages/coalib/testing/LocalBearTestHelper.py:264: in check_results\n    sorted(bear_output), sorted(results))\n../../../virtualenv/python3.6.3/lib/python3.6/site-packages/coalib/testing/LocalBearTestHelper.py:134: in assertComparableObjectsEqual\n    self.assertEqual(observed_result, expected_result)\nE   AssertionError: Lists differ: [<Result object(id=0x1fe536e231454caf86365[616 chars]208>] != []\nE   \nE   First list contains 1 additional elements.\nE   First extra element 0:\nE   <Result object(id=0x1fe536e231454caf86365a940c7671af, origin='TextLintBear', affected_code=(<SourceRange object(start=<SourcePosition object(file='/home/travis/build/coala/coala-bears/tests/general/textlint_test_files/good_file.md', line=8, column=17) at 0x7fdbe6b31f28>, end=<SourcePosition object(file='/home/travis/build/coala/coala-bears/tests/general/textlint_test_files/good_file.md', line=8, column=17) at 0x7fdbe6b31470>) at 0x7fdbe6b31cc0>,), severity=MAJOR, confidence=100, message='https://coala.io is dead. (request to https://coala.io failed, reason: unable to verify the first certificate)', aspect=NoneType, applied_actions={}) at 0x7fdbe6b31208>\nE   \nE   Diff is 671 characters long. Set self.maxDiff to None to see it.\nProfiling (from /home/travis/build/coala/coala-bears/prof/combined.prof):\nFri Jul 20 13:25:22 2018    /home/travis/build/coala/coala-bears/prof/combined.prof\n         20092151 function calls (19826076 primitive calls) in 521.306 seconds\n   Ordered by: cumulative time\n   List reduced from 4727 to 20 due to restriction <20>\n   ncalls  tottime  percall  cumtime  percall filename:lineno(function)\n      864    0.006    0.000  521.106    0.603 runner.py:105(pytest_runtest_call)\n      861    0.010    0.000  521.072    0.605 unittest.py:182(runtest)\n      861    0.005    0.000  521.060    0.605 case.py:652(__call__)\n      861    0.062    0.000  521.055    0.605 case.py:570(run)\n  958/834    0.032    0.000  376.251    0.451 LocalBearTestHelper.py:72(get_results)\n      989    0.048    0.000  345.054    0.349 Shell.py:127(run_shell_command)\n28923/14556    0.063    0.000  338.942    0.023 {built-in method builtins.next}\n10923/5985    0.012    0.000  338.131    0.056 contextlib.py:79(__enter__)\n      989    0.026    0.000  334.538    0.338 subprocess.py:803(communicate)\n      989    0.145    0.000  334.510    0.338 subprocess.py:1466(_communicate)\n     2788    0.078    0.000  333.948    0.120 selectors.py:365(select)\n     2788  333.862    0.120  333.862    0.120 {method 'poll' of 'select.poll' objects}\n     2086    0.032    0.000  332.421    0.159 LocalBearTestHelper.py:17(execute_bear)\n     1090    0.021    0.000  331.959    0.305 Bear.py:326(execute)\n     1242    0.018    0.000  322.731    0.260 Bear.py:308(run_bear_from_section)\n      666    0.071    0.000  321.142    0.482 Linter.py:632(run)\n      582    0.004    0.000  237.582    0.408 LocalBearTestHelper.py:136(check_validity)\n      463    0.010    0.000  207.219    0.448 LocalBearTestHelper.py:216(check_results)\n22432/17007    0.211    0.000  145.608    0.009 decorators.py:420(decorated)\n     1095    0.017    0.000  143.581    0.131 Bear.py:260(__init__)","comments":1,"createdAt":"2018-07-21T02:19:20Z","updatedAt":"2018-07-21T03:31:10Z","closedAt":"2018-07-21T03:31:10Z","state":"closed","user":{"login":"virresh","avatarUrl":"https://avatars0.githubusercontent.com/u/10978108?v=4"},"owner":{"login":"virresh","avatarUrl":"https://avatars0.githubusercontent.com/u/10978108?v=4"},"labels":[{"name":"area/tests","color":"c5def5"},{"name":"type/bug","color":"e11d21"}]}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1531060148000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/issues/2552","number":2552,"title":".ci/deps.sh: wget \"Unable to establish SSL connection.\" when downloading astyle from sourceforge","body":"https://travis-ci.org/coala/coala-bears/jobs/396784107#L2256\n+wget 'https://downloads.sourceforge.net/project/astyle/astyle/astyle%203.0.1/astyle_3.0.1_linux.tar.gz?r=&ts=1499017588&use_mirror=excellmedia' -O /home/travis/astyle.tar.gz\n--2018-06-26 09:24:46--  https://downloads.sourceforge.net/project/astyle/astyle/astyle%203.0.1/astyle_3.0.1_linux.tar.gz?r=&ts=1499017588&use_mirror=excellmedia\nResolving downloads.sourceforge.net (downloads.sourceforge.net)... 216.105.38.13\nConnecting to downloads.sourceforge.net (downloads.sourceforge.net)|216.105.38.13|:443... connected.\nUnable to establish SSL connection.\n\nSomehow, wget can't connect to https://downloads.sourceforge.net/project/astyle/astyle/astyle%203.0.1/astyle_3.0.1_linux.tar.gz?r=&ts=1499017588&use_mirror=excellmedia due to SSL problem..\nI think the link needs to be updated to: https://downloads.sourceforge.net/project/astyle/astyle/astyle%203.0.1/astyle_3.0.1_linux.tar.gz?r=&ts=1530014759&use_mirror=excellmedia","comments":4,"createdAt":"2018-06-26T12:00:22Z","updatedAt":"2018-07-08T14:29:08Z","closedAt":"2018-07-08T14:29:08Z","state":"closed","user":{"login":"refeed","avatarUrl":"https://avatars1.githubusercontent.com/u/20320125?v=4"},"owner":{"login":"refeed","avatarUrl":"https://avatars1.githubusercontent.com/u/20320125?v=4"},"assignee":{"login":"refeed","avatarUrl":"https://avatars1.githubusercontent.com/u/20320125?v=4"},"labels":[{"name":"type/bug","color":"e11d21"},{"name":"type/dependencies","color":"b60205"}]}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1531048295000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/issues/2560","number":2560,"title":"ppa:marutter/rdev now shipping r-base 3.5","body":"https://launchpad.net/~marutter/+archive/ubuntu/rdev now includes R base 3.5.  Previously it was R 3.3\nThe only immediate effect was that cached builds had errors:\nError : package ‘lazyeval’ was installed by an R version with different internals; it needs to be reinstalled for use with this R version\nError : unable to load R code in package ‘lintr’\nERROR: lazy loading failed for package ‘lintr’\n* removing ‘/home/travis/R/Library/lintr’\n\nhttps://travis-ci.org/coala/coala-bears/jobs/398948530#L2588\nMinor note to self lintr still missing from\nhttps://launchpad.net/~marutter/+archive/ubuntu/c2d4u/+index?batch=55&memo=3440&start=3440\nbut formatR is at\nhttps://launchpad.net/~marutter/+archive/ubuntu/c2d4u/+index?batch=55&direction=backwards&memo=2210&start=2155","comments":2,"createdAt":"2018-07-02T02:45:19Z","updatedAt":"2018-07-08T11:11:35Z","closedAt":"2018-07-08T11:11:35Z","state":"closed","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"type/dependencies","color":"b60205"}]}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1531131726000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/issues/2562","number":2562,"title":"CPPLintBear violated one-based offset convention","body":"https://ci.appveyor.com/project/jayvdb/coala-bears/build/job/xhu5jueyyennp1u3#L678","comments":1,"createdAt":"2018-07-02T09:30:48Z","updatedAt":"2018-07-09T10:22:06Z","closedAt":"2018-07-09T10:22:06Z","state":"closed","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"assignee":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4"},"labels":[{"name":"type/bug","color":"e11d21"}]}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1531131723000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/issues/2563","number":2563,"title":"CheckstyleBear offset bug","body":"https://ci.appveyor.com/project/jayvdb/coala-bears/build/job/xhu5jueyyennp1u3#L1618","comments":1,"createdAt":"2018-07-02T09:35:59Z","updatedAt":"2018-07-09T10:22:03Z","closedAt":"2018-07-09T10:22:03Z","state":"closed","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"assignee":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4"},"labels":[{"name":"importance/critical","color":"e11d21"},{"name":"type/bug","color":"e11d21"}]}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1531050714000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/issues/2567","number":2567,"title":"Appveyor sync moban ","body":"Disable py36 job on coala-bears","comments":0,"createdAt":"2018-07-03T10:27:50Z","updatedAt":"2018-07-08T11:51:54Z","closedAt":"2018-07-08T11:51:54Z","state":"closed","user":{"login":"anctartica","avatarUrl":"https://avatars0.githubusercontent.com/u/7020962?v=4"},"owner":{"login":"anctartica","avatarUrl":"https://avatars0.githubusercontent.com/u/7020962?v=4"},"labels":[{"name":"type/bug","color":"e11d21"}]}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1531131726000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/issues/2572","number":2572,"title":"HAMLLintBear violated one-based offset convention","body":"https://travis-ci.org/coala/coala-bears/jobs/399120408#L9158\nc.f. #2413 and #2562 and #2563","comments":0,"createdAt":"2018-07-03T16:56:41Z","updatedAt":"2018-07-09T10:22:06Z","closedAt":"2018-07-09T10:22:06Z","state":"closed","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"assignee":{"login":"IpshitaC","avatarUrl":"https://avatars0.githubusercontent.com/u/18362353?v=4"},"labels":[{"name":"difficulty/low","color":"207de5"},{"name":"importance/critical","color":"e11d21"},{"name":"type/bug","color":"e11d21"}]}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1531131726000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/issues/2573","number":2573,"title":"WriteGoodLintBear violated one-based offset convention","body":"https://travis-ci.org/coala/coala-bears/jobs/399120408#L9712\nc.f. #2413 and #2562 and #2563 and #2572","comments":0,"createdAt":"2018-07-03T16:57:55Z","updatedAt":"2018-07-09T10:22:06Z","closedAt":"2018-07-09T10:22:06Z","state":"closed","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"assignee":{"login":"mr-karan","avatarUrl":"https://avatars3.githubusercontent.com/u/5689132?v=4"},"labels":[{"name":"difficulty/low","color":"207de5"},{"name":"importance/critical","color":"e11d21"},{"name":"type/bug","color":"e11d21"}]}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1531131727000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/issues/2574","number":2574,"title":"StylintBear violated one-based offset convention","body":"https://api.travis-ci.org/v3/job/399120408/log.txt\nc.f. #2413 and #2562 and #2563 and #2572","comments":2,"createdAt":"2018-07-03T17:00:48Z","updatedAt":"2018-07-09T10:22:07Z","closedAt":"2018-07-09T10:22:07Z","state":"closed","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"assignee":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4"},"labels":[{"name":"difficulty/low","color":"207de5"},{"name":"importance/critical","color":"e11d21"},{"name":"type/bug","color":"e11d21"}]}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1533473401000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/issues/2585","number":2585,"title":"ClangBear.py: Rename variable range","body":"range is a python builtin and shouldn't be redefined. Rename occurrences at 1 and 2.\nDifficulty: Newcomer","comments":12,"createdAt":"2018-07-06T10:53:39Z","updatedAt":"2018-08-05T12:50:01Z","closedAt":"2018-08-05T12:50:01Z","state":"closed","user":{"login":"MacBox7","avatarUrl":"https://avatars0.githubusercontent.com/u/15063552?v=4"},"owner":{"login":"MacBox7","avatarUrl":"https://avatars0.githubusercontent.com/u/15063552?v=4"},"assignee":{"login":"Karna98","avatarUrl":"https://avatars2.githubusercontent.com/u/32186983?v=4"},"labels":[{"name":"difficulty/newcomer","color":"65C8FF"},{"name":"type/codestyle","color":"bfd4f2"}]}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1531449376000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/issues/2588","number":2588,"title":"TextLintBearTest.test_bad_alex_no_dead_link uses http://httpstat.us/404 which is 503","body":"tests/general/textlint_test_files/bad_alex_no_dead_link.md contains a link to http://httpstat.us/404 , and tests/general/TextLintBearTest.py expects textlink to report (404 Not Found) , but http://httpstat.us/404 is reporting 404\nUse http://httpbin.org/status/404 instead","comments":3,"createdAt":"2018-07-07T15:14:48Z","updatedAt":"2018-07-13T02:36:16Z","closedAt":"2018-07-13T02:36:16Z","state":"closed","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"assignee":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"area/tests","color":"c5def5"},{"name":"difficulty/low","color":"207de5"},{"name":"importance/critical","color":"e11d21"},{"name":"type/dependencies","color":"b60205"}]}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1531131725000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/issues/2589","number":2589,"title":"IndentationBearTest: Change `comment_delimiter` to `comment_delimiters`","body":"comment_delimiters accepts a tuple after merge of coala/coala#5595. Prior to this,comment_delimiter was used without the support of multiple comment delimiters.","comments":0,"createdAt":"2018-07-07T17:01:33Z","updatedAt":"2018-07-09T10:22:05Z","closedAt":"2018-07-09T10:22:05Z","state":"closed","user":{"login":"pareksha","avatarUrl":"https://avatars1.githubusercontent.com/u/32385407?v=4"},"owner":{"login":"pareksha","avatarUrl":"https://avatars1.githubusercontent.com/u/32385407?v=4"},"labels":[{"name":"type/bug","color":"e11d21"}]}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1531066071000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/issues/2590","number":2590,"title":"ESLintBear: Use the eslint executable inside node_modules","body":"Many Javascript developers don't have eslint installed globally. Instead, we use the eslint that is installed locally in the node_modules folder of the current project.\nThis is becoming quite common practice. It means different projects can have different versions of eslint, and different eslint plugins, with no danger of any conflicts. (The plugins are usually referenced by the project's .eslintrc* config file.)\nI propose that the ESLintBear be capable of using the project-local eslint either by default, or when specified.\n(The ALE linter for Vim already follows this behaviour, using the local eslint if one is available, or the global eslint if not.)\nWe can check if a local eslint is available like this:\n\n\nIf npm and npx executable are present on the path, then the command npm bin should return a folder, and if that folder contains an eslint executable, then we can use that with the command: npx --no-install eslint ...arguments...\n\n\nOr simpler: Without checking for npx, we can just directly call the eslint executable found inside npm bin folder. (See note below.)\n\n\nIf not, the bear can try using the global eslint instead.\n\n\nThe above explanation may appear simpler if you read the script below!\n(Note: npx is a new executable bundled with npm which runs the script in the context of the node_modules folder, so it can access all the executables inside there. It is quite similar to yarn exec -- ... except it also performs on-demand installations.)\n(So using npx is the new canonical approach. But it is probably equally effective to use the simpler approach mentioned above, without npx.)\n\nEdit: I thought a bit more about backwards compatibility.\nI raised this issue because I wanted the bear to work nicely out-of-the-box (with zero additional config), similar to what I get if I install an eslint plugin in my editor.\nIn order to achieve that, the eslint bear should:\n\nUse npx eslint instead of the global eslint.\nNot pass any config file to eslint. Let eslint find the appropriate config file for each file/folder as it runs. (Some big projects may have a different .eslintrc in different folders, and eslint will use the appropriate config for each file.)\n\nBut I guess the bear's default behaviour should match its current behaviour, to avoid breaking backwards-compatibility. Thus, the above behaviours would need to be opt-in. (Or new defaults in a major breaking release.)\nHowever it could be something that coala-quickstart configures, if the appropriate environment is detected. (Hopefully we don't mind if coala-quickstart behaviour changes/improves over time!)\nIt is worth considering that using the project-local executable would be desirable not only for eslint, but also for other npm-based linters that make use of plugins installed via npm, such as stylelint and tslint. So whatever solution we choose for ESLintBear, would ideally be consistent for those bears too.\n\nWorkaround (if you need this right now)\nSince the bear does not currently offer this behaviour, instead I put a \"global\" eslint shellscript on my $PATH (in my case in ~/.local/bin/eslint).\nThat script simply calls the project-local executable if it can find it.\n#!/bin/bash\n\n# This script is used to fool coala. It pretends to be a globally installed eslint, but\n# it will in fact use the project-local eslint executable if it can find it\n\nif which npm >/dev/null && [ -x \"$(npm bin)/eslint\" ]\nthen\n    npx --no-install eslint \"$@\"\n    # or\n    #\"$(npm bin)/eslint\" \"$@\"\nelse\n    # Could not find project-local eslint. Run global eslint instead.\n    # (In a python bear we would leave out the path, to seek eslint on the PATH instead.)\n    /usr/bin/eslint \"$@\"\nfi\nCoala runs that script (thinking it is the global eslint) but it ends up running the eslint inside node_modules.","comments":2,"createdAt":"2018-07-07T17:35:38Z","updatedAt":"2018-07-08T16:07:51Z","closedAt":null,"state":"open","user":{"login":"joeytwiddle","avatarUrl":"https://avatars3.githubusercontent.com/u/911799?v=4"},"owner":{"login":"joeytwiddle","avatarUrl":"https://avatars3.githubusercontent.com/u/911799?v=4"},"labels":[{"name":"type/dependencies","color":"b60205"}]}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1532640887000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/issues/2437","number":2437,"title":"PEP8Bear: Change the docstring indentation.","body":"difficulty/newcomer","comments":10,"createdAt":"2018-04-15T06:38:39Z","updatedAt":"2018-07-26T21:34:47Z","closedAt":null,"state":"open","user":{"login":"newbazz","avatarUrl":"https://avatars1.githubusercontent.com/u/25884863?v=4"},"owner":{"login":"newbazz","avatarUrl":"https://avatars1.githubusercontent.com/u/25884863?v=4"},"assignee":{"login":"vaibhav9619","avatarUrl":"https://avatars1.githubusercontent.com/u/35555074?v=4"},"labels":[{"name":"area/documentation","color":"c5def5"},{"name":"difficulty/newcomer","color":"65C8FF"}]}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1531483833000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/issues/2444","number":2444,"title":"Allow extra information in bear-requirements.yaml","body":".ci/generate_bear_requirements.py currently overwrites bear-requirements.yaml, removing any information that was in it.\nIt should load the yaml, and have\n\n\nan --update mode which modifies only the information which needs to be modified. This can be achieved using https://pypi.org/project/ruamel.yaml/ 's RoundTrip functionality.\n\n\na --check mode which reports any differences in a helpful way, tells the user to run in --update mode and commit and re-push, with a non-zero exit status when differences were found.\n\n\nIn travis, we would --check and --update, so that any yaml output differences will be caught by git diff --exit-code even if --check doesnt report dependency differences.\nTo test this, overrides: coala-build.yaml should be moved to the top of bear-requirements.yaml, and a comment added at the top of the file, and travis shouldnt report any differences.","comments":5,"createdAt":"2018-04-18T02:28:35Z","updatedAt":"2018-07-13T12:10:33Z","closedAt":"2018-07-13T12:10:33Z","state":"closed","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"assignee":{"login":"nemaniarjun","avatarUrl":"https://avatars0.githubusercontent.com/u/15715894?v=4"},"labels":[{"name":"area/ci","color":"d93f0b"},{"name":"difficulty/medium","color":"0052cc"},{"name":"importance/medium","color":"fbca04"}]}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1532462007000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/issues/2453","number":2453,"title":"CIRCLE_NODE_INDEX hack for travis is not required anymore","body":".travis.yml sets CIRCLE_NODE_INDEX=-1 to avoid being a circle worker\nRemove code related to this hack as pip deps are no more called from travis","comments":2,"createdAt":"2018-04-26T16:47:58Z","updatedAt":"2018-07-24T19:53:27Z","closedAt":null,"state":"open","user":{"login":"harshhx17","avatarUrl":"https://avatars2.githubusercontent.com/u/31805694?v=4"},"owner":{"login":"harshhx17","avatarUrl":"https://avatars2.githubusercontent.com/u/31805694?v=4"},"labels":[{"name":"area/ci","color":"d93f0b"},{"name":"difficulty/newcomer","color":"65C8FF"},{"name":"importance/low","color":"70e870"}]}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1531066309000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/issues/2467","number":2467,"title":"Support BitBucket Smart Commits (JIRA support)","body":"BitBucket support has been added, both Git and Hg (see bears/vcs).\nhttps://confluence.atlassian.com/bitbucket/processing-jira-software-issues-with-smart-commit-messages-298979931.html","comments":0,"createdAt":"2018-05-06T15:52:11Z","updatedAt":"2018-07-08T16:11:49Z","closedAt":null,"state":"open","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"area/genericbears","color":"D01975"},{"name":"difficulty/medium","color":"0052cc"},{"name":"importance/medium","color":"fbca04"},{"name":"type/feature","color":"0052cc"}]}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1533450442000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/issues/2479","number":2479,"title":"Generate languages.yaml","body":"https://github.com/coala/coala-bears/blob/master/.ci/generate_bear_requirements.py loads all bears and only generates bear-requirements.yaml.\nIt should provide more information in yaml format.\nA very useful dataset to create is a mapping of languages to bears.\nThat will allow the list of languages to be generated by moban if we templatise README.md: #2169","comments":3,"createdAt":"2018-05-12T07:42:30Z","updatedAt":"2018-08-05T06:27:22Z","closedAt":null,"state":"open","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"assignee":{"login":"sladyn98","avatarUrl":"https://avatars1.githubusercontent.com/u/28837406?v=4"},"labels":[{"name":"difficulty/low","color":"207de5"},{"name":"importance/medium","color":"fbca04"}]}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1531975853000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/issues/2481","number":2481,"title":"Generate go dependencies","body":".ci/generate_bear_requirements.py generates bear-requirements.yaml which [moban[(https://github.com/moremoban/moban) uses to generate package.json, bear-requirements.txt and Gemfile.\nThe same process should generate Go requirements in an format usable by a go dependency management tool, using jinja2 templates.\ne.g. https://github.com/golang/dep which uses Gopkg.toml","comments":0,"createdAt":"2018-05-12T07:50:53Z","updatedAt":"2018-07-19T04:50:53Z","closedAt":null,"state":"open","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"assignee":{"login":"yzgyyang","avatarUrl":"https://avatars0.githubusercontent.com/u/16748524?v=4"},"labels":[{"name":"difficulty/low","color":"207de5"},{"name":"importance/medium","color":"fbca04"}]}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1533152064000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/issues/2482","number":2482,"title":" Generate R dependencies","body":".ci/generate_bear_requirements.py generates package.json, bear-requirements.txt and Gemfile.  It should generate R requirements in an format usable by a R dependency management tool, using jinja2 templates.\ne.g. a DESCRIPTION file, containing\nPackage: coala\nVersion: 0.10\nDepends: R (>= 3.1.0), lintr, formatR","comments":1,"createdAt":"2018-05-12T07:59:04Z","updatedAt":"2018-08-01T19:34:24Z","closedAt":null,"state":"open","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"difficulty/low","color":"207de5"},{"name":"importance/low","color":"70e870"}]}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1533517545000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/issues/2503","number":2503,"title":"JSONFormatBear: Message not appropriate when settings are omitted","body":"This file can be reformatted by sorting keys and following indentation.\n\nis always displayed, regardless whether you have actually enabled json_sort (to sort keys) or not. Especially it's displayed when you omit the setting altogether, and the default is actually false. So you think that the default is true.\nThe message has to be flexible for different parameters, so a user won't become confused.\nAcceptance criteria:\n\nThe JSONFormatBear produces following messages for results in case that reformatting is possible:\n\nWhen json_sort is False, the result message should be just This file can be reformatted by following indentation..\nWhen json_sort is True, the result message should be like before (This file can be reformatted by sorting keys and following indentation.)","comments":1,"createdAt":"2018-05-24T15:20:13Z","updatedAt":"2018-08-06T01:05:45Z","closedAt":null,"state":"open","user":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4"},"owner":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4"},"assignee":{"login":"Karna98","avatarUrl":"https://avatars2.githubusercontent.com/u/32186983?v=4"},"labels":[{"name":"area/genericbears","color":"D01975"},{"name":"difficulty/low","color":"207de5"},{"name":"importance/high","color":"eb6420"},{"name":"type/bug","color":"e11d21"}]}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1532284079000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/issues/2511","number":2511,"title":"Appveyor failed during setting up a safety module","body":"Traceback:\n  Downloading https://files.pythonhosted.org/packages/a7/52/202ef7a64b92a3c4648aa9604cb7c13816eb1af06b5edcb958383b0c910a/safety-0.5.1.tar.gz\n    Complete output from command python setup.py egg_info:\n    Traceback (most recent call last):\n      File \"<string>\", line 1, in <module>\n      File \"C:\\Users\\appveyor\\AppData\\Local\\Temp\\1\\pip-install-w123vuon\\safety\\setup.py\", line 7, in <module>\n        readme = readme_file.read()\n      File \"C:\\Python34\\lib\\encodings\\cp1252.py\", line 23, in decode\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\n    UnicodeDecodeError: 'charmap' codec can't decode byte 0x90 in position 776: character maps to <undefined>\n    \n    ----------------------------------------\n\nBuild Link: https://ci.appveyor.com/project/coala/coala-bears/build/1.0.9766/job/7keffjocn064913f#L95","comments":13,"createdAt":"2018-05-27T05:03:56Z","updatedAt":"2018-07-22T18:27:59Z","closedAt":"2018-07-22T18:27:59Z","state":"closed","user":{"login":"RaiVaibhav","avatarUrl":"https://avatars3.githubusercontent.com/u/22278438?v=4"},"owner":{"login":"RaiVaibhav","avatarUrl":"https://avatars3.githubusercontent.com/u/22278438?v=4"},"assignee":{"login":"RaiVaibhav","avatarUrl":"https://avatars3.githubusercontent.com/u/22278438?v=4"},"labels":[{"name":"type/bug","color":"e11d21"},{"name":"upstream","color":"fbca04"}]}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1532323225000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/issues/2518","number":2518,"title":"Update URL in CPDBear (copy/paste detector) docs","body":"Old Url: https://pmd.github.io/pmd-5.4.1/usage/cpd-usage.html\nNew Url: https://pmd.github.io/pmd-6.4.0/pmd_userdocs_cpd.html\nDiff: Newcomer\nImportance: Low","comments":2,"createdAt":"2018-05-31T05:40:22Z","updatedAt":"2018-07-23T05:20:25Z","closedAt":"2018-07-23T05:20:25Z","state":"closed","user":{"login":"nemaniarjun","avatarUrl":"https://avatars0.githubusercontent.com/u/15715894?v=4"},"owner":{"login":"nemaniarjun","avatarUrl":"https://avatars0.githubusercontent.com/u/15715894?v=4"},"assignee":{"login":"Hrithik19","avatarUrl":"https://avatars2.githubusercontent.com/u/41113407?v=4"},"labels":[{"name":"area/documentation","color":"c5def5"},{"name":"difficulty/newcomer","color":"65C8FF"}]}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1533029866000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/issues/2532","number":2532,"title":"Adding type annotations to bears","body":"This can be performed in 3 ways:\n\nUsing the contracts module\nUsing python default type hinting\nManually checking using decorators or the bears run() or create_arguments() method.\n\nUsing contracts\nWe we need custom checks for settings which only accept a discrete set of values. The only option seems to follow is use custom contract type eg.\nnew_contract('valid_name', lambda s: isinstance(s, str) and len(s)>0)\n@contract(names='dict(int: (valid_name, int))')\ndef process_accounting(records):\n    ...\n\nThe problem occurring over here is the function name provided to the new_contract method gets the value of the argument implicitly as the one and only argument. Since this doesn't even receive the self or any other kind of variable its impossible to access other objects from inside this method which means we can't populate a class for storing metadata of the acceptable set of values and unless we modify contracts itself or define the acceptable set of values in the function itself. When defining the acceptable values in the function itself it is impossible to access those values outside the method thus defeating the purpose. contracts also follows a strict syntax which makes it impossible to predefine a custom set of methods for each kind of setting in the base classes to which the actual bear can just pass the acceptable values and the setting list to compare against. Everything needs to be implemented in each bear itself. Summing up things like\n[new_contract(i, lambda s: isinstance(s, str) and len(s)>0) for i in in setting_list]\n\nalso doesn't work which makes the code much more difficult to read. The usage of contracts module also provides difficulty when the some default values of the bear setting are assumed in case of the value to the setting is not provided or invalid value is given.\nUsing Type hints provided by python\nThese are pretty much worthless. They can be only used for documentation purposes unless the type checking is performed specially with loading the mypy module which just checks for type hint inconsistencies and doesn't actually run the program. (Haven't tested this out with custom classes). Normal runs of the code don't point out any inconsistencies in invalid types according to type hints.\nWriting code and manual checks for each setting in some way or the other\nThis should be the last resort unless an elegant way is devised. Can be done using decorators or the bear code is itself but a common set of classnames have to be come upon which will be used by all the bears to extract out information about these settings. This can be performed by adding classes to the base class and asking the bear writers to fill them up. Functions can also be made in the base classes to test out settings to automatically provide just the setting and the default values, calling the correct function for the correct setting type and checking whether the value provided is valid or not.","comments":15,"createdAt":"2018-06-10T06:59:58Z","updatedAt":"2018-07-31T09:37:46Z","closedAt":null,"state":"open","user":{"login":"ishanSrt","avatarUrl":"https://avatars2.githubusercontent.com/u/29859362?v=4"},"owner":{"login":"ishanSrt","avatarUrl":"https://avatars2.githubusercontent.com/u/29859362?v=4"},"labels":[]}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1531742624000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/issues/2533","number":2533,"title":"ESLintBear: KeyError: 'ruleId'","body":"Comand to run\ncoala --files=git-task-list/.eslintrc.js --bears=ESLintBear -V\n\n[WARNING][09:13:51] The default coafile '.coafile' was not found. You can generate a configuration file with your current options by adding the `--save` flag or suppress any use of config files with `-I`.\n[DEBUG][09:13:52] Platform Darwin -- Python 3.6.5, coalib 0.11.0\nExecuting section cli...\n[DEBUG][09:13:52] Files that will be checked:\n/Users/bekicot/Projects/gsoc/git-task-list/.eslintrc.js\n[DEBUG][09:13:52] coala is run only on changed files, bears' log messages from previous runs may not appear. You may use the `--flush-cache` flag to see them.\n[DEBUG][09:13:52] Running bear ESLintBear...\n[DEBUG][09:13:52] Running 'eslint --no-ignore --no-color -f=json --stdin --stdin-filename=/Users/bekicot/Projects/gsoc/git-task-list/.eslintrc.js --config /var/folders/mb/rnk_lt553cx16bn9nc52n3fc0000gn/T/tmpt_4i17u1'\n[WARNING][09:13:53] Bear ESLintBear failed to run on file /Users/bekicot/Projects/gsoc/git-task-list/.eslintrc.js. Take a look at debug messages (`-V`) for further information.\n[DEBUG][09:13:53] The bear ESLintBear raised an exception. If you are the author of this bear, please make sure to catch all exceptions. If not and this error annoys you, you might want to get in contact with the author of this bear.\n\nTraceback information is provided below:\n\nTraceback (most recent call last):\n  File \"/Users/bekicot/Library/Python/3.6/lib/python/site-packages/coalib/bears/Bear.py\", line 282, in execute\n    return [] if result is None else list(result)\n  File \"/usr/local/lib/python3.6/site-packages/bears/js/ESLintBear.py\", line 88, in process_output\n    if result['ruleId'] is not None else self)\nKeyError: 'ruleId'\n.eslintrc.js\n/*global module*/\nmodule.exports = {\n  root: true,\n  parserOptions: {\n    ecmaVersion: 2017,\n    sourceType: 'module'\n  },\n  plugins: [\n    'ember'\n  ],\n  extends: [\n    'eslint:recommended',\n    'plugin:ember/recommended'\n  ],\n  env: {\n    browser: true\n  },\n  rules: {\n  },\n  overrides: [\n    // node files\n    {\n      files: [\n        'ember-cli-build.js',\n        'testem.js',\n        'blueprints/*/index.js',\n        'config/**/*.js',\n        'lib/*/index.js'\n      ],\n      parserOptions: {\n        sourceType: 'script',\n        ecmaVersion: 2015\n      },\n      env: {\n        browser: false,\n        node: true\n      }\n    }\n  ]\n};","comments":2,"createdAt":"2018-06-12T03:01:15Z","updatedAt":"2018-07-16T12:03:44Z","closedAt":"2018-07-16T12:03:44Z","state":"closed","user":{"login":"bekicot","avatarUrl":"https://avatars0.githubusercontent.com/u/1826884?v=4"},"owner":{"login":"bekicot","avatarUrl":"https://avatars0.githubusercontent.com/u/1826884?v=4"},"labels":[{"name":"difficulty/low","color":"207de5"},{"name":"importance/medium","color":"fbca04"},{"name":"type/bug","color":"e11d21"}]}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1531066180000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/issues/2537","number":2537,"title":"Python 3.3 unsupported test broken by bandit","body":"see https://travis-ci.org/coala/coala-bears/builds/392527549\nThis only occurs on master builds by default.  To test, you will need to modify the .travis.yml job configuration.\nSearching for bandit~=1.2\nReading https://pypi.python.org/simple/bandit/\nBest match: bandit 1.4.0\nDownloading https://files.pythonhosted.org/packages/45/b2/f5a4adb1e7773e6d631481b784ad49e6ec56aa81e9fdafcabf0fe3e0241a/bandit-1.4.0.tar.gz#sha256=cb977045497f83ec3a02616973ab845c829cdab8144ce2e757fe031104a9abd4\nProcessing bandit-1.4.0.tar.gz\nWriting /tmp/easy_install-mkt_aw/bandit-1.4.0/setup.cfg\nRunning bandit-1.4.0/setup.py -q bdist_egg --dist-dir /tmp/easy_install-mkt_aw/bandit-1.4.0/egg-dist-tmp-lvynhj\nERROR:root:Error parsing\nTraceback (most recent call last):\n  File \"/home/travis/virtualenv/python3.3.6/lib/python3.3/site-packages/pbr/core.py\", line 111, in pbr\n    attrs = util.cfg_to_args(path, dist.script_args)\n  File \"/home/travis/virtualenv/python3.3.6/lib/python3.3/site-packages/pbr/util.py\", line 248, in cfg_to_args\n    kwargs = setup_cfg_to_setup_kwargs(config, script_args)\n  File \"/home/travis/virtualenv/python3.3.6/lib/python3.3/site-packages/pbr/util.py\", line 382, in setup_cfg_to_setup_kwargs\n    cmd = cls(dist)\n  File \"/home/travis/virtualenv/python3.3.6/lib/python3.3/site-packages/setuptools/__init__.py\", line 124, in __init__\n    _Command.__init__(self,dist)\n  File \"/opt/python/3.3.6/lib/python3.3/distutils/cmd.py\", line 57, in __init__\n    raise TypeError(\"dist must be a Distribution instance\")\nTypeError: dist must be a Distribution instance\nerror: Setup script exited with error in setup command: Error parsing /tmp/easy_install-mkt_aw/bandit-1.4.0/setup.cfg: TypeError: dist must be a Distribution instance\n+retval=1\n+set +x\nsetup.py error code 1 ok\nThe command \".ci/check_unsupported.sh\" exited with 1.\ncache.2\nstore build cache\n0.00s\n2.69schange detected (content changed, file is created, or file is deleted):\n/home/travis/.cache/pip/http/a/e/8/4/f/ae84f2ad63110adc3cf4c5da32252adb61136dcb578b4103e20105b9\nchanges detected, packing new archive\nuploading archive\nDone. Your build exited with 1.","comments":1,"createdAt":"2018-06-15T03:03:30Z","updatedAt":"2018-07-08T16:09:40Z","closedAt":"2018-07-08T16:09:39Z","state":"closed","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"area/ci","color":"d93f0b"},{"name":"importance/high","color":"eb6420"},{"name":"type/bug","color":"e11d21"}]}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1531095151000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/issues/2302","number":2302,"title":"Master Branch Broken: Travis-CI fails due to wrong artistic_style download","body":"currently, we download astyle_3.0.1.tar.gz from\nhttps://downloads.sourceforge.net/project/astyle/astyle/astyle%203.0.1/astyle_3.0.1_linux.tar.gz?r=&ts=1499017588&use_mirror=excellmedia\n\nwhich redirects to some other url which downloads a [text/html] file.\nThat's why we get the below error\n+tar -xvzf /home/travis/astyle.tar.gz -C /home/travis/\ngzip: stdin: not in gzip format\ntar: Child returned status 1\ntar: Error is not recoverable: exiting now\n\nRef: https://stackoverflow.com/a/46715748/7384392\nhttps://travis-ci.org/coala/coala-bears/jobs/348557001\nhttps://prnt.sc/im7w0w\nimportance/critical","comments":12,"createdAt":"2018-03-03T09:18:05Z","updatedAt":"2018-07-09T00:12:31Z","closedAt":"2018-07-09T00:12:31Z","state":"closed","user":{"login":"nvzard","avatarUrl":"https://avatars0.githubusercontent.com/u/19310512?v=4"},"owner":{"login":"nvzard","avatarUrl":"https://avatars0.githubusercontent.com/u/19310512?v=4"},"assignee":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"area/ci","color":"d93f0b"},{"name":"difficulty/low","color":"207de5"},{"name":"type/dependencies","color":"b60205"},{"name":"upstream","color":"fbca04"}]}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1532341607000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/issues/2304","number":2304,"title":"GitCommitBearTest.py : Typo in line 50","body":"There's a typo at https://github.com/coala/coala-bears/blob/master/tests/vcs/git/GitCommitBearTest.py#L50\nmessgae -> message","comments":4,"createdAt":"2018-03-03T17:52:58Z","updatedAt":"2018-07-23T10:26:47Z","closedAt":null,"state":"open","user":{"login":"virresh","avatarUrl":"https://avatars0.githubusercontent.com/u/10978108?v=4"},"owner":{"login":"virresh","avatarUrl":"https://avatars0.githubusercontent.com/u/10978108?v=4"},"labels":[{"name":"area/documentation","color":"c5def5"},{"name":"difficulty/newcomer","color":"65C8FF"}]}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1532546229000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/issues/2389","number":2389,"title":".coafile: Ignore *.orig in ci section","body":"Current implementation performs analysis on .orig files as well.\ndifficulty/newcomer","comments":11,"createdAt":"2018-03-30T15:53:21Z","updatedAt":"2018-07-25T19:17:09Z","closedAt":null,"state":"open","user":{"login":"MacBox7","avatarUrl":"https://avatars0.githubusercontent.com/u/15063552?v=4"},"owner":{"login":"MacBox7","avatarUrl":"https://avatars0.githubusercontent.com/u/15063552?v=4"},"assignee":{"login":"gutsytechster","avatarUrl":"https://avatars3.githubusercontent.com/u/31796326?v=4"},"labels":[{"name":"difficulty/newcomer","color":"65C8FF"}]}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1531131726000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/issues/2393","number":2393,"title":"PyLintBear: column number in result violates convention","body":"According to coala API doc, column number should be one-based. PyLintBear violates this rule.\nHow to reproduce:\n\nCreate a new python file, put a single space in it.\nRun PyLintBear with --json flag. The sample result is as follows:\n\n{\n  \"results\": {\n    \"cli\": [\n      {\n        \"additional_info\": \"\",\n        \"affected_code\": [\n          {\n            \"end\": {\n              **\"column\": 0**,\n              \"file\": \"/Users/liboxuan/coala/test.py\",\n              \"line\": 1\n            },\n            \"file\": \"/Users/liboxuan/coala/test.py\",\n            \"start\": {\n              **\"column\": 0**,\n              \"file\": \"/Users/liboxuan/coala/test.py\",\n              \"line\": 1\n            }\n          }\n        ],\n        \"aspect\": \"NoneType\",\n        \"confidence\": 100,\n        \"debug_msg\": \"\",\n        \"diffs\": null,\n        \"id\": 289554091275372954659836166155133973976,\n        \"message\": \"C0303 - Trailing whitespace\",\n        \"message_arguments\": {},\n        \"message_base\": \"C0303 - Trailing whitespace\",\n        \"origin\": \"PyLintBear (C0303)\",\n        \"severity\": 0\n      }\n    ]\n  }\n}\nNote that column number should never be 0 since it is one-based.","comments":24,"createdAt":"2018-03-31T15:22:37Z","updatedAt":"2018-07-09T10:22:06Z","closedAt":"2018-07-09T10:22:06Z","state":"closed","user":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4"},"owner":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4"},"assignee":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4"},"labels":[{"name":"difficulty/low","color":"207de5"},{"name":"status/blocked","color":"e11d21"},{"name":"type/bug","color":"e11d21"}]}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1531066512000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/issues/2405","number":2405,"title":"[UMBRELLA] Implement many go linters","body":"See https://github.com/golangci/awesome-go-linters\nA quite comprehensive list of go linters.\nThis is an umbrella issue, smaller issues should be filed for each individual linter we consider worthwhile to implement.","comments":2,"createdAt":"2018-04-06T08:28:38Z","updatedAt":"2018-07-08T16:15:12Z","closedAt":null,"state":"open","user":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4"},"owner":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4"},"labels":[{"name":"area/lintbears","color":"fbca04"},{"name":"bear proposal","color":"ADFF2F"}]}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1532970708000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/issues/2103","number":2103,"title":"Add .editorconfig file","body":"Our style follows the example given on http://editorconfig.org/ for Python and YAML\nlabel: difficulty/low  initiatives/gci\nOpened by @mohitkyadav at Gitter","comments":4,"createdAt":"2017-10-31T11:48:09Z","updatedAt":"2018-07-30T17:11:48Z","closedAt":null,"state":"open","user":{"login":"co-robo","avatarUrl":"https://avatars2.githubusercontent.com/u/29058257?v=4"},"owner":{"login":"co-robo","avatarUrl":"https://avatars2.githubusercontent.com/u/29058257?v=4"},"labels":[{"name":"status/blocked","color":"e11d21"}]}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1531138549000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/issues/2181","number":2181,"title":"Aspectize SpaceConsistencyBear","body":"Make SpaceConsistencyBear could be used through coala's aspects. The bear's should have the following aspects:\n\nRoot.Formatting.Spacing.Indentation - the taste mapped to use_spaces and indent_size\nRoot.Formatting.Spacing.BlankLine.NewlineAtEOF - the aspect enabled (mapped) enforce_newline_at_EOF\nRoot.Formatting.Spacing.TrailingSpace - the aspect enabled (mapped) allow_trailing_whitespace\n\nYou can read a guide to do this in https://api.coala.io/en/latest/Developers/Writing_Native_Bears.html#aspect-bear\nBlocked by coala/coala#4982 because Indentation aspects is currently non-existant.","comments":6,"createdAt":"2017-12-18T07:32:48Z","updatedAt":"2018-07-09T12:15:49Z","closedAt":null,"state":"open","user":{"login":"adhikasp","avatarUrl":"https://avatars2.githubusercontent.com/u/6151302?v=4"},"owner":{"login":"adhikasp","avatarUrl":"https://avatars2.githubusercontent.com/u/6151302?v=4"},"assignee":{"login":"biscuitsnake","avatarUrl":"https://avatars0.githubusercontent.com/u/11334474?v=4"},"labels":[{"name":"area/aspects","color":"000000"},{"name":"difficulty/low","color":"207de5"}]}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1532796660000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/issues/1888","number":1888,"title":"RuboCopBear: Missing documentation","body":"Missing documentation of rubocop_config: str='' in create_arguments(...).\ndifficulty/newcomer\narea/documentation","comments":6,"createdAt":"2017-07-05T05:36:26Z","updatedAt":"2018-07-28T16:51:00Z","closedAt":null,"state":"open","user":{"login":"yash-nisar","avatarUrl":"https://avatars1.githubusercontent.com/u/14862976?v=4"},"owner":{"login":"yash-nisar","avatarUrl":"https://avatars1.githubusercontent.com/u/14862976?v=4"},"labels":[{"name":"area/documentation","color":"c5def5"},{"name":"difficulty/newcomer","color":"65C8FF"}]}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1531293989000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/issues/1904","number":1904,"title":"ClangFunctionDifferenceBear: Create HiddenResult subclass to pass values to dependent bears","body":"Needed to solve coala/coala#4455 .\nShould be done after #1902\nThe new subclass should still provide a contents so it is backwards compatible.\n(I.e. this PR should not modify the dependent bear, to prove the old method works correct.)\nlower priority as this is an old bear, with limited use.","comments":0,"createdAt":"2017-07-08T09:09:13Z","updatedAt":"2018-07-11T07:26:29Z","closedAt":"2018-07-11T07:26:29Z","state":"closed","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"assignee":{"login":"refeed","avatarUrl":"https://avatars1.githubusercontent.com/u/20320125?v=4"},"labels":[{"name":"difficulty/low","color":"207de5"},{"name":"importance/low","color":"70e870"}]}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1532510363000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/issues/1921","number":1921,"title":"LineCountBear._get_blank_line_count: Don't use list()","body":"len can directly accept an iterable so the list conversion can be just removed. That saves at least memory because we never need the whole list.\ndifficulty newcomer\nOpened via gitter by @sils","comments":7,"createdAt":"2017-07-15T09:48:07Z","updatedAt":"2018-07-25T09:19:23Z","closedAt":"2018-07-25T09:19:23Z","state":"closed","user":{"login":"coala-bot","avatarUrl":"https://avatars0.githubusercontent.com/u/22034293?v=4"},"owner":{"login":"coala-bot","avatarUrl":"https://avatars0.githubusercontent.com/u/22034293?v=4"},"labels":[{"name":"difficulty/newcomer","color":"65C8FF"},{"name":"status/wontfix/not happening","color":"000000"}]}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1533331358000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/issues/1965","number":1965,"title":"ApertiumLintBear: Incomplete and incorrect line break","body":":param repeated_attributes_pardef:\n            This issue is responsible for checking any repeated entries in\n            the attributes associated with an entry in the parameter\n            definition section\n            n monodix files.\n\nshould be corrected to :\n:param repeated_attributes_pardef:\n            This issue is responsible for checking any repeated entries in\n            the attributes associated with an entry in the parameter\n            definition in monodix files.\n\ndifficulty/newcomer\narea/documentation","comments":11,"createdAt":"2017-08-01T06:41:19Z","updatedAt":"2018-08-03T21:22:38Z","closedAt":null,"state":"open","user":{"login":"yash-nisar","avatarUrl":"https://avatars1.githubusercontent.com/u/14862976?v=4"},"owner":{"login":"yash-nisar","avatarUrl":"https://avatars1.githubusercontent.com/u/14862976?v=4"},"labels":[{"name":"area/documentation","color":"c5def5"},{"name":"difficulty/newcomer","color":"65C8FF"}]}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1531138616000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/issues/1649","number":1649,"title":"GrindBear for Go","body":"https://godoc.org/rsc.io/grind\nOpened via gitter by @yukiisbored","comments":2,"createdAt":"2017-04-24T14:20:52Z","updatedAt":"2018-07-09T12:16:56Z","closedAt":null,"state":"open","user":{"login":"coala-bot","avatarUrl":"https://avatars0.githubusercontent.com/u/22034293?v=4"},"owner":{"login":"coala-bot","avatarUrl":"https://avatars0.githubusercontent.com/u/22034293?v=4"},"assignee":{"login":"yzgyyang","avatarUrl":"https://avatars0.githubusercontent.com/u/16748524?v=4"},"labels":[{"name":"bear proposal","color":"ADFF2F"},{"name":"status/blocked","color":"e11d21"},{"name":"upstream","color":"fbca04"}]}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1532737678000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/issues/1684","number":1684,"title":"The PySafetyBear tests are incompatible with safety 0.6+","body":"The current release of safety is 1.4\n___________________ PySafetyBearTest.test_with_vulnerability ___________________\n\nself = <tests.python.requirements.PySafetyBearTest.PySafetyBearTest testMethod=test_with_vulnerability>\n\n    def test_with_vulnerability(self):\n        vuln_data = {\n            'description': 'foo',\n            'changelog': 'bar',\n        }\n        with mock.patch(\n            'bears.python.requirements.PySafetyBear.safety.check',\n>           return_value=[Vulnerability('bar', '<0.2', '0.1', vuln_data)],\n        ) as check:\nE       TypeError: __new__() takes 4 positional arguments but 5 were given\n\ntests/python/requirements/PySafetyBearTest.py:32: TypeError\n============================ pytest-warning summary ============================\n\nhttps://circleci.com/gh/jayvdb/coala-bears/693\nThis doesnt affect master, as it is pinned to ~0.5.1","comments":1,"createdAt":"2017-04-28T12:35:31Z","updatedAt":"2018-07-28T00:27:58Z","closedAt":"2018-07-28T00:27:57Z","state":"closed","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"assignee":{"login":"RaiVaibhav","avatarUrl":"https://avatars3.githubusercontent.com/u/22278438?v=4"},"milestone":{"title":"0.12","createdAt":"2017-04-25T06:12:11Z","dueOn":"2017-06-30T00:00:00Z","state":"open","htmlUrl":"https://github.com/coala/coala-bears/milestone/13","description":""},"labels":[{"name":"difficulty/low","color":"207de5"},{"name":"hacktoberfest","color":"b60205"},{"name":"importance/low","color":"70e870"}]}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1532635204000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/issues/1711","number":1711,"title":"ClangCountingConditions: Remove two pragma no cover","body":"We want to remove all #pragma: no cover c.f. coala/coala-bears#1618\nTwo of them in this file are not necessary.\nOnly one of them is necessary (c.f. #1710).\ndifficulty/newcomer\nOpened via gitter by @jayvdb","comments":3,"createdAt":"2017-05-05T03:00:34Z","updatedAt":"2018-07-26T20:00:04Z","closedAt":null,"state":"open","user":{"login":"coala-bot","avatarUrl":"https://avatars0.githubusercontent.com/u/22034293?v=4"},"owner":{"login":"coala-bot","avatarUrl":"https://avatars0.githubusercontent.com/u/22034293?v=4"},"assignee":{"login":"JayKanakiya","avatarUrl":"https://avatars3.githubusercontent.com/u/25271646?v=4"},"labels":[{"name":"difficulty/newcomer","color":"65C8FF"}]}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1531138831000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/issues/1755","number":1755,"title":"Document creation of asciinema demos","body":"There are multiple newcomer issues for this, but no guide. We should write some docs.\narea/docs\ndifficulty/newcomer","comments":3,"createdAt":"2017-05-22T17:10:08Z","updatedAt":"2018-07-09T12:20:31Z","closedAt":null,"state":"open","user":{"login":"underyx","avatarUrl":"https://avatars0.githubusercontent.com/u/1060436?v=4"},"owner":{"login":"underyx","avatarUrl":"https://avatars0.githubusercontent.com/u/1060436?v=4"},"labels":[{"name":"area/documentation","color":"c5def5"},{"name":"difficulty/newcomer","color":"65C8FF"}]}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1532065844000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/issues/1550","number":1550,"title":"generate_bear_requirements: Don't exit with 0 on error","body":"See build https://travis-ci.org/coala/coala-bears/jobs/215563097#L3509 and especially #L3789 , where StyleLintBear reported errors which were ignored.\nOpened via gitter by @Makman2","comments":2,"createdAt":"2017-03-27T16:29:08Z","updatedAt":"2018-07-20T05:50:44Z","closedAt":null,"state":"open","user":{"login":"coala-bot","avatarUrl":"https://avatars0.githubusercontent.com/u/22034293?v=4"},"owner":{"login":"coala-bot","avatarUrl":"https://avatars0.githubusercontent.com/u/22034293?v=4"},"assignee":{"login":"nemaniarjun","avatarUrl":"https://avatars0.githubusercontent.com/u/15715894?v=4"},"labels":[{"name":"difficulty/medium","color":"0052cc"},{"name":"importance/low","color":"70e870"}]}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1531653862000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/issues/1283","number":1283,"title":"PyUnrunDoctestsBear: Detect doctests that are not actually run","body":"This will print \"Hi\"\n    >>> print(\"Not hi\")\n    Hi\n\nThis will actually not fail tests because a linebreak is required between the english sentence and the doctest.\nA nice security feature :)","comments":9,"createdAt":"2017-01-10T11:51:26Z","updatedAt":"2018-07-15T11:24:22Z","closedAt":null,"state":"open","user":{"login":"adtac","avatarUrl":"https://avatars2.githubusercontent.com/u/7521600?v=4"},"owner":{"login":"adtac","avatarUrl":"https://avatars2.githubusercontent.com/u/7521600?v=4"},"assignee":{"login":"MacBox7","avatarUrl":"https://avatars0.githubusercontent.com/u/15063552?v=4"},"labels":[{"name":"bear proposal","color":"ADFF2F"},{"name":"difficulty/medium","color":"0052cc"}]}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1532160264000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/issues/1358","number":1358,"title":"HaskellLintBear should have a CabalRequirement","body":"CabalRequirement (and DistributionRequirement) was created recently. It should be used for HaskellLintBear.","comments":0,"createdAt":"2017-01-29T07:18:22Z","updatedAt":"2018-07-21T08:04:24Z","closedAt":"2018-07-21T07:27:12Z","state":"closed","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"assignee":{"login":"anctartica","avatarUrl":"https://avatars0.githubusercontent.com/u/7020962?v=4"},"labels":[{"name":"difficulty/low","color":"207de5"},{"name":"importance/low","color":"70e870"}]}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1531138647000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/issues/1371","number":1371,"title":"Blacklist dockerfile_lint@0.2.5","body":"0.2.5 doesnt work; fixed in 0.2.6\nSee projectatomic/dockerfile_lint#66","comments":3,"createdAt":"2017-01-31T06:15:03Z","updatedAt":"2018-07-09T12:17:27Z","closedAt":null,"state":"open","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"difficulty/low","color":"207de5"},{"name":"hacktoberfest","color":"b60205"},{"name":"type/bug","color":"e11d21"},{"name":"type/dependencies","color":"b60205"}]}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1533634125000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/issues/1119","number":1119,"title":"hlint minimum version 1.9.1 not recorded","body":"HaskellLintBear should say that the hlint minimum version is 1.9.1, due to the use of the --json argument.\nNeeds either coala/coala#3237 or coala/coala#3236 fixed first.","comments":4,"createdAt":"2016-12-13T16:01:50Z","updatedAt":"2018-08-07T09:28:45Z","closedAt":null,"state":"open","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"milestone":{"title":"0.12","createdAt":"2017-04-25T06:12:11Z","dueOn":"2017-06-30T00:00:00Z","state":"open","htmlUrl":"https://github.com/coala/coala-bears/milestone/13","description":""},"labels":[{"name":"area/lintbears","color":"fbca04"},{"name":"difficulty/low","color":"207de5"},{"name":"importance/low","color":"70e870"}]}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1531138907000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/issues/1199","number":1199,"title":"Move generate_package.py to a helper script","body":"As noted on #1000 , there is not much in \"bears\" except plugins.  If we can empty out \"bears\" of everything not loaded via setuptools entry points, all dependencies belong to each plugin, and there is no developer API in \"bears\", so no need for API backwards compatibility, only user settings backwards compatibility.\nRemoving all python files from the top bears directory is also necessary for adopting PEP 420 -- Implicit Namespace Packages.\nThis should probably be done after #617 .","comments":0,"createdAt":"2016-12-24T05:50:24Z","updatedAt":"2018-07-09T12:21:47Z","closedAt":null,"state":"open","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"assignee":{"login":"anctartica","avatarUrl":"https://avatars0.githubusercontent.com/u/7020962?v=4"},"labels":[{"name":"difficulty/medium","color":"0052cc"},{"name":"importance/medium","color":"fbca04"}]}},{"repoOwner":"coala","repoName":"documentation","updatedAtMs":1532083500000,"issue":{"htmlUrl":"https://github.com/coala/documentation/issues/552","number":552,"title":"Replace FAQ item about pull requests","body":"http://docs.coala.io/en/latest/Help/FAQ.html#what-are-those-things-failing-passing-on-my-pull-request\nThis should be a generic FAQ entry about \"I need help contributing to coala\" , directing them to http://api.coala.io","comments":1,"createdAt":"2018-04-23T13:35:11Z","updatedAt":"2018-07-20T10:45:00Z","closedAt":null,"state":"open","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"assignee":{"login":"sarthakchakerverty","avatarUrl":"https://avatars3.githubusercontent.com/u/31766358?v=4"},"labels":[{"name":"difficulty/low","color":"1d76db"},{"name":"importance/low","color":"0052cc"}]}},{"repoOwner":"coala","repoName":"documentation","updatedAtMs":1532090165000,"issue":{"htmlUrl":"https://github.com/coala/documentation/issues/447","number":447,"title":"Installation of bears requires libxml2","body":"This dependency was introduced by recently added bears which use Python package lxml.\nInstalling lxml from pypi requires libxml2 headers, which are typically not found on Windows.\nThis is going to be a major problem until coala/coala-bears#1000 is fixed.\nTemporarily, we can improve good instructions for Windows users on how to install lxml.\ndifficulty/low\nOpened via gitter by @jayvdb","comments":5,"createdAt":"2017-06-15T04:43:44Z","updatedAt":"2018-07-20T12:36:05Z","closedAt":null,"state":"open","user":{"login":"coala-bot","avatarUrl":"https://avatars0.githubusercontent.com/u/22034293?v=4"},"owner":{"login":"coala-bot","avatarUrl":"https://avatars0.githubusercontent.com/u/22034293?v=4"},"assignee":{"login":"MorTD","avatarUrl":"https://avatars2.githubusercontent.com/u/26660609?v=4"},"labels":[{"name":"difficulty/low","color":"1d76db"},{"name":"status/stale","color":"ededed"}]}},{"repoOwner":"coala","repoName":"documentation","updatedAtMs":1531982944000,"issue":{"htmlUrl":"https://github.com/coala/documentation/issues/284","number":284,"title":"FAQ: Add Q'n'A to \"What is a bear anyway\"","body":"That's somehow missing :/\ndifficulty newcomer\nOpened via gitter by @sils","comments":10,"createdAt":"2016-11-10T11:13:01Z","updatedAt":"2018-07-19T06:49:04Z","closedAt":"2018-07-19T06:49:04Z","state":"closed","user":{"login":"coala-bot","avatarUrl":"https://avatars0.githubusercontent.com/u/22034293?v=4"},"owner":{"login":"coala-bot","avatarUrl":"https://avatars0.githubusercontent.com/u/22034293?v=4"},"assignee":{"login":"sarthakchakerverty","avatarUrl":"https://avatars3.githubusercontent.com/u/31766358?v=4"},"labels":[{"name":"difficulty/newcomer","color":"bfd4f2"}]}},{"repoOwner":"coala","repoName":"projects","updatedAtMs":1533653118000,"issue":{"htmlUrl":"https://github.com/coala/projects/issues/608","number":608,"title":"Enhance report.md to support year","body":"_layouts/report.md currently emits \"2017\" all the time.\nIt should derive it from other information.\nThe 2017 ones all have a year in the URL, so that should be able to be used somehow\nSee #359","comments":1,"createdAt":"2018-08-03T10:12:42Z","updatedAt":"2018-08-07T14:45:18Z","closedAt":"2018-08-07T14:45:18Z","state":"closed","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"assignee":{"login":"virresh","avatarUrl":"https://avatars0.githubusercontent.com/u/10978108?v=4"},"labels":[{"name":"difficulty/low","color":"1d76db"},{"name":"importance/high","color":"eb6420"}]}},{"repoOwner":"coala","repoName":"projects","updatedAtMs":1533207074000,"issue":{"htmlUrl":"https://github.com/coala/projects/issues/605","number":605,"title":"Vulture : use pyflakes as an initial parse basis","body":"Pyflakes does a lot of analysis which can be used by vulture.\npyflakes has long ago decided that it will not report dead code.\nHowever it does need to report other problems caused by dead code, and this can be done by tracking dead code.\nThere is a POC at\nhttps://github.com/jayvdb/pyflakes/tree/dead-code\nvulture can use this base on which to do more sophisticated analysis which is beyond scope of vulture.\nOne of the key benefits of using pyflakes is errors in the code can be detected by pyflakes base and vulture can fail when those errors would make vulture results unreliable.","comments":3,"createdAt":"2018-08-01T10:01:06Z","updatedAt":"2018-08-02T10:51:14Z","closedAt":null,"state":"open","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"assignee":{"login":"MacBox7","avatarUrl":"https://avatars0.githubusercontent.com/u/15063552?v=4"},"labels":[{"name":"Project Proposal","color":"f9d0c4"}]}},{"repoOwner":"coala","repoName":"projects","updatedAtMs":1533302151000,"issue":{"htmlUrl":"https://github.com/coala/projects/issues/606","number":606,"title":"Gitmate: Contextually sensitive actions on PRs","body":"Currently Gitmate adds a lot of noise to PRs.\nIt shouldnt repeat messages it has already put on PRs.\nIt could add a note to the existing message that the problem was seen again in the latest commit.\nIt should hide as 'Outdated' messages for errors which have been resolved.\netc","comments":4,"createdAt":"2018-08-02T11:47:43Z","updatedAt":"2018-08-03T13:15:51Z","closedAt":null,"state":"open","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"Project Proposal","color":"f9d0c4"}]}},{"repoOwner":"coala","repoName":"projects","updatedAtMs":1531584030000,"issue":{"htmlUrl":"https://github.com/coala/projects/issues/601","number":601,"title":"Newcomers_Guide.rst: fix link color in \"Struggling with this? ...\" message","body":"On Newcomers Guide page there is a block saying:\n\nStruggling with this? We have a very verbose guide on this topic in our Google Code In resources which can help you find a suitable repository and run coala on a bigger project.\n\nwhere \"our Google Code In resources\" is a link. However, it is underlined with dark color (on dark background) making it unnoticeable for reader. Maybe it would be a good idea to change border color to a lighter one.\nI attach the screenshot of this block to make things more clear:","comments":1,"createdAt":"2018-07-14T16:00:16Z","updatedAt":"2018-07-14T16:00:30Z","closedAt":"2018-07-14T16:00:30Z","state":"closed","user":{"login":"nikitavbv","avatarUrl":"https://avatars1.githubusercontent.com/u/24596921?v=4"},"owner":{"login":"nikitavbv","avatarUrl":"https://avatars1.githubusercontent.com/u/24596921?v=4"},"labels":[]}},{"repoOwner":"coala","repoName":"projects","updatedAtMs":1532331205000,"issue":{"htmlUrl":"https://github.com/coala/projects/issues/603","number":603,"title":"Proposal: Gitmate to submit patches when available from master builds","body":"If coala dependencies update, new fixes may be automatically available.\nThey may come from new versions of linter tools, new releases of bears, or new data used by old bears.\nThe most common case for coala is updates to our mobans repo which need to be rolled out to all repos.\nFor this we will need a MobanBear .\nThe mechanism for creating PRs is simple, but will require some improvements to IGitt.\nThe logic for how to do this sanely in a constantly moving repo with humans involved is harder and needs a careful design and more careful implementation. We can and should do better than greenkeeper and similar.","comments":1,"createdAt":"2018-07-23T06:32:53Z","updatedAt":"2018-07-23T07:33:25Z","closedAt":null,"state":"open","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[]}},{"repoOwner":"coala","repoName":"projects","updatedAtMs":1532704185000,"issue":{"htmlUrl":"https://github.com/coala/projects/issues/604","number":604,"title":"Move site to Netlify","body":"Currently, projects.coala.io results in a TLS certificate failure because GitHub pages doesn't give free certificates for sites outside of *. github.io.\nIn order to fix this, I suggest moving the site to Netlify where they issue Free Let's Encrypt TLS certificates.\nCc @sils","comments":3,"createdAt":"2018-07-23T12:08:55Z","updatedAt":"2018-07-27T15:09:45Z","closedAt":"2018-07-27T15:09:45Z","state":"closed","user":{"login":"yukiisbored","avatarUrl":"https://avatars0.githubusercontent.com/u/18437312?v=4"},"owner":{"login":"yukiisbored","avatarUrl":"https://avatars0.githubusercontent.com/u/18437312?v=4"},"labels":[]}},{"repoOwner":"coala","repoName":"projects","updatedAtMs":1533090142000,"issue":{"htmlUrl":"https://github.com/coala/projects/issues/590","number":590,"title":"Create new project proposal: IGitt scm support","body":"IGitt is a library to support multiple hosters.\ncoala bears for VCS currently do not use IGitt.  They should.\nHowever coala bears support BitBucket (git and mecurial), and BitBucket support is missing from IGitt.\nThe first goal of this project is to add BitBucket (git & mecurial) support to IGitt and convert the coala-bears to using IGitt.\nGerrit and Phabricator support are two other git hosters which are important for IGitt adoption into large OSS orgs.  These should be added in the second phase.\nThen the third phase of the project is to add two more non-git scm, such as fossil and launchpad.","comments":1,"createdAt":"2018-06-04T09:55:20Z","updatedAt":"2018-08-01T02:22:22Z","closedAt":"2018-08-01T02:22:22Z","state":"closed","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"assignee":{"login":"guyzmo","avatarUrl":"https://avatars2.githubusercontent.com/u/254441?v=4"},"labels":[{"name":"Project Proposal","color":"f9d0c4"}]}},{"repoOwner":"coala","repoName":"projects","updatedAtMs":1533284765000,"issue":{"htmlUrl":"https://github.com/coala/projects/issues/597","number":597,"title":"Windows bears","body":"There are many bears which are not being tested on Windows, and very likely some which do not work on Windows and we dont know about it.\nThis project would bring our bears CI to 100% coverage, fixing all bugs in bears that are related to Windows.","comments":1,"createdAt":"2018-07-02T06:44:02Z","updatedAt":"2018-08-03T08:26:05Z","closedAt":"2018-08-03T08:26:05Z","state":"closed","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"Project Proposal","color":"f9d0c4"}]}},{"repoOwner":"coala","repoName":"projects","updatedAtMs":1532971290000,"issue":{"htmlUrl":"https://github.com/coala/projects/issues/552","number":552,"title":"Disable jetbrains project ","body":"@traff isnt mentoring atm; project needs to be disabled until he plans to be a mentor again.","comments":2,"createdAt":"2018-04-13T12:47:25Z","updatedAt":"2018-07-30T17:21:30Z","closedAt":null,"state":"open","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"difficulty/newcomer","color":"0e8a16"}]}},{"repoOwner":"coala","repoName":"projects","updatedAtMs":1533284698000,"issue":{"htmlUrl":"https://github.com/coala/projects/issues/564","number":564,"title":"Split repology project into two projects","body":"We have two different projects both utilising Repology for installation.\nAnd there is only one repology project here: https://github.com/coala/projects/blob/master/_projects/automate_dependacy_repology.md\nAlso relevant is the cib project, which will also be improving our dependency management, but it will be fixing an end-user tool, and will likely be trying to leverage conda to help get the dependencies installed.\nAs a result, the cib project will inevitable be solving the pip dependencies.\nThe 'Go on BSD' project is clearly about Go, and only Go.  The meat of this project is supporting lots of versions of Go, and different BSD, and possible also other more obscure OS like Alpine Linux.\nThe current repology project is about getting 'all' linters linked to Repology.\nI suspect the timeline is not allowing enough time for the process of creating Repology packages for linters that are not yet in Repology, and it seems large numbers of them are missing.  So this will take quite a bit longer than planned.  We'll need to look at various methods of automating the process.  Maybe we rename it to be the 'repology metadata' project.  It will still need to include implementation of the installation routines, but it probably wont have time to solve installation of every bear.  Perhaps it should focus only on linters managed via ruby bundler, and or npm.  That will avoid most conflicts with the other two projects.\n@yzgyyang , the first step is for you to create a new very basic proposal page for your project.","comments":8,"createdAt":"2018-04-24T20:57:14Z","updatedAt":"2018-08-03T08:24:58Z","closedAt":"2018-08-03T08:24:58Z","state":"closed","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"assignee":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"Project Proposal","color":"f9d0c4"},{"name":"importance/critical","color":"b60205"}]}},{"repoOwner":"coala","repoName":"projects","updatedAtMs":1533568764000,"issue":{"htmlUrl":"https://github.com/coala/projects/issues/583","number":583,"title":".coafile: Set max line length for project pages","body":"Similar to coala/cEPs#134 , the project pages (i.e. pages in https://github.com/coala/projects/tree/master/_projects) should have a reasonable line length to improve the ability to read & code review them.\nc.f. coala/cEPs#157\nTry length 120 for existing files so it requires less disruptive changes to the existing files.\nThen add another section which requires 80 cpl and excludes the existing files.","comments":13,"createdAt":"2018-05-23T11:53:53Z","updatedAt":"2018-08-06T15:19:24Z","closedAt":"2018-08-06T15:19:24Z","state":"closed","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"assignee":{"login":"Man-Jain","avatarUrl":"https://avatars3.githubusercontent.com/u/12700384?v=4"},"labels":[{"name":"difficulty/low","color":"1d76db"},{"name":"importance/high","color":"eb6420"}]}},{"repoOwner":"coala","repoName":"projects","updatedAtMs":1533210240000,"issue":{"htmlUrl":"https://github.com/coala/projects/issues/488","number":488,"title":"gitmate plugins","body":"coala uses http://gitmate.io to automate our systems.\nWhile it works very well, there are a number of plugins which need extra complexity to better suit coala, and there are new plugin ideas we have all the time, but never get around to building.  As these are coala-centric enhancements, they often fall off the gitmate priority list.  The extensible framework is there; we need to utilise it better.","comments":11,"createdAt":"2018-03-19T09:32:53Z","updatedAt":"2018-08-02T11:44:00Z","closedAt":"2018-08-02T11:44:00Z","state":"closed","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"assignee":{"login":"Vamshi99","avatarUrl":"https://avatars2.githubusercontent.com/u/20969586?v=4"},"labels":[{"name":"Project Proposal","color":"f9d0c4"}]}},{"repoOwner":"coala","repoName":"projects","updatedAtMs":1533286523000,"issue":{"htmlUrl":"https://github.com/coala/projects/issues/547","number":547,"title":"Update nested language proposal","body":"The examples are confusing rather than helpful.\nPhp/HTML is a good example.\nAnother great example is reStructuredText, which allows specification of a language for a code block.  And Markdown now has a similar concept.  Our rstcheck bear already uses this and lints the code blocks.  Ideally this project would re-implement the rstcheck's linting of code blocks, so the splitting and spawning of linters is done inside coala instead of inside rstcheck, and the same functionality would be available for markdown without a custom bear.","comments":1,"createdAt":"2018-04-07T03:29:03Z","updatedAt":"2018-08-03T08:55:23Z","closedAt":null,"state":"open","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"assignee":{"login":"NiklasMM","avatarUrl":"https://avatars1.githubusercontent.com/u/1924002?v=4"},"labels":[{"name":"importance/critical","color":"b60205"}]}},{"repoOwner":"coala","repoName":"projects","updatedAtMs":1533289110000,"issue":{"htmlUrl":"https://github.com/coala/projects/issues/391","number":391,"title":"Project proposal: lint rst single vs double backticks","body":"There isnt any clear guidance on single vs double backticks in RST, especially when RST is not embedded within Python, however a rule of thumb is that single backticks should be implicit references to something.\nhttps://stackoverflow.com/questions/22256995/restructuredtext-in-sphinx-and-docstrings-single-vs-double-back-quotes-or-back\nhttps://mail.zope.org/pipermail/grok-dev/2008-December/006823.html\nFor documentation especially, it would be helpful to have a checker that finds a section heading somewhere in the docs for anything in single backticks, and errors if it cant be found.\nhttps://github.com/myint/rstcheck would likely be the best spot for this to be implemented.\nAnd myint/rstcheck#32 would be an ideal task to be done to familiarise oneself with the project.","comments":2,"createdAt":"2017-11-01T13:18:54Z","updatedAt":"2018-08-03T09:38:30Z","closedAt":null,"state":"open","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"assignee":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"Project Proposal","color":"f9d0c4"}]}},{"repoOwner":"coala","repoName":"devops","updatedAtMs":1532001356000,"issue":{"htmlUrl":"https://github.com/coala/devops/issues/123","number":123,"title":"*.coala.io sites broken with Error 1014 CNAME Cross-User Banned","body":"Error 1014 Ray ID: 43c14aab6b9d313e • 2018-07-18 01:49:25 UTC\nCNAME Cross-User Banned\n\n\nWhat happened?\nYou've requested a page on a website that is part of the Cloudflare network. The host is configured as a CNAME across accounts on Cloudflare, which is prohibited by security policy.\n\nhttps://docs.coala.io/\nhttps://api.coala.io/\nnot\nhttps://coala.io/","comments":1,"createdAt":"2018-07-18T01:49:51Z","updatedAt":"2018-07-19T11:55:56Z","closedAt":"2018-07-19T11:55:56Z","state":"closed","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[]}},{"repoOwner":"coala","repoName":"devops","updatedAtMs":1533094276000,"issue":{"htmlUrl":"https://github.com/coala/devops/issues/124","number":124,"title":"SSL certificate expired for coala.io","body":"This also breaks coala-bears master : coala/coala-bears#2628","comments":7,"createdAt":"2018-07-21T02:42:07Z","updatedAt":"2018-08-01T03:31:16Z","closedAt":null,"state":"open","user":{"login":"virresh","avatarUrl":"https://avatars0.githubusercontent.com/u/10978108?v=4"},"owner":{"login":"virresh","avatarUrl":"https://avatars0.githubusercontent.com/u/10978108?v=4"},"assignee":{"login":"yukiisbored","avatarUrl":"https://avatars0.githubusercontent.com/u/18437312?v=4"},"labels":[]}},{"repoOwner":"coala","repoName":"corobo","updatedAtMs":1533669258000,"issue":{"htmlUrl":"https://github.com/coala/corobo/issues/607","number":607,"title":"Create LabHubTestCase for testing LabHub dependent plugins and adapt GitStats tests","body":"The role of this TestCase is to do the setUp necessary for testing a plugin which depends on LabHub.","comments":0,"createdAt":"2018-08-07T19:09:24Z","updatedAt":"2018-08-07T19:14:18Z","closedAt":null,"state":"open","user":{"login":"nvzard","avatarUrl":"https://avatars0.githubusercontent.com/u/19310512?v=4"},"owner":{"login":"nvzard","avatarUrl":"https://avatars0.githubusercontent.com/u/19310512?v=4"},"labels":[{"name":"area/tests","color":"5facd8"},{"name":"bug","color":"ee0701"}]}},{"repoOwner":"coala","repoName":"corobo","updatedAtMs":1533438525000,"issue":{"htmlUrl":"https://github.com/coala/corobo/issues/602","number":602,"title":"Make LabHub is_room_member a private function of the module","body":"LabHub.is_room_member is unnecessarily a static method of the class.\nIt can be moved to a private function _is_room_member at the module level, and then the tests can be improved to remove the need to do special plugin mocking.\nSee #572 (comment) for context","comments":0,"createdAt":"2018-08-05T03:08:45Z","updatedAt":"2018-08-05T03:08:45Z","closedAt":null,"state":"open","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"difficulty/low","color":"207de5"},{"name":"importance/medium","color":"ddba61"}]}},{"repoOwner":"coala","repoName":"corobo","updatedAtMs":1533439136000,"issue":{"htmlUrl":"https://github.com/coala/corobo/issues/603","number":603,"title":"Alert whenever a @mention is of someone not in the room","body":"Similar to #317 , but for room membership.\nThe wording needs to be moderately toned, as it isnt 'bad' to mention a org member who isnt in the room - on gitter, they will get a notification to join the room, and they can read the room without joining, so it is OK to ping them, and they can ignore it.\nAlso c.f. #602","comments":1,"createdAt":"2018-08-05T03:14:46Z","updatedAt":"2018-08-05T03:18:56Z","closedAt":null,"state":"open","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"area/security","color":"fc6805"},{"name":"difficulty/low","color":"207de5"},{"name":"importance/high","color":"e99695"}]}},{"repoOwner":"coala","repoName":"corobo","updatedAtMs":1533701556000,"issue":{"htmlUrl":"https://github.com/coala/corobo/issues/594","number":594,"title":"Minor refractoring in labhub tests","body":"Do minor changes in labhub_tests as asked here #572 (review) (see below)\ndifficulty/low","comments":8,"createdAt":"2018-07-31T10:23:08Z","updatedAt":"2018-08-08T04:12:36Z","closedAt":null,"state":"open","user":{"login":"nvzard","avatarUrl":"https://avatars0.githubusercontent.com/u/19310512?v=4"},"owner":{"login":"nvzard","avatarUrl":"https://avatars0.githubusercontent.com/u/19310512?v=4"},"labels":[{"name":"difficulty/newcomer","color":"65c8ff"},{"name":"importance/low","color":"f9d0c4"}]}},{"repoOwner":"coala","repoName":"corobo","updatedAtMs":1533392859000,"issue":{"htmlUrl":"https://github.com/coala/corobo/issues/596","number":596,"title":"DefaultConfigurationMixin: Modify implementation ","body":"Current implementation is either DEFAULT_CONFIG or CONFIG_TEMPLATE. But a better implementation will be if we can store the default values in CONFIG_TEMPLATE and then allow a subset of those config variables overridden in the config.py's DEFAULT_CONFIG.\nThis way we can provide the partial configuration in the CONFIG_TEMPLATE, and allow partial reconfiguration through config.py's DEFAULT_CONFIG.","comments":0,"createdAt":"2018-08-04T14:23:01Z","updatedAt":"2018-08-04T14:27:39Z","closedAt":null,"state":"open","user":{"login":"nvzard","avatarUrl":"https://avatars0.githubusercontent.com/u/19310512?v=4"},"owner":{"login":"nvzard","avatarUrl":"https://avatars0.githubusercontent.com/u/19310512?v=4"},"labels":[{"name":"area/ci","color":"ab04e8"},{"name":"enhancement","color":"84b6eb"}]}},{"repoOwner":"coala","repoName":"corobo","updatedAtMs":1533549586000,"issue":{"htmlUrl":"https://github.com/coala/corobo/issues/600","number":600,"title":"spam plugin should implement check_configuration","body":"MAX_LINES = 1 is invalid, as it will mean anyone writing one line is spamming, which is silly.\nMAX_MSG_LEN <= length of BOT_PREFIX is invalid, as means invoking a command is spamming, which is silly.","comments":2,"createdAt":"2018-08-05T02:26:47Z","updatedAt":"2018-08-06T09:59:46Z","closedAt":null,"state":"open","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"assignee":{"login":"CodeSparkle","avatarUrl":"https://avatars3.githubusercontent.com/u/40273492?v=4"},"labels":[{"name":"area/config","color":"60a1db"},{"name":"difficulty/newcomer","color":"65c8ff"}]}},{"repoOwner":"coala","repoName":"corobo","updatedAtMs":1533476654000,"issue":{"htmlUrl":"https://github.com/coala/corobo/issues/601","number":601,"title":"plugins/coatils.py: Remove empty `__init__`","body":"The __init__ in this module only invokes super, which will happen anyway if the __init__ is removed.\nThis is medium importance because we do not want any plugin to be using __init__, as they should be using activate. (c.f. #577)","comments":0,"createdAt":"2018-08-05T02:48:23Z","updatedAt":"2018-08-05T13:44:14Z","closedAt":"2018-08-05T13:44:14Z","state":"closed","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"assignee":{"login":"bhavya17037","avatarUrl":"https://avatars0.githubusercontent.com/u/35334585?v=4"},"labels":[{"name":"difficulty/newcomer","color":"65c8ff"},{"name":"importance/medium","color":"ddba61"}]}},{"repoOwner":"coala","repoName":"corobo","updatedAtMs":1533457764000,"issue":{"htmlUrl":"https://github.com/coala/corobo/issues/579","number":579,"title":"searchdocs_test: change `http://` links to 'https://`","body":"Change http to https\n\n  \n    \n      corobo/tests/searchdocs_test.py\n    \n    \n         Line 7\n      in\n      de4fbaf\n    \n    \n    \n    \n\n        \n          \n           'http://api.coala.io/en/latest/search.html?q=this+is+search+string') \n        \n    \n  \n\n\ndifficulty/newcomer","comments":4,"createdAt":"2018-07-06T08:00:34Z","updatedAt":"2018-08-05T08:29:24Z","closedAt":null,"state":"open","user":{"login":"nvzard","avatarUrl":"https://avatars0.githubusercontent.com/u/19310512?v=4"},"owner":{"login":"nvzard","avatarUrl":"https://avatars0.githubusercontent.com/u/19310512?v=4"},"labels":[{"name":"area/tests","color":"5facd8"},{"name":"difficulty/newcomer","color":"65c8ff"}]}},{"repoOwner":"coala","repoName":"corobo","updatedAtMs":1532983866000,"issue":{"htmlUrl":"https://github.com/coala/corobo/issues/583","number":583,"title":"semaphore CI scripts assume master branch is main repo","body":"$ git grep master .ci/semaphore.*\n.ci/semaphore.answers.sh:if [[ $BRANCH_NAME != \"master\" ]]\n.ci/semaphore.docker.sh:if [[ $BRANCH_NAME == \"master\" ]]\nThose assume that when BRANCH_NAME == \"master\", it is a push to the main repository.\nIt is quite common for people to accidentally build from the 'master' of forks, and submit PRs from that branch.\nWhile it is highly undesirable that PRs come from master, and we intend to prevent it with a gitmate plugin, .ci/semaphore.docker.sh and .ci/semaphore.answers.sh should not break as a result.  They should detect pull requests, and not do the deploy-preparation steps.\nc.f. #582 (comment) which broke because of this, and probably other PRs also.","comments":1,"createdAt":"2018-07-18T02:19:25Z","updatedAt":"2018-07-30T20:51:06Z","closedAt":null,"state":"open","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"difficulty/low","color":"207de5"},{"name":"importance/medium","color":"ddba61"}]}},{"repoOwner":"coala","repoName":"corobo","updatedAtMs":1532985317000,"issue":{"htmlUrl":"https://github.com/coala/corobo/issues/584","number":584,"title":"Create CoroboTestCase and deprecate `plugin_testbot`","body":"instanciateElement of bot's plugin_manager which is using in the plugin_manager has been removed after the release of Errbot 6.0.0a.\nCoroboTestCase uses the FullStackTest test class provided by Errbot for use with Python's unittest module to write tests against a fully functioning bot. It also supports usage of mock_injection with proper activation and deactivation of plugins as well as support for loading the plug file for the templates.","comments":0,"createdAt":"2018-07-19T03:22:29Z","updatedAt":"2018-07-30T21:15:17Z","closedAt":"2018-07-30T21:15:17Z","state":"closed","user":{"login":"nvzard","avatarUrl":"https://avatars0.githubusercontent.com/u/19310512?v=4"},"owner":{"login":"nvzard","avatarUrl":"https://avatars0.githubusercontent.com/u/19310512?v=4"},"labels":[{"name":"enhancement","color":"84b6eb"},{"name":"question","color":"cc317c"}]}},{"repoOwner":"coala","repoName":"corobo","updatedAtMs":1532840480000,"issue":{"htmlUrl":"https://github.com/coala/corobo/issues/585","number":585,"title":"final.py: Unused imports","body":"Pyflakes error report =>\n./final.py:3: 'gensim.parsing.preprocessing.STOPWORDS' imported but unused\n./final.py:4: 'gensim.utils.simple_preprocess' imported but unused\n./final.py:6: 'nltk' imported but unused","comments":6,"createdAt":"2018-07-19T11:35:51Z","updatedAt":"2018-07-29T05:01:20Z","closedAt":"2018-07-29T05:01:20Z","state":"closed","user":{"login":"MacBox7","avatarUrl":"https://avatars0.githubusercontent.com/u/15063552?v=4"},"owner":{"login":"MacBox7","avatarUrl":"https://avatars0.githubusercontent.com/u/15063552?v=4"},"assignee":{"login":"Pawank221","avatarUrl":"https://avatars0.githubusercontent.com/u/31545438?v=4"},"labels":[{"name":"difficulty/newcomer","color":"65c8ff"},{"name":"type/style","color":"567c09"}]}},{"repoOwner":"coala","repoName":"corobo","updatedAtMs":1533117817000,"issue":{"htmlUrl":"https://github.com/coala/corobo/issues/586","number":586,"title":"Implement DefaultConfigurationMixin","body":"DefaultConfigurationMixin will allow configuration of plugins from config.py so that admins won't have to configure the plugin every time the bot is deployed.","comments":0,"createdAt":"2018-07-20T19:18:25Z","updatedAt":"2018-08-01T10:03:37Z","closedAt":"2018-08-01T10:03:37Z","state":"closed","user":{"login":"nvzard","avatarUrl":"https://avatars0.githubusercontent.com/u/19310512?v=4"},"owner":{"login":"nvzard","avatarUrl":"https://avatars0.githubusercontent.com/u/19310512?v=4"},"labels":[{"name":"area/ci","color":"ab04e8"},{"name":"enhancement","color":"84b6eb"}]}},{"repoOwner":"coala","repoName":"corobo","updatedAtMs":1533117817000,"issue":{"htmlUrl":"https://github.com/coala/corobo/issues/587","number":587,"title":"Adapt SpammingAlert plugin to use the DefaultConfigurationMixin","body":"","comments":0,"createdAt":"2018-07-20T19:19:04Z","updatedAt":"2018-08-01T10:03:37Z","closedAt":"2018-08-01T10:03:37Z","state":"closed","user":{"login":"nvzard","avatarUrl":"https://avatars0.githubusercontent.com/u/19310512?v=4"},"owner":{"login":"nvzard","avatarUrl":"https://avatars0.githubusercontent.com/u/19310512?v=4"},"labels":[{"name":"enhancement","color":"84b6eb"}]}},{"repoOwner":"coala","repoName":"corobo","updatedAtMs":1533431423000,"issue":{"htmlUrl":"https://github.com/coala/corobo/issues/593","number":593,"title":"Remove dependency on nltk","body":"This was an unused dependency, and the import was removed in #589\nThe entry in requirements.txt also needs to be removed.","comments":2,"createdAt":"2018-07-29T05:05:00Z","updatedAt":"2018-08-05T01:10:23Z","closedAt":null,"state":"open","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"difficulty/newcomer","color":"65c8ff"},{"name":"importance/medium","color":"ddba61"}]}},{"repoOwner":"coala","repoName":"corobo","updatedAtMs":1531129080000,"issue":{"htmlUrl":"https://github.com/coala/corobo/issues/549","number":549,"title":"[GSoC '18] Add ability to ban from all gitter rooms at once ","body":"","comments":3,"createdAt":"2018-06-07T09:13:50Z","updatedAt":"2018-07-09T09:38:00Z","closedAt":"2018-06-14T14:32:21Z","state":"closed","user":{"login":"nvzard","avatarUrl":"https://avatars0.githubusercontent.com/u/19310512?v=4"},"owner":{"login":"nvzard","avatarUrl":"https://avatars0.githubusercontent.com/u/19310512?v=4"},"labels":[{"name":"area/ci","color":"ab04e8"},{"name":"enhancement","color":"84b6eb"}]}},{"repoOwner":"coala","repoName":"corobo","updatedAtMs":1532084736000,"issue":{"htmlUrl":"https://github.com/coala/corobo/issues/555","number":555,"title":"Fix git_stats plugin, create dependency on LabHub instead of inheritance","body":"","comments":1,"createdAt":"2018-06-09T11:32:12Z","updatedAt":"2018-07-20T11:05:36Z","closedAt":"2018-07-20T11:05:36Z","state":"closed","user":{"login":"nvzard","avatarUrl":"https://avatars0.githubusercontent.com/u/19310512?v=4"},"owner":{"login":"nvzard","avatarUrl":"https://avatars0.githubusercontent.com/u/19310512?v=4"},"labels":[{"name":"area/ci","color":"ab04e8"},{"name":"enhancement","color":"84b6eb"}]}},{"repoOwner":"coala","repoName":"corobo","updatedAtMs":1531523981000,"issue":{"htmlUrl":"https://github.com/coala/corobo/issues/565","number":565,"title":"Update .coafile to take tests/*.py into consideration.","body":"difficulty/newcomer","comments":2,"createdAt":"2018-06-16T08:00:48Z","updatedAt":"2018-07-13T23:19:41Z","closedAt":"2018-07-13T23:19:41Z","state":"closed","user":{"login":"nvzard","avatarUrl":"https://avatars0.githubusercontent.com/u/19310512?v=4"},"owner":{"login":"nvzard","avatarUrl":"https://avatars0.githubusercontent.com/u/19310512?v=4"},"labels":[{"name":"difficulty/low","color":"207de5"}]}},{"repoOwner":"coala","repoName":"corobo","updatedAtMs":1532988610000,"issue":{"htmlUrl":"https://github.com/coala/corobo/issues/569","number":569,"title":"Remove need for the empty data subdirectory","body":"/data/ should be created at runtime if it is missing.","comments":4,"createdAt":"2018-06-21T01:38:59Z","updatedAt":"2018-07-30T22:10:10Z","closedAt":"2018-07-30T22:10:10Z","state":"closed","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"assignee":{"login":"nvzard","avatarUrl":"https://avatars0.githubusercontent.com/u/19310512?v=4"},"labels":[{"name":"area/config","color":"60a1db"}]}},{"repoOwner":"coala","repoName":"corobo","updatedAtMs":1532985317000,"issue":{"htmlUrl":"https://github.com/coala/corobo/issues/571","number":571,"title":"Errbot update","body":"PR to use errbot 6.0.0-alpha , so we can see what, if any, breakages are in it. we can keep rebasing that PR until it is green and errbot 6 is in beta","comments":0,"createdAt":"2018-06-22T05:44:58Z","updatedAt":"2018-07-30T21:15:17Z","closedAt":"2018-07-30T21:15:17Z","state":"closed","user":{"login":"nvzard","avatarUrl":"https://avatars0.githubusercontent.com/u/19310512?v=4"},"owner":{"login":"nvzard","avatarUrl":"https://avatars0.githubusercontent.com/u/19310512?v=4"},"labels":[{"name":"enhancement","color":"84b6eb"}]}},{"repoOwner":"coala","repoName":"corobo","updatedAtMs":1532236920000,"issue":{"htmlUrl":"https://github.com/coala/corobo/issues/509","number":509,"title":"corobo security hardening ","body":"Make all labhub commands except invite require being a member of the org , so that corobo isnt a way around bans.\n Prevent all labhub commands in private chat with the bot, optionally re-adding access for maintainers to issue labhub commands in private chat. 794be48\n Add ability to ban from all gitter rooms at once (otherwise it is very tedious) [this can be done by using api keys]\n Have corobo changes land in a staging instance before deploying to production (what keys will be different in staging?  If none, this is useless.  If some, the staging wont be testable unless labhub is connected to a different ‘dummy’ org, and then nobody will use it.)\n  Prevent corobo being used to spam a room. #359\n Potentially remove auto-invite, replacing with developer invite #322\n Slow down newcomers; force them to finish one issue first #184\n Require newcomers to find a newcomer issue to work on before they are invited to join the org, lowing our risk profile\n\nCreated from security hardening docs created by maintainers.","comments":1,"createdAt":"2018-02-17T08:33:14Z","updatedAt":"2018-07-22T05:22:00Z","closedAt":null,"state":"open","user":{"login":"meetmangukiya","avatarUrl":"https://avatars0.githubusercontent.com/u/7620533?v=4"},"owner":{"login":"meetmangukiya","avatarUrl":"https://avatars0.githubusercontent.com/u/7620533?v=4"},"labels":[{"name":"importance/critical","color":"b60205"}]}},{"repoOwner":"coala","repoName":"corobo","updatedAtMs":1533647423000,"issue":{"htmlUrl":"https://github.com/coala/corobo/issues/519","number":519,"title":"Change nevermind plugin regex","body":"Currently corobo says sorry, whenever there is nm or nevermind in a sentence(when corobo is first word), so make it a full match. It should only respond when we say corobo nm  or corobo nevermind.\nlabel: type/regex difficulty/newcomer","comments":3,"createdAt":"2018-04-02T13:37:54Z","updatedAt":"2018-08-07T13:10:23Z","closedAt":"2018-08-07T13:10:23Z","state":"closed","user":{"login":"Vamshi99","avatarUrl":"https://avatars2.githubusercontent.com/u/20969586?v=4"},"owner":{"login":"Vamshi99","avatarUrl":"https://avatars2.githubusercontent.com/u/20969586?v=4"},"assignee":{"login":"bhavya17037","avatarUrl":"https://avatars0.githubusercontent.com/u/35334585?v=4"},"labels":[{"name":"bug","color":"ee0701"},{"name":"difficulty/low","color":"207de5"}]}},{"repoOwner":"coala","repoName":"corobo","updatedAtMs":1531807740000,"issue":{"htmlUrl":"https://github.com/coala/corobo/issues/520","number":520,"title":"plugins/labhub.py difficulty_level docstring missing :","body":"In plugins/labhub.py , function difficulty_level, a comma is needed\n-False if\n+False if:","comments":3,"createdAt":"2018-04-05T05:34:05Z","updatedAt":"2018-07-17T06:09:00Z","closedAt":"2018-07-17T06:08:26Z","state":"closed","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"difficulty/newcomer","color":"65c8ff"}]}},{"repoOwner":"coala","repoName":"corobo","updatedAtMs":1531937734000,"issue":{"htmlUrl":"https://github.com/coala/corobo/issues/531","number":531,"title":"Include PyUnusedCodeBear in .coafile to remove unused imports","body":"difficulty/newcomer","comments":8,"createdAt":"2018-05-20T10:24:44Z","updatedAt":"2018-07-18T18:15:34Z","closedAt":"2018-07-18T18:15:34Z","state":"closed","user":{"login":"nvzard","avatarUrl":"https://avatars0.githubusercontent.com/u/19310512?v=4"},"owner":{"login":"nvzard","avatarUrl":"https://avatars0.githubusercontent.com/u/19310512?v=4"},"assignee":{"login":"Man-Jain","avatarUrl":"https://avatars3.githubusercontent.com/u/12700384?v=4"},"labels":[{"name":"difficulty/newcomer","color":"65c8ff"}]}},{"repoOwner":"coala","repoName":"corobo","updatedAtMs":1532199727000,"issue":{"htmlUrl":"https://github.com/coala/corobo/issues/548","number":548,"title":"Make all LabHub commands require being a member of the organisation","body":"","comments":1,"createdAt":"2018-06-06T11:19:39Z","updatedAt":"2018-07-21T19:02:07Z","closedAt":"2018-07-21T19:02:07Z","state":"closed","user":{"login":"nvzard","avatarUrl":"https://avatars0.githubusercontent.com/u/19310512?v=4"},"owner":{"login":"nvzard","avatarUrl":"https://avatars0.githubusercontent.com/u/19310512?v=4"},"labels":[{"name":"area/labhub","color":"63ccf9"},{"name":"area/security","color":"fc6805"},{"name":"enhancement","color":"84b6eb"}]}},{"repoOwner":"coala","repoName":"corobo","updatedAtMs":1533433439000,"issue":{"htmlUrl":"https://github.com/coala/corobo/issues/358","number":358,"title":"Limit pitchfork command to developers","body":"#36 requested \"When issued by an authorized person to cobot,..\" , however that bit wasnt done.\nThis needs to be fixed before GCI or there will be mayhem when this easter egg is found.","comments":7,"createdAt":"2017-11-22T13:56:31Z","updatedAt":"2018-08-05T01:43:59Z","closedAt":null,"state":"open","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"assignee":{"login":"nvzard","avatarUrl":"https://avatars0.githubusercontent.com/u/19310512?v=4"},"labels":[{"name":"area/security","color":"fc6805"},{"name":"area/ui","color":"dd02cf"},{"name":"difficulty/low","color":"207de5"},{"name":"importance/critical","color":"b60205"},{"name":"status/blocked","color":"b60205"}]}},{"repoOwner":"coala","repoName":"corobo","updatedAtMs":1533654811000,"issue":{"htmlUrl":"https://github.com/coala/corobo/issues/359","number":359,"title":"Limit test commands to only operate in test rooms","body":"In the same vein as #358 , commands like corobo render test should not be possible on the main rooms, even not in offtopic rooms.","comments":7,"createdAt":"2017-11-22T14:12:57Z","updatedAt":"2018-08-07T15:13:31Z","closedAt":null,"state":"open","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"area/security","color":"fc6805"},{"name":"area/ui","color":"dd02cf"},{"name":"difficulty/medium","color":"0052cc"},{"name":"importance/critical","color":"b60205"}]}},{"repoOwner":"coala","repoName":"corobo","updatedAtMs":1533435506000,"issue":{"htmlUrl":"https://github.com/coala/corobo/issues/380","number":380,"title":"Move constants into config using get_configuration_template","body":"plugins/constants.py should be removed, replaced with config variables defined using get_configuration_template\nsee http://errbot.io/en/latest/user_guide/plugin_development/configuration.html","comments":2,"createdAt":"2017-11-26T12:43:37Z","updatedAt":"2018-08-05T02:18:26Z","closedAt":null,"state":"open","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"assignee":{"login":"nvzard","avatarUrl":"https://avatars0.githubusercontent.com/u/19310512?v=4"},"labels":[{"name":"area/config","color":"60a1db"},{"name":"difficulty/low","color":"207de5"},{"name":"importance/medium","color":"ddba61"}]}},{"repoOwner":"coala","repoName":"corobo","updatedAtMs":1533435126000,"issue":{"htmlUrl":"https://github.com/coala/corobo/issues/381","number":381,"title":"answers plugin: Should use get_configuration_template","body":"Replace environment variables with config variables\nsee http://errbot.io/en/latest/user_guide/plugin_development/configuration.html","comments":1,"createdAt":"2017-11-26T12:49:43Z","updatedAt":"2018-08-05T02:12:06Z","closedAt":null,"state":"open","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"assignee":{"login":"nvzard","avatarUrl":"https://avatars0.githubusercontent.com/u/19310512?v=4"},"labels":[{"name":"area/config","color":"60a1db"},{"name":"difficulty/low","color":"207de5"},{"name":"importance/low","color":"f9d0c4"},{"name":"importance/medium","color":"ddba61"}]}},{"repoOwner":"coala","repoName":"corobo","updatedAtMs":1533435135000,"issue":{"htmlUrl":"https://github.com/coala/corobo/issues/383","number":383,"title":"wolfram_alpha plugin: Should use get_configuration_template","body":"Replace environment variables with config variables\nsee http://errbot.io/en/latest/user_guide/plugin_development/configuration.html","comments":2,"createdAt":"2017-11-26T12:49:45Z","updatedAt":"2018-08-05T02:12:15Z","closedAt":null,"state":"open","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"assignee":{"login":"nvzard","avatarUrl":"https://avatars0.githubusercontent.com/u/19310512?v=4"},"labels":[{"name":"area/config","color":"60a1db"},{"name":"area/labhub","color":"63ccf9"},{"name":"difficulty/low","color":"207de5"},{"name":"importance/low","color":"f9d0c4"},{"name":"importance/medium","color":"ddba61"}]}},{"repoOwner":"coala","repoName":"corobo","updatedAtMs":1532828295000,"issue":{"htmlUrl":"https://github.com/coala/corobo/issues/433","number":433,"title":"SSL problem with corobo builds","body":"Travis CI and Semaphore CI are both showing errors like\nStarting new HTTP connection (1): docs.coala.io\nFrom cffi callback <function _verify_callback at 0x7f097d2b89d8>:\nTraceback (most recent call last):\n  File \"/home/travis/virtualenv/python3.6.3/lib/python3.6/site-packages/OpenSSL/SSL.py\", line 313, in wrapper\n    _lib.X509_up_ref(x509)\nAttributeError: module 'lib' has no attribute 'X509_up_ref'\n\nVery likely a problem in the versions of the dependencies used by corobo, as Python 3.6.3 builds of coala/coala do not have a problem.\nVery likely to be the recent release of pyopenssl 17.5.0","comments":6,"createdAt":"2017-12-01T13:03:08Z","updatedAt":"2018-07-29T01:38:15Z","closedAt":"2018-07-29T01:38:15Z","state":"closed","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"bug","color":"ee0701"},{"name":"importance/high","color":"e99695"},{"name":"upstream","color":"b60205"}]}},{"repoOwner":"coala","repoName":"corobo","updatedAtMs":1533429176000,"issue":{"htmlUrl":"https://github.com/coala/corobo/issues/441","number":441,"title":"Repeated invite message ","body":"Please refer to https://gitter.im/coala/coala?at=5a2198e9540c78242d7146a9 for more information\ndifficulty/newcomer\nOpened by @RaiVaibhav at Gitter","comments":5,"createdAt":"2017-12-01T18:08:14Z","updatedAt":"2018-08-05T00:32:56Z","closedAt":"2018-08-05T00:30:32Z","state":"closed","user":{"login":"co-robo","avatarUrl":"https://avatars2.githubusercontent.com/u/29058257?v=4"},"owner":{"login":"co-robo","avatarUrl":"https://avatars2.githubusercontent.com/u/29058257?v=4"},"assignee":{"login":"nvzard","avatarUrl":"https://avatars0.githubusercontent.com/u/19310512?v=4"},"labels":[{"name":"bug","color":"ee0701"},{"name":"difficulty/medium","color":"0052cc"},{"name":"importance/medium","color":"ddba61"}]}},{"repoOwner":"coala","repoName":"corobo","updatedAtMs":1531092833000,"issue":{"htmlUrl":"https://github.com/coala/corobo/issues/462","number":462,"title":"Ban user from using corobo","body":"A plugin which removes a user from organisation members, restrict that user from using corobo. Also if possible ban user from all our gitter channels. Limit this command access to maintainers and this command should not be allowed in private chat.\nlabel: difficulty/medium plugin proposal","comments":3,"createdAt":"2017-12-03T07:23:11Z","updatedAt":"2018-07-08T23:33:53Z","closedAt":"2018-07-08T23:33:53Z","state":"closed","user":{"login":"Vamshi99","avatarUrl":"https://avatars2.githubusercontent.com/u/20969586?v=4"},"owner":{"login":"Vamshi99","avatarUrl":"https://avatars2.githubusercontent.com/u/20969586?v=4"},"assignee":{"login":"nvzard","avatarUrl":"https://avatars0.githubusercontent.com/u/19310512?v=4"},"labels":[{"name":"difficulty/medium","color":"0052cc"},{"name":"importance/high","color":"e99695"},{"name":"plugin proposal","color":"0e8a16"}]}},{"repoOwner":"coala","repoName":"corobo","updatedAtMs":1533654484000,"issue":{"htmlUrl":"https://github.com/coala/corobo/issues/306","number":306,"title":"Only allow GCI students to claim issues with \"initiative/gci\" label","body":"How to determine who are GCI students TBD.\nOpened by @jayvdb at gitter/coala/gci","comments":17,"createdAt":"2017-10-18T12:41:13Z","updatedAt":"2018-08-07T15:08:04Z","closedAt":null,"state":"open","user":{"login":"co-robo","avatarUrl":"https://avatars2.githubusercontent.com/u/29058257?v=4"},"owner":{"login":"co-robo","avatarUrl":"https://avatars2.githubusercontent.com/u/29058257?v=4"},"assignee":{"login":"EverWinter23","avatarUrl":"https://avatars0.githubusercontent.com/u/21227016?v=4"},"labels":[{"name":"area/labhub","color":"63ccf9"},{"name":"difficulty/high","color":"b319e7"},{"name":"importance/critical","color":"b60205"}]}},{"repoOwner":"coala","repoName":"corobo","updatedAtMs":1533470781000,"issue":{"htmlUrl":"https://github.com/coala/corobo/issues/317","number":317,"title":"Issue warning whenever someone is mentioned using `@` if the target is not a member of the org","body":"difficulty/low initiative/gci\nOpened by @jayvdb at gitter/coala/coala","comments":6,"createdAt":"2017-10-28T04:56:00Z","updatedAt":"2018-08-05T12:06:21Z","closedAt":null,"state":"open","user":{"login":"co-robo","avatarUrl":"https://avatars2.githubusercontent.com/u/29058257?v=4"},"owner":{"login":"co-robo","avatarUrl":"https://avatars2.githubusercontent.com/u/29058257?v=4"},"labels":[{"name":"area/security","color":"fc6805"},{"name":"difficulty/low","color":"207de5"},{"name":"importance/high","color":"e99695"}]}},{"repoOwner":"coala","repoName":"corobo","updatedAtMs":1532232140000,"issue":{"htmlUrl":"https://github.com/coala/corobo/issues/331","number":331,"title":"Add .editorconfig file","body":"Our style follows the example given on http://editorconfig.org/ for Python and YAML\nlabel: difficulty/low initiatives/gci\nOpened by @mohitkyadav at Gitter","comments":4,"createdAt":"2017-11-11T16:23:39Z","updatedAt":"2018-07-22T04:02:20Z","closedAt":null,"state":"open","user":{"login":"co-robo","avatarUrl":"https://avatars2.githubusercontent.com/u/29058257?v=4"},"owner":{"login":"co-robo","avatarUrl":"https://avatars2.githubusercontent.com/u/29058257?v=4"},"assignee":{"login":"SubbulakshmiRS","avatarUrl":"https://avatars3.githubusercontent.com/u/32260751?v=4"},"labels":[{"name":"difficulty/low","color":"207de5"},{"name":"status/blocked","color":"b60205"}]}},{"repoOwner":"coala","repoName":"community","updatedAtMs":1533564335000,"issue":{"htmlUrl":"https://github.com/coala/community/issues/175","number":175,"title":"Reach 100% test coverage","body":"This will take a while, but we can break it up into smaller achievable sub-tasks.","comments":0,"createdAt":"2018-08-06T14:05:35Z","updatedAt":"2018-08-06T14:05:35Z","closedAt":null,"state":"open","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[]}},{"repoOwner":"coala","repoName":"community","updatedAtMs":1532792264000,"issue":{"htmlUrl":"https://github.com/coala/community/issues/172","number":172,"title":".travis.yml: Disabe AUTH=true job for PRs ","body":"Travis PR builds do not get tokens, so we have effectively two identical jobs running for PRs.  And AUTH=true is confusing as it suggests some auth might exist.\nWe do want two jobs running for builds on forks, and for master builds.\nSee coala core .travis.yml for how to disable jobs on PRs","comments":0,"createdAt":"2018-07-28T15:34:10Z","updatedAt":"2018-07-28T15:37:44Z","closedAt":null,"state":"open","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"area/ci","color":"4c95ad"},{"name":"bug","color":"ee0701"}]}},{"repoOwner":"coala","repoName":"community","updatedAtMs":1532837735000,"issue":{"htmlUrl":"https://github.com/coala/community/issues/173","number":173,"title":"Analyze and improve meta-review system algorithm","body":"#143 provides a blueprint for future enhancement. It is now using a very naive iterative algorithm to calculate scores.\nSee ranking list http://community.coala.io/meta-review/\nSee discussion around algorithm: https://gitter.im/coala/community?at=5b5d391c3cc39566072cb6f8 and discussions following that.","comments":0,"createdAt":"2018-07-29T04:12:10Z","updatedAt":"2018-07-29T04:15:35Z","closedAt":null,"state":"open","user":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4"},"owner":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4"},"labels":[{"name":"enhancement","color":"84b6eb"}]}},{"repoOwner":"coala","repoName":"community","updatedAtMs":1531978792000,"issue":{"htmlUrl":"https://github.com/coala/community/issues/163","number":163,"title":"Add PyPluralNamingBear","body":"For ensuring plural names for variables that represent more than one items","comments":0,"createdAt":"2018-07-17T10:11:16Z","updatedAt":"2018-07-19T05:39:52Z","closedAt":"2018-07-19T05:39:52Z","state":"closed","user":{"login":"virresh","avatarUrl":"https://avatars0.githubusercontent.com/u/10978108?v=4"},"owner":{"login":"virresh","avatarUrl":"https://avatars0.githubusercontent.com/u/10978108?v=4"},"labels":[{"name":"bug","color":"ee0701"},{"name":"enhancement","color":"84b6eb"}]}},{"repoOwner":"coala","repoName":"community","updatedAtMs":1533393130000,"issue":{"htmlUrl":"https://github.com/coala/community/issues/165","number":165,"title":"gitorg.py: Unused variable","body":"Pyflakes error report =>\n./gci/gitorg.py:55: local variable 'e' is assigned to but never used\n\ndifficulty/newcomer","comments":2,"createdAt":"2018-07-19T11:42:32Z","updatedAt":"2018-08-04T14:32:10Z","closedAt":"2018-08-04T14:32:10Z","state":"closed","user":{"login":"MacBox7","avatarUrl":"https://avatars0.githubusercontent.com/u/15063552?v=4"},"owner":{"login":"MacBox7","avatarUrl":"https://avatars0.githubusercontent.com/u/15063552?v=4"},"assignee":{"login":"cypher-naman","avatarUrl":"https://avatars1.githubusercontent.com/u/36116312?v=4"},"labels":[{"name":"difficulty/newcomer","color":"65C8FF"},{"name":"type/style","color":"93f486"}]}},{"repoOwner":"coala","repoName":"community","updatedAtMs":1532804283000,"issue":{"htmlUrl":"https://github.com/coala/community/issues/167","number":167,"title":"import_contributors_data is failing","body":"File \"/home/travis/build/coala/community/data/tests/test_management_commands.py\", line 13, in setUpTestData\n    call_command('import_contributors_data')\n  File \"/home/travis/virtualenv/python3.6.3/lib/python3.6/site-packages/django/core/management/__init__.py\", line 131, in call_command\n    return command.execute(*args, **defaults)\n  File \"/home/travis/virtualenv/python3.6.3/lib/python3.6/site-packages/django/core/management/base.py\", line 330, in execute\n    output = self.handle(*args, **options)\n  File \"/home/travis/build/coala/community/data/management/commands/import_contributors_data.py\", line 13, in handle\n    for contributor in self.CONTRIBUTORS():\nTypeError: 'NoneType' object is not iterable\n\nThe error is happenning while executing get_contrib_data method; requests.get method in the line 14 is not returning any response, that's why the except statement is giving following error and returning None and we are getting TypeError: 'NoneType' object is not iterable.\nSSLError: HTTPSConnectionPool(host='webservices.coala.io', port=443): Max retries exceeded with url: /contrib/ (Caused by SSLError(SSLError(1, '[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed (_ssl.c:645)'),))","comments":0,"createdAt":"2018-07-19T17:05:21Z","updatedAt":"2018-07-28T18:58:03Z","closedAt":"2018-07-28T18:58:03Z","state":"closed","user":{"login":"sks444","avatarUrl":"https://avatars0.githubusercontent.com/u/22263040?v=4"},"owner":{"login":"sks444","avatarUrl":"https://avatars0.githubusercontent.com/u/22263040?v=4"},"labels":[{"name":"bug","color":"ee0701"}]}},{"repoOwner":"coala","repoName":"community","updatedAtMs":1532791043000,"issue":{"htmlUrl":"https://github.com/coala/community/issues/171","number":171,"title":"Create netlify.toml","body":"Currently netlify build command is URL=\"http://community.coala.io/\" .ci/build.sh and it publishes public","comments":1,"createdAt":"2018-07-28T14:42:19Z","updatedAt":"2018-07-28T15:17:23Z","closedAt":null,"state":"open","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"assignee":{"login":"sks444","avatarUrl":"https://avatars0.githubusercontent.com/u/22263040?v=4"},"labels":[{"name":"difficulty/low","color":"207de5"},{"name":"importance/low","color":"9cc6fc"}]}},{"repoOwner":"coala","repoName":"community","updatedAtMs":1532836277000,"issue":{"htmlUrl":"https://github.com/coala/community/issues/142","number":142,"title":"Implement meta review scoring & ranking system","body":"Data needs to be fetched from https://coala.github.io/gh-board/issues.json processed and stored in the database.\nReaction data needs to be analyzed for scoring and ranking.\nThis is part of GSoC'18 project meta-review.\nSee more about the proposed meta-review system: https://github.com/coala/cEPs/blob/master/cEP-0019.md\nPlease assign this issue to me. ;)","comments":0,"createdAt":"2018-06-03T12:44:17Z","updatedAt":"2018-07-29T03:51:17Z","closedAt":"2018-07-29T03:51:17Z","state":"closed","user":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4"},"owner":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4"},"labels":[{"name":"area/ci","color":"4c95ad"},{"name":"enhancement","color":"84b6eb"}]}},{"repoOwner":"coala","repoName":"community","updatedAtMs":1532578110000,"issue":{"htmlUrl":"https://github.com/coala/community/issues/150","number":150,"title":"Create tests for openhub app","body":"","comments":0,"createdAt":"2018-06-12T09:10:08Z","updatedAt":"2018-07-26T04:08:30Z","closedAt":null,"state":"open","user":{"login":"sks444","avatarUrl":"https://avatars0.githubusercontent.com/u/22263040?v=4"},"owner":{"login":"sks444","avatarUrl":"https://avatars0.githubusercontent.com/u/22263040?v=4"},"labels":[{"name":"area/tests","color":"7b68dd"}]}},{"repoOwner":"coala","repoName":"community","updatedAtMs":1531405099000,"issue":{"htmlUrl":"https://github.com/coala/community/issues/161","number":161,"title":"Sync gitignore list","body":"See https://travis-ci.org/coala/community/jobs/401176906#L496\nmoban check failed.","comments":0,"createdAt":"2018-07-07T13:29:14Z","updatedAt":"2018-07-12T14:18:19Z","closedAt":"2018-07-12T14:18:19Z","state":"closed","user":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4"},"owner":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4"},"assignee":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4"},"labels":[{"name":"bug","color":"ee0701"}]}},{"repoOwner":"coala","repoName":"community","updatedAtMs":1533565454000,"issue":{"htmlUrl":"https://github.com/coala/community/issues/129","number":129,"title":"Add jinja bear to .coafiles","body":"The templates are in jinja format.\nWe have a bear for those.","comments":0,"createdAt":"2018-04-19T03:09:08Z","updatedAt":"2018-08-06T14:24:14Z","closedAt":null,"state":"open","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"difficulty/low","color":"207de5"},{"name":"importance/medium","color":"ccf945"},{"name":"status/blocked","color":"d93f0b"}]}},{"repoOwner":"coala","repoName":"community","updatedAtMs":1531267250000,"issue":{"htmlUrl":"https://github.com/coala/community/issues/131","number":131,"title":"Travis deploy broken","body":"#107 broke the deploy process.","comments":2,"createdAt":"2018-05-04T06:34:17Z","updatedAt":"2018-07-11T00:00:50Z","closedAt":null,"state":"open","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"assignee":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"area/ci","color":"4c95ad"},{"name":"difficulty/medium","color":"0052cc"},{"name":"importance/medium","color":"ccf945"},{"name":"status/STALE","color":"ededed"}]}},{"repoOwner":"coala","repoName":"community","updatedAtMs":1532864231000,"issue":{"htmlUrl":"https://github.com/coala/community/issues/137","number":137,"title":"Add teams to Contributor model","body":"After https://gitlab.com/coala/landing/merge_requests/46 is merged, we need to add the teams field to our Contributor model.","comments":0,"createdAt":"2018-05-27T02:36:56Z","updatedAt":"2018-07-29T11:37:11Z","closedAt":"2018-07-29T11:37:11Z","state":"closed","user":{"login":"sks444","avatarUrl":"https://avatars0.githubusercontent.com/u/22263040?v=4"},"owner":{"login":"sks444","avatarUrl":"https://avatars0.githubusercontent.com/u/22263040?v=4"},"labels":[]}},{"repoOwner":"coala","repoName":"community","updatedAtMs":1533185915000,"issue":{"htmlUrl":"https://github.com/coala/community/issues/83","number":83,"title":"Import GitHub and GitLab mrs data","body":"When webservices will be up it will provide all the mrs of coala on GitHub and GitLab through an API,\nthat should be imported here to build the gamification app.","comments":1,"createdAt":"2018-02-24T10:23:08Z","updatedAt":"2018-08-02T04:58:35Z","closedAt":"2018-08-02T04:58:35Z","state":"closed","user":{"login":"sks444","avatarUrl":"https://avatars0.githubusercontent.com/u/22263040?v=4"},"owner":{"login":"sks444","avatarUrl":"https://avatars0.githubusercontent.com/u/22263040?v=4"},"assignee":{"login":"sks444","avatarUrl":"https://avatars0.githubusercontent.com/u/22263040?v=4"},"labels":[{"name":"difficulty/medium","color":"0052cc"}]}},{"repoOwner":"coala","repoName":"community","updatedAtMs":1531128099000,"issue":{"htmlUrl":"https://github.com/coala/community/issues/84","number":84,"title":"Import messages by newcomers on gitter","body":"We can import data from Gitter Developer API which can be useful in creating metrics for Newcomer metrics and gamification project.","comments":4,"createdAt":"2018-02-24T10:34:33Z","updatedAt":"2018-07-09T09:21:39Z","closedAt":null,"state":"open","user":{"login":"sks444","avatarUrl":"https://avatars0.githubusercontent.com/u/22263040?v=4"},"owner":{"login":"sks444","avatarUrl":"https://avatars0.githubusercontent.com/u/22263040?v=4"},"labels":[{"name":"difficulty/medium","color":"0052cc"}]}},{"repoOwner":"coala","repoName":"community","updatedAtMs":1531440042000,"issue":{"htmlUrl":"https://github.com/coala/community/issues/97","number":97,"title":"Add [commit] section in .coafile","body":"see .coafile file of coala/coala or coala/coala-bears for more","comments":3,"createdAt":"2018-03-12T03:14:36Z","updatedAt":"2018-07-13T00:00:42Z","closedAt":null,"state":"open","user":{"login":"sks444","avatarUrl":"https://avatars0.githubusercontent.com/u/22263040?v=4"},"owner":{"login":"sks444","avatarUrl":"https://avatars0.githubusercontent.com/u/22263040?v=4"},"assignee":{"login":"anctartica","avatarUrl":"https://avatars0.githubusercontent.com/u/7020962?v=4"},"labels":[{"name":"difficulty/low","color":"207de5"},{"name":"enhancement","color":"84b6eb"},{"name":"importance/medium","color":"ccf945"},{"name":"status/STALE","color":"ededed"}]}},{"repoOwner":"coala","repoName":"community","updatedAtMs":1532644303000,"issue":{"htmlUrl":"https://github.com/coala/community/issues/8","number":8,"title":"Add Travis build URL to website","body":"As the website has to cater with unexpected data , the website build scripts will be permissive, logging errors rather than failing.\nCurrently the Travis build logs are the best spot for logging.","comments":1,"createdAt":"2017-12-01T05:30:23Z","updatedAt":"2018-07-26T22:31:43Z","closedAt":null,"state":"open","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"difficulty/low","color":"207de5"}]}},{"repoOwner":"coala","repoName":"gh-board","updatedAtMs":1533649969000,"issue":{"htmlUrl":"https://github.com/coala/gh-board/issues/151","number":151,"title":"Enable source map in production","body":"Real production apps might not want this, but we want this to ease reviewing of MR preview and easier reporting of bugs in general.","comments":1,"createdAt":"2018-08-07T13:47:15Z","updatedAt":"2018-08-07T13:52:49Z","closedAt":null,"state":"open","user":{"login":"blazeu","avatarUrl":"https://avatars0.githubusercontent.com/u/1438859?v=4"},"owner":{"login":"blazeu","avatarUrl":"https://avatars0.githubusercontent.com/u/1438859?v=4"},"labels":[{"name":"importance/medium","color":"65f23e"}]}},{"repoOwner":"coala","repoName":"gh-board","updatedAtMs":1533351316000,"issue":{"htmlUrl":"https://github.com/coala/gh-board/issues/148","number":148,"title":"package.json: tab is mistakenly used","body":"gh-board/package.json\n    \n    \n         Line 110\n      in\n      3638063\n    \n    \n    \n    \n\n        \n          \n           ]","comments":0,"createdAt":"2018-08-04T02:55:01Z","updatedAt":"2018-08-04T02:55:16Z","closedAt":null,"state":"open","user":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4"},"owner":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4"},"labels":[{"name":"importance/medium","color":"65f23e"}]}},{"repoOwner":"coala","repoName":"gh-board","updatedAtMs":1533428783000,"issue":{"htmlUrl":"https://github.com/coala/gh-board/issues/149","number":149,"title":"meta-review ignore content has wrong regular expression","body":"gh-board/src/github-client.js\n    \n    \n         Line 226\n      in\n      d1a7ea3\n    \n    \n    \n    \n\n        \n          \n           const ignoreContent = '@gitmate-bot @rultor /^(unack|ack)/g'; \n        \n    \n  \n\n\n\n  \n    \n      gh-board/script/fetch-issues.js\n    \n    \n         Line 34\n      in\n      d1a7ea3\n    \n    \n    \n    \n\n        \n          \n           '@gitmate-bot @rultor /^(unack|ack)/g'; \n        \n    \n  \n\n\nShould be\n^(ack|unack)\ninstead.\nSee difference:\n> 'ack 123'.match(/^(ack|unack)/g)\n[ 'ack' ]\n> 'ack 123'.match('/^(ack|unack)/g')\nnull\n> 'ack 123'.match('^(ack|unack)')\n[ 'ack', 'ack', index: 0, input: 'ack 123' ]","comments":1,"createdAt":"2018-08-04T07:08:57Z","updatedAt":"2018-08-05T00:26:23Z","closedAt":"2018-08-05T00:26:23Z","state":"closed","user":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4"},"owner":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4"},"assignee":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4"},"labels":[{"name":"enhancement","color":"84b6eb"},{"name":"importance/medium","color":"65f23e"}]}},{"repoOwner":"coala","repoName":"gh-board","updatedAtMs":1533139023000,"issue":{"htmlUrl":"https://github.com/coala/gh-board/issues/141","number":141,"title":"Switch from npm to yarn","body":"Now we are using npm, but facing some problems:\n\n\nWe are committing package-lock.json. If a contributor uses npm@6, there will be lots of carets before version number \"^1.0.2\". However, if another contributor uses npm@5, there will not be carets. See npm/npm#20434 (comment).\n\n\nAn issue regarding non-optional packages. See #87","comments":0,"createdAt":"2018-08-01T15:53:57Z","updatedAt":"2018-08-01T15:57:03Z","closedAt":null,"state":"open","user":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4"},"owner":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4"},"labels":[{"name":"type/feature","color":"0052cc"}]}},{"repoOwner":"coala","repoName":"gh-board","updatedAtMs":1533142116000,"issue":{"htmlUrl":"https://github.com/coala/gh-board/issues/143","number":143,"title":"Use released version of Level","body":"Currently depending on \"level-js\": \"philschatz/level.js#master\" , which has one extra commit from a branch 108 commits behind master of https://github.com/Level/level-js\nThe latest released version of level-js is quite different, and likely includes the needed configurability which that extra commit provided.","comments":1,"createdAt":"2018-08-01T16:10:02Z","updatedAt":"2018-08-01T16:48:36Z","closedAt":null,"state":"open","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"area/dependencies","color":"ef88a2"},{"name":"type/feature","color":"0052cc"}]}},{"repoOwner":"coala","repoName":"gh-board","updatedAtMs":1533274086000,"issue":{"htmlUrl":"https://github.com/coala/gh-board/issues/145","number":145,"title":"Use released version of etherpad-lite-client-js","body":"We have been given a green light at tomassedovic/etherpad-lite-client-js#15 to push a necessary patch into upstream.\nOnce that is released, the dependency can be updated to point to the new release.","comments":0,"createdAt":"2018-08-03T05:28:06Z","updatedAt":"2018-08-03T05:28:06Z","closedAt":null,"state":"open","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"upstream","color":"6ded77"}]}},{"repoOwner":"coala","repoName":"gh-board","updatedAtMs":1533349800000,"issue":{"htmlUrl":"https://github.com/coala/gh-board/issues/146","number":146,"title":"Implement ability to do meta-reviews directly on gh-board","body":"s.t. users can add/remove reactions directly on gh-board.","comments":0,"createdAt":"2018-08-04T02:29:56Z","updatedAt":"2018-08-04T02:30:00Z","closedAt":null,"state":"open","user":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4"},"owner":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4"},"labels":[{"name":"enhancement","color":"84b6eb"}]}},{"repoOwner":"coala","repoName":"gh-board","updatedAtMs":1533261552000,"issue":{"htmlUrl":"https://github.com/coala/gh-board/issues/129","number":129,"title":"Setup test framework","body":"Current integration test relies on selenium. The test is incomplete and unstable, failing occasionally.\nIt would be better to set up unit tests/snapshot tests.","comments":2,"createdAt":"2018-07-28T14:51:01Z","updatedAt":"2018-08-03T01:59:12Z","closedAt":"2018-08-03T01:59:12Z","state":"closed","user":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4"},"owner":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4"},"labels":[{"name":"importance/medium","color":"65f23e"}]}},{"repoOwner":"coala","repoName":"gh-board","updatedAtMs":1532877777000,"issue":{"htmlUrl":"https://github.com/coala/gh-board/issues/131","number":131,"title":"Dashboard doesnt refresh after login","body":"If I load the dashboard without a token, it doesnt show \"Loading list of  repositories\"\nIf I add the token, my repositories do not appear.\nIf I reload the dashboard, they appear.","comments":1,"createdAt":"2018-07-29T05:24:40Z","updatedAt":"2018-07-29T15:22:57Z","closedAt":"2018-07-29T15:22:57Z","state":"closed","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"assignee":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4"},"labels":[{"name":"bug","color":"ee0701"},{"name":"enhancement","color":"84b6eb"}]}},{"repoOwner":"coala","repoName":"gh-board","updatedAtMs":1532924283000,"issue":{"htmlUrl":"https://github.com/coala/gh-board/issues/133","number":133,"title":"Sign Out doesnt work","body":"Signing out seems to have no effect at all.","comments":4,"createdAt":"2018-07-29T09:00:04Z","updatedAt":"2018-07-30T04:18:03Z","closedAt":null,"state":"open","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"bug","color":"ee0701"}]}},{"repoOwner":"coala","repoName":"gh-board","updatedAtMs":1532864887000,"issue":{"htmlUrl":"https://github.com/coala/gh-board/issues/134","number":134,"title":"dashboard routing not working","body":"https://coala.github.io/gh-board/#dashboard should be redirected to https://coala.github.io/gh-board/#/, but it is not.","comments":0,"createdAt":"2018-07-29T10:12:55Z","updatedAt":"2018-07-29T11:48:07Z","closedAt":"2018-07-29T11:48:07Z","state":"closed","user":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4"},"owner":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4"},"assignee":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4"},"labels":[]}},{"repoOwner":"coala","repoName":"gh-board","updatedAtMs":1532868529000,"issue":{"htmlUrl":"https://github.com/coala/gh-board/issues/136","number":136,"title":"app.less: Remove unused .game-modal","body":"gh-board/style/app.less\n    \n    \n        Lines 291 to 299\n      in\n      3233746\n    \n    \n    \n    \n\n        \n          \n           .game-modal { \n        \n\n        \n          \n             .modal-content { \n        \n\n        \n          \n               width: 720px; \n        \n\n        \n          \n               .game-wrapper { \n        \n\n        \n          \n                 width: 690px; \n        \n\n        \n          \n                 height: 534px; \n        \n\n        \n          \n               } \n        \n\n        \n          \n             } \n        \n\n        \n          \n           } \n        \n    \n  \n\n can be removed","comments":0,"createdAt":"2018-07-29T12:46:03Z","updatedAt":"2018-07-29T12:48:49Z","closedAt":null,"state":"open","user":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4"},"owner":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4"},"labels":[{"name":"enhancement","color":"84b6eb"},{"name":"importance/medium","color":"65f23e"}]}},{"repoOwner":"coala","repoName":"gh-board","updatedAtMs":1533355388000,"issue":{"htmlUrl":"https://github.com/coala/gh-board/issues/137","number":137,"title":"router.jsx  'replace' is defined but never used ","body":"/home/travis/build/coala/gh-board/src/router.jsx\n30:22  warning  'replace' is defined but never used  no-unused-vars","comments":4,"createdAt":"2018-07-29T14:27:17Z","updatedAt":"2018-08-04T04:03:08Z","closedAt":null,"state":"open","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"assignee":{"login":"ANURADHAJHA99","avatarUrl":"https://avatars2.githubusercontent.com/u/34815869?v=4"},"labels":[{"name":"difficulty/newcomer","color":"33a7bf"}]}},{"repoOwner":"coala","repoName":"gh-board","updatedAtMs":1533254443000,"issue":{"htmlUrl":"https://github.com/coala/gh-board/issues/138","number":138,"title":"Refactor pre-fetch using newly built graphql client wrapper","body":"c.f. #67 (comment)","comments":0,"createdAt":"2018-07-29T14:33:06Z","updatedAt":"2018-08-03T00:00:43Z","closedAt":"2018-08-03T00:00:43Z","state":"closed","user":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4"},"owner":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4"},"labels":[{"name":"enhancement","color":"84b6eb"},{"name":"importance/medium","color":"65f23e"}]}},{"repoOwner":"coala","repoName":"gh-board","updatedAtMs":1533263356000,"issue":{"htmlUrl":"https://github.com/coala/gh-board/issues/140","number":140,"title":"Netlify should fail if issues.json was not created","body":"Netlify currently runs script/build.sh, and deploys .\nCreate a netlify.toml to build and do basic sanity checks.","comments":0,"createdAt":"2018-08-01T01:56:52Z","updatedAt":"2018-08-03T02:29:16Z","closedAt":"2018-08-03T02:29:16Z","state":"closed","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"assignee":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4"},"labels":[{"name":"importance/medium","color":"65f23e"},{"name":"type/feature","color":"0052cc"}]}},{"repoOwner":"coala","repoName":"gh-board","updatedAtMs":1532679851000,"issue":{"htmlUrl":"https://github.com/coala/gh-board/issues/110","number":110,"title":"Write new issue on gh-board","body":"The new issue link currently goes to https://github.com/coala/gh-board/issues/new\nA simple popup would make creating issues easy, and could include a button to author on github instead.","comments":0,"createdAt":"2018-07-27T08:24:11Z","updatedAt":"2018-07-27T08:24:11Z","closedAt":null,"state":"open","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"type/feature","color":"0052cc"}]}},{"repoOwner":"coala","repoName":"gh-board","updatedAtMs":1532680106000,"issue":{"htmlUrl":"https://github.com/coala/gh-board/issues/111","number":111,"title":"Show estimate of local cache size","body":"The gear icon has the option of clearing the local cache.\nIt would be nice to see how big it is.","comments":0,"createdAt":"2018-07-27T08:26:46Z","updatedAt":"2018-07-27T08:28:26Z","closedAt":null,"state":"open","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"enhancement","color":"84b6eb"},{"name":"type/feature","color":"0052cc"}]}},{"repoOwner":"coala","repoName":"gh-board","updatedAtMs":1532680589000,"issue":{"htmlUrl":"https://github.com/coala/gh-board/issues/112","number":112,"title":"PR view: show number of commits in PR","body":"Ideally let the user hover over each commit and view the commit messages","comments":0,"createdAt":"2018-07-27T08:34:03Z","updatedAt":"2018-07-27T08:36:29Z","closedAt":null,"state":"open","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"bug","color":"ee0701"},{"name":"enhancement","color":"84b6eb"},{"name":"type/feature","color":"0052cc"}]}},{"repoOwner":"coala","repoName":"gh-board","updatedAtMs":1532680840000,"issue":{"htmlUrl":"https://github.com/coala/gh-board/issues/113","number":113,"title":"PR task list not editable","body":"When a PR has a task list in the initial pull request template, it is shown on the top row of the card , as a popup with real checkboxes.\nIt looks like the user can check the boxes and it would save.\nThis doesnt happen.\nAlso the task list popup renders the coala pull request template badly.","comments":0,"createdAt":"2018-07-27T08:38:07Z","updatedAt":"2018-07-27T08:40:40Z","closedAt":null,"state":"open","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"type/feature","color":"0052cc"}]}},{"repoOwner":"coala","repoName":"gh-board","updatedAtMs":1532681388000,"issue":{"htmlUrl":"https://github.com/coala/gh-board/issues/114","number":114,"title":"Add link to PR /files tab","body":"Instead of loading the PR discussion tab, it is helpful to jump straight to the /files tab.","comments":0,"createdAt":"2018-07-27T08:48:02Z","updatedAt":"2018-07-27T08:49:48Z","closedAt":null,"state":"open","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"enhancement","color":"84b6eb"},{"name":"type/feature","color":"0052cc"}]}},{"repoOwner":"coala","repoName":"gh-board","updatedAtMs":1532681414000,"issue":{"htmlUrl":"https://github.com/coala/gh-board/issues/115","number":115,"title":"Add link on PRs to fork's branch","body":"The username and fork branch name are helpful for fetching a local copy in order inspect/test it.\nAlso if the fork or branch is missing, a big scary icon is needed to show the PR is possibly broken and cant be updated.\n(Similar to the 'unmergable' yellow icon)","comments":0,"createdAt":"2018-07-27T08:50:10Z","updatedAt":"2018-07-27T08:50:14Z","closedAt":null,"state":"open","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"enhancement","color":"84b6eb"}]}},{"repoOwner":"coala","repoName":"gh-board","updatedAtMs":1532681869000,"issue":{"htmlUrl":"https://github.com/coala/gh-board/issues/116","number":116,"title":"Closed items disappear too quickly","body":"Upon an issue closing or PR merging, the PR and/or issues disappear off the list very quickly.\nVisually distracting, but also leaves the user wondering what it was, and they cant easily find it.\nIt would be better to have them put into a very small area with only the #123 visible for each.  A queue of completed work, and new closed issues/PRs push the earliest ones out of the area.\nThen it is always possible to see the recent history.","comments":0,"createdAt":"2018-07-27T08:57:49Z","updatedAt":"2018-07-27T08:57:49Z","closedAt":null,"state":"open","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[]}},{"repoOwner":"coala","repoName":"gh-board","updatedAtMs":1532683718000,"issue":{"htmlUrl":"https://github.com/coala/gh-board/issues/117","number":117,"title":"Travis CI links not shown","body":"On coala repo, Circle CI status & links are shown while building, and Netlify deploy preview links also appear.\nBut I want to jump to Travis ...","comments":0,"createdAt":"2018-07-27T09:04:19Z","updatedAt":"2018-07-27T09:28:38Z","closedAt":null,"state":"open","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"enhancement","color":"84b6eb"}]}},{"repoOwner":"coala","repoName":"gh-board","updatedAtMs":1532683791000,"issue":{"htmlUrl":"https://github.com/coala/gh-board/issues/118","number":118,"title":"Add Travis job to build and test docker","body":"","comments":0,"createdAt":"2018-07-27T09:27:17Z","updatedAt":"2018-07-27T09:29:51Z","closedAt":null,"state":"open","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"enhancement","color":"84b6eb"},{"name":"importance/medium","color":"65f23e"},{"name":"type/feature","color":"0052cc"}]}},{"repoOwner":"coala","repoName":"gh-board","updatedAtMs":1532684144000,"issue":{"htmlUrl":"https://github.com/coala/gh-board/issues/119","number":119,"title":"i18n support","body":"philschatz#41","comments":0,"createdAt":"2018-07-27T09:35:44Z","updatedAt":"2018-07-27T09:35:44Z","closedAt":null,"state":"open","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"difficulty/medium","color":"d30a8d"}]}},{"repoOwner":"coala","repoName":"gh-board","updatedAtMs":1532684522000,"issue":{"htmlUrl":"https://github.com/coala/gh-board/issues/120","number":120,"title":"Error: Bug in Octokat cacheHandler. It had an eTag but not the cached response.","body":"We see this in the Travis logs quite a bit\nc.f. philschatz#62\ncc @waldyrious","comments":0,"createdAt":"2018-07-27T09:39:38Z","updatedAt":"2018-07-27T09:42:02Z","closedAt":null,"state":"open","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"bug","color":"ee0701"},{"name":"difficulty/medium","color":"d30a8d"}]}},{"repoOwner":"coala","repoName":"gh-board","updatedAtMs":1532684559000,"issue":{"htmlUrl":"https://github.com/coala/gh-board/issues/121","number":121,"title":"Better use of local caches","body":"c.f. philschatz#14","comments":0,"createdAt":"2018-07-27T09:40:22Z","updatedAt":"2018-07-27T09:42:39Z","closedAt":null,"state":"open","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"difficulty/medium","color":"d30a8d"},{"name":"enhancement","color":"84b6eb"}]}},{"repoOwner":"coala","repoName":"gh-board","updatedAtMs":1532684830000,"issue":{"htmlUrl":"https://github.com/coala/gh-board/issues/122","number":122,"title":"Example of multiple org view","body":"Include an example in README and in dashboard sample repos of a view that includes multiple orgs , e.g.\nhttp://philschatz.com/gh-board/#/r/openstax:napkin-notes%7C*%7CConnexions:*\nc.f .philschatz#140\nand philschatz#24","comments":0,"createdAt":"2018-07-27T09:47:06Z","updatedAt":"2018-07-27T09:47:10Z","closedAt":null,"state":"open","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"difficulty/medium","color":"d30a8d"}]}},{"repoOwner":"coala","repoName":"gh-board","updatedAtMs":1532689164000,"issue":{"htmlUrl":"https://github.com/coala/gh-board/issues/123","number":123,"title":"Add Projects support","body":"philschatz#112","comments":0,"createdAt":"2018-07-27T10:57:02Z","updatedAt":"2018-07-27T10:59:24Z","closedAt":null,"state":"open","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"difficulty/medium","color":"d30a8d"},{"name":"enhancement","color":"84b6eb"}]}},{"repoOwner":"coala","repoName":"gh-board","updatedAtMs":1532695161000,"issue":{"htmlUrl":"https://github.com/coala/gh-board/issues/125","number":125,"title":"Create GitHub Pages Jekyll prefetcher","body":"GitHub Pages allows use of GitHub API via github metadata gem, and can create a json file.\nIt would mean 'fork' is all someone needs to do to get it working, without all the benefits of our build optimisations.\nThe data structure would need to be identical.\nSo we might want to tidy up the data structure first to eliminate some of the unnecessary duplication.\n(Do we have an issue about that yet?)","comments":2,"createdAt":"2018-07-27T12:12:02Z","updatedAt":"2018-07-27T12:39:21Z","closedAt":null,"state":"open","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"enhancement","color":"84b6eb"},{"name":"type/feature","color":"0052cc"}]}},{"repoOwner":"coala","repoName":"gh-board","updatedAtMs":1532924653000,"issue":{"htmlUrl":"https://github.com/coala/gh-board/issues/127","number":127,"title":"API limit exceeded show Json error","body":"Gh-board knows the limit has been reached, and can parse this json error message if necessary.\nThis will be the single most common error. It should be pretty/user friendly.\nIdeally showing the data it does have cached, but with a readonly feel to it.","comments":1,"createdAt":"2018-07-27T15:14:58Z","updatedAt":"2018-07-30T04:24:13Z","closedAt":null,"state":"open","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"enhancement","color":"84b6eb"}]}},{"repoOwner":"coala","repoName":"gh-board","updatedAtMs":1532305090000,"issue":{"htmlUrl":"https://github.com/coala/gh-board/issues/71","number":71,"title":"Login on netlify prefills with incorrect API endpoint","body":"","comments":2,"createdAt":"2018-07-12T14:32:10Z","updatedAt":"2018-07-23T00:18:10Z","closedAt":"2018-07-23T00:18:10Z","state":"closed","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[]}},{"repoOwner":"coala","repoName":"gh-board","updatedAtMs":1531408283000,"issue":{"htmlUrl":"https://github.com/coala/gh-board/issues/72","number":72,"title":"Login with invalid token doesnt have appropriate error message","body":"When I put in an invalid token into the Login (like manually typing it on a mobile..), it doesnt show an appropriate error message.\nIdeally the token is checked while the user is on the login form, and not saved if it doesnt work.\nThat allows better UI in the case of errors and avoids saving the token to be re-used on reload, etc","comments":0,"createdAt":"2018-07-12T15:11:23Z","updatedAt":"2018-07-12T15:11:23Z","closedAt":null,"state":"open","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"difficulty/low","color":"07eded"}]}},{"repoOwner":"coala","repoName":"gh-board","updatedAtMs":1531767698000,"issue":{"htmlUrl":"https://github.com/coala/gh-board/issues/74","number":74,"title":"Add test to verify that `issues.json` and `recent-issues.json` exist","body":"This should be run after build.sh\nSome background information:\nf1c892e has issues.json,\nbut the commit after that bc81dc9 removes issues.json. Need to make sure if the file exists before pushing to GitHub.","comments":1,"createdAt":"2018-07-13T14:21:40Z","updatedAt":"2018-07-16T19:01:38Z","closedAt":"2018-07-16T19:01:38Z","state":"closed","user":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4"},"owner":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4"},"labels":[{"name":"bug","color":"ee0701"},{"name":"importance/medium","color":"65f23e"}]}},{"repoOwner":"coala","repoName":"gh-board","updatedAtMs":1531625182000,"issue":{"htmlUrl":"https://github.com/coala/gh-board/issues/76","number":76,"title":"Moban task should not be deployed","body":"There are two tasks on Travis at the moment, namely test and moban.\nhttps://travis-ci.org/coala/gh-board/jobs/403835659#L6037 (test job) creates a commit, which is expected.\nhttps://travis-ci.org/coala/gh-board/jobs/403835660#L506 (moban job) also creates a commit, which is wrong.\nThe result of that bug is issues.json gets missed on gh-pages deploy branch. See 6477dc6 and  its child commit 038180c","comments":1,"createdAt":"2018-07-14T13:54:59Z","updatedAt":"2018-07-15T03:26:22Z","closedAt":"2018-07-15T03:26:22Z","state":"closed","user":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4"},"owner":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4"},"labels":[{"name":"bug","color":"ee0701"},{"name":"importance/medium","color":"65f23e"}]}},{"repoOwner":"coala","repoName":"gh-board","updatedAtMs":1531977848000,"issue":{"htmlUrl":"https://github.com/coala/gh-board/issues/78","number":78,"title":"Travis test fails due to test timeout occasionally ","body":"https://travis-ci.org/coala/gh-board/jobs/404756523#L5938\nSeems 20 seconds is sometimes not long enough. Maybe change it into 60 sec to make sure server starts and everything is loaded.","comments":0,"createdAt":"2018-07-17T14:03:12Z","updatedAt":"2018-07-19T05:24:08Z","closedAt":"2018-07-19T05:24:08Z","state":"closed","user":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4"},"owner":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4"},"labels":[{"name":"bug","color":"ee0701"},{"name":"importance/medium","color":"65f23e"}]}},{"repoOwner":"coala","repoName":"gh-board","updatedAtMs":1533099060000,"issue":{"htmlUrl":"https://github.com/coala/gh-board/issues/82","number":82,"title":"Add ability to filter reviews","body":"#65 adds a column called meta-review in need, which shows all review comments. There should be a filter option for user to filter reviews.","comments":0,"createdAt":"2018-07-21T15:03:51Z","updatedAt":"2018-08-01T04:51:00Z","closedAt":"2018-08-01T04:51:00Z","state":"closed","user":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4"},"owner":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4"},"assignee":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4"},"labels":[{"name":"enhancement","color":"84b6eb"}]}},{"repoOwner":"coala","repoName":"gh-board","updatedAtMs":1533343950000,"issue":{"htmlUrl":"https://github.com/coala/gh-board/issues/84","number":84,"title":"UI Enhancements","body":"Listing few general areas where the UI can be enhanced and made easier to use:\n\nIt'd be great to have some breathing space around the emoji button row and between the buttons as well. That'd\n\n\nwould remove cluttering\nbe easily clickable\nfont size of emoji's needs to grow 2x to have a clear view\n\n\n\nMeta Review button click action - Clicking on a button should add a small chip / banner on this card telling that it has been meta-reviewed by you or some check mark which shows that reviewer has clicked an emoji button.\n\nAlso a nice idea would be to add a \"+1\" inside the button indicating that it has been clicked, like github does.","comments":3,"createdAt":"2018-07-21T16:43:23Z","updatedAt":"2018-08-04T00:52:30Z","closedAt":"2018-08-04T00:52:30Z","state":"closed","user":{"login":"hemangsk","avatarUrl":"https://avatars3.githubusercontent.com/u/13018570?v=4"},"owner":{"login":"hemangsk","avatarUrl":"https://avatars3.githubusercontent.com/u/13018570?v=4"},"labels":[{"name":"difficulty/low","color":"07eded"},{"name":"enhancement","color":"84b6eb"}]}},{"repoOwner":"coala","repoName":"gh-board","updatedAtMs":1532561782000,"issue":{"htmlUrl":"https://github.com/coala/gh-board/issues/86","number":86,"title":"Fails on Node 10","body":"Node 9 passes.\nNode 10 does not build.","comments":0,"createdAt":"2018-07-25T23:33:49Z","updatedAt":"2018-07-25T23:36:22Z","closedAt":null,"state":"open","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"bug","color":"ee0701"}]}},{"repoOwner":"coala","repoName":"gh-board","updatedAtMs":1532597666000,"issue":{"htmlUrl":"https://github.com/coala/gh-board/issues/88","number":88,"title":"log \"warning: no available reaction data! ... error: undefined\"","body":"https://travis-ci.org/jayvdb/gh-board/jobs/408352263#L1581\ncould it be 'errors: 0'\nOr something shorter.\nExcessive logging makes it harder to spot real problems.","comments":0,"createdAt":"2018-07-26T09:34:26Z","updatedAt":"2018-07-26T09:34:26Z","closedAt":null,"state":"open","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"difficulty/newcomer","color":"33a7bf"},{"name":"importance/low","color":"1394a0"}]}},{"repoOwner":"coala","repoName":"gh-board","updatedAtMs":1532685302000,"issue":{"htmlUrl":"https://github.com/coala/gh-board/issues/89","number":89,"title":"Update \"new version\" checker","body":"src/new-version-checker.js currently polls 'philschatz/gh-board@gh-pages' -- it should at least poll coala/gh-board, but it should be done using a stored variable based on the build repo, so it works correctly on forks.","comments":1,"createdAt":"2018-07-26T09:38:41Z","updatedAt":"2018-07-27T09:55:02Z","closedAt":null,"state":"open","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"difficulty/low","color":"07eded"},{"name":"importance/low","color":"1394a0"}]}},{"repoOwner":"coala","repoName":"gh-board","updatedAtMs":1532697195000,"issue":{"htmlUrl":"https://github.com/coala/gh-board/issues/90","number":90,"title":"Update target of \"Star this project\"","body":"On the menu for the avatar of a logged in user is a link to star this project, which currently stars philschatz/gh-board.\nIt should link to coala/gh-board on our board, or link to someone elses board if it is running in a different org. (Similar to #89)","comments":1,"createdAt":"2018-07-26T09:45:24Z","updatedAt":"2018-07-27T13:13:15Z","closedAt":null,"state":"open","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"difficulty/low","color":"07eded"},{"name":"importance/low","color":"1394a0"}]}},{"repoOwner":"coala","repoName":"gh-board","updatedAtMs":1532674073000,"issue":{"htmlUrl":"https://github.com/coala/gh-board/issues/91","number":91,"title":"Dashboard: Exclude repos without issues or pulls","body":"Newcomer","comments":1,"createdAt":"2018-07-27T06:43:36Z","updatedAt":"2018-07-27T06:47:53Z","closedAt":null,"state":"open","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[]}},{"repoOwner":"coala","repoName":"gh-board","updatedAtMs":1532684981000,"issue":{"htmlUrl":"https://github.com/coala/gh-board/issues/92","number":92,"title":"Allow prefetching repos from several orgs","body":"Low","comments":2,"createdAt":"2018-07-27T06:52:26Z","updatedAt":"2018-07-27T09:49:41Z","closedAt":null,"state":"open","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"enhancement","color":"84b6eb"},{"name":"type/feature","color":"0052cc"}]}},{"repoOwner":"coala","repoName":"gh-board","updatedAtMs":1532674698000,"issue":{"htmlUrl":"https://github.com/coala/gh-board/issues/93","number":93,"title":"GCI dashboard","body":"Suck GCI json data frpm gci leaders repo and create dashboard of all gci org repos\nMedium difficulty?","comments":0,"createdAt":"2018-07-27T06:55:53Z","updatedAt":"2018-07-27T06:58:18Z","closedAt":null,"state":"open","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"bug","color":"ee0701"}]}},{"repoOwner":"coala","repoName":"gh-board","updatedAtMs":1532674845000,"issue":{"htmlUrl":"https://github.com/coala/gh-board/issues/94","number":94,"title":"GSoC dashboard","body":"After #93\nBlocked medium","comments":0,"createdAt":"2018-07-27T06:58:21Z","updatedAt":"2018-07-27T07:00:45Z","closedAt":null,"state":"open","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"enhancement","color":"84b6eb"},{"name":"importance/medium","color":"65f23e"}]}},{"repoOwner":"coala","repoName":"gh-board","updatedAtMs":1532674937000,"issue":{"htmlUrl":"https://github.com/coala/gh-board/issues/95","number":95,"title":"Dashboard : Add trending repos to samples","body":"Low","comments":0,"createdAt":"2018-07-27T07:02:13Z","updatedAt":"2018-07-27T07:02:17Z","closedAt":null,"state":"open","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"enhancement","color":"84b6eb"}]}},{"repoOwner":"coala","repoName":"gh-board","updatedAtMs":1532675014000,"issue":{"htmlUrl":"https://github.com/coala/gh-board/issues/96","number":96,"title":"Dashboard: Include orgs that user has submitted PRs","body":"Low","comments":0,"createdAt":"2018-07-27T07:03:20Z","updatedAt":"2018-07-27T07:03:34Z","closedAt":null,"state":"open","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"enhancement","color":"84b6eb"}]}},{"repoOwner":"coala","repoName":"gh-board","updatedAtMs":1532675607000,"issue":{"htmlUrl":"https://github.com/coala/gh-board/issues/97","number":97,"title":"Detect bot accounts","body":"Currently hard coded.","comments":0,"createdAt":"2018-07-27T07:11:04Z","updatedAt":"2018-07-27T07:13:27Z","closedAt":null,"state":"open","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"enhancement","color":"84b6eb"},{"name":"type/feature","color":"0052cc"}]}},{"repoOwner":"coala","repoName":"gh-board","updatedAtMs":1532675773000,"issue":{"htmlUrl":"https://github.com/coala/gh-board/issues/98","number":98,"title":"Interact with bots","body":"After #97 , offer user to quickly add commands a repo bot understands.\nBlocked. Difficulty medium","comments":0,"createdAt":"2018-07-27T07:13:50Z","updatedAt":"2018-07-27T07:16:13Z","closedAt":null,"state":"open","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"enhancement","color":"84b6eb"},{"name":"importance/medium","color":"65f23e"}]}},{"repoOwner":"coala","repoName":"gh-board","updatedAtMs":1532675901000,"issue":{"htmlUrl":"https://github.com/coala/gh-board/issues/99","number":99,"title":"Kanban: Click on org to jump to dashboard of single org","body":"https://coala-gh-board.netlify.com/#/r/wikimedia:mediawiki-extensions/kanban\nleaves me nowhere to go but to my dashboard .\nI should be able to click on the org and see repo list of the org\nmedium difficulty","comments":0,"createdAt":"2018-07-27T07:16:03Z","updatedAt":"2018-07-27T07:18:21Z","closedAt":null,"state":"open","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"enhancement","color":"84b6eb"}]}},{"repoOwner":"coala","repoName":"gh-board","updatedAtMs":1532675871000,"issue":{"htmlUrl":"https://github.com/coala/gh-board/issues/100","number":100,"title":"Org logos","body":"Repos should show the logo of their org / user","comments":0,"createdAt":"2018-07-27T07:17:51Z","updatedAt":"2018-07-27T07:17:51Z","closedAt":null,"state":"open","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"difficulty/low","color":"07eded"}]}},{"repoOwner":"coala","repoName":"gh-board","updatedAtMs":1532677212000,"issue":{"htmlUrl":"https://github.com/coala/gh-board/issues/101","number":101,"title":"Dashboard: Repo specific menu items fail","body":"After logged in , on the dashboard, clicking \"Label Editing\" at bottom gear icon menu, goes to\nhttps://coala-gh-board.netlify.com/#/labels\nand shows\n\nInvalid URL\nWoops! It looks like the URL is invalid. If you were looking for a repository, you can go to the Dashboard and open a repository. Hope that helps!","comments":2,"createdAt":"2018-07-27T07:30:44Z","updatedAt":"2018-07-27T07:40:12Z","closedAt":null,"state":"open","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"bug","color":"ee0701"},{"name":"difficulty/low","color":"07eded"}]}},{"repoOwner":"coala","repoName":"gh-board","updatedAtMs":1532677156000,"issue":{"htmlUrl":"https://github.com/coala/gh-board/issues/102","number":102,"title":"GitLab support","body":"","comments":0,"createdAt":"2018-07-27T07:39:16Z","updatedAt":"2018-07-27T07:39:16Z","closedAt":null,"state":"open","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"difficulty/high","color":"e88e53"},{"name":"enhancement","color":"84b6eb"},{"name":"help wanted","color":"33aa3f"}]}},{"repoOwner":"coala","repoName":"gh-board","updatedAtMs":1532677427000,"issue":{"htmlUrl":"https://github.com/coala/gh-board/issues/103","number":103,"title":"Label editor: choose color","body":"It would be lovely to have a tool to choose the color of a label and all repos(in the org) be updated to have a consistent color.","comments":0,"createdAt":"2018-07-27T07:41:24Z","updatedAt":"2018-07-27T07:43:47Z","closedAt":null,"state":"open","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"enhancement","color":"84b6eb"}]}},{"repoOwner":"coala","repoName":"gh-board","updatedAtMs":1532677386000,"issue":{"htmlUrl":"https://github.com/coala/gh-board/issues/104","number":104,"title":"Label editor: Add label to a repo in the same org","body":"medium","comments":0,"createdAt":"2018-07-27T07:42:35Z","updatedAt":"2018-07-27T07:43:06Z","closedAt":null,"state":"open","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"enhancement","color":"84b6eb"}]}},{"repoOwner":"coala","repoName":"gh-board","updatedAtMs":1532923219000,"issue":{"htmlUrl":"https://github.com/coala/gh-board/issues/105","number":105,"title":"Gantt chart fails on coala/coala","body":"https://coala-gh-board.netlify.com/#/r/coala:coala/gantt - empty page","comments":0,"createdAt":"2018-07-27T07:45:30Z","updatedAt":"2018-07-30T04:00:19Z","closedAt":null,"state":"open","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"bug","color":"ee0701"}]}},{"repoOwner":"coala","repoName":"gh-board","updatedAtMs":1532678663000,"issue":{"htmlUrl":"https://github.com/coala/gh-board/issues/106","number":106,"title":"Load initial saved queries from the wiki","body":"When a user first loads gh-board, they have no saved queries.\nThey could be loaded from the wiki (see #6) so each org can customise the new user experience.","comments":0,"createdAt":"2018-07-27T08:02:01Z","updatedAt":"2018-07-27T08:04:23Z","closedAt":null,"state":"open","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"enhancement","color":"84b6eb"}]}},{"repoOwner":"coala","repoName":"gh-board","updatedAtMs":1532678665000,"issue":{"htmlUrl":"https://github.com/coala/gh-board/issues/107","number":107,"title":"Dashboard: Load welcome page from wiki","body":"Before the user has logged in, the dashboard is just the sample repos.\nOn desktop, there is lots of empty space with could be a welcome blurb loaded from the wiki (see #6)","comments":0,"createdAt":"2018-07-27T08:04:22Z","updatedAt":"2018-07-27T08:04:25Z","closedAt":null,"state":"open","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"enhancement","color":"84b6eb"}]}},{"repoOwner":"coala","repoName":"gh-board","updatedAtMs":1532678924000,"issue":{"htmlUrl":"https://github.com/coala/gh-board/issues/108","number":108,"title":"Green login button shows during page load even when logged in","body":"If a page takes even a small amount of time to load, the green login button shows before it switches to be the user avatar.\nNothing should be shown until the user login state is known.\nIdeally the user state should be determined earlier in the process of generating the page.","comments":0,"createdAt":"2018-07-27T08:08:40Z","updatedAt":"2018-07-27T08:08:44Z","closedAt":null,"state":"open","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"enhancement","color":"84b6eb"}]}},{"repoOwner":"coala","repoName":"gh-board","updatedAtMs":1532679802000,"issue":{"htmlUrl":"https://github.com/coala/gh-board/issues/109","number":109,"title":"Dashboard: Allow user to re-order orgs","body":"The order of the orgs appear to be based on most recently active repos.\nA dashboard view with a constant user-choosen order will be a good \"new tab\" page so the content arrangement is constant and the user knows in advance how to navigate to where they want to go.","comments":0,"createdAt":"2018-07-27T08:11:12Z","updatedAt":"2018-07-27T08:23:22Z","closedAt":null,"state":"open","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"enhancement","color":"84b6eb"}]}},{"repoOwner":"coala","repoName":"gh-board","updatedAtMs":1532560412000,"issue":{"htmlUrl":"https://github.com/coala/gh-board/issues/3","number":3,"title":"front page should default to coala repos","body":"Currently the user must go to https://coala.github.io/gh-board/#/r/coala:coala|coala-bears|documentation|corobo/kanban in order to get coala issues.\nThe front page should default to coala content.","comments":8,"createdAt":"2017-12-04T16:51:10Z","updatedAt":"2018-07-25T23:13:32Z","closedAt":"2018-07-25T23:13:32Z","state":"closed","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"assignee":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4"},"labels":[{"name":"difficulty/low","color":"07eded"}]}},{"repoOwner":"coala","repoName":"gh-board","updatedAtMs":1532697757000,"issue":{"htmlUrl":"https://github.com/coala/gh-board/issues/5","number":5,"title":"Notes about diverging forks","body":"A currently active fork , based on @ryanprior  : https://github.com/hiroshis/gh-board/commits?author=hiroshis .  @hiroshis , lets all work together ?\nThere are a lot of modified forks that are adding a dummy commit only to initiate the build.  Some better guidance on how to initiate a build using Travis' cron builds may help here.\nKujawadl@f6ceba7 - changing the REAME.md to refer to the forked deployed instance .\nGitHub Enterprise support : jaichandra@e4d9e55","comments":3,"createdAt":"2017-12-22T05:33:49Z","updatedAt":"2018-07-27T13:22:37Z","closedAt":null,"state":"open","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[]}},{"repoOwner":"coala","repoName":"gh-board","updatedAtMs":1532787596000,"issue":{"htmlUrl":"https://github.com/coala/gh-board/issues/26","number":26,"title":"Use GraphQL for issue sync","body":"The pre-fetcher switched to using GraphQL.\nIt should be possible to switch the in-app fetch to also use GraphQL, and share code between the fetches.","comments":1,"createdAt":"2018-05-07T06:41:40Z","updatedAt":"2018-07-28T14:19:56Z","closedAt":"2018-07-28T14:19:56Z","state":"closed","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"assignee":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4"},"labels":[]}},{"repoOwner":"coala","repoName":"gh-board","updatedAtMs":1533154995000,"issue":{"htmlUrl":"https://github.com/coala/gh-board/issues/28","number":28,"title":"Travis npm caching problem","body":"https://travis-ci.org/coala/gh-board/builds/375797083#L462","comments":3,"createdAt":"2018-05-07T11:52:18Z","updatedAt":"2018-08-01T20:23:15Z","closedAt":"2018-08-01T20:23:15Z","state":"closed","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[]}},{"repoOwner":"coala","repoName":"gh-board","updatedAtMs":1533261552000,"issue":{"htmlUrl":"https://github.com/coala/gh-board/issues/45","number":45,"title":"Add codecov","body":"After the test suite is working again, add codecov. c.f.\ncoala/git-task-list#45","comments":4,"createdAt":"2018-06-07T05:45:20Z","updatedAt":"2018-08-03T01:59:12Z","closedAt":"2018-08-03T01:59:12Z","state":"closed","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"difficulty/low","color":"07eded"},{"name":"importance/medium","color":"65f23e"}]}},{"repoOwner":"coala","repoName":"gh-board","updatedAtMs":1531446671000,"issue":{"htmlUrl":"https://github.com/coala/gh-board/issues/52","number":52,"title":"Use travis deploy `keep-history`","body":"This should make the deploy quicker as less changes need to be pushed, and show new issues being added incrementally.\nhttps://docs.travis-ci.com/user/deployment/pages/","comments":1,"createdAt":"2018-06-10T03:44:51Z","updatedAt":"2018-07-13T01:51:11Z","closedAt":"2018-07-13T01:51:11Z","state":"closed","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"assignee":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4"},"labels":[{"name":"enhancement","color":"84b6eb"},{"name":"type/feature","color":"0052cc"}]}},{"repoOwner":"coala","repoName":"gh-board","updatedAtMs":1532839302000,"issue":{"htmlUrl":"https://github.com/coala/gh-board/issues/55","number":55,"title":"README.md: Fix table of contents inconsistencies","body":"In the readme table of contents, \"Burnup Chart\" is not in the same order as it appears in the document. Also, the \"Issue Images\" section is currently an h1, but it is listed alongside h3's in the table of contents.","comments":3,"createdAt":"2018-06-12T22:04:54Z","updatedAt":"2018-07-29T04:41:42Z","closedAt":"2018-07-29T04:41:42Z","state":"closed","user":{"login":"brentirwin","avatarUrl":"https://avatars3.githubusercontent.com/u/25044018?v=4"},"owner":{"login":"brentirwin","avatarUrl":"https://avatars3.githubusercontent.com/u/25044018?v=4"},"labels":[{"name":"difficulty/newcomer","color":"33a7bf"}]}},{"repoOwner":"coala","repoName":"gh-board","updatedAtMs":1532412197000,"issue":{"htmlUrl":"https://github.com/coala/gh-board/issues/64","number":64,"title":"Add `meta-review in need` column","body":"As a part of GSoC'18 meta-review project, there should be a column displaying reviews that in need of meta-review.\nPlease assign this to me ;)","comments":0,"createdAt":"2018-06-23T14:26:31Z","updatedAt":"2018-07-24T06:03:17Z","closedAt":"2018-07-24T06:03:17Z","state":"closed","user":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4"},"owner":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4"},"labels":[{"name":"enhancement","color":"84b6eb"}]}},{"repoOwner":"coala","repoName":"landing-frontend","updatedAtMs":1532217633000,"issue":{"htmlUrl":"https://github.com/coala/landing-frontend/issues/282","number":282,"title":"Coala Online is broken due to CORS","body":"https://coala.io/#/coalaonline does not work due to the SOP security restrictions in browsers. This is bad for Coala marketing and therefore adoption!\n# Chrome console:\nFailed to load https://api.gitmate.io/coala_online/: No 'Access-Control-Allow-Origin' header is present on the requested resource. Origin 'https://coala.io' is therefore not allowed access. The response had HTTP status code 504.\n\n# Firefox console:\nCross-Origin Request Blocked: The Same Origin Policy disallows reading the remote resource at https://api.gitmate.io/coala_online/. (Reason: CORS header 'Access-Control-Allow-Origin' missing).\n\nWe can use CORS to get past these restrictions. (MDN, Wikipedia)\nTo do that, we must add some HTTP headers to the response provided from api.gitmate.io\nWhere is the code for that API server? (Is it here?)","comments":2,"createdAt":"2018-07-07T07:37:59Z","updatedAt":"2018-07-22T00:00:33Z","closedAt":null,"state":"open","user":{"login":"joeytwiddle","avatarUrl":"https://avatars3.githubusercontent.com/u/911799?v=4"},"owner":{"login":"joeytwiddle","avatarUrl":"https://avatars3.githubusercontent.com/u/911799?v=4"},"labels":[{"name":"difficulty/newcomer","color":"0e8a16"},{"name":"status/STALE","color":"ededed"},{"name":"type/bug","color":"ee0701"}]}},{"repoOwner":"coala","repoName":"landing-frontend","updatedAtMs":1533234011000,"issue":{"htmlUrl":"https://github.com/coala/landing-frontend/issues/277","number":277,"title":"Bookmarkable example on homepage","body":"Currently, when selecting to a language example, we have no way to bookmark it.\n\nThis can be done via adding a query parameter to the url after the selection.\nand add\ndocument.getElementById('example').scrollIntoView();\n\nafter adding id to the example's div","comments":2,"createdAt":"2018-05-23T09:19:20Z","updatedAt":"2018-08-02T18:20:11Z","closedAt":null,"state":"open","user":{"login":"bekicot","avatarUrl":"https://avatars0.githubusercontent.com/u/1826884?v=4"},"owner":{"login":"bekicot","avatarUrl":"https://avatars0.githubusercontent.com/u/1826884?v=4"},"labels":[{"name":"area/documentation","color":"ededed"},{"name":"difficulty/newcomer","color":"0e8a16"},{"name":"type/bug","color":"ee0701"}]}},{"repoOwner":"coala","repoName":"landing-frontend","updatedAtMs":1531526433000,"issue":{"htmlUrl":"https://github.com/coala/landing-frontend/issues/279","number":279,"title":"Scroll in About page","body":"Migrated from coala/coala#5477\n\nWe can put scroll or decrease padding as mentioned in attached snapshot.\nI am assuming that website https://coala.io/#/about code maintained from here only. If not, please transfer issue to associated repo.","comments":1,"createdAt":"2018-05-31T12:49:12Z","updatedAt":"2018-07-14T00:00:33Z","closedAt":null,"state":"open","user":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4"},"owner":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4"},"labels":[{"name":"status/STALE","color":"ededed"}]}},{"repoOwner":"coala","repoName":"landing-frontend","updatedAtMs":1533049117000,"issue":{"htmlUrl":"https://github.com/coala/landing-frontend/issues/270","number":270,"title":"\"Add Bear\" Button : Change font family to Roboto from Times New Roman","body":"From coala Online :","comments":3,"createdAt":"2018-04-09T11:11:20Z","updatedAt":"2018-07-31T14:58:37Z","closedAt":null,"state":"open","user":{"login":"hemangsk","avatarUrl":"https://avatars3.githubusercontent.com/u/13018570?v=4"},"owner":{"login":"hemangsk","avatarUrl":"https://avatars3.githubusercontent.com/u/13018570?v=4"},"labels":[{"name":"difficulty/newcomer","color":"0e8a16"}]}},{"repoOwner":"coala","repoName":"coalaCSS","updatedAtMs":1532806212000,"issue":{"htmlUrl":"https://github.com/coala/coalaCSS/issues/30","number":30,"title":"Change Cursor to pointer type","body":"Change the cursor type of various issue in RELATED ISSUE Section, as they are clickable link\nPage that need changes\ndifficulty/newcomer","comments":1,"createdAt":"2018-02-23T17:48:22Z","updatedAt":"2018-07-28T19:30:12Z","closedAt":"2018-07-28T19:30:12Z","state":"closed","user":{"login":"RaiVaibhav","avatarUrl":"https://avatars3.githubusercontent.com/u/22278438?v=4"},"owner":{"login":"RaiVaibhav","avatarUrl":"https://avatars3.githubusercontent.com/u/22278438?v=4"},"assignee":{"login":"guilherme-p","avatarUrl":"https://avatars1.githubusercontent.com/u/31377673?v=4"},"labels":[{"name":"difficulty/newcomer","color":"65C8FF"},{"name":"status/STALE","color":"ededed"}]}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1533702717000,"issue":{"htmlUrl":"https://github.com/coala/coala/pull/5696","number":5696,"title":"CliParsing.py,ConfParser.py : Change in variable name","body":"Corrected typo in variable name comment_seperator and changed it to comment_separator.\nAdded comment_seperator as a deprecated argument.\nCloses #5510\nChecklist\n\n I read the commit guidelines and I've followed\nthem.\n I ran coala over my code locally. (All commits have to pass\nindividually. It is not sufficient to have \"fixup commits\" on your PR,\nour bot will still report the issues for the previous commit.) You will\nlikely receive a lot of bot comments and build failures if coala does not\npass on every single commit!","comments":19,"createdAt":"2018-08-07T19:10:35Z","updatedAt":"2018-08-08T04:31:57Z","closedAt":null,"state":"open","user":{"login":"shashwatmishra76","avatarUrl":"https://avatars2.githubusercontent.com/u/24711156?v=4"},"owner":{"login":"shashwatmishra76","avatarUrl":"https://avatars2.githubusercontent.com/u/24711156?v=4"},"assignee":{"login":"shashwatmishra76","avatarUrl":"https://avatars2.githubusercontent.com/u/24711156?v=4"},"labels":[{"name":"area/documentation","color":"bfe5bf"},{"name":"difficulty/low","color":"207de5"},{"name":"importance/low","color":"70E870"},{"name":"process/pending review","color":"bfe5bf"},{"name":"size/XS","color":"00DE0F"}],"pullRequest":{"htmlUrl":"https://github.com/coala/coala/pull/5696","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQxMTIwOTExNg==","url":"https://github.com/coala/coala/pull/5696#issuecomment-411209116","bodyText":"@jayvdb I checked the piece of code that I added to my local machine and it works fine.I am not sure why it is not passing the build tests.Where have I gone wrong?","diffHunk":null,"author":{"login":"shashwatmishra76","avatarUrl":"https://avatars2.githubusercontent.com/u/24711156?v=4","name":"Shashwat Mishra"},"createdAt":"2018-08-07T21:30:26Z","lastEditedAt":null,"updatedAt":"2018-08-07T21:30:26Z"}]}}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1533552812000,"issue":{"htmlUrl":"https://github.com/coala/coala/pull/5691","number":5691,"title":".coafile: Change in pycodestyle_ignore list","body":"Removed E133,E242 and E303 from pycodestyle_ignore list.\nFixes #5389\nChecklist\n\n I read the commit guidelines and I've followed\nthem.\n I ran coala over my code locally. (All commits have to pass\nindividually. It is not sufficient to have \"fixup commits\" on your PR,\nour bot will still report the issues for the previous commit.) You will\nlikely receive a lot of bot comments and build failures if coala does not\npass on every single commit!","comments":21,"createdAt":"2018-08-05T15:31:05Z","updatedAt":"2018-08-06T10:53:32Z","closedAt":"2018-08-06T10:49:20Z","state":"merged","user":{"login":"shashwatmishra76","avatarUrl":"https://avatars2.githubusercontent.com/u/24711156?v=4"},"owner":{"login":"shashwatmishra76","avatarUrl":"https://avatars2.githubusercontent.com/u/24711156?v=4"},"assignee":{"login":"shashwatmishra76","avatarUrl":"https://avatars2.githubusercontent.com/u/24711156?v=4"},"labels":[{"name":"difficulty/newcomer","color":"65C8FF"},{"name":"importance/medium","color":"fbca04"},{"name":"size/XS","color":"00DE0F"}],"pullRequest":{"htmlUrl":"https://github.com/coala/coala/pull/5691","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQxMDUzMTcwMg==","url":"https://github.com/coala/coala/pull/5691#issuecomment-410531702","bodyText":"@jayvdb My PR can't seem to pass this one test.What changes do I need to make?","diffHunk":null,"author":{"login":"shashwatmishra76","avatarUrl":"https://avatars2.githubusercontent.com/u/24711156?v=4","name":"Shashwat Mishra"},"createdAt":"2018-08-05T16:32:30Z","lastEditedAt":null,"updatedAt":"2018-08-05T16:32:30Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQxMDUzNDY1OA==","url":"https://github.com/coala/coala/pull/5691#issuecomment-410534658","bodyText":"@jayvdb Please review this.","diffHunk":null,"author":{"login":"shashwatmishra76","avatarUrl":"https://avatars2.githubusercontent.com/u/24711156?v=4","name":"Shashwat Mishra"},"createdAt":"2018-08-05T17:21:37Z","lastEditedAt":null,"updatedAt":"2018-08-05T17:21:37Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQxMDUzNzc0MA==","url":"https://github.com/coala/coala/pull/5691#issuecomment-410537740","bodyText":"@jayvdb I have done rebasing.Please review this.","diffHunk":null,"author":{"login":"shashwatmishra76","avatarUrl":"https://avatars2.githubusercontent.com/u/24711156?v=4","name":"Shashwat Mishra"},"createdAt":"2018-08-05T18:13:28Z","lastEditedAt":null,"updatedAt":"2018-08-05T18:13:28Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQxMDUzOTA2NQ==","url":"https://github.com/coala/coala/pull/5691#issuecomment-410539065","bodyText":"If you see a test failing, check out the detailed logs, try to find the error. You can ask for help on gitter.\nFor now, I see there's timeout error in your ci (which causes trouble sometimes). It's nothing to do with your PR so don't worry.","diffHunk":null,"author":{"login":"pareksha","avatarUrl":"https://avatars1.githubusercontent.com/u/32385407?v=4","name":"Pareksha Manchanda"},"createdAt":"2018-08-05T18:36:19Z","lastEditedAt":null,"updatedAt":"2018-08-05T18:36:19Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQxMDU0MDA5Ng==","url":"https://github.com/coala/coala/pull/5691#issuecomment-410540096","bodyText":"@pareksha  I have changed my shortlog message.And,concerning the error,as it is due to timeout,is there anything that I need to do?","diffHunk":null,"author":{"login":"shashwatmishra76","avatarUrl":"https://avatars2.githubusercontent.com/u/24711156?v=4","name":"Shashwat Mishra"},"createdAt":"2018-08-05T18:54:58Z","lastEditedAt":null,"updatedAt":"2018-08-05T18:54:58Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQxMDU1MTgzMg==","url":"https://github.com/coala/coala/pull/5691#issuecomment-410551832","bodyText":"This is not rebased.","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-08-05T22:03:05Z","lastEditedAt":null,"updatedAt":"2018-08-05T22:03:05Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQxMDU3MDYxNQ==","url":"https://github.com/coala/coala/pull/5691#issuecomment-410570615","bodyText":"\"Change made as per requirement\" is an inappropriate https://coala.io/commit shortlog","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-08-06T02:18:32Z","lastEditedAt":null,"updatedAt":"2018-08-06T02:18:32Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQxMDYxNzU3Mg==","url":"https://github.com/coala/coala/pull/5691#issuecomment-410617572","bodyText":"\"Change in .coalafile\" also does not describe what was changed.","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-08-06T07:43:31Z","lastEditedAt":null,"updatedAt":"2018-08-06T07:43:31Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQxMDY0OTc5MA==","url":"https://github.com/coala/coala/pull/5691#issuecomment-410649790","bodyText":"ok, the shortlog is good enough.\nNext, #5389 does not say it is a bug, so you need the final line to say Closes https://github.com/coala/coala/issues/5389 -- not Fixes https://github.com/coala/coala/issues/5389","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-08-06T09:39:50Z","lastEditedAt":null,"updatedAt":"2018-08-06T09:39:50Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQxMDY1MTUwMQ==","url":"https://github.com/coala/coala/pull/5691#issuecomment-410651501","bodyText":"Awesome.  Now we let that build, and ping me on gitter for the next step.","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-08-06T09:45:57Z","lastEditedAt":null,"updatedAt":"2018-08-06T09:45:57Z"}]}}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1533681624000,"issue":{"htmlUrl":"https://github.com/coala/coala/pull/5693","number":5693,"title":"XML.py: Add language definition for XML","body":"Closes #5692\n\nFor short term contributors: we understand that getting your commits well\ndefined like we require is a hard task and takes some learning. If you\nlook to help without wanting to contribute long term there's no need\nfor you to learn this. Just drop us a message and we'll take care of brushing\nup your stuff for merge!\nChecklist\n\n I read the commit guidelines and I've followed\nthem.\n I ran coala over my code locally. (All commits have to pass\nindividually. It is not sufficient to have \"fixup commits\" on your PR,\nour bot will still report the issues for the previous commit.) You will\nlikely receive a lot of bot comments and build failures if coala does not\npass on every single commit!\n\nAfter you submit your pull request, DO NOT click the 'Update Branch' button.\nWhen asked for a rebase, consult coala.io/rebase\ninstead.\nPlease consider helping us by reviewing other peoples pull requests as well:\n\npick up any PR at https://coala.io/review\nreview it (check https://coala.io/reviewing for more info)\nif you are sure that it needs work, use corobo mark wip <URL> to get it out\nof the review queue.\n\nThe more you review, the more your score will grow at coala.io and we will\nreview your PRs faster!","comments":4,"createdAt":"2018-08-05T17:26:17Z","updatedAt":"2018-08-07T22:40:24Z","closedAt":"2018-08-06T18:49:27Z","state":"merged","user":{"login":"virresh","avatarUrl":"https://avatars0.githubusercontent.com/u/10978108?v=4"},"owner":{"login":"virresh","avatarUrl":"https://avatars0.githubusercontent.com/u/10978108?v=4"},"assignee":{"login":"virresh","avatarUrl":"https://avatars0.githubusercontent.com/u/10978108?v=4"},"labels":[{"name":"area/aspects","color":"000000"},{"name":"area/documentation","color":"bfe5bf"},{"name":"area/languages","color":"d4c5f9"},{"name":"process/approved","color":"009800"},{"name":"size/XS","color":"00DE0F"}],"pullRequest":{"htmlUrl":"https://github.com/coala/coala/pull/5693","comments":[{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzc0OTY4Ng==","url":"https://github.com/coala/coala/pull/5693#discussion_r207749686","bodyText":"Please see how this is used by core and bears. I believe there are no equivalent in xml.","diffHunk":"@@ -0,0 +1,13 @@\n+from coalib.bearlib.languages.Language import Language\n+\n+\n+@Language\n+class XML:\n+    __qualname__ = 'Extensible Markup Language'\n+    aliases = 'xml',\n+\n+    extensions = '.xml',\n+    multiline_comment_delimiters = {'<!--': '-->'}\n+    string_delimiters = {'\"': '\"', \"'\": \"'\"}\n+    multiline_string_delimiters = string_delimiters\n+    encapsulators = {'<': '>'}","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNzQ4NTkzMQ==","createdAt":"2018-08-06T08:19:07Z","content":"THUMBS_UP","user":{"login":"pareksha","name":"Pareksha Manchanda"}}],"createdAt":"2018-08-05T21:57:16Z","lastEditedAt":null,"updatedAt":"2018-08-05T21:57:16Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzc0OTcyNA==","url":"https://github.com/coala/coala/pull/5693#discussion_r207749724","bodyText":"Also add cdata","diffHunk":"@@ -0,0 +1,13 @@\n+from coalib.bearlib.languages.Language import Language\n+\n+\n+@Language\n+class XML:\n+    __qualname__ = 'Extensible Markup Language'\n+    aliases = 'xml',\n+\n+    extensions = '.xml',\n+    multiline_comment_delimiters = {'<!--': '-->'}\n+    string_delimiters = {'\"': '\"', \"'\": \"'\"}","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNzUxMDE4Nw==","createdAt":"2018-08-06T16:06:25Z","content":"THUMBS_UP","user":{"login":"virresh","name":"Viresh Gupta"}}],"createdAt":"2018-08-05T21:58:58Z","lastEditedAt":null,"updatedAt":"2018-08-05T21:58:58Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzgwNzM1MQ==","url":"https://github.com/coala/coala/pull/5693#discussion_r207807351","bodyText":"Why blank line here?","diffHunk":"@@ -0,0 +1,13 @@\n+from coalib.bearlib.languages.Language import Language\n+\n+\n+@Language\n+class XML:\n+    __qualname__ = 'Extensible Markup Language'\n+    aliases = 'xml',\n+","author":{"login":"pareksha","avatarUrl":"https://avatars1.githubusercontent.com/u/32385407?v=4","name":"Pareksha Manchanda"},"reactions":[],"createdAt":"2018-08-06T08:16:49Z","lastEditedAt":null,"updatedAt":"2018-08-06T08:16:49Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzgwODA3MA==","url":"https://github.com/coala/coala/pull/5693#discussion_r207808070","bodyText":"And if < > is considered, </ > should also be","diffHunk":"@@ -0,0 +1,13 @@\n+from coalib.bearlib.languages.Language import Language\n+\n+\n+@Language\n+class XML:\n+    __qualname__ = 'Extensible Markup Language'\n+    aliases = 'xml',\n+\n+    extensions = '.xml',\n+    multiline_comment_delimiters = {'<!--': '-->'}\n+    string_delimiters = {'\"': '\"', \"'\": \"'\"}\n+    multiline_string_delimiters = string_delimiters\n+    encapsulators = {'<': '>'}","author":{"login":"pareksha","avatarUrl":"https://avatars1.githubusercontent.com/u/32385407?v=4","name":"Pareksha Manchanda"},"reactions":[],"createdAt":"2018-08-06T08:19:36Z","lastEditedAt":null,"updatedAt":"2018-08-06T08:19:36Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzk0NzY2Mg==","url":"https://github.com/coala/coala/pull/5693#discussion_r207947662","bodyText":"@jayvdb @pareksha\nI referred https://github.com/coala/coala/blob/master/coalib/bearlib/languages/definitions/html.py\nfor referring to how we use markups in language definitions,\nI am not particularly sure of how these are used by core\nCould only find one place in bears repo (the IndentationBear) where these were used, and considering that, I believe these are also sufficient to determine indents of tags ?\nAlso @pareksha , </> is a subset of <>, note the same literal opens and ends tag","diffHunk":"@@ -0,0 +1,13 @@\n+from coalib.bearlib.languages.Language import Language\n+\n+\n+@Language\n+class XML:\n+    __qualname__ = 'Extensible Markup Language'\n+    aliases = 'xml',\n+\n+    extensions = '.xml',\n+    multiline_comment_delimiters = {'<!--': '-->'}\n+    string_delimiters = {'\"': '\"', \"'\": \"'\"}\n+    multiline_string_delimiters = string_delimiters\n+    encapsulators = {'<': '>'}","author":{"login":"virresh","avatarUrl":"https://avatars0.githubusercontent.com/u/10978108?v=4","name":"Viresh Gupta"},"reactions":[],"createdAt":"2018-08-06T16:09:56Z","lastEditedAt":null,"updatedAt":"2018-08-06T16:09:56Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzk0Nzc4MA==","url":"https://github.com/coala/coala/pull/5693#discussion_r207947780","bodyText":"c.f https://github.com/coala/coala/blob/master/coalib/bearlib/languages/definitions/html.py#L8\nhttps://github.com/coala/coala/blob/master/coalib/bearlib/languages/definitions/Shell.py#L7\nSo I think this is some kind of convention and I followed it :)","diffHunk":"@@ -0,0 +1,13 @@\n+from coalib.bearlib.languages.Language import Language\n+\n+\n+@Language\n+class XML:\n+    __qualname__ = 'Extensible Markup Language'\n+    aliases = 'xml',\n+","author":{"login":"virresh","avatarUrl":"https://avatars0.githubusercontent.com/u/10978108?v=4","name":"Viresh Gupta"},"reactions":[],"createdAt":"2018-08-06T16:10:22Z","lastEditedAt":"2018-08-06T16:12:45Z","updatedAt":"2018-08-06T16:12:45Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzk5MjcwMQ==","url":"https://github.com/coala/coala/pull/5693#discussion_r207992701","bodyText":"I suspect this is 'not right, but also not wrong'. Not bad for v1.","diffHunk":"@@ -0,0 +1,14 @@\n+from coalib.bearlib.languages.Language import Language\n+\n+\n+@Language\n+class XML:\n+    __qualname__ = 'Extensible Markup Language'\n+    aliases = 'xml',\n+    versions = 1.0,\n+\n+    extensions = '.xml',\n+    multiline_comment_delimiters = {'<!--': '-->'}\n+    string_delimiters = {'\"': '\"', \"'\": \"'\", '<![CDATA[': ']]>'}\n+    multiline_string_delimiters = string_delimiters\n+    encapsulators = {'<': '>'}","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-08-06T18:47:35Z","lastEditedAt":null,"updatedAt":"2018-08-06T18:47:35Z"}]}}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1533460157000,"issue":{"htmlUrl":"https://github.com/coala/coala/pull/5686","number":5686,"title":"coala_main.py: Changed Variable name and value of STR_ENTER_NUMBER","body":"ConsoleInteraction.py: Changed Variable name and value of STR_ENTER_NUMBER\nChanged the Variable name from STR_ENTER_NUMBER to STR_ENTER_LETTER\nChanged the value of Variable from 'Enter number (Ctrl-D to exit)' to 'Enter letter (Ctrl-D to exit)'\nFixes #5685\n\nFor short term contributors: we understand that getting your commits well\ndefined like we require is a hard task and takes some learning. If you\nlook to help without wanting to contribute long term there's no need\nfor you to learn this. Just drop us a message and we'll take care of brushing\nup your stuff for merge!\nChecklist\n\n I read the commit guidelines and I've followed\nthem.\n I ran coala over my code locally. (All commits have to pass\nindividually. It is not sufficient to have \"fixup commits\" on your PR,\nour bot will still report the issues for the previous commit.) You will\nlikely receive a lot of bot comments and build failures if coala does not\npass on every single commit!\n\nAfter you submit your pull request, DO NOT click the 'Update Branch' button.\nWhen asked for a rebase, consult coala.io/rebase\ninstead.\nPlease consider helping us by reviewing other peoples pull requests as well:\n\npick up any PR at https://coala.io/review\nreview it (check https://coala.io/reviewing for more info)\nif you are sure that it needs work, use corobo mark wip <URL> to get it out\nof the review queue.\n\nThe more you review, the more your score will grow at coala.io and we will\nreview your PRs faster!","comments":5,"createdAt":"2018-08-04T18:23:38Z","updatedAt":"2018-08-05T09:09:17Z","closedAt":"2018-08-05T09:09:17Z","state":"closed","user":{"login":"Utkarsh1308","avatarUrl":"https://avatars0.githubusercontent.com/u/23418707?v=4"},"owner":{"login":"Utkarsh1308","avatarUrl":"https://avatars0.githubusercontent.com/u/23418707?v=4"},"assignee":{"login":"Utkarsh1308","avatarUrl":"https://avatars0.githubusercontent.com/u/23418707?v=4"},"labels":[{"name":"difficulty/newcomer","color":"65C8FF"},{"name":"process/pending review","color":"bfe5bf"},{"name":"size/XS","color":"00DE0F"},{"name":"type/bug","color":"e11d21"}],"pullRequest":{"htmlUrl":"https://github.com/coala/coala/pull/5686","comments":[{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzcyNTM1Ng==","url":"https://github.com/coala/coala/pull/5686#discussion_r207725356","bodyText":"This change is unnecessary. This changes the ouput message we get, when we call coala without the -A tag.","diffHunk":"@@ -75,7 +75,7 @@ def highlight_text(no_color, text, style, lexer=TextLexer()):\n                          'cannot be printed because it refers to a line '\n                          \"that doesn't seem to exist in the given file.\")\n STR_PROJECT_WIDE = 'Project wide:'\n-STR_ENTER_NUMBER = 'Enter number (Ctrl-{} to exit): '.format(\n+STR_ENTER_LETTER = 'Enter letter (Ctrl-{} to exit): '.format(","author":{"login":"Naveenaidu","avatarUrl":"https://avatars1.githubusercontent.com/u/30195193?v=4","name":"Naveen Naidu"},"createdAt":"2018-08-05T04:52:27Z","lastEditedAt":null,"updatedAt":"2018-08-05T04:52:27Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzcyNTM2Nw==","url":"https://github.com/coala/coala/pull/5686#discussion_r207725367","bodyText":"This change is unnecessary too. Please don't change it.","diffHunk":"@@ -654,7 +654,7 @@ def choose_action(console_printer, actions, apply_single=False):\n                 color_letter(console_printer, format_lines(output.format(\n                     i, action.desc), symbol='['))\n \n-            line = format_lines(STR_ENTER_NUMBER, symbol='[')\n+            line = format_lines(STR_ENTER_LETTER, symbol='[')","author":{"login":"Naveenaidu","avatarUrl":"https://avatars1.githubusercontent.com/u/30195193?v=4","name":"Naveen Naidu"},"createdAt":"2018-08-05T04:53:18Z","lastEditedAt":null,"updatedAt":"2018-08-05T04:53:18Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQxMDQ5NTg4Mw==","url":"https://github.com/coala/coala/pull/5686#issuecomment-410495883","bodyText":"Please change your shortlog of the commit message. Refer Writing Commit message","diffHunk":null,"author":{"login":"Naveenaidu","avatarUrl":"https://avatars1.githubusercontent.com/u/30195193?v=4","name":"Naveen Naidu"},"createdAt":"2018-08-05T04:56:50Z","lastEditedAt":null,"updatedAt":"2018-08-05T04:56:50Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQxMDUwNjUwMQ==","url":"https://github.com/coala/coala/pull/5686#issuecomment-410506501","bodyText":"I am closing this I'll send you a new pull request","diffHunk":null,"author":{"login":"Utkarsh1308","avatarUrl":"https://avatars0.githubusercontent.com/u/23418707?v=4","name":"Utkarsh Sharma"},"createdAt":"2018-08-05T09:09:17Z","lastEditedAt":null,"updatedAt":"2018-08-05T09:09:17Z"}]}}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1533559899000,"issue":{"htmlUrl":"https://github.com/coala/coala/pull/5687","number":5687,"title":"coala_main.py: Change variable name and value","body":"Changed the Variable name from STR_ENTER_NUMBER to STR_ENTER_LETTER\nChanged the value of Variable from 'Enter number (Ctrl-D to exit)' to 'Enter letter (Ctrl-D to exit)'\nFixes #5685\n\nFor short term contributors: we understand that getting your commits well\ndefined like we require is a hard task and takes some learning. If you\nlook to help without wanting to contribute long term there's no need\nfor you to learn this. Just drop us a message and we'll take care of brushing\nup your stuff for merge!\nChecklist\n\n I read the commit guidelines and I've followed\nthem.\n I ran coala over my code locally. (All commits have to pass\nindividually. It is not sufficient to have \"fixup commits\" on your PR,\nour bot will still report the issues for the previous commit.) You will\nlikely receive a lot of bot comments and build failures if coala does not\npass on every single commit!\n\nAfter you submit your pull request, DO NOT click the 'Update Branch' button.\nWhen asked for a rebase, consult coala.io/rebase\ninstead.\nPlease consider helping us by reviewing other peoples pull requests as well:\n\npick up any PR at https://coala.io/review\nreview it (check https://coala.io/reviewing for more info)\nif you are sure that it needs work, use corobo mark wip <URL> to get it out\nof the review queue.\n\nThe more you review, the more your score will grow at coala.io and we will\nreview your PRs faster!","comments":25,"createdAt":"2018-08-05T09:09:48Z","updatedAt":"2018-08-06T12:51:39Z","closedAt":"2018-08-06T11:35:54Z","state":"merged","user":{"login":"Utkarsh1308","avatarUrl":"https://avatars0.githubusercontent.com/u/23418707?v=4"},"owner":{"login":"Utkarsh1308","avatarUrl":"https://avatars0.githubusercontent.com/u/23418707?v=4"},"assignee":{"login":"RaiVaibhav","avatarUrl":"https://avatars3.githubusercontent.com/u/22278438?v=4"},"labels":[{"name":"difficulty/medium","color":"0052cc"},{"name":"difficulty/newcomer","color":"65C8FF"},{"name":"importance/low","color":"70E870"},{"name":"process/needs rebase","color":"e52db1"},{"name":"size/XS","color":"00DE0F"},{"name":"type/bug","color":"e11d21"},{"name":"type/feature","color":"0052cc"}],"pullRequest":{"htmlUrl":"https://github.com/coala/coala/pull/5687","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQxMDUyMjk0OA==","url":"https://github.com/coala/coala/pull/5687#issuecomment-410522948","bodyText":"@Utkarsh1308 , please rebase.  And also please change the two capital V to lowercase v in your commit shortlog.","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-08-05T14:13:31Z","lastEditedAt":null,"updatedAt":"2018-08-05T14:13:31Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQxMDUyOTAyMQ==","url":"https://github.com/coala/coala/pull/5687#issuecomment-410529021","bodyText":"Still needs to be rebased.","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-08-05T15:50:22Z","lastEditedAt":null,"updatedAt":"2018-08-05T15:50:22Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQxMDUzMTIxMw==","url":"https://github.com/coala/coala/pull/5687#issuecomment-410531213","bodyText":"That is not how you rebase according to https://coala.io/git","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-08-05T16:24:19Z","lastEditedAt":null,"updatedAt":"2018-08-05T16:24:19Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQxMDU2MTk2Mw==","url":"https://github.com/coala/coala/pull/5687#issuecomment-410561963","bodyText":"Still needs to be rebased.","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-08-06T00:58:03Z","lastEditedAt":null,"updatedAt":"2018-08-06T00:58:03Z"}]}}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1533489382000,"issue":{"htmlUrl":"https://github.com/coala/coala/pull/5688","number":5688,"title":"Modified:   coalib/parsing/CliParsing.py","body":"Changed variable name comment_seperators to comment_separators.\nFixes #5510\nChecklist\n\n I read the commit guidelines and I've followed\nthem.\n I ran coala over my code locally. (All commits have to pass\nindividually. It is not sufficient to have \"fixup commits\" on your PR,\nour bot will still report the issues for the previous commit.) You will\nlikely receive a lot of bot comments and build failures if coala does not\npass on every single commit!","comments":5,"createdAt":"2018-08-05T11:14:18Z","updatedAt":"2018-08-05T17:16:22Z","closedAt":null,"state":"open","user":{"login":"shashwatmishra76","avatarUrl":"https://avatars2.githubusercontent.com/u/24711156?v=4"},"owner":{"login":"shashwatmishra76","avatarUrl":"https://avatars2.githubusercontent.com/u/24711156?v=4"},"assignee":{"login":"shashwatmishra76","avatarUrl":"https://avatars2.githubusercontent.com/u/24711156?v=4"},"labels":[{"name":"process/wip","color":"fbca04"}],"pullRequest":{"htmlUrl":"https://github.com/coala/coala/pull/5688","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQxMDUzMzQ1Nw==","url":"https://github.com/coala/coala/pull/5688#issuecomment-410533457","bodyText":"@jayvdb This PR got a label of newcomer.So,this should be ready for reviewing from your side,right?","diffHunk":null,"author":{"login":"shashwatmishra76","avatarUrl":"https://avatars2.githubusercontent.com/u/24711156?v=4","name":"Shashwat Mishra"},"createdAt":"2018-08-05T17:03:01Z","lastEditedAt":null,"updatedAt":"2018-08-05T17:03:01Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQxMDUzNDI1Mw==","url":"https://github.com/coala/coala/pull/5688#issuecomment-410534253","bodyText":"Get rid of the incorrect attempt at fixing the typo. It is wrong. You are not assigned to do\n#5510 (comment)","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-08-05T17:15:50Z","lastEditedAt":null,"updatedAt":"2018-08-05T17:15:50Z"}]}}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1533658624000,"issue":{"htmlUrl":"https://github.com/coala/coala/pull/5690","number":5690,"title":"Section Tags Filter","body":"PTAL https://github.com/ksdme/cEPs/blob/cEP-0028/cEP-0028.md","comments":1,"createdAt":"2018-08-05T15:20:05Z","updatedAt":"2018-08-07T16:17:04Z","closedAt":null,"state":"open","user":{"login":"ksdme","avatarUrl":"https://avatars1.githubusercontent.com/u/12156014?v=4"},"owner":{"login":"ksdme","avatarUrl":"https://avatars1.githubusercontent.com/u/12156014?v=4"},"labels":[{"name":"process/pending review","color":"bfe5bf"},{"name":"size/M","color":"eb6420"}],"pullRequest":{"htmlUrl":"https://github.com/coala/coala/pull/5690","comments":[{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzc0MDMwMg==","url":"https://github.com/coala/coala/pull/5690#discussion_r207740302","bodyText":"This belongs before --bear-dirs , probably after --files .\nLets wait for more feedback on position","diffHunk":"@@ -177,6 +177,10 @@ def default_arg_parser(formatter_class=None):\n         '-d', '--bear-dirs', type=PathArg, nargs='+', metavar='DIR',\n         help='additional directories which may contain bears')\n \n+    inputs_group.add_argument(","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNzQ2Nzg1NA==","createdAt":"2018-08-05T15:44:01Z","content":"THUMBS_UP","user":{"login":"ksdme","name":"Kilari Teja"}}],"createdAt":"2018-08-05T15:35:45Z","lastEditedAt":null,"updatedAt":"2018-08-05T15:35:45Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzc0MDMzMA==","url":"https://github.com/coala/coala/pull/5690#discussion_r207740330","bodyText":"please use exampes from your cEP, and your own real needs.\nthis looks like language , not a tag which should be an arbitrary grouping which couldnt be achieved via any other means.","diffHunk":"@@ -49,6 +55,37 @@ def apply_filter(filter_name, filter_args, all_bears=None):\n     return local_bears, global_bears\n \n \n+def apply_section_filter(filter_name, filter_args, all_sections):\n+    \"\"\"\n+    Returns sections after filtering based on ``filter_args``. It returns\n+    all sections if nothing is present in ``filter_args``.\n+\n+    :param filter_name:\n+        Name of the filter.\n+    :param filter_args:\n+        Arguments of the filter to be passed in.\n+        For example:\n+        ``['tags', ('java',)]``","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNzQ2NzgzOA==","createdAt":"2018-08-05T15:42:57Z","content":"THUMBS_UP","user":{"login":"ksdme","name":"Kilari Teja"}}],"createdAt":"2018-08-05T15:37:04Z","lastEditedAt":null,"updatedAt":"2018-08-05T15:37:04Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzc0MDM1MA==","url":"https://github.com/coala/coala/pull/5690#discussion_r207740350","bodyText":"again, dont use tags that are a language .  it is confusing.","diffHunk":"@@ -68,3 +105,53 @@ def apply_filters(filters, bears=None):\n         filter_name, *filter_args = filter\n         bears = apply_filter(filter_name, filter_args, bears)\n     return bears\n+\n+\n+def apply_section_filters(filters, sections):\n+    \"\"\"\n+    Returns sections after filtering based on ``filters``. It returns\n+    intersection of sections if more than one element is present in ``filters``\n+    list.\n+\n+    :param filters:\n+        List of args based on ``sections`` has to be filtered.\n+        For example:\n+        ``[['tags', ('save', 'change')], ['exclude', ('css', '!python')]]``","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNzQ2NzgzOQ==","createdAt":"2018-08-05T15:43:09Z","content":"THUMBS_UP","user":{"login":"ksdme","name":"Kilari Teja"}}],"createdAt":"2018-08-05T15:38:06Z","lastEditedAt":null,"updatedAt":"2018-08-05T15:38:06Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzc0MDQ0Mw==","url":"https://github.com/coala/coala/pull/5690#discussion_r207740443","bodyText":"move the '-c', back to the next line, so you dont modify that line.\nit is also confusing to have the '-c', on this line when its arg is on the next line.","diffHunk":"@@ -198,12 +198,16 @@ def test_merge_defaults(self):\n                 gather_configuration(lambda *args: True,\n                                      self.log_printer,\n                                      arg_list=['-S', 'value=1', 'test.value=2',\n-                                               '-c', escape(temporary, '\\\\')] +\n+                                               '--tags', 'save', '-c',","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNzQ2Nzg0NA==","createdAt":"2018-08-05T15:43:20Z","content":"THUMBS_UP","user":{"login":"ksdme","name":"Kilari Teja"}}],"createdAt":"2018-08-05T15:41:19Z","lastEditedAt":null,"updatedAt":"2018-08-05T15:41:19Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzc0MDUyNw==","url":"https://github.com/coala/coala/pull/5690#discussion_r207740527","bodyText":"I used them as examples, but I will update it.","diffHunk":"@@ -49,6 +55,37 @@ def apply_filter(filter_name, filter_args, all_bears=None):\n     return local_bears, global_bears\n \n \n+def apply_section_filter(filter_name, filter_args, all_sections):\n+    \"\"\"\n+    Returns sections after filtering based on ``filter_args``. It returns\n+    all sections if nothing is present in ``filter_args``.\n+\n+    :param filter_name:\n+        Name of the filter.\n+    :param filter_args:\n+        Arguments of the filter to be passed in.\n+        For example:\n+        ``['tags', ('java',)]``","author":{"login":"ksdme","avatarUrl":"https://avatars1.githubusercontent.com/u/12156014?v=4","name":"Kilari Teja"},"reactions":[],"createdAt":"2018-08-05T15:43:43Z","lastEditedAt":null,"updatedAt":"2018-08-05T15:43:43Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzc0MDk4MA==","url":"https://github.com/coala/coala/pull/5690#discussion_r207740980","bodyText":"Currently,\nInputs:\n  -b, --bears           names of bears to use\n  -f, --files           files that should be checked\n  -i, --ignore          files that should be ignored\n  --limit-files         filter the `--files` argument's matches further\n  -d, --bear-dirs       additional directories which may contain bears\n  -t, --tags            tags of sections to execute\n\nI think tags should definitely be above bear-dirs.","diffHunk":"@@ -177,6 +177,10 @@ def default_arg_parser(formatter_class=None):\n         '-d', '--bear-dirs', type=PathArg, nargs='+', metavar='DIR',\n         help='additional directories which may contain bears')\n \n+    inputs_group.add_argument(","author":{"login":"ksdme","avatarUrl":"https://avatars1.githubusercontent.com/u/12156014?v=4","name":"Kilari Teja"},"reactions":[],"createdAt":"2018-08-05T15:59:29Z","lastEditedAt":null,"updatedAt":"2018-08-05T15:59:29Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzc2NDM1MQ==","url":"https://github.com/coala/coala/pull/5690#discussion_r207764351","bodyText":"nope.\nlets improve the filters system to support sections.\ndef foo_filter(thing, args):\nevery filter than checks whether is knows what is in thing, e.g. using isinstance , and raises NotImplementedError if it doesnt get it.  Existing filters only know about Bear.\nYou make a small chance to the existing filters to make them compliant with the new API by adding a raise NotImplementedError to them.\n(Actually most of them understand could easily be improved to understand Section, but that is beyond the scope of your change, and each will need to be carefully done wrt the CLI args to ensure we build a good user experience)","diffHunk":"@@ -1,11 +1,17 @@\n from coalib.parsing.InvalidFilterException import InvalidFilterException\n-from coalib.parsing.filters import available_filters\n+from coalib.parsing.filters import (\n+    available_filters, available_section_filters)\n+from coalib.parsing.DefaultArgParser import default_arg_parser\n \n \n def is_valid_filter(filter):\n     return filter in available_filters\n \n \n+def is_valid_section_filter(filter):","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-08-06T02:54:27Z","lastEditedAt":null,"updatedAt":"2018-08-06T02:54:27Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzc2NDU3MQ==","url":"https://github.com/coala/coala/pull/5690#discussion_r207764571","bodyText":"not needed.  below you would catch NotImplementedError and ignore it.","diffHunk":"@@ -49,6 +55,37 @@ def apply_filter(filter_name, filter_args, all_bears=None):\n     return local_bears, global_bears\n \n \n+def apply_section_filter(filter_name, filter_args, all_sections):\n+    \"\"\"\n+    Returns sections after filtering based on ``filter_args``. It returns\n+    all sections if nothing is present in ``filter_args``.\n+\n+    :param filter_name:\n+        Name of the filter.\n+    :param filter_args:\n+        Arguments of the filter to be passed in.\n+        For example:\n+        ``['tag_section_filter', ('save', 'change')]``\n+    :param all_sections:\n+        List of sections on which filter is to be applied.\n+    :return:\n+        Filtered sections based on a single section filter.\n+    \"\"\"\n+    if not is_valid_section_filter(filter_name):\n+        raise InvalidFilterException(filter_name)\n+    if not filter_args or len(filter_args) == 0:\n+        return all_sections\n+\n+    filter_function = available_section_filters[filter_name]","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-08-06T02:57:03Z","lastEditedAt":null,"updatedAt":"2018-08-06T02:57:03Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzc2NDgxMA==","url":"https://github.com/coala/coala/pull/5690#discussion_r207764810","bodyText":"I agree with @shreyans800755 that this doesnt belong in the filter.\nksdme@f8fc69c#r29964403\nThe cli section should be kept hidden inside coalib/settings, as a special case implementation detail.  It annoys me that we have any UI messages that mention this section -- the user cant see it, so they shouldnt hear about it.\nAnd likewise developers in other parts of coalib shouldnt need to deal with that section.","diffHunk":"@@ -0,0 +1,21 @@\n+def tag_section_filter(section, args):\n+    \"\"\"\n+    Filters the sections by ``tags``. ``cli`` is always accepted.\n+\n+    :param section: Section object.\n+    :param args:    Set of tags on which ``section`` is to be filtered.\n+    :return:        ``True`` if this section matches the criteria inside args,\n+                    ``False`` otherwise.\n+    \"\"\"\n+    if section.name == 'cli':","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-08-06T03:00:04Z","lastEditedAt":null,"updatedAt":"2018-08-06T03:00:04Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzc2OTAxOQ==","url":"https://github.com/coala/coala/pull/5690#discussion_r207769019","bodyText":"I think we could remove the last ,","diffHunk":"@@ -159,6 +161,15 @@ def run_coala(console_printer=None,\n                 (section_name, sections[section_name])\n                 for section_name in targets)\n \n+        # Collect all the section filters which are based on args,","author":{"login":"gaocegege","avatarUrl":"https://avatars3.githubusercontent.com/u/5100735?v=4","name":"Ce Gao"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNzQ5NDg1MQ==","createdAt":"2018-08-06T11:33:29Z","content":"THUMBS_UP","user":{"login":"ksdme","name":"Kilari Teja"}}],"createdAt":"2018-08-06T03:54:24Z","lastEditedAt":null,"updatedAt":"2018-08-06T03:54:24Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODAyNTA0OQ==","url":"https://github.com/coala/coala/pull/5690#discussion_r208025049","bodyText":"Let's call it items rather than things","diffHunk":"@@ -49,22 +50,83 @@ def apply_filter(filter_name, filter_args, all_bears=None):\n     return local_bears, global_bears\n \n \n-def apply_filters(filters, bears=None):\n+def _apply_section_filter(filter_name, filter_args, all_sections):\n     \"\"\"\n-    Returns bears after filtering based on ``filters``. It returns\n-    intersection of bears if more than one element is present in ``filters``\n-    list.\n+    Returns sections after filtering based on ``filter_args``. It\n+    returns all sections if nothing is present in ``filter_args``.\n+\n+    :param filter_name:\n+        Name of the section filter.\n+    :param filter_args:\n+        Arguments to be passed to the filter. For example:\n+        ``['section_tags', ('save', 'change')]``\n+    :param all_sections:\n+        List of all sections on which filter is to be applied.\n+    :return:\n+        Filtered sections based on a single section filter.\n+    \"\"\"\n+    if not is_valid_filter(filter_name):\n+        raise InvalidFilterException(filter_name)\n+    if not filter_args or len(filter_args) == 0:\n+        return all_sections\n+\n+    filter_function = available_filters[filter_name]\n+    filtered_sections = []\n+\n+    for section in all_sections:\n+        if filter_function(section, filter_args):\n+            filtered_sections += [section]\n+\n+    return filtered_sections\n+\n+\n+def apply_filters(filters, bears=None, sections=None):\n+    \"\"\"\n+    Returns bears or sections after filtering based on ``filters``.\n+    It returns intersection if more than one element is present in\n+    ``filters`` list. Either bears or sections need to be passed,\n+    if both or none are passed it defaults to use bears gathering\n+    and runs filter in bear filtering mode.\n \n     :param filters:\n-        List of args based on ``bears`` has to be filtered.\n-        For example:\n-        ``[['language', 'c', 'java'], ['can_fix', 'syntax']]``\n+        List of args based on ``bears`` has to be filtered. For example:\n+        ``[['language', 'c', 'java'], ['can_fix', 'syntax'],\n+        ['section_tags', 'save']]``\n     :param bears:\n         The bears to filter.\n+    :param sections:\n+        The sections to filter.\n     :return:\n-        Filtered bears.\n+        Filtered bears or sections.\n     \"\"\"\n+    things = bears","author":{"login":"shreyans800755","avatarUrl":"https://avatars2.githubusercontent.com/u/3727351?v=4","name":"Shreyans"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNzUyNzAxOA==","createdAt":"2018-08-06T21:48:44Z","content":"THUMBS_UP","user":{"login":"jayvdb","name":"John Vandenberg"}}],"createdAt":"2018-08-06T20:50:01Z","lastEditedAt":null,"updatedAt":"2018-08-06T20:50:01Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODAyNTQ0OQ==","url":"https://github.com/coala/coala/pull/5690#discussion_r208025449","bodyText":"Do we have any practical case for this condition ?\nIf so, is there way we can check this before calling this function ?","diffHunk":"@@ -49,22 +50,83 @@ def apply_filter(filter_name, filter_args, all_bears=None):\n     return local_bears, global_bears\n \n \n-def apply_filters(filters, bears=None):\n+def _apply_section_filter(filter_name, filter_args, all_sections):\n     \"\"\"\n-    Returns bears after filtering based on ``filters``. It returns\n-    intersection of bears if more than one element is present in ``filters``\n-    list.\n+    Returns sections after filtering based on ``filter_args``. It\n+    returns all sections if nothing is present in ``filter_args``.\n+\n+    :param filter_name:\n+        Name of the section filter.\n+    :param filter_args:\n+        Arguments to be passed to the filter. For example:\n+        ``['section_tags', ('save', 'change')]``\n+    :param all_sections:\n+        List of all sections on which filter is to be applied.\n+    :return:\n+        Filtered sections based on a single section filter.\n+    \"\"\"\n+    if not is_valid_filter(filter_name):\n+        raise InvalidFilterException(filter_name)\n+    if not filter_args or len(filter_args) == 0:\n+        return all_sections\n+\n+    filter_function = available_filters[filter_name]\n+    filtered_sections = []\n+\n+    for section in all_sections:\n+        if filter_function(section, filter_args):\n+            filtered_sections += [section]\n+\n+    return filtered_sections\n+\n+\n+def apply_filters(filters, bears=None, sections=None):\n+    \"\"\"\n+    Returns bears or sections after filtering based on ``filters``.\n+    It returns intersection if more than one element is present in\n+    ``filters`` list. Either bears or sections need to be passed,\n+    if both or none are passed it defaults to use bears gathering\n+    and runs filter in bear filtering mode.\n \n     :param filters:\n-        List of args based on ``bears`` has to be filtered.\n-        For example:\n-        ``[['language', 'c', 'java'], ['can_fix', 'syntax']]``\n+        List of args based on ``bears`` has to be filtered. For example:\n+        ``[['language', 'c', 'java'], ['can_fix', 'syntax'],\n+        ['section_tags', 'save']]``\n     :param bears:\n         The bears to filter.\n+    :param sections:\n+        The sections to filter.\n     :return:\n-        Filtered bears.\n+        Filtered bears or sections.\n     \"\"\"\n+    things = bears\n+    applier = apply_filter\n+    if sections is not None:\n+        things = sections\n+        applier = _apply_section_filter\n+\n     for filter in filters:\n         filter_name, *filter_args = filter\n-        bears = apply_filter(filter_name, filter_args, bears)\n-    return bears\n+        things = applier(filter_name, filter_args, things)\n+    return things\n+\n+\n+def collect_filters(args, arg_list=None, arg_parser=None):\n+    \"\"\"\n+    Collects all filters from based on cli arguments.\n+\n+    :param args:\n+        Parsed CLI args using which the filters are to be collected.\n+    :param arg_list:\n+        The CLI argument list.\n+    :param arg_parser:\n+        Instance of ArgParser that is used to parse arg list.\n+    :return:\n+        List of filters in standard filter format, i.e\n+        ``[['filter_name', 'arg1', 'arg2']]``.\n+    \"\"\"\n+    if args is None:","author":{"login":"shreyans800755","avatarUrl":"https://avatars2.githubusercontent.com/u/3727351?v=4","name":"Shreyans"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNzUyNzIyNw==","createdAt":"2018-08-06T21:53:21Z","content":"THUMBS_UP","user":{"login":"jayvdb","name":"John Vandenberg"}}],"createdAt":"2018-08-06T20:51:36Z","lastEditedAt":null,"updatedAt":"2018-08-06T20:51:36Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODAyNTU4NA==","url":"https://github.com/coala/coala/pull/5690#discussion_r208025584","bodyText":"Because this is not the job of this function. This function is just a getter","diffHunk":"@@ -49,22 +50,83 @@ def apply_filter(filter_name, filter_args, all_bears=None):\n     return local_bears, global_bears\n \n \n-def apply_filters(filters, bears=None):\n+def _apply_section_filter(filter_name, filter_args, all_sections):\n     \"\"\"\n-    Returns bears after filtering based on ``filters``. It returns\n-    intersection of bears if more than one element is present in ``filters``\n-    list.\n+    Returns sections after filtering based on ``filter_args``. It\n+    returns all sections if nothing is present in ``filter_args``.\n+\n+    :param filter_name:\n+        Name of the section filter.\n+    :param filter_args:\n+        Arguments to be passed to the filter. For example:\n+        ``['section_tags', ('save', 'change')]``\n+    :param all_sections:\n+        List of all sections on which filter is to be applied.\n+    :return:\n+        Filtered sections based on a single section filter.\n+    \"\"\"\n+    if not is_valid_filter(filter_name):\n+        raise InvalidFilterException(filter_name)\n+    if not filter_args or len(filter_args) == 0:\n+        return all_sections\n+\n+    filter_function = available_filters[filter_name]\n+    filtered_sections = []\n+\n+    for section in all_sections:\n+        if filter_function(section, filter_args):\n+            filtered_sections += [section]\n+\n+    return filtered_sections\n+\n+\n+def apply_filters(filters, bears=None, sections=None):\n+    \"\"\"\n+    Returns bears or sections after filtering based on ``filters``.\n+    It returns intersection if more than one element is present in\n+    ``filters`` list. Either bears or sections need to be passed,\n+    if both or none are passed it defaults to use bears gathering\n+    and runs filter in bear filtering mode.\n \n     :param filters:\n-        List of args based on ``bears`` has to be filtered.\n-        For example:\n-        ``[['language', 'c', 'java'], ['can_fix', 'syntax']]``\n+        List of args based on ``bears`` has to be filtered. For example:\n+        ``[['language', 'c', 'java'], ['can_fix', 'syntax'],\n+        ['section_tags', 'save']]``\n     :param bears:\n         The bears to filter.\n+    :param sections:\n+        The sections to filter.\n     :return:\n-        Filtered bears.\n+        Filtered bears or sections.\n     \"\"\"\n+    things = bears\n+    applier = apply_filter\n+    if sections is not None:\n+        things = sections\n+        applier = _apply_section_filter\n+\n     for filter in filters:\n         filter_name, *filter_args = filter\n-        bears = apply_filter(filter_name, filter_args, bears)\n-    return bears\n+        things = applier(filter_name, filter_args, things)\n+    return things\n+\n+\n+def collect_filters(args, arg_list=None, arg_parser=None):\n+    \"\"\"\n+    Collects all filters from based on cli arguments.\n+\n+    :param args:\n+        Parsed CLI args using which the filters are to be collected.\n+    :param arg_list:\n+        The CLI argument list.\n+    :param arg_parser:\n+        Instance of ArgParser that is used to parse arg list.\n+    :return:\n+        List of filters in standard filter format, i.e\n+        ``[['filter_name', 'arg1', 'arg2']]``.\n+    \"\"\"\n+    if args is None:","author":{"login":"shreyans800755","avatarUrl":"https://avatars2.githubusercontent.com/u/3727351?v=4","name":"Shreyans"},"reactions":[],"createdAt":"2018-08-06T20:52:04Z","lastEditedAt":null,"updatedAt":"2018-08-06T20:52:04Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODA0MDI2MA==","url":"https://github.com/coala/coala/pull/5690#discussion_r208040260","bodyText":"move this after the apply_filters function so that the diff better aligns, and probably at the end as it is a private function","diffHunk":"@@ -49,22 +50,83 @@ def apply_filter(filter_name, filter_args, all_bears=None):\n     return local_bears, global_bears\n \n \n-def apply_filters(filters, bears=None):\n+def _apply_section_filter(filter_name, filter_args, all_sections):","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNzU0MDIyOA==","createdAt":"2018-08-07T06:01:04Z","content":"THUMBS_UP","user":{"login":"ksdme","name":"Kilari Teja"}}],"createdAt":"2018-08-06T21:49:53Z","lastEditedAt":null,"updatedAt":"2018-08-06T21:49:53Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODA0MTM1Nw==","url":"https://github.com/coala/coala/pull/5690#discussion_r208041357","bodyText":"It looks like a helper for the tests , so should be moved into the tests.","diffHunk":"@@ -49,22 +50,83 @@ def apply_filter(filter_name, filter_args, all_bears=None):\n     return local_bears, global_bears\n \n \n-def apply_filters(filters, bears=None):\n+def _apply_section_filter(filter_name, filter_args, all_sections):\n     \"\"\"\n-    Returns bears after filtering based on ``filters``. It returns\n-    intersection of bears if more than one element is present in ``filters``\n-    list.\n+    Returns sections after filtering based on ``filter_args``. It\n+    returns all sections if nothing is present in ``filter_args``.\n+\n+    :param filter_name:\n+        Name of the section filter.\n+    :param filter_args:\n+        Arguments to be passed to the filter. For example:\n+        ``['section_tags', ('save', 'change')]``\n+    :param all_sections:\n+        List of all sections on which filter is to be applied.\n+    :return:\n+        Filtered sections based on a single section filter.\n+    \"\"\"\n+    if not is_valid_filter(filter_name):\n+        raise InvalidFilterException(filter_name)\n+    if not filter_args or len(filter_args) == 0:\n+        return all_sections\n+\n+    filter_function = available_filters[filter_name]\n+    filtered_sections = []\n+\n+    for section in all_sections:\n+        if filter_function(section, filter_args):\n+            filtered_sections += [section]\n+\n+    return filtered_sections\n+\n+\n+def apply_filters(filters, bears=None, sections=None):\n+    \"\"\"\n+    Returns bears or sections after filtering based on ``filters``.\n+    It returns intersection if more than one element is present in\n+    ``filters`` list. Either bears or sections need to be passed,\n+    if both or none are passed it defaults to use bears gathering\n+    and runs filter in bear filtering mode.\n \n     :param filters:\n-        List of args based on ``bears`` has to be filtered.\n-        For example:\n-        ``[['language', 'c', 'java'], ['can_fix', 'syntax']]``\n+        List of args based on ``bears`` has to be filtered. For example:\n+        ``[['language', 'c', 'java'], ['can_fix', 'syntax'],\n+        ['section_tags', 'save']]``\n     :param bears:\n         The bears to filter.\n+    :param sections:\n+        The sections to filter.\n     :return:\n-        Filtered bears.\n+        Filtered bears or sections.\n     \"\"\"\n+    things = bears\n+    applier = apply_filter\n+    if sections is not None:\n+        things = sections\n+        applier = _apply_section_filter\n+\n     for filter in filters:\n         filter_name, *filter_args = filter\n-        bears = apply_filter(filter_name, filter_args, bears)\n-    return bears\n+        things = applier(filter_name, filter_args, things)\n+    return things\n+\n+\n+def collect_filters(args, arg_list=None, arg_parser=None):\n+    \"\"\"\n+    Collects all filters from based on cli arguments.\n+\n+    :param args:\n+        Parsed CLI args using which the filters are to be collected.\n+    :param arg_list:\n+        The CLI argument list.\n+    :param arg_parser:\n+        Instance of ArgParser that is used to parse arg list.\n+    :return:\n+        List of filters in standard filter format, i.e\n+        ``[['filter_name', 'arg1', 'arg2']]``.\n+    \"\"\"\n+    if args is None:","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-08-06T21:54:38Z","lastEditedAt":null,"updatedAt":"2018-08-06T21:54:38Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODA0MjA4Ng==","url":"https://github.com/coala/coala/pull/5690#discussion_r208042086","bodyText":"(almost) very generic ... belongs in coala_utils::decorators.py\nand this is enforce_duck_type or enforce_duct_tape ? ;-)\nand to make calling generic, use\n@typed_filter(bear='bearclass')\ndef language_filter(bear, args):\n```","diffHunk":"@@ -0,0 +1,42 @@\n+from inspect import getmro\n+from functools import wraps\n+\n+\n+def typed_filter(type_classes, msg=None):","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNzU0MDM0Mw==","createdAt":"2018-08-07T06:04:06Z","content":"THUMBS_UP","user":{"login":"ksdme","name":"Kilari Teja"}}],"createdAt":"2018-08-06T21:58:04Z","lastEditedAt":null,"updatedAt":"2018-08-06T21:58:04Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODA0MjI0OA==","url":"https://github.com/coala/coala/pull/5690#discussion_r208042248","bodyText":"thing -> obj or object_","diffHunk":"@@ -0,0 +1,42 @@\n+from inspect import getmro\n+from functools import wraps\n+\n+\n+def typed_filter(type_classes, msg=None):\n+    \"\"\"\n+    Used to enforce type of the first argument of a method\n+    by its class name as string. Raises NotImplementedError\n+    if the type does not match. Primarily used to enforce\n+    type of a filter.\n+\n+    :param type_classes:    list or tuple of acceptable class names\n+                            as strings for the first argument of the\n+                            method being decorated.\n+    :param msg:             Message to pass with NotImplementedError.\n+    \"\"\"\n+    if (type(type_classes) not in (tuple, list)):\n+        type_classes = (type_classes,)\n+\n+    def decorator(filter):\n+\n+        @wraps(filter)\n+        def decorated_filter(thing, *args, **kargs):","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNzU0MDIwMA==","createdAt":"2018-08-07T06:00:22Z","content":"THUMBS_UP","user":{"login":"ksdme","name":"Kilari Teja"}}],"createdAt":"2018-08-06T21:58:48Z","lastEditedAt":null,"updatedAt":"2018-08-06T21:58:48Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODA0MzI0NA==","url":"https://github.com/coala/coala/pull/5690#discussion_r208043244","bodyText":"it was going so well until you mentioned filter here.\nthe thing you are wrapping has a name, which you are using here.\nThis decorator is a developer helper ... to catch when they have done the wrong thing.  it shouldnt give pretty names ... the caller needs to detect this and make it user-friendly.\nWhy should a NotImplementedError say \"language_filter filter\" .. ?  language_filter is better, and the backtrace is even better, so no need to tidy it up.\nTo help, create a subclass of NotImplementedError and stuff into it extra attributes to record what went wrong, such as the callee, expected classes, and the incorrect object which was encountered.   Then whoever is catching it can understand what went wrong and create a user-friendly message.","diffHunk":"@@ -0,0 +1,42 @@\n+from inspect import getmro\n+from functools import wraps\n+\n+\n+def typed_filter(type_classes, msg=None):\n+    \"\"\"\n+    Used to enforce type of the first argument of a method\n+    by its class name as string. Raises NotImplementedError\n+    if the type does not match. Primarily used to enforce\n+    type of a filter.\n+\n+    :param type_classes:    list or tuple of acceptable class names\n+                            as strings for the first argument of the\n+                            method being decorated.\n+    :param msg:             Message to pass with NotImplementedError.\n+    \"\"\"\n+    if (type(type_classes) not in (tuple, list)):\n+        type_classes = (type_classes,)\n+\n+    def decorator(filter):\n+\n+        @wraps(filter)\n+        def decorated_filter(thing, *args, **kargs):\n+            thing_class = thing.__class__\n+            all_bases = list(map(lambda klass: klass.__name__,\n+                                 getmro(thing_class)))\n+\n+            for type_class in type_classes:\n+                if str(type_class) in all_bases:\n+                    break\n+            else:\n+                raise NotImplementedError(\n+                    msg or '\\'{filter}\\' filter can only handle {type_name}. '","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-08-06T22:03:35Z","lastEditedAt":null,"updatedAt":"2018-08-06T22:03:35Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODA0NDM1Nw==","url":"https://github.com/coala/coala/pull/5690#discussion_r208044357","bodyText":"section_tag_filter","diffHunk":"@@ -0,0 +1,31 @@\n+from coalib.parsing.filters.decorators import typed_filter\n+\n+\n+@typed_filter(('bearclass', 'Bear', 'Section'))\n+def tag_section_filter(section_or_bear, args):","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNzUzOTkxNQ==","createdAt":"2018-08-07T05:50:37Z","content":"THUMBS_UP","user":{"login":"ksdme","name":"Kilari Teja"}}],"createdAt":"2018-08-06T22:09:14Z","lastEditedAt":null,"updatedAt":"2018-08-06T22:09:14Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODEwODU2MA==","url":"https://github.com/coala/coala/pull/5690#discussion_r208108560","bodyText":"run_coala\n\n:param arg_parser:        Instance of ArgParser that is used to non-setting arguments.\n:param arg_list:              The CLI argument list.\n:param args:                   Alternative pre-parsed CLI arguments.\n\nThis is not just about the tests, since args to run_coala() can be optionally passed instead of arg_list, I think we need to merge opts from both, so as to enable the internal usage of this filter. Tests also use can use this by directly calling run_coala() with an arg list.","diffHunk":"@@ -49,22 +50,83 @@ def apply_filter(filter_name, filter_args, all_bears=None):\n     return local_bears, global_bears\n \n \n-def apply_filters(filters, bears=None):\n+def _apply_section_filter(filter_name, filter_args, all_sections):\n     \"\"\"\n-    Returns bears after filtering based on ``filters``. It returns\n-    intersection of bears if more than one element is present in ``filters``\n-    list.\n+    Returns sections after filtering based on ``filter_args``. It\n+    returns all sections if nothing is present in ``filter_args``.\n+\n+    :param filter_name:\n+        Name of the section filter.\n+    :param filter_args:\n+        Arguments to be passed to the filter. For example:\n+        ``['section_tags', ('save', 'change')]``\n+    :param all_sections:\n+        List of all sections on which filter is to be applied.\n+    :return:\n+        Filtered sections based on a single section filter.\n+    \"\"\"\n+    if not is_valid_filter(filter_name):\n+        raise InvalidFilterException(filter_name)\n+    if not filter_args or len(filter_args) == 0:\n+        return all_sections\n+\n+    filter_function = available_filters[filter_name]\n+    filtered_sections = []\n+\n+    for section in all_sections:\n+        if filter_function(section, filter_args):\n+            filtered_sections += [section]\n+\n+    return filtered_sections\n+\n+\n+def apply_filters(filters, bears=None, sections=None):\n+    \"\"\"\n+    Returns bears or sections after filtering based on ``filters``.\n+    It returns intersection if more than one element is present in\n+    ``filters`` list. Either bears or sections need to be passed,\n+    if both or none are passed it defaults to use bears gathering\n+    and runs filter in bear filtering mode.\n \n     :param filters:\n-        List of args based on ``bears`` has to be filtered.\n-        For example:\n-        ``[['language', 'c', 'java'], ['can_fix', 'syntax']]``\n+        List of args based on ``bears`` has to be filtered. For example:\n+        ``[['language', 'c', 'java'], ['can_fix', 'syntax'],\n+        ['section_tags', 'save']]``\n     :param bears:\n         The bears to filter.\n+    :param sections:\n+        The sections to filter.\n     :return:\n-        Filtered bears.\n+        Filtered bears or sections.\n     \"\"\"\n+    things = bears\n+    applier = apply_filter\n+    if sections is not None:\n+        things = sections\n+        applier = _apply_section_filter\n+\n     for filter in filters:\n         filter_name, *filter_args = filter\n-        bears = apply_filter(filter_name, filter_args, bears)\n-    return bears\n+        things = applier(filter_name, filter_args, things)\n+    return things\n+\n+\n+def collect_filters(args, arg_list=None, arg_parser=None):\n+    \"\"\"\n+    Collects all filters from based on cli arguments.\n+\n+    :param args:\n+        Parsed CLI args using which the filters are to be collected.\n+    :param arg_list:\n+        The CLI argument list.\n+    :param arg_parser:\n+        Instance of ArgParser that is used to parse arg list.\n+    :return:\n+        List of filters in standard filter format, i.e\n+        ``[['filter_name', 'arg1', 'arg2']]``.\n+    \"\"\"\n+    if args is None:","author":{"login":"ksdme","avatarUrl":"https://avatars1.githubusercontent.com/u/12156014?v=4","name":"Kilari Teja"},"reactions":[],"createdAt":"2018-08-07T06:11:39Z","lastEditedAt":null,"updatedAt":"2018-08-07T06:11:39Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODEwODgwMw==","url":"https://github.com/coala/coala/pull/5690#discussion_r208108803","bodyText":"run_coala\n\n:param arg_parser:        Instance of ArgParser that is used to non-setting arguments.\n:param arg_list:              The CLI argument list.\n:param args:                   Alternative pre-parsed CLI arguments.\n\nThis is not just about the tests, since args to run_coala() can be optionally passed instead of arg_list, I think we need to merge opts from both, so as to enable the internal usage of this filter. Tests also use can use this by directly calling run_coala() with an arg list.","diffHunk":"@@ -49,22 +50,83 @@ def apply_filter(filter_name, filter_args, all_bears=None):\n     return local_bears, global_bears\n \n \n-def apply_filters(filters, bears=None):\n+def _apply_section_filter(filter_name, filter_args, all_sections):\n     \"\"\"\n-    Returns bears after filtering based on ``filters``. It returns\n-    intersection of bears if more than one element is present in ``filters``\n-    list.\n+    Returns sections after filtering based on ``filter_args``. It\n+    returns all sections if nothing is present in ``filter_args``.\n+\n+    :param filter_name:\n+        Name of the section filter.\n+    :param filter_args:\n+        Arguments to be passed to the filter. For example:\n+        ``['section_tags', ('save', 'change')]``\n+    :param all_sections:\n+        List of all sections on which filter is to be applied.\n+    :return:\n+        Filtered sections based on a single section filter.\n+    \"\"\"\n+    if not is_valid_filter(filter_name):\n+        raise InvalidFilterException(filter_name)\n+    if not filter_args or len(filter_args) == 0:\n+        return all_sections\n+\n+    filter_function = available_filters[filter_name]\n+    filtered_sections = []\n+\n+    for section in all_sections:\n+        if filter_function(section, filter_args):\n+            filtered_sections += [section]\n+\n+    return filtered_sections\n+\n+\n+def apply_filters(filters, bears=None, sections=None):\n+    \"\"\"\n+    Returns bears or sections after filtering based on ``filters``.\n+    It returns intersection if more than one element is present in\n+    ``filters`` list. Either bears or sections need to be passed,\n+    if both or none are passed it defaults to use bears gathering\n+    and runs filter in bear filtering mode.\n \n     :param filters:\n-        List of args based on ``bears`` has to be filtered.\n-        For example:\n-        ``[['language', 'c', 'java'], ['can_fix', 'syntax']]``\n+        List of args based on ``bears`` has to be filtered. For example:\n+        ``[['language', 'c', 'java'], ['can_fix', 'syntax'],\n+        ['section_tags', 'save']]``\n     :param bears:\n         The bears to filter.\n+    :param sections:\n+        The sections to filter.\n     :return:\n-        Filtered bears.\n+        Filtered bears or sections.\n     \"\"\"\n+    things = bears\n+    applier = apply_filter\n+    if sections is not None:\n+        things = sections\n+        applier = _apply_section_filter\n+\n     for filter in filters:\n         filter_name, *filter_args = filter\n-        bears = apply_filter(filter_name, filter_args, bears)\n-    return bears\n+        things = applier(filter_name, filter_args, things)\n+    return things\n+\n+\n+def collect_filters(args, arg_list=None, arg_parser=None):\n+    \"\"\"\n+    Collects all filters from based on cli arguments.\n+\n+    :param args:\n+        Parsed CLI args using which the filters are to be collected.\n+    :param arg_list:\n+        The CLI argument list.\n+    :param arg_parser:\n+        Instance of ArgParser that is used to parse arg list.\n+    :return:\n+        List of filters in standard filter format, i.e\n+        ``[['filter_name', 'arg1', 'arg2']]``.\n+    \"\"\"\n+    if args is None:","author":{"login":"ksdme","avatarUrl":"https://avatars1.githubusercontent.com/u/12156014?v=4","name":"Kilari Teja"},"reactions":[],"createdAt":"2018-08-07T06:12:25Z","lastEditedAt":null,"updatedAt":"2018-08-07T06:12:25Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQxMDgzOTE1OQ==","url":"https://github.com/coala/coala/pull/5690#issuecomment-410839159","bodyText":"Updated to use --filter-by (can be used by doing coala --filter-by section_tags save) for both section filters and bear filters. Known issues:\n\nRequires update to --filter-by documentation.","diffHunk":null,"author":{"login":"ksdme","avatarUrl":"https://avatars1.githubusercontent.com/u/12156014?v=4","name":"Kilari Teja"},"reactions":[],"createdAt":"2018-08-06T20:15:22Z","lastEditedAt":"2018-08-06T20:17:40Z","updatedAt":"2018-08-06T20:17:40Z"}]}}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1532774572000,"issue":{"htmlUrl":"https://github.com/coala/coala/pull/5675","number":5675,"title":"VisualBasic: Add `max_line_length`","body":"Some langauges have language specific line length restriction.\nThis adds max_line_length restriction for VB.\n\nFor short term contributors: we understand that getting your commits well\ndefined like we require is a hard task and takes some learning. If you\nlook to help without wanting to contribute long term there's no need\nfor you to learn this. Just drop us a message and we'll take care of brushing\nup your stuff for merge!\nChecklist\n\n I read the commit guidelines and I've followed\nthem.\n I ran coala over my code locally. (All commits have to pass\nindividually. It is not sufficient to have \"fixup commits\" on your PR,\nour bot will still report the issues for the previous commit.) You will\nlikely receive a lot of bot comments and build failures if coala does not\npass on every single commit!\n\nAfter you submit your pull request, DO NOT click the 'Update Branch' button.\nWhen asked for a rebase, consult coala.io/rebase\ninstead.\nPlease consider helping us by reviewing other peoples pull requests as well:\n\npick up any PR at https://coala.io/review\nreview it (check https://coala.io/reviewing for more info)\nif you are sure that it needs work, use corobo mark wip <URL> to get it out\nof the review queue.\n\nThe more you review, the more your score will grow at coala.io and we will\nreview your PRs faster!","comments":2,"createdAt":"2018-07-28T05:41:23Z","updatedAt":"2018-07-28T10:42:52Z","closedAt":"2018-07-28T10:42:52Z","state":"merged","user":{"login":"pareksha","avatarUrl":"https://avatars1.githubusercontent.com/u/32385407?v=4"},"owner":{"login":"pareksha","avatarUrl":"https://avatars1.githubusercontent.com/u/32385407?v=4"},"labels":[],"pullRequest":{"htmlUrl":"https://github.com/coala/coala/pull/5675","comments":[]}}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1533249511000,"issue":{"htmlUrl":"https://github.com/coala/coala/pull/5677","number":5677,"title":"Bear: Remove debugger from init","body":"Add initial Fix the API breakage problem\nbecause of debugger flag in bear base\nclass.\nRelated to #5676","comments":6,"createdAt":"2018-07-28T10:45:43Z","updatedAt":"2018-08-02T22:38:31Z","closedAt":"2018-08-01T03:54:15Z","state":"merged","user":{"login":"RaiVaibhav","avatarUrl":"https://avatars3.githubusercontent.com/u/22278438?v=4"},"owner":{"login":"RaiVaibhav","avatarUrl":"https://avatars3.githubusercontent.com/u/22278438?v=4"},"labels":[{"name":"process/approved","color":"009800"},{"name":"size/S","color":"B1CF0A"},{"name":"status/ci-approved","color":"ededed"}],"pullRequest":{"htmlUrl":"https://github.com/coala/coala/pull/5677","comments":[{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk0MDM3Mw==","url":"https://github.com/coala/coala/pull/5677#discussion_r205940373","bodyText":"these changes are already reflected in Profiler interface PR once these changes gets merge there I will rebase (the purpose of reflecting these changes here is preventing the coverage and test failure problem)","diffHunk":"@@ -566,8 +567,8 @@ def test_yield_ignore_ranges(self):\n     def test_loaded_bears_with_error_result(self):\n         class BearWithMissingPrerequisites(Bear):\n \n-            def __init__(self, section, queue, timeout=0.1, debugger=False):\n-                Bear.__init__(self, section, queue, timeout, debugger)\n+            def __init__(self, *args, **kwargs):\n+                Bear.__init__(self, *args, **kwargs)","author":{"login":"RaiVaibhav","avatarUrl":"https://avatars3.githubusercontent.com/u/22278438?v=4","name":"Vaibhav Rai"},"reactions":[],"createdAt":"2018-07-28T10:48:47Z","lastEditedAt":null,"updatedAt":"2018-07-28T10:48:47Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk0NzIxMQ==","url":"https://github.com/coala/coala/pull/5677#discussion_r205947211","bodyText":"put this in a helper function.  You will use it again for profile","diffHunk":"@@ -301,7 +302,12 @@ def __init__(self,\n         self.section = section\n         self.message_queue = message_queue\n         self.timeout = timeout\n-        self.debugger = debugger\n+        self.debugger = (False if 'debug_bears' not in section or (","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-28T16:20:55Z","lastEditedAt":null,"updatedAt":"2018-07-28T16:20:55Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk0NzI1Mg==","url":"https://github.com/coala/coala/pull/5677#discussion_r205947252","bodyText":"why changing to GlobalBear ?","diffHunk":"@@ -606,41 +607,36 @@ def check_prerequisites(cls):\n     def test_global_instantiation(self):\n         class TestOneBear(Bear):\n \n-            def __init__(self, file_dict, section, queue, timeout=0.1,\n-                         debugger=False):\n+            def __init__(self, *args, **kwargs):\n                 raise RuntimeError\n \n-        class TestTwoBear(Bear):\n+        class TestTwoBear(GlobalBear):","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-28T16:23:01Z","lastEditedAt":null,"updatedAt":"2018-07-28T16:23:01Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk1NDEyMA==","url":"https://github.com/coala/coala/pull/5677#discussion_r205954120","bodyText":"I just made test more clear check the line 627 (just like a enhancement of test), it will also run fine without changing it to GlobalBear","diffHunk":"@@ -606,41 +607,36 @@ def check_prerequisites(cls):\n     def test_global_instantiation(self):\n         class TestOneBear(Bear):\n \n-            def __init__(self, file_dict, section, queue, timeout=0.1,\n-                         debugger=False):\n+            def __init__(self, *args, **kwargs):\n                 raise RuntimeError\n \n-        class TestTwoBear(Bear):\n+        class TestTwoBear(GlobalBear):","author":{"login":"RaiVaibhav","avatarUrl":"https://avatars3.githubusercontent.com/u/22278438?v=4","name":"Vaibhav Rai"},"reactions":[],"createdAt":"2018-07-28T21:13:33Z","lastEditedAt":null,"updatedAt":"2018-07-28T21:13:33Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk1NDE3MA==","url":"https://github.com/coala/coala/pull/5677#discussion_r205954170","bodyText":"@jayvdb I didn't get, you want me to make a different private method which do the same work?\n\nYou will use it again for profile\n\nI don't think so as debug_bears accept different argument then profile, If I try to mix both it will create a extra code","diffHunk":"@@ -301,7 +302,12 @@ def __init__(self,\n         self.section = section\n         self.message_queue = message_queue\n         self.timeout = timeout\n-        self.debugger = debugger\n+        self.debugger = (False if 'debug_bears' not in section or (","author":{"login":"RaiVaibhav","avatarUrl":"https://avatars3.githubusercontent.com/u/22278438?v=4","name":"Vaibhav Rai"},"reactions":[],"createdAt":"2018-07-28T21:15:51Z","lastEditedAt":null,"updatedAt":"2018-07-28T21:15:51Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk2MDQzMw==","url":"https://github.com/coala/coala/pull/5677#discussion_r205960433","bodyText":"Also IMO creating a helper will not help as both debug_bears and profile take different argument and accordingly logic change in both case.","diffHunk":"@@ -301,7 +302,12 @@ def __init__(self,\n         self.section = section\n         self.message_queue = message_queue\n         self.timeout = timeout\n-        self.debugger = debugger\n+        self.debugger = (False if 'debug_bears' not in section or (","author":{"login":"RaiVaibhav","avatarUrl":"https://avatars3.githubusercontent.com/u/22278438?v=4","name":"Vaibhav Rai"},"reactions":[],"createdAt":"2018-07-29T04:29:24Z","lastEditedAt":null,"updatedAt":"2018-07-29T04:29:24Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk2MDc2MA==","url":"https://github.com/coala/coala/pull/5677#discussion_r205960760","bodyText":"the helper would take an argument obviously for the setting name.\nIf necessary, create two helpers.\nAt the moment these are gibberish logic which I am assuming is similar because it isnt python code which is readable and intuitive.","diffHunk":"@@ -301,7 +302,12 @@ def __init__(self,\n         self.section = section\n         self.message_queue = message_queue\n         self.timeout = timeout\n-        self.debugger = debugger\n+        self.debugger = (False if 'debug_bears' not in section or (","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNzEyNjQ5OA==","createdAt":"2018-07-29T05:05:47Z","content":"THUMBS_UP","user":{"login":"RaiVaibhav","name":"Vaibhav Rai"}}],"createdAt":"2018-07-29T04:57:06Z","lastEditedAt":"2018-07-29T04:57:24Z","updatedAt":"2018-07-29T04:57:24Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk2MDk1NQ==","url":"https://github.com/coala/coala/pull/5677#discussion_r205960955","bodyText":"If the test runs fine without changing it to GlobalBear, please do not change the tests.\nCreate an issue and explain why you think it should be changed.\nAnd it would probably be a newcomer issue.","diffHunk":"@@ -606,41 +607,36 @@ def check_prerequisites(cls):\n     def test_global_instantiation(self):\n         class TestOneBear(Bear):\n \n-            def __init__(self, file_dict, section, queue, timeout=0.1,\n-                         debugger=False):\n+            def __init__(self, *args, **kwargs):\n                 raise RuntimeError\n \n-        class TestTwoBear(Bear):\n+        class TestTwoBear(GlobalBear):","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-29T05:10:11Z","lastEditedAt":null,"updatedAt":"2018-07-29T05:10:11Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk2MjIwMQ==","url":"https://github.com/coala/coala/pull/5677#discussion_r205962201","bodyText":"Sorry for the confusion please nvm the above comment, that change was meaningfull actually GlobalBear gets one more arg file_dict compare to other Bears. so I changed that to GlobalBear here, these changes will be needed when I put *args and **kwargs here","diffHunk":"@@ -606,41 +607,36 @@ def check_prerequisites(cls):\n     def test_global_instantiation(self):\n         class TestOneBear(Bear):\n \n-            def __init__(self, file_dict, section, queue, timeout=0.1,\n-                         debugger=False):\n+            def __init__(self, *args, **kwargs):\n                 raise RuntimeError\n \n-        class TestTwoBear(Bear):\n+        class TestTwoBear(GlobalBear):","author":{"login":"RaiVaibhav","avatarUrl":"https://avatars3.githubusercontent.com/u/22278438?v=4","name":"Vaibhav Rai"},"reactions":[],"createdAt":"2018-07-29T06:19:14Z","lastEditedAt":"2018-07-29T06:22:50Z","updatedAt":"2018-07-29T06:22:50Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk2MjMyMQ==","url":"https://github.com/coala/coala/pull/5677#discussion_r205962321","bodyText":"Nvm this PR will get merge first.","diffHunk":"@@ -566,8 +567,8 @@ def test_yield_ignore_ranges(self):\n     def test_loaded_bears_with_error_result(self):\n         class BearWithMissingPrerequisites(Bear):\n \n-            def __init__(self, section, queue, timeout=0.1, debugger=False):\n-                Bear.__init__(self, section, queue, timeout, debugger)\n+            def __init__(self, *args, **kwargs):\n+                Bear.__init__(self, *args, **kwargs)","author":{"login":"RaiVaibhav","avatarUrl":"https://avatars3.githubusercontent.com/u/22278438?v=4","name":"Vaibhav Rai"},"reactions":[],"createdAt":"2018-07-29T06:25:39Z","lastEditedAt":null,"updatedAt":"2018-07-29T06:25:39Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk2NzA1NA==","url":"https://github.com/coala/coala/pull/5677#discussion_r205967054","bodyText":"what does this do?\nthe function name should describe it.\nthe docstring should explain it.","diffHunk":"@@ -16,14 +16,31 @@\n from coalib.bears.BEAR_KIND import BEAR_KIND\n from coalib.output.printers.LogPrinter import LogPrinterMixin\n from coalib.results.Result import Result\n+from coalib.misc.Constants import FALSE_STRINGS, TRUE_STRINGS\n from coalib.results.TextPosition import ZeroOffsetError\n from coalib.settings.FunctionMetadata import FunctionMetadata\n from coalib.settings.Section import Section\n from coalib.settings.ConfigurationGathering import get_config_directory\n+from coalib.settings.Setting import typed_list\n \n from .meta import bearclass\n \n \n+def _debugger_helper(bear):","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNzEyOTAxMg==","createdAt":"2018-07-29T09:53:42Z","content":"THUMBS_UP","user":{"login":"RaiVaibhav","name":"Vaibhav Rai"}}],"createdAt":"2018-07-29T09:35:34Z","lastEditedAt":null,"updatedAt":"2018-07-29T09:35:34Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk2NzA2Mw==","url":"https://github.com/coala/coala/pull/5677#discussion_r205967063","bodyText":"help the reader follow the logic.  one step at a time.\nif 'debug_bears' not in bear.section:\n    return False\nif ...:\n    ....","diffHunk":"@@ -16,14 +16,31 @@\n from coalib.bears.BEAR_KIND import BEAR_KIND\n from coalib.output.printers.LogPrinter import LogPrinterMixin\n from coalib.results.Result import Result\n+from coalib.misc.Constants import FALSE_STRINGS, TRUE_STRINGS\n from coalib.results.TextPosition import ZeroOffsetError\n from coalib.settings.FunctionMetadata import FunctionMetadata\n from coalib.settings.Section import Section\n from coalib.settings.ConfigurationGathering import get_config_directory\n+from coalib.settings.Setting import typed_list\n \n from .meta import bearclass\n \n \n+def _debugger_helper(bear):\n+    if bear is None:\n+        return False\n+    elif 'debug_bears' not in bear.section or (","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-29T09:35:55Z","lastEditedAt":null,"updatedAt":"2018-07-29T09:35:55Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk2NzE0OA==","url":"https://github.com/coala/coala/pull/5677#discussion_r205967148","bodyText":"you do not need elif if the previous branch did a return.\navoiding the elif means you can also do some computation and use variables before the next if, instead of putting so much unreadable stuff into an if clause like you have done here","diffHunk":"@@ -16,14 +16,31 @@\n from coalib.bears.BEAR_KIND import BEAR_KIND\n from coalib.output.printers.LogPrinter import LogPrinterMixin\n from coalib.results.Result import Result\n+from coalib.misc.Constants import FALSE_STRINGS, TRUE_STRINGS\n from coalib.results.TextPosition import ZeroOffsetError\n from coalib.settings.FunctionMetadata import FunctionMetadata\n from coalib.settings.Section import Section\n from coalib.settings.ConfigurationGathering import get_config_directory\n+from coalib.settings.Setting import typed_list\n \n from .meta import bearclass\n \n \n+def _debugger_helper(bear):\n+    if bear is None:\n+        return False\n+    elif 'debug_bears' not in bear.section or (\n+            bear.section['debug_bears'].value.lower() in FALSE_STRINGS):\n+        return False\n+    elif bear.name.lower() in (","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-29T09:38:31Z","lastEditedAt":null,"updatedAt":"2018-07-29T09:38:31Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk2NzE1NA==","url":"https://github.com/coala/coala/pull/5677#discussion_r205967154","bodyText":"bool(bear.section['debug_bears'])","diffHunk":"@@ -16,14 +16,31 @@\n from coalib.bears.BEAR_KIND import BEAR_KIND\n from coalib.output.printers.LogPrinter import LogPrinterMixin\n from coalib.results.Result import Result\n+from coalib.misc.Constants import FALSE_STRINGS, TRUE_STRINGS\n from coalib.results.TextPosition import ZeroOffsetError\n from coalib.settings.FunctionMetadata import FunctionMetadata\n from coalib.settings.Section import Section\n from coalib.settings.ConfigurationGathering import get_config_directory\n+from coalib.settings.Setting import typed_list\n \n from .meta import bearclass\n \n \n+def _debugger_helper(bear):\n+    if bear is None:\n+        return False\n+    elif 'debug_bears' not in bear.section or (\n+            bear.section['debug_bears'].value.lower() in FALSE_STRINGS):","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-29T09:39:11Z","lastEditedAt":null,"updatedAt":"2018-07-29T09:39:11Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk2NzUxMQ==","url":"https://github.com/coala/coala/pull/5677#discussion_r205967511","bodyText":"Please check this I am following the previous instructions also for the value like na or non etc this will raise ValueError","diffHunk":"@@ -16,14 +16,31 @@\n from coalib.bears.BEAR_KIND import BEAR_KIND\n from coalib.output.printers.LogPrinter import LogPrinterMixin\n from coalib.results.Result import Result\n+from coalib.misc.Constants import FALSE_STRINGS, TRUE_STRINGS\n from coalib.results.TextPosition import ZeroOffsetError\n from coalib.settings.FunctionMetadata import FunctionMetadata\n from coalib.settings.Section import Section\n from coalib.settings.ConfigurationGathering import get_config_directory\n+from coalib.settings.Setting import typed_list\n \n from .meta import bearclass\n \n \n+def _debugger_helper(bear):\n+    if bear is None:\n+        return False\n+    elif 'debug_bears' not in bear.section or (\n+            bear.section['debug_bears'].value.lower() in FALSE_STRINGS):","author":{"login":"RaiVaibhav","avatarUrl":"https://avatars3.githubusercontent.com/u/22278438?v=4","name":"Vaibhav Rai"},"reactions":[],"createdAt":"2018-07-29T09:55:44Z","lastEditedAt":"2018-07-29T09:56:06Z","updatedAt":"2018-07-29T09:56:06Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk2Nzc1Mg==","url":"https://github.com/coala/coala/pull/5677#discussion_r205967752","bodyText":"Please test what I suggested before saying it will raise an exception .\nAnd see StringConverter.__bool__ for why it should work.\nIf it doesnt work, it is because there is something else wrong with the debug_bears Setting.","diffHunk":"@@ -16,14 +16,31 @@\n from coalib.bears.BEAR_KIND import BEAR_KIND\n from coalib.output.printers.LogPrinter import LogPrinterMixin\n from coalib.results.Result import Result\n+from coalib.misc.Constants import FALSE_STRINGS, TRUE_STRINGS\n from coalib.results.TextPosition import ZeroOffsetError\n from coalib.settings.FunctionMetadata import FunctionMetadata\n from coalib.settings.Section import Section\n from coalib.settings.ConfigurationGathering import get_config_directory\n+from coalib.settings.Setting import typed_list\n \n from .meta import bearclass\n \n \n+def _debugger_helper(bear):\n+    if bear is None:\n+        return False\n+    elif 'debug_bears' not in bear.section or (\n+            bear.section['debug_bears'].value.lower() in FALSE_STRINGS):","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-29T10:06:37Z","lastEditedAt":null,"updatedAt":"2018-07-29T10:06:37Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk2Nzg4Mw==","url":"https://github.com/coala/coala/pull/5677#discussion_r205967883","bodyText":"Check this https://bpaste.net/show/1faff582d756","diffHunk":"@@ -16,14 +16,31 @@\n from coalib.bears.BEAR_KIND import BEAR_KIND\n from coalib.output.printers.LogPrinter import LogPrinterMixin\n from coalib.results.Result import Result\n+from coalib.misc.Constants import FALSE_STRINGS, TRUE_STRINGS\n from coalib.results.TextPosition import ZeroOffsetError\n from coalib.settings.FunctionMetadata import FunctionMetadata\n from coalib.settings.Section import Section\n from coalib.settings.ConfigurationGathering import get_config_directory\n+from coalib.settings.Setting import typed_list\n \n from .meta import bearclass\n \n \n+def _debugger_helper(bear):\n+    if bear is None:\n+        return False\n+    elif 'debug_bears' not in bear.section or (\n+            bear.section['debug_bears'].value.lower() in FALSE_STRINGS):","author":{"login":"RaiVaibhav","avatarUrl":"https://avatars3.githubusercontent.com/u/22278438?v=4","name":"Vaibhav Rai"},"reactions":[],"createdAt":"2018-07-29T10:10:31Z","lastEditedAt":null,"updatedAt":"2018-07-29T10:10:31Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk2Nzk2Mw==","url":"https://github.com/coala/coala/pull/5677#discussion_r205967963","bodyText":">>> section.append(Setting('abc', 'nop'))\n>>> bool(section['abc'])\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"/usr/local/lib/python3.6/dist-packages/coala_utils/string_processing/StringConverter.py\", line 46, in __bool__\n    raise ValueError\nValueError\n>>>","diffHunk":"@@ -16,14 +16,31 @@\n from coalib.bears.BEAR_KIND import BEAR_KIND\n from coalib.output.printers.LogPrinter import LogPrinterMixin\n from coalib.results.Result import Result\n+from coalib.misc.Constants import FALSE_STRINGS, TRUE_STRINGS\n from coalib.results.TextPosition import ZeroOffsetError\n from coalib.settings.FunctionMetadata import FunctionMetadata\n from coalib.settings.Section import Section\n from coalib.settings.ConfigurationGathering import get_config_directory\n+from coalib.settings.Setting import typed_list\n \n from .meta import bearclass\n \n \n+def _debugger_helper(bear):\n+    if bear is None:\n+        return False\n+    elif 'debug_bears' not in bear.section or (\n+            bear.section['debug_bears'].value.lower() in FALSE_STRINGS):","author":{"login":"RaiVaibhav","avatarUrl":"https://avatars3.githubusercontent.com/u/22278438?v=4","name":"Vaibhav Rai"},"reactions":[],"createdAt":"2018-07-29T10:12:51Z","lastEditedAt":null,"updatedAt":"2018-07-29T10:12:51Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk2ODQ5OA==","url":"https://github.com/coala/coala/pull/5677#discussion_r205968498","bodyText":"Actually, I've seen that this is kinda buggy because we don't use coala's FALSE_STRINGS, but coala_util's FALSE_STRINGS, which isn't so comprehensive than coala's list. However, @jayvdb is right to use bool on Section, it works in principle and that's what our section system uses.","diffHunk":"@@ -16,14 +16,31 @@\n from coalib.bears.BEAR_KIND import BEAR_KIND\n from coalib.output.printers.LogPrinter import LogPrinterMixin\n from coalib.results.Result import Result\n+from coalib.misc.Constants import FALSE_STRINGS, TRUE_STRINGS\n from coalib.results.TextPosition import ZeroOffsetError\n from coalib.settings.FunctionMetadata import FunctionMetadata\n from coalib.settings.Section import Section\n from coalib.settings.ConfigurationGathering import get_config_directory\n+from coalib.settings.Setting import typed_list\n \n from .meta import bearclass\n \n \n+def _debugger_helper(bear):\n+    if bear is None:\n+        return False\n+    elif 'debug_bears' not in bear.section or (\n+            bear.section['debug_bears'].value.lower() in FALSE_STRINGS):","author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"reactions":[],"createdAt":"2018-07-29T10:33:13Z","lastEditedAt":null,"updatedAt":"2018-07-29T10:33:13Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk2ODU4Nw==","url":"https://github.com/coala/coala/pull/5677#discussion_r205968587","bodyText":"you can return the result of bear.name.lower() in ... directly instead of using an if, it's like if True: return True else: return False now","diffHunk":"@@ -16,14 +16,31 @@\n from coalib.bears.BEAR_KIND import BEAR_KIND\n from coalib.output.printers.LogPrinter import LogPrinterMixin\n from coalib.results.Result import Result\n+from coalib.misc.Constants import FALSE_STRINGS, TRUE_STRINGS\n from coalib.results.TextPosition import ZeroOffsetError\n from coalib.settings.FunctionMetadata import FunctionMetadata\n from coalib.settings.Section import Section\n from coalib.settings.ConfigurationGathering import get_config_directory\n+from coalib.settings.Setting import typed_list\n \n from .meta import bearclass\n \n \n+def _debugger_helper(bear):\n+    if bear is None:\n+        return False\n+    elif 'debug_bears' not in bear.section or (\n+            bear.section['debug_bears'].value.lower() in FALSE_STRINGS):\n+        return False\n+    elif bear.name.lower() in (\n+            map(str.lower, typed_list(str)(bear.section['debug_bears']))) or (\n+                typed_list(str)(bear.section['debug_bears'])[0].lower() in\n+            TRUE_STRINGS):\n+        return True\n+    else:\n+        return False","author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNzE2NDkxNw==","createdAt":"2018-07-30T13:14:31Z","content":"THUMBS_UP","user":{"login":"jayvdb","name":"John Vandenberg"}},{"id":"MDg6UmVhY3Rpb24yNzE2NDkyMQ==","createdAt":"2018-07-30T13:14:35Z","content":"LAUGH","user":{"login":"jayvdb","name":"John Vandenberg"}}],"createdAt":"2018-07-29T10:35:23Z","lastEditedAt":null,"updatedAt":"2018-07-29T10:35:23Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjEyNzg1NA==","url":"https://github.com/coala/coala/pull/5677#discussion_r206127854","bodyText":"@Makman2 , so we need to enhance coala_util's FALSE_STRINGS ?  better create an issue quick as those libraries need to get released soon","diffHunk":"@@ -16,14 +16,31 @@\n from coalib.bears.BEAR_KIND import BEAR_KIND\n from coalib.output.printers.LogPrinter import LogPrinterMixin\n from coalib.results.Result import Result\n+from coalib.misc.Constants import FALSE_STRINGS, TRUE_STRINGS\n from coalib.results.TextPosition import ZeroOffsetError\n from coalib.settings.FunctionMetadata import FunctionMetadata\n from coalib.settings.Section import Section\n from coalib.settings.ConfigurationGathering import get_config_directory\n+from coalib.settings.Setting import typed_list\n \n from .meta import bearclass\n \n \n+def _debugger_helper(bear):\n+    if bear is None:\n+        return False\n+    elif 'debug_bears' not in bear.section or (\n+            bear.section['debug_bears'].value.lower() in FALSE_STRINGS):\n+        return False\n+    elif bear.name.lower() in (\n+            map(str.lower, typed_list(str)(bear.section['debug_bears']))) or (\n+                typed_list(str)(bear.section['debug_bears'])[0].lower() in\n+            TRUE_STRINGS):\n+        return True\n+    else:\n+        return False","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-30T13:15:21Z","lastEditedAt":null,"updatedAt":"2018-07-30T13:15:21Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjEyOTQ1NQ==","url":"https://github.com/coala/coala/pull/5677#discussion_r206129455","bodyText":"Can you review this code 😅\nI will create a issue after getting green from Makman","diffHunk":"@@ -16,14 +16,31 @@\n from coalib.bears.BEAR_KIND import BEAR_KIND\n from coalib.output.printers.LogPrinter import LogPrinterMixin\n from coalib.results.Result import Result\n+from coalib.misc.Constants import FALSE_STRINGS, TRUE_STRINGS\n from coalib.results.TextPosition import ZeroOffsetError\n from coalib.settings.FunctionMetadata import FunctionMetadata\n from coalib.settings.Section import Section\n from coalib.settings.ConfigurationGathering import get_config_directory\n+from coalib.settings.Setting import typed_list\n \n from .meta import bearclass\n \n \n+def _debugger_helper(bear):\n+    if bear is None:\n+        return False\n+    elif 'debug_bears' not in bear.section or (\n+            bear.section['debug_bears'].value.lower() in FALSE_STRINGS):\n+        return False\n+    elif bear.name.lower() in (\n+            map(str.lower, typed_list(str)(bear.section['debug_bears']))) or (\n+                typed_list(str)(bear.section['debug_bears'])[0].lower() in\n+            TRUE_STRINGS):\n+        return True\n+    else:\n+        return False","author":{"login":"RaiVaibhav","avatarUrl":"https://avatars3.githubusercontent.com/u/22278438?v=4","name":"Vaibhav Rai"},"reactions":[],"createdAt":"2018-07-30T13:20:30Z","lastEditedAt":null,"updatedAt":"2018-07-30T13:20:30Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjEyOTYyNg==","url":"https://github.com/coala/coala/pull/5677#discussion_r206129626","bodyText":"If possible I will solve that but later (sorry GSoC pressure). 👍","diffHunk":"@@ -16,14 +16,31 @@\n from coalib.bears.BEAR_KIND import BEAR_KIND\n from coalib.output.printers.LogPrinter import LogPrinterMixin\n from coalib.results.Result import Result\n+from coalib.misc.Constants import FALSE_STRINGS, TRUE_STRINGS\n from coalib.results.TextPosition import ZeroOffsetError\n from coalib.settings.FunctionMetadata import FunctionMetadata\n from coalib.settings.Section import Section\n from coalib.settings.ConfigurationGathering import get_config_directory\n+from coalib.settings.Setting import typed_list\n \n from .meta import bearclass\n \n \n+def _debugger_helper(bear):\n+    if bear is None:\n+        return False\n+    elif 'debug_bears' not in bear.section or (\n+            bear.section['debug_bears'].value.lower() in FALSE_STRINGS):\n+        return False\n+    elif bear.name.lower() in (\n+            map(str.lower, typed_list(str)(bear.section['debug_bears']))) or (\n+                typed_list(str)(bear.section['debug_bears'])[0].lower() in\n+            TRUE_STRINGS):\n+        return True\n+    else:\n+        return False","author":{"login":"RaiVaibhav","avatarUrl":"https://avatars3.githubusercontent.com/u/22278438?v=4","name":"Vaibhav Rai"},"reactions":[],"createdAt":"2018-07-30T13:21:02Z","lastEditedAt":"2018-07-30T13:21:34Z","updatedAt":"2018-07-30T13:21:34Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjEyODI3NQ==","url":"https://github.com/coala/coala/pull/5677#discussion_r206128275","bodyText":"this is not a \"setter\".  It doesnt set anything.\nIt determines the value of the debugger setting.","diffHunk":"@@ -20,10 +20,29 @@\n from coalib.settings.FunctionMetadata import FunctionMetadata\n from coalib.settings.Section import Section\n from coalib.settings.ConfigurationGathering import get_config_directory\n+from coalib.settings.Setting import typed_list\n \n from .meta import bearclass\n \n \n+def _debugger_flag_setter(bear):","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-30T13:16:45Z","lastEditedAt":null,"updatedAt":"2018-07-30T13:16:45Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjEzNTM0OQ==","url":"https://github.com/coala/coala/pull/5677#discussion_r206135349","bodyText":"what is typed_list(bool)(bear.section['debug_bears'])[0] ?\nthat is buggy as.  I know what you are trying to do.  You want to hide the ValueError exceptions which could happen.  But it only hides some of them, because that is not what typed_list(bool) is designed to do.\nYou need to let go of that horrible or you have in the return.  It is forcing you to write more complicated and buggy code.\nbool(bear.section['debug_bears']) can raise exceptions.  So, you need to catch them.  We even have a MR related to it at https://gitlab.com/coala/coala-utils/merge_requests/34/diffs .\nThen after you have finished checking if it is a bool, then do another check if it is a list of bear names.\nAnd do not use typed_list(str).  bear.section['debug_bears'] is already the appropriate type.  Read the documentation about that type for how to use it correctly.","diffHunk":"@@ -20,10 +20,29 @@\n from coalib.settings.FunctionMetadata import FunctionMetadata\n from coalib.settings.Section import Section\n from coalib.settings.ConfigurationGathering import get_config_directory\n+from coalib.settings.Setting import typed_list\n \n from .meta import bearclass\n \n \n+def _debugger_flag_setter(bear):\n+    \"\"\"\n+    Set the value of `debugger` flag.\n+\n+    :param bear: Bear object\n+    :return:     True if ``debug_bears`` is ``True`` or if bear name specified\n+                 in ``debug_bears`` setting matched with the name of parameter\n+                 bear.\n+    \"\"\"\n+    if bear is None:\n+        return False\n+    if 'debug_bears' not in bear.section:\n+        return False\n+    return (bear.name.lower() in (\n+            map(str.lower, typed_list(str)(bear.section['debug_bears']))) or\n+            typed_list(bool)(bear.section['debug_bears'])[0])","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-30T13:39:03Z","lastEditedAt":null,"updatedAt":"2018-07-30T13:39:03Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjEzNzg5Mw==","url":"https://github.com/coala/coala/pull/5677#discussion_r206137893","bodyText":"I didn't get this part\n\nAnd do not use typed_list(str). bear.section['debug_bears'] is already the appropriate type\n\nCan you tell me how am I going to make this --> 'ABear, Bbear' to a list without using typed_list?","diffHunk":"@@ -20,10 +20,29 @@\n from coalib.settings.FunctionMetadata import FunctionMetadata\n from coalib.settings.Section import Section\n from coalib.settings.ConfigurationGathering import get_config_directory\n+from coalib.settings.Setting import typed_list\n \n from .meta import bearclass\n \n \n+def _debugger_flag_setter(bear):\n+    \"\"\"\n+    Set the value of `debugger` flag.\n+\n+    :param bear: Bear object\n+    :return:     True if ``debug_bears`` is ``True`` or if bear name specified\n+                 in ``debug_bears`` setting matched with the name of parameter\n+                 bear.\n+    \"\"\"\n+    if bear is None:\n+        return False\n+    if 'debug_bears' not in bear.section:\n+        return False\n+    return (bear.name.lower() in (\n+            map(str.lower, typed_list(str)(bear.section['debug_bears']))) or\n+            typed_list(bool)(bear.section['debug_bears'])[0])","author":{"login":"RaiVaibhav","avatarUrl":"https://avatars3.githubusercontent.com/u/22278438?v=4","name":"Vaibhav Rai"},"reactions":[],"createdAt":"2018-07-30T13:46:13Z","lastEditedAt":null,"updatedAt":"2018-07-30T13:46:13Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwODU5ODgzMg==","url":"https://github.com/coala/coala/pull/5677#issuecomment-408598832","bodyText":"[WIP]","diffHunk":null,"author":{"login":"RaiVaibhav","avatarUrl":"https://avatars3.githubusercontent.com/u/22278438?v=4","name":"Vaibhav Rai"},"reactions":[],"createdAt":"2018-07-28T10:45:54Z","lastEditedAt":null,"updatedAt":"2018-07-28T10:45:54Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwODg1MjExMg==","url":"https://github.com/coala/coala/pull/5677#issuecomment-408852112","bodyText":"@Makman2 @jayvdb  can you take a look, please, I want this to be merge today so that I can update the Profiler Interface code asap.","diffHunk":null,"author":{"login":"RaiVaibhav","avatarUrl":"https://avatars3.githubusercontent.com/u/22278438?v=4","name":"Vaibhav Rai"},"reactions":[],"createdAt":"2018-07-30T12:51:02Z","lastEditedAt":"2018-07-30T12:53:23Z","updatedAt":"2018-07-30T12:53:23Z"}]}}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1533174716000,"issue":{"htmlUrl":"https://github.com/coala/coala/pull/5678","number":5678,"title":"done","body":"For short term contributors: we understand that getting your commits well\ndefined like we require is a hard task and takes some learning. If you\nlook to help without wanting to contribute long term there's no need\nfor you to learn this. Just drop us a message and we'll take care of brushing\nup your stuff for merge!\nChecklist\n\n I read the commit guidelines and I've followed\nthem.\n I ran coala over my code locally. (All commits have to pass\nindividually. It is not sufficient to have \"fixup commits\" on your PR,\nour bot will still report the issues for the previous commit.) You will\nlikely receive a lot of bot comments and build failures if coala does not\npass on every single commit!\n\nAfter you submit your pull request, DO NOT click the 'Update Branch' button.\nWhen asked for a rebase, consult coala.io/rebase\ninstead.\nPlease consider helping us by reviewing other peoples pull requests as well:\n\npick up any PR at https://coala.io/review\nreview it (check https://coala.io/reviewing for more info)\nif you are sure that it needs work, use corobo mark wip <URL> to get it out\nof the review queue.\n\nThe more you review, the more your score will grow at coala.io and we will\nreview your PRs faster!","comments":1,"createdAt":"2018-07-28T12:27:19Z","updatedAt":"2018-08-02T01:51:56Z","closedAt":null,"state":"open","user":{"login":"vaibhav9619","avatarUrl":"https://avatars1.githubusercontent.com/u/35555074?v=4"},"owner":{"login":"vaibhav9619","avatarUrl":"https://avatars1.githubusercontent.com/u/35555074?v=4"},"labels":[{"name":"process/wip","color":"fbca04"}],"pullRequest":{"htmlUrl":"https://github.com/coala/coala/pull/5678","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQwOTcyMjUzOQ==","url":"https://github.com/coala/coala/pull/5678#issuecomment-409722539","bodyText":"Which issue is this fixing?","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-08-01T21:04:33Z","lastEditedAt":null,"updatedAt":"2018-08-01T21:04:33Z"}]}}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1532831547000,"issue":{"htmlUrl":"https://github.com/coala/coala/pull/5679","number":5679,"title":"changes negative distance docstring to ``-1``","body":"Resolves issue #5329\nFor short term contributors: we understand that getting your commits well\ndefined like we require is a hard task and takes some learning. If you\nlook to help without wanting to contribute long term there's no need\nfor you to learn this. Just drop us a message and we'll take care of brushing\nup your stuff for merge!\nChecklist\n\n I read the commit guidelines and I've followed\nthem.\n I ran coala over my code locally. (All commits have to pass\nindividually. It is not sufficient to have \"fixup commits\" on your PR,\nour bot will still report the issues for the previous commit.) You will\nlikely receive a lot of bot comments and build failures if coala does not\npass on every single commit!\n\nAfter you submit your pull request, DO NOT click the 'Update Branch' button.\nWhen asked for a rebase, consult coala.io/rebase\ninstead.\nPlease consider helping us by reviewing other peoples pull requests as well:\n\npick up any PR at https://coala.io/review\nreview it (check https://coala.io/reviewing for more info)\nif you are sure that it needs work, use corobo mark wip <URL> to get it out\nof the review queue.\n\nThe more you review, the more your score will grow at coala.io and we will\nreview your PRs faster!","comments":1,"createdAt":"2018-07-28T19:51:27Z","updatedAt":"2018-07-29T02:32:27Z","closedAt":"2018-07-29T02:32:27Z","state":"closed","user":{"login":"frunkad","avatarUrl":"https://avatars2.githubusercontent.com/u/33373582?v=4"},"owner":{"login":"frunkad","avatarUrl":"https://avatars2.githubusercontent.com/u/33373582?v=4"},"labels":[{"name":"process/wip","color":"fbca04"},{"name":"size/XS","color":"00DE0F"}],"pullRequest":{"htmlUrl":"https://github.com/coala/coala/pull/5679","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQwODY0NzU2OA==","url":"https://github.com/coala/coala/pull/5679#issuecomment-408647568","bodyText":"Ugh..  your newcomer issue is #5661 .\nYou do not get two newcomer issues.","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-07-29T02:32:27Z","lastEditedAt":null,"updatedAt":"2018-07-29T02:32:27Z"}]}}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1533442981000,"issue":{"htmlUrl":"https://github.com/coala/coala/pull/5680","number":5680,"title":" setup.cfg: Allow non-coverage of sys.exit(main())","body":"Related to #4166\nSplit off from #4169\n\nFor short term contributors: we understand that getting your commits well\ndefined like we require is a hard task and takes some learning. If you\nlook to help without wanting to contribute long term there's no need\nfor you to learn this. Just drop us a message and we'll take care of brushing\nup your stuff for merge!\nChecklist\n\n I read the commit guidelines and I've followed\nthem.\n I ran coala over my code locally. (All commits have to pass\nindividually. It is not sufficient to have \"fixup commits\" on your PR,\nour bot will still report the issues for the previous commit.) You will\nlikely receive a lot of bot comments and build failures if coala does not\npass on every single commit!\n\nAfter you submit your pull request, DO NOT click the 'Update Branch' button.\nWhen asked for a rebase, consult coala.io/rebase\ninstead.\nPlease consider helping us by reviewing other peoples pull requests as well:\n\npick up any PR at https://coala.io/review\nreview it (check https://coala.io/reviewing for more info)\nif you are sure that it needs work, use corobo mark wip <URL> to get it out\nof the review queue.\n\nThe more you review, the more your score will grow at coala.io and we will\nreview your PRs faster!","comments":1,"createdAt":"2018-07-29T03:06:48Z","updatedAt":"2018-08-05T04:23:01Z","closedAt":null,"state":"open","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"process/wip","color":"fbca04"},{"name":"size/XS","color":"00DE0F"}],"pullRequest":{"htmlUrl":"https://github.com/coala/coala/pull/5680","comments":[{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzcwODkyMg==","url":"https://github.com/coala/coala/pull/5680#discussion_r207708922","bodyText":"We can have a alternate way, check this out https://medium.com/@george.shuklin/how-to-test-if-name-main-1928367290cb","diffHunk":"@@ -67,3 +67,4 @@ exclude_lines =\n   pragma ${PLATFORM_SYSTEM}: no cover\n   pragma ${OS_NAME}: no cover\n   pragma Python [0-9.,]*${PYTHON_VERSION}[0-9.,]*: no cover\n+  sys.exit\\(main\\(\\)\\)","author":{"login":"RaiVaibhav","avatarUrl":"https://avatars3.githubusercontent.com/u/22278438?v=4","name":"Vaibhav Rai"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNzQ1MjEwNg==","createdAt":"2018-08-04T13:52:13Z","content":"THUMBS_UP","user":{"login":"jayvdb","name":"John Vandenberg"}}],"createdAt":"2018-08-04T13:39:36Z","lastEditedAt":null,"updatedAt":"2018-08-04T13:39:36Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQxMDQ5NDc4OQ==","url":"https://github.com/coala/coala/pull/5680#issuecomment-410494789","bodyText":"Also outdated - needs to use the new moban variables.","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-08-05T04:23:01Z","lastEditedAt":null,"updatedAt":"2018-08-05T04:23:01Z"}]}}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1532969438000,"issue":{"htmlUrl":"https://github.com/coala/coala/pull/5681","number":5681,"title":".coafile: Modify circleci config file location","body":"Related to #5375.\n\nFor short term contributors: we understand that getting your commits well\ndefined like we require is a hard task and takes some learning. If you\nlook to help without wanting to contribute long term there's no need\nfor you to learn this. Just drop us a message and we'll take care of brushing\nup your stuff for merge!\nChecklist\n\n I read the commit guidelines and I've followed\nthem.\n I ran coala over my code locally. (All commits have to pass\nindividually. It is not sufficient to have \"fixup commits\" on your PR,\nour bot will still report the issues for the previous commit.) You will\nlikely receive a lot of bot comments and build failures if coala does not\npass on every single commit!\n\nAfter you submit your pull request, DO NOT click the 'Update Branch' button.\nWhen asked for a rebase, consult coala.io/rebase\ninstead.\nPlease consider helping us by reviewing other peoples pull requests as well:\n\npick up any PR at https://coala.io/review\nreview it (check https://coala.io/reviewing for more info)\nif you are sure that it needs work, use corobo mark wip <URL> to get it out\nof the review queue.\n\nThe more you review, the more your score will grow at coala.io and we will\nreview your PRs faster!","comments":21,"createdAt":"2018-07-29T07:31:52Z","updatedAt":"2018-07-30T16:50:38Z","closedAt":"2018-07-30T16:50:38Z","state":"merged","user":{"login":"souravbadami","avatarUrl":"https://avatars0.githubusercontent.com/u/11073943?v=4"},"owner":{"login":"souravbadami","avatarUrl":"https://avatars0.githubusercontent.com/u/11073943?v=4"},"assignee":{"login":"kuthulas","avatarUrl":"https://avatars2.githubusercontent.com/u/7317359?v=4"},"labels":[{"name":"area/CI","color":"eb6420"},{"name":"difficulty/newcomer","color":"65C8FF"},{"name":"importance/medium","color":"fbca04"},{"name":"size/XS","color":"00DE0F"},{"name":"type/codestyle","color":"d4c5f9"}],"pullRequest":{"htmlUrl":"https://github.com/coala/coala/pull/5681","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQwODY2MTM1Mw==","url":"https://github.com/coala/coala/pull/5681#issuecomment-408661353","bodyText":"If you change the commit message according to the guidelines I think the CIs should pass","diffHunk":null,"author":{"login":"palash25","avatarUrl":"https://avatars0.githubusercontent.com/u/21367710?v=4","name":"Palash Nigam"},"createdAt":"2018-07-29T08:39:32Z","lastEditedAt":null,"updatedAt":"2018-07-29T08:39:32Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwODY2MTYxNw==","url":"https://github.com/coala/coala/pull/5681#issuecomment-408661617","bodyText":"@palash25 -- Updated. I hope it does.","diffHunk":null,"author":{"login":"souravbadami","avatarUrl":"https://avatars0.githubusercontent.com/u/11073943?v=4","name":"Sourav Badami"},"createdAt":"2018-07-29T08:44:54Z","lastEditedAt":null,"updatedAt":"2018-07-29T08:44:54Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwODY2MTc5Nw==","url":"https://github.com/coala/coala/pull/5681#issuecomment-408661797","bodyText":"@souravbadami please read the whole commit guidelines doc first. It still has a few problems. Or you can just read the comments by the gitmate-bot and make the fixes accordingly.","diffHunk":null,"author":{"login":"palash25","avatarUrl":"https://avatars0.githubusercontent.com/u/21367710?v=4","name":"Palash Nigam"},"createdAt":"2018-07-29T08:48:55Z","lastEditedAt":null,"updatedAt":"2018-07-29T08:48:55Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwODY3MDIxMg==","url":"https://github.com/coala/coala/pull/5681#issuecomment-408670212","bodyText":"@jayvdb -- Can we merge this ?","diffHunk":null,"author":{"login":"souravbadami","avatarUrl":"https://avatars0.githubusercontent.com/u/11073943?v=4","name":"Sourav Badami"},"createdAt":"2018-07-29T11:34:02Z","lastEditedAt":null,"updatedAt":"2018-07-29T11:34:02Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwODY3NDI5NA==","url":"https://github.com/coala/coala/pull/5681#issuecomment-408674294","bodyText":"@souravbadami this isnt a bug, so the commit message should be Closes ...\n(the Circle CI config file moved; we should have changed .coafile in the PR, but it isnt a bug in the lines of code your are modifying -- it is a bug in our reviewing ;-))","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-07-29T12:23:32Z","lastEditedAt":null,"updatedAt":"2018-07-29T12:23:32Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwODY3NDY4Ng==","url":"https://github.com/coala/coala/pull/5681#issuecomment-408674686","bodyText":"@jayvdb -- Yeah, modified and pushed!","diffHunk":null,"author":{"login":"souravbadami","avatarUrl":"https://avatars0.githubusercontent.com/u/11073943?v=4","name":"Sourav Badami"},"createdAt":"2018-07-29T12:30:03Z","lastEditedAt":null,"updatedAt":"2018-07-29T12:30:03Z"}]}}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1533476599000,"issue":{"htmlUrl":"https://github.com/coala/coala/pull/5682","number":5682,"title":"BearRunning: Test exceptions","body":"For short term contributors: we understand that getting your commits well\ndefined like we require is a hard task and takes some learning. If you\nlook to help without wanting to contribute long term there's no need\nfor you to learn this. Just drop us a message and we'll take care of brushing\nup your stuff for merge!\nChecklist\n\n I read the commit guidelines and I've followed\nthem.\n I ran coala over my code locally. (All commits have to pass\nindividually. It is not sufficient to have \"fixup commits\" on your PR,\nour bot will still report the issues for the previous commit.) You will\nlikely receive a lot of bot comments and build failures if coala does not\npass on every single commit!\n\nAfter you submit your pull request, DO NOT click the 'Update Branch' button.\nWhen asked for a rebase, consult coala.io/rebase\ninstead.\nPlease consider helping us by reviewing other peoples pull requests as well:\n\npick up any PR at https://coala.io/review\nreview it (check https://coala.io/reviewing for more info)\nif you are sure that it needs work, use corobo mark wip <URL> to get it out\nof the review queue.\n\nThe more you review, the more your score will grow at coala.io and we will\nreview your PRs faster!","comments":4,"createdAt":"2018-07-31T00:17:59Z","updatedAt":"2018-08-05T13:43:19Z","closedAt":"2018-08-05T13:43:19Z","state":"merged","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"size/S","color":"B1CF0A"}],"pullRequest":{"htmlUrl":"https://github.com/coala/coala/pull/5682","comments":[{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzcyNzM3Mg==","url":"https://github.com/coala/coala/pull/5682#discussion_r207727372","bodyText":"Didn't get why do you calling run here one more time?\nSame in test_bear_impossible","diffHunk":"@@ -192,6 +192,79 @@ def test_evil_bear(self):\n             self.message_queue,\n             self.control_queue)\n \n+    def test_bear_debug(self):\n+        self.settings.append(Setting('cls', 'KeyboardInterrupt'))\n+        self.settings.append(Setting('msg', 'fake error'))\n+\n+        self.local_bear_list.append(\n+            RaiseTestExecuteBear(self.settings, self.message_queue))\n+\n+        self.file_name_queue.put('t')\n+        self.file_dict['t'] = []\n+\n+        with self.assertRaisesRegex(KeyboardInterrupt, 'fake error'):\n+            run(self.file_name_queue,\n+                self.local_bear_list,\n+                self.global_bear_list,\n+                self.global_bear_queue,\n+                self.file_dict,\n+                self.local_result_dict,\n+                self.global_result_dict,\n+                self.message_queue,\n+                self.control_queue,\n+                debug=True,\n+                )\n+\n+        self.file_name_queue.put('t')\n+        self.file_dict['t'] = []\n+\n+        run(self.file_name_queue,","author":{"login":"RaiVaibhav","avatarUrl":"https://avatars3.githubusercontent.com/u/22278438?v=4","name":"Vaibhav Rai"},"reactions":[],"createdAt":"2018-08-05T07:05:43Z","lastEditedAt":"2018-08-05T07:06:00Z","updatedAt":"2018-08-05T07:06:00Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzcyNzUwMg==","url":"https://github.com/coala/coala/pull/5682#discussion_r207727502","bodyText":"Nvm above ^^","diffHunk":"@@ -192,6 +192,79 @@ def test_evil_bear(self):\n             self.message_queue,\n             self.control_queue)\n \n+    def test_bear_debug(self):\n+        self.settings.append(Setting('cls', 'KeyboardInterrupt'))\n+        self.settings.append(Setting('msg', 'fake error'))\n+\n+        self.local_bear_list.append(\n+            RaiseTestExecuteBear(self.settings, self.message_queue))\n+\n+        self.file_name_queue.put('t')\n+        self.file_dict['t'] = []\n+\n+        with self.assertRaisesRegex(KeyboardInterrupt, 'fake error'):\n+            run(self.file_name_queue,\n+                self.local_bear_list,\n+                self.global_bear_list,\n+                self.global_bear_queue,\n+                self.file_dict,\n+                self.local_result_dict,\n+                self.global_result_dict,\n+                self.message_queue,\n+                self.control_queue,\n+                debug=True,\n+                )\n+\n+        self.file_name_queue.put('t')\n+        self.file_dict['t'] = []\n+\n+        run(self.file_name_queue,","author":{"login":"RaiVaibhav","avatarUrl":"https://avatars3.githubusercontent.com/u/22278438?v=4","name":"Vaibhav Rai"},"reactions":[],"createdAt":"2018-08-05T07:10:26Z","lastEditedAt":null,"updatedAt":"2018-08-05T07:10:26Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzcyNzU0NQ==","url":"https://github.com/coala/coala/pull/5682#discussion_r207727545","bodyText":"code repetition here, no need to reassign the same value","diffHunk":"@@ -192,6 +192,79 @@ def test_evil_bear(self):\n             self.message_queue,\n             self.control_queue)\n \n+    def test_bear_debug(self):\n+        self.settings.append(Setting('cls', 'KeyboardInterrupt'))\n+        self.settings.append(Setting('msg', 'fake error'))\n+\n+        self.local_bear_list.append(\n+            RaiseTestExecuteBear(self.settings, self.message_queue))\n+\n+        self.file_name_queue.put('t')\n+        self.file_dict['t'] = []\n+\n+        with self.assertRaisesRegex(KeyboardInterrupt, 'fake error'):\n+            run(self.file_name_queue,\n+                self.local_bear_list,\n+                self.global_bear_list,\n+                self.global_bear_queue,\n+                self.file_dict,\n+                self.local_result_dict,\n+                self.global_result_dict,\n+                self.message_queue,\n+                self.control_queue,\n+                debug=True,\n+                )\n+\n+        self.file_name_queue.put('t')","author":{"login":"RaiVaibhav","avatarUrl":"https://avatars3.githubusercontent.com/u/22278438?v=4","name":"Vaibhav Rai"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNzQ2MzUzMQ==","createdAt":"2018-08-05T09:24:11Z","content":"THUMBS_DOWN","user":{"login":"RaiVaibhav","name":"Vaibhav Rai"}}],"createdAt":"2018-08-05T07:12:47Z","lastEditedAt":null,"updatedAt":"2018-08-05T07:12:47Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzcyNzU0Ng==","url":"https://github.com/coala/coala/pull/5682#discussion_r207727546","bodyText":"same ^^","diffHunk":"@@ -192,6 +192,79 @@ def test_evil_bear(self):\n             self.message_queue,\n             self.control_queue)\n \n+    def test_bear_debug(self):\n+        self.settings.append(Setting('cls', 'KeyboardInterrupt'))\n+        self.settings.append(Setting('msg', 'fake error'))\n+\n+        self.local_bear_list.append(\n+            RaiseTestExecuteBear(self.settings, self.message_queue))\n+\n+        self.file_name_queue.put('t')\n+        self.file_dict['t'] = []\n+\n+        with self.assertRaisesRegex(KeyboardInterrupt, 'fake error'):\n+            run(self.file_name_queue,\n+                self.local_bear_list,\n+                self.global_bear_list,\n+                self.global_bear_queue,\n+                self.file_dict,\n+                self.local_result_dict,\n+                self.global_result_dict,\n+                self.message_queue,\n+                self.control_queue,\n+                debug=True,\n+                )\n+\n+        self.file_name_queue.put('t')\n+        self.file_dict['t'] = []","author":{"login":"RaiVaibhav","avatarUrl":"https://avatars3.githubusercontent.com/u/22278438?v=4","name":"Vaibhav Rai"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNzQ2MzUzNA==","createdAt":"2018-08-05T09:24:18Z","content":"THUMBS_DOWN","user":{"login":"RaiVaibhav","name":"Vaibhav Rai"}}],"createdAt":"2018-08-05T07:13:01Z","lastEditedAt":null,"updatedAt":"2018-08-05T07:13:01Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzczMDM0Ng==","url":"https://github.com/coala/coala/pull/5682#discussion_r207730346","bodyText":"The queue is empty after the previous coala run. Needs new items in the queue otherwise it does nothing in the next lines.","diffHunk":"@@ -192,6 +192,79 @@ def test_evil_bear(self):\n             self.message_queue,\n             self.control_queue)\n \n+    def test_bear_debug(self):\n+        self.settings.append(Setting('cls', 'KeyboardInterrupt'))\n+        self.settings.append(Setting('msg', 'fake error'))\n+\n+        self.local_bear_list.append(\n+            RaiseTestExecuteBear(self.settings, self.message_queue))\n+\n+        self.file_name_queue.put('t')\n+        self.file_dict['t'] = []\n+\n+        with self.assertRaisesRegex(KeyboardInterrupt, 'fake error'):\n+            run(self.file_name_queue,\n+                self.local_bear_list,\n+                self.global_bear_list,\n+                self.global_bear_queue,\n+                self.file_dict,\n+                self.local_result_dict,\n+                self.global_result_dict,\n+                self.message_queue,\n+                self.control_queue,\n+                debug=True,\n+                )\n+\n+        self.file_name_queue.put('t')","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-08-05T09:23:01Z","lastEditedAt":null,"updatedAt":"2018-08-05T09:23:01Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzczMDM2OA==","url":"https://github.com/coala/coala/pull/5682#discussion_r207730368","bodyText":"Oh yes 👍","diffHunk":"@@ -192,6 +192,79 @@ def test_evil_bear(self):\n             self.message_queue,\n             self.control_queue)\n \n+    def test_bear_debug(self):\n+        self.settings.append(Setting('cls', 'KeyboardInterrupt'))\n+        self.settings.append(Setting('msg', 'fake error'))\n+\n+        self.local_bear_list.append(\n+            RaiseTestExecuteBear(self.settings, self.message_queue))\n+\n+        self.file_name_queue.put('t')\n+        self.file_dict['t'] = []\n+\n+        with self.assertRaisesRegex(KeyboardInterrupt, 'fake error'):\n+            run(self.file_name_queue,\n+                self.local_bear_list,\n+                self.global_bear_list,\n+                self.global_bear_queue,\n+                self.file_dict,\n+                self.local_result_dict,\n+                self.global_result_dict,\n+                self.message_queue,\n+                self.control_queue,\n+                debug=True,\n+                )\n+\n+        self.file_name_queue.put('t')","author":{"login":"RaiVaibhav","avatarUrl":"https://avatars3.githubusercontent.com/u/22278438?v=4","name":"Vaibhav Rai"},"reactions":[],"createdAt":"2018-08-05T09:24:00Z","lastEditedAt":null,"updatedAt":"2018-08-05T09:24:00Z"}]}}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1533474397000,"issue":{"htmlUrl":"https://github.com/coala/coala/pull/5684","number":5684,"title":"__main__.py: Invokes coala as module","body":"__main__.py: Invokes coala as module\nThis allow coala to be invoked as a module by\nusing the -m tag.\nCloses #5667\n\nFor short term contributors: we understand that getting your commits well\ndefined like we require is a hard task and takes some learning. If you\nlook to help without wanting to contribute long term there's no need\nfor you to learn this. Just drop us a message and we'll take care of brushing\nup your stuff for merge!\nChecklist\n\n I read the commit guidelines and I've followed\nthem.\n I ran coala over my code locally. (All commits have to pass\nindividually. It is not sufficient to have \"fixup commits\" on your PR,\nour bot will still report the issues for the previous commit.) You will\nlikely receive a lot of bot comments and build failures if coala does not\npass on every single commit!\n\nAfter you submit your pull request, DO NOT click the 'Update Branch' button.\nWhen asked for a rebase, consult coala.io/rebase\ninstead.\nPlease consider helping us by reviewing other peoples pull requests as well:\n\npick up any PR at https://coala.io/review\nreview it (check https://coala.io/reviewing for more info)\nif you are sure that it needs work, use corobo mark wip <URL> to get it out\nof the review queue.\n\nThe more you review, the more your score will grow at coala.io and we will\nreview your PRs faster!","comments":40,"createdAt":"2018-08-04T09:00:42Z","updatedAt":"2018-08-05T13:06:37Z","closedAt":null,"state":"open","user":{"login":"Naveenaidu","avatarUrl":"https://avatars1.githubusercontent.com/u/30195193?v=4"},"owner":{"login":"Naveenaidu","avatarUrl":"https://avatars1.githubusercontent.com/u/30195193?v=4"},"assignee":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"area/CI","color":"eb6420"},{"name":"area/CLI","color":"006b75"},{"name":"area/aspects","color":"000000"},{"name":"area/documentation","color":"bfe5bf"},{"name":"area/languages","color":"d4c5f9"},{"name":"area/tests","color":"bfd4f2"},{"name":"difficulty/low","color":"207de5"},{"name":"difficulty/medium","color":"0052cc"},{"name":"difficulty/newcomer","color":"65C8FF"},{"name":"importance/high","color":"eb6420"},{"name":"importance/low","color":"70E870"},{"name":"importance/medium","color":"fbca04"},{"name":"process/pending review","color":"bfe5bf"},{"name":"size/XS","color":"00DE0F"},{"name":"type/bug","color":"e11d21"},{"name":"type/codestyle","color":"d4c5f9"},{"name":"type/feature","color":"0052cc"}],"pullRequest":{"htmlUrl":"https://github.com/coala/coala/pull/5684","comments":[]}}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1532831482000,"issue":{"htmlUrl":"https://github.com/coala/coala/pull/5649","number":5649,"title":"Changes ArgParser to ArgumentParser","body":"For short term contributors: we understand that getting your commits well\ndefined like we require is a hard task and takes some learning. If you\nlook to help without wanting to contribute long term there's no need\nfor you to learn this. Just drop us a message and we'll take care of brushing\nup your stuff for merge!\nChecklist\n\n[ x] I read the commit guidelines and I've followed\nthem.\n[x ] I ran coala over my code locally. (All commits have to pass\nindividually. It is not sufficient to have \"fixup commits\" on your PR,\nour bot will still report the issues for the previous commit.) You will\nlikely receive a lot of bot comments and build failures if coala does not\npass on every single commit!\n\nAfter you submit your pull request, DO NOT click the 'Update Branch' button.\nWhen asked for a rebase, consult coala.io/rebase\ninstead.\nPlease consider helping us by reviewing other peoples pull requests as well:\n\npick up any PR at https://coala.io/review\nreview it (check https://coala.io/reviewing for more info)\nif you are sure that it needs work, use corobo mark wip <URL> to get it out\nof the review queue.\n\nThe more you review, the more your score will grow at coala.io and we will\nreview your PRs faster!\n\nThis changes ArgParser to ArgumentParser in four files as mentioned in #4188","comments":3,"createdAt":"2018-07-21T11:07:50Z","updatedAt":"2018-07-29T02:31:22Z","closedAt":"2018-07-29T02:31:22Z","state":"closed","user":{"login":"frunkad","avatarUrl":"https://avatars2.githubusercontent.com/u/33373582?v=4"},"owner":{"login":"frunkad","avatarUrl":"https://avatars2.githubusercontent.com/u/33373582?v=4"},"labels":[{"name":"process/wip","color":"fbca04"},{"name":"size/XS","color":"00DE0F"}],"pullRequest":{"htmlUrl":"https://github.com/coala/coala/pull/5649","comments":[{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDIyNjk0NA==","url":"https://github.com/coala/coala/pull/5649#discussion_r204226944","bodyText":"@virresh @frunkad @ksdme, we need to add this file to our .gitignore lists","diffHunk":"@@ -0,0 +1,3 @@\n+{\n+    \"python.pythonPath\": \"/home/frunkad/anaconda3/envs/coalavenv/bin/python\"\n+}","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-07-22T03:22:51Z","lastEditedAt":null,"updatedAt":"2018-07-22T03:22:51Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDIzMDI2Ng==","url":"https://github.com/coala/coala/pull/5649#discussion_r204230266","bodyText":"Filed https://gitlab.com/coala/mobans/issues/69.","diffHunk":"@@ -0,0 +1,3 @@\n+{\n+    \"python.pythonPath\": \"/home/frunkad/anaconda3/envs/coalavenv/bin/python\"\n+}","author":{"login":"ksdme","avatarUrl":"https://avatars1.githubusercontent.com/u/12156014?v=4","name":"Kilari Teja"},"createdAt":"2018-07-22T07:14:38Z","lastEditedAt":null,"updatedAt":"2018-07-22T07:14:38Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwODY0NzUyNg==","url":"https://github.com/coala/coala/pull/5649#issuecomment-408647526","bodyText":"Duplicate of #5661","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-07-29T02:31:22Z","lastEditedAt":null,"updatedAt":"2018-07-29T02:31:22Z"}]}}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1532459074000,"issue":{"htmlUrl":"https://github.com/coala/coala/pull/5650","number":5650,"title":"docs: Update Newcomers_Guide.rst","body":"The update modifies the note into a note block.\nFixes #5605\n\nFor short term contributors: we understand that getting your commits well\ndefined like we require is a hard task and takes some learning. If you\nlook to help without wanting to contribute long term there's no need\nfor you to learn this. Just drop us a message and we'll take care of brushing\nup your stuff for merge!\nChecklist\n\n I read the commit guidelines and I've followed\nthem.\n I ran coala over my code locally. (All commits have to pass\nindividually. It is not sufficient to have \"fixup commits\" on your PR,\nour bot will still report the issues for the previous commit.) You will\nlikely receive a lot of bot comments and build failures if coala does not\npass on every single commit!\n\nAfter you submit your pull request, DO NOT click the 'Update Branch' button.\nWhen asked for a rebase, consult coala.io/rebase\ninstead.\nPlease consider helping us by reviewing other peoples pull requests as well:\n\npick up any PR at https://coala.io/review\nreview it (check https://coala.io/reviewing for more info)\nif you are sure that it needs work, use corobo mark wip <URL> to get it out\nof the review queue.\n\nThe more you review, the more your score will grow at coala.io and we will\nreview your PRs faster!","comments":2,"createdAt":"2018-07-21T11:18:43Z","updatedAt":"2018-07-24T19:04:34Z","closedAt":null,"state":"open","user":{"login":"InquiridorTechie","avatarUrl":"https://avatars1.githubusercontent.com/u/31249906?v=4"},"owner":{"login":"InquiridorTechie","avatarUrl":"https://avatars1.githubusercontent.com/u/31249906?v=4"},"assignee":{"login":"InquiridorTechie","avatarUrl":"https://avatars1.githubusercontent.com/u/31249906?v=4"},"labels":[{"name":"area/documentation","color":"bfe5bf"},{"name":"difficulty/newcomer","color":"65C8FF"},{"name":"process/wip","color":"fbca04"},{"name":"size/XS","color":"00DE0F"}],"pullRequest":{"htmlUrl":"https://github.com/coala/coala/pull/5650","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQwNjc4OTEyOA==","url":"https://github.com/coala/coala/pull/5650#issuecomment-406789128","bodyText":"Needs rebase.","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-07-21T11:24:48Z","lastEditedAt":null,"updatedAt":"2018-07-21T11:24:48Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwNjgwMDA4MA==","url":"https://github.com/coala/coala/pull/5650#issuecomment-406800080","bodyText":"LGTM\n@jayvdb","diffHunk":null,"author":{"login":"XDoubleU","avatarUrl":"https://avatars3.githubusercontent.com/u/28691666?v=4","name":"XDoubleU"},"createdAt":"2018-07-21T14:26:57Z","lastEditedAt":"2018-07-21T20:52:34Z","updatedAt":"2018-07-21T20:52:34Z"}]}}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1532558087000,"issue":{"htmlUrl":"https://github.com/coala/coala/pull/5651","number":5651,"title":"TestUtilities: Add sorted test bear list","body":"Update tests to use it.\n\nFor short term contributors: we understand that getting your commits well\ndefined like we require is a hard task and takes some learning. If you\nlook to help without wanting to contribute long term there's no need\nfor you to learn this. Just drop us a message and we'll take care of brushing\nup your stuff for merge!\nChecklist\n\n I read the commit guidelines and I've followed\nthem.\n I ran coala over my code locally. (All commits have to pass\nindividually. It is not sufficient to have \"fixup commits\" on your PR,\nour bot will still report the issues for the previous commit.) You will\nlikely receive a lot of bot comments and build failures if coala does not\npass on every single commit!\n\nAfter you submit your pull request, DO NOT click the 'Update Branch' button.\nWhen asked for a rebase, consult coala.io/rebase\ninstead.\nPlease consider helping us by reviewing other peoples pull requests as well:\n\npick up any PR at https://coala.io/review\nreview it (check https://coala.io/reviewing for more info)\nif you are sure that it needs work, use corobo mark wip <URL> to get it out\nof the review queue.\n\nThe more you review, the more your score will grow at coala.io and we will\nreview your PRs faster!","comments":5,"createdAt":"2018-07-21T11:54:37Z","updatedAt":"2018-07-25T22:34:47Z","closedAt":"2018-07-23T19:12:58Z","state":"merged","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"process/approved","color":"009800"},{"name":"size/XS","color":"00DE0F"},{"name":"status/blocked","color":"e11d21"}],"pullRequest":{"htmlUrl":"https://github.com/coala/coala/pull/5651","comments":[{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDIyNzUyNw==","url":"https://github.com/coala/coala/pull/5651#discussion_r204227527","bodyText":"TEST_BEARS_NAME?","diffHunk":"@@ -5,16 +5,34 @@\n \n from coala_utils.ContextManagers import retrieve_stdout, retrieve_stderr\n \n-TEST_BEARS_COUNT = 14\n+TEST_BEAR_NAMES = (","author":{"login":"RaiVaibhav","avatarUrl":"https://avatars3.githubusercontent.com/u/22278438?v=4","name":"Vaibhav Rai"},"reactions":[],"createdAt":"2018-07-22T04:19:23Z","lastEditedAt":null,"updatedAt":"2018-07-22T04:19:23Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDM1MDg2OQ==","url":"https://github.com/coala/coala/pull/5651#discussion_r204350869","bodyText":"This would be the correct sorted order\nTEST_BEAR_NAME_REPRS = [\n    \"<class 'AspectTestBear.AspectTestBear'>\",\n    \"<class 'DependentBear.DependentBear'>\",\n    \"<EchoBear linter class (wrapping 'echo')>\",\n    \"<ErrorTestBear linter class (wrapping 'I_do_not_exist')>\",\n    \"<class 'JavaTestBear.JavaTestBear'>\",\n    \"<class 'LineCountTestBear.LineCountTestBear'>\",\n    \"<class 'RaiseTestBear.RaiseTestBear'>\",\n    \"<class 'SpaceConsistencyTestBear.SpaceConsistencyTestBear'>\",\n    \"<class 'TestBear.TestBear'>\",\n    \"<class 'TestBearDep.TestDepBearA'>\",\n    \"<class 'TestBearDep.TestDepBearAA'>\",\n    \"<class 'TestBearDep.TestDepBearBDependsA'>\",\n    \"<class 'TestBearDep.TestDepBearCDependsB'>\",\n    \"<class 'TestBearDep.TestDepBearDependsAAndAA'>\"\n]","diffHunk":"@@ -5,16 +5,35 @@\n \n from coala_utils.ContextManagers import retrieve_stdout, retrieve_stderr\n \n-TEST_BEARS_COUNT = 14\n+# This list is sorted alphabetically\n+TEST_BEAR_NAMES = (\n+    'AspectTestBear',\n+    'DependentBear',\n+    'EchoBear',\n+    'ErrorTestBear',\n+    'JavaTestBear',\n+    'LineCountTestBear',\n+    'RaiseTestBear',\n+    'SpaceConsistencyTestBear',\n+    'TestBear',\n+    'TestDepBearA',\n+    'TestDepBearAA',\n+    'TestDepBearBDependsA',\n+    'TestDepBearCDependsB',\n+    'TestDepBearDependsAAndAA',\n+)\n+\n+TEST_BEARS_COUNT = len(TEST_BEAR_NAMES)\n \n # This list is sorted by filename of the bears, then name within the modules\n-TEST_BEAR_NAMES = [\n+TEST_BEAR_NAME_REPRS = [","author":{"login":"MacBox7","avatarUrl":"https://avatars0.githubusercontent.com/u/15063552?v=4","name":"Ankit Joshi"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNjg0NjU4OA==","createdAt":"2018-07-23T16:58:36Z","content":"THUMBS_UP","user":{"login":"jayvdb","name":"John Vandenberg"}}],"createdAt":"2018-07-23T10:20:16Z","lastEditedAt":null,"updatedAt":"2018-07-23T10:20:16Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDQ5MDEwNA==","url":"https://github.com/coala/coala/pull/5651#discussion_r204490104","bodyText":"Why set() is used? All names are distinct.","diffHunk":"@@ -387,38 +387,12 @@ def test_get_all_bears(self):\n                 assert issubclass(bear, Bear)\n             self.assertSetEqual(\n                 {b.name for b in bears},\n-                {'DependentBear',\n-                 'EchoBear',\n-                 'LineCountTestBear',\n-                 'JavaTestBear',\n-                 'SpaceConsistencyTestBear',\n-                 'TestBear',\n-                 'ErrorTestBear',\n-                 'RaiseTestBear',\n-                 'TestDepBearA',\n-                 'TestDepBearBDependsA',\n-                 'TestDepBearCDependsB',\n-                 'TestDepBearAA',\n-                 'AspectTestBear',\n-                 'TestDepBearDependsAAndAA'})\n+                set(TEST_BEAR_NAMES))","author":{"login":"MacBox7","avatarUrl":"https://avatars0.githubusercontent.com/u/15063552?v=4","name":"Ankit Joshi"},"reactions":[],"createdAt":"2018-07-23T17:29:43Z","lastEditedAt":"2018-07-23T17:30:21Z","updatedAt":"2018-07-23T17:30:21Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDQ5NTk0MA==","url":"https://github.com/coala/coala/pull/5651#discussion_r204495940","bodyText":"The other half of assertEqual is a set.\nBut, I should change that now.","diffHunk":"@@ -387,38 +387,12 @@ def test_get_all_bears(self):\n                 assert issubclass(bear, Bear)\n             self.assertSetEqual(\n                 {b.name for b in bears},\n-                {'DependentBear',\n-                 'EchoBear',\n-                 'LineCountTestBear',\n-                 'JavaTestBear',\n-                 'SpaceConsistencyTestBear',\n-                 'TestBear',\n-                 'ErrorTestBear',\n-                 'RaiseTestBear',\n-                 'TestDepBearA',\n-                 'TestDepBearBDependsA',\n-                 'TestDepBearCDependsB',\n-                 'TestDepBearAA',\n-                 'AspectTestBear',\n-                 'TestDepBearDependsAAndAA'})\n+                set(TEST_BEAR_NAMES))","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-23T17:47:36Z","lastEditedAt":null,"updatedAt":"2018-07-23T17:47:36Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDQ5NjI1NA==","url":"https://github.com/coala/coala/pull/5651#discussion_r204496254","bodyText":"But get_all_bears is unsorted..?","diffHunk":"@@ -387,38 +387,12 @@ def test_get_all_bears(self):\n                 assert issubclass(bear, Bear)\n             self.assertSetEqual(\n                 {b.name for b in bears},\n-                {'DependentBear',\n-                 'EchoBear',\n-                 'LineCountTestBear',\n-                 'JavaTestBear',\n-                 'SpaceConsistencyTestBear',\n-                 'TestBear',\n-                 'ErrorTestBear',\n-                 'RaiseTestBear',\n-                 'TestDepBearA',\n-                 'TestDepBearBDependsA',\n-                 'TestDepBearCDependsB',\n-                 'TestDepBearAA',\n-                 'AspectTestBear',\n-                 'TestDepBearDependsAAndAA'})\n+                set(TEST_BEAR_NAMES))","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-23T17:48:36Z","lastEditedAt":null,"updatedAt":"2018-07-23T17:48:36Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDQ5Njk4MA==","url":"https://github.com/coala/coala/pull/5651#discussion_r204496980","bodyText":"I could use assertCountEqual , but that doesnt strengthen the assertion at all.","diffHunk":"@@ -387,38 +387,12 @@ def test_get_all_bears(self):\n                 assert issubclass(bear, Bear)\n             self.assertSetEqual(\n                 {b.name for b in bears},\n-                {'DependentBear',\n-                 'EchoBear',\n-                 'LineCountTestBear',\n-                 'JavaTestBear',\n-                 'SpaceConsistencyTestBear',\n-                 'TestBear',\n-                 'ErrorTestBear',\n-                 'RaiseTestBear',\n-                 'TestDepBearA',\n-                 'TestDepBearBDependsA',\n-                 'TestDepBearCDependsB',\n-                 'TestDepBearAA',\n-                 'AspectTestBear',\n-                 'TestDepBearDependsAAndAA'})\n+                set(TEST_BEAR_NAMES))","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-23T17:50:56Z","lastEditedAt":null,"updatedAt":"2018-07-23T17:50:56Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDUwMzMyNw==","url":"https://github.com/coala/coala/pull/5651#discussion_r204503327","bodyText":"Yes get_all_bears is unsorted.","diffHunk":"@@ -387,38 +387,12 @@ def test_get_all_bears(self):\n                 assert issubclass(bear, Bear)\n             self.assertSetEqual(\n                 {b.name for b in bears},\n-                {'DependentBear',\n-                 'EchoBear',\n-                 'LineCountTestBear',\n-                 'JavaTestBear',\n-                 'SpaceConsistencyTestBear',\n-                 'TestBear',\n-                 'ErrorTestBear',\n-                 'RaiseTestBear',\n-                 'TestDepBearA',\n-                 'TestDepBearBDependsA',\n-                 'TestDepBearCDependsB',\n-                 'TestDepBearAA',\n-                 'AspectTestBear',\n-                 'TestDepBearDependsAAndAA'})\n+                set(TEST_BEAR_NAMES))","author":{"login":"MacBox7","avatarUrl":"https://avatars0.githubusercontent.com/u/15063552?v=4","name":"Ankit Joshi"},"reactions":[],"createdAt":"2018-07-23T18:11:05Z","lastEditedAt":null,"updatedAt":"2018-07-23T18:11:05Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDUxNjY1OQ==","url":"https://github.com/coala/coala/pull/5651#discussion_r204516659","bodyText":"So set comparion is needed..?\nIf I am missing something ... yell out.\nOtherwise .. need to merge","diffHunk":"@@ -387,38 +387,12 @@ def test_get_all_bears(self):\n                 assert issubclass(bear, Bear)\n             self.assertSetEqual(\n                 {b.name for b in bears},\n-                {'DependentBear',\n-                 'EchoBear',\n-                 'LineCountTestBear',\n-                 'JavaTestBear',\n-                 'SpaceConsistencyTestBear',\n-                 'TestBear',\n-                 'ErrorTestBear',\n-                 'RaiseTestBear',\n-                 'TestDepBearA',\n-                 'TestDepBearBDependsA',\n-                 'TestDepBearCDependsB',\n-                 'TestDepBearAA',\n-                 'AspectTestBear',\n-                 'TestDepBearDependsAAndAA'})\n+                set(TEST_BEAR_NAMES))","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-23T18:54:12Z","lastEditedAt":null,"updatedAt":"2018-07-23T18:54:12Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDUyMDg1OA==","url":"https://github.com/coala/coala/pull/5651#discussion_r204520858","bodyText":"Yeh. Right. It's for that purpose.","diffHunk":"@@ -387,38 +387,12 @@ def test_get_all_bears(self):\n                 assert issubclass(bear, Bear)\n             self.assertSetEqual(\n                 {b.name for b in bears},\n-                {'DependentBear',\n-                 'EchoBear',\n-                 'LineCountTestBear',\n-                 'JavaTestBear',\n-                 'SpaceConsistencyTestBear',\n-                 'TestBear',\n-                 'ErrorTestBear',\n-                 'RaiseTestBear',\n-                 'TestDepBearA',\n-                 'TestDepBearBDependsA',\n-                 'TestDepBearCDependsB',\n-                 'TestDepBearAA',\n-                 'AspectTestBear',\n-                 'TestDepBearDependsAAndAA'})\n+                set(TEST_BEAR_NAMES))","author":{"login":"MacBox7","avatarUrl":"https://avatars0.githubusercontent.com/u/15063552?v=4","name":"Ankit Joshi"},"reactions":[],"createdAt":"2018-07-23T19:08:09Z","lastEditedAt":"2018-07-23T19:11:02Z","updatedAt":"2018-07-23T19:11:02Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwNjk0NTUzNQ==","url":"https://github.com/coala/coala/pull/5651#issuecomment-406945535","bodyText":"blocked by #5654","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-23T05:43:46Z","lastEditedAt":null,"updatedAt":"2018-07-23T05:43:46Z"}]}}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1532230018000,"issue":{"htmlUrl":"https://github.com/coala/coala/pull/5652","number":5652,"title":"Removed unused import","body":"For short term contributors: we understand that getting your commits well\ndefined like we require is a hard task and takes some learning. If you\nlook to help without wanting to contribute long term there's no need\nfor you to learn this. Just drop us a message and we'll take care of brushing\nup your stuff for merge!\nChecklist\n\n I read the commit guidelines and I've followed\nthem.\n I ran coala over my code locally. (All commits have to pass\nindividually. It is not sufficient to have \"fixup commits\" on your PR,\nour bot will still report the issues for the previous commit.) You will\nlikely receive a lot of bot comments and build failures if coala does not\npass on every single commit!\n\nAfter you submit your pull request, DO NOT click the 'Update Branch' button.\nWhen asked for a rebase, consult coala.io/rebase\ninstead.\nPlease consider helping us by reviewing other peoples pull requests as well:\n\npick up any PR at https://coala.io/review\nreview it (check https://coala.io/reviewing for more info)\nif you are sure that it needs work, use corobo mark wip <URL> to get it out\nof the review queue.\n\nThe more you review, the more your score will grow at coala.io and we will\nreview your PRs faster!","comments":9,"createdAt":"2018-07-21T14:44:55Z","updatedAt":"2018-07-22T03:26:58Z","closedAt":"2018-07-22T03:11:49Z","state":"closed","user":{"login":"XDoubleU","avatarUrl":"https://avatars3.githubusercontent.com/u/28691666?v=4"},"owner":{"login":"XDoubleU","avatarUrl":"https://avatars3.githubusercontent.com/u/28691666?v=4"},"assignee":{"login":"XDoubleU","avatarUrl":"https://avatars3.githubusercontent.com/u/28691666?v=4"},"labels":[{"name":"difficulty/newcomer","color":"65C8FF"},{"name":"process/pending review","color":"bfe5bf"},{"name":"size/XS","color":"00DE0F"},{"name":"type/codestyle","color":"d4c5f9"}],"pullRequest":{"htmlUrl":"https://github.com/coala/coala/pull/5652","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQwNjgwMjM3NA==","url":"https://github.com/coala/coala/pull/5652#issuecomment-406802374","bodyText":"Have a look at this.\nChange Removed to Remove. Simplify commit body too.","diffHunk":null,"author":{"login":"MacBox7","avatarUrl":"https://avatars0.githubusercontent.com/u/15063552?v=4","name":"Ankit Joshi"},"createdAt":"2018-07-21T15:03:04Z","lastEditedAt":"2018-07-21T15:04:14Z","updatedAt":"2018-07-21T15:04:14Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwNjgzODMxNg==","url":"https://github.com/coala/coala/pull/5652#issuecomment-406838316","bodyText":"Duplicate of #5647\nGrr!","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-07-22T03:26:58Z","lastEditedAt":null,"updatedAt":"2018-07-22T03:26:58Z"}]}}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1532963285000,"issue":{"htmlUrl":"https://github.com/coala/coala/pull/5653","number":5653,"title":"CachingUtilities.py: Remove unused local variable","body":"Closes #5642\n\nFor short term contributors: we understand that getting your commits well\ndefined like we require is a hard task and takes some learning. If you\nlook to help without wanting to contribute long term there's no need\nfor you to learn this. Just drop us a message and we'll take care of brushing\nup your stuff for merge!\nChecklist\n\n I read the commit guidelines and I've followed\nthem.\n I ran coala over my code locally. (All commits have to pass\nindividually. It is not sufficient to have \"fixup commits\" on your PR,\nour bot will still report the issues for the previous commit.) You will\nlikely receive a lot of bot comments and build failures if coala does not\npass on every single commit!\n\nAfter you submit your pull request, DO NOT click the 'Update Branch' button.\nWhen asked for a rebase, consult coala.io/rebase\ninstead.\nPlease consider helping us by reviewing other peoples pull requests as well:\n\npick up any PR at https://coala.io/review\nreview it (check https://coala.io/reviewing for more info)\nif you are sure that it needs work, use corobo mark wip <URL> to get it out\nof the review queue.\n\nThe more you review, the more your score will grow at coala.io and we will\nreview your PRs faster!","comments":25,"createdAt":"2018-07-21T16:44:10Z","updatedAt":"2018-07-30T15:08:05Z","closedAt":"2018-07-30T15:08:05Z","state":"merged","user":{"login":"HemabhKamboj","avatarUrl":"https://avatars2.githubusercontent.com/u/32740899?v=4"},"owner":{"login":"HemabhKamboj","avatarUrl":"https://avatars2.githubusercontent.com/u/32740899?v=4"},"labels":[{"name":"difficulty/newcomer","color":"65C8FF"},{"name":"size/XS","color":"00DE0F"},{"name":"type/codestyle","color":"d4c5f9"}],"pullRequest":{"htmlUrl":"https://github.com/coala/coala/pull/5653","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQwNjgxMTAyNQ==","url":"https://github.com/coala/coala/pull/5653#issuecomment-406811025","bodyText":"Thanks for guiding me more.\nWill surely take care of it next time.\nWill you merge this PR?","diffHunk":null,"author":{"login":"HemabhKamboj","avatarUrl":"https://avatars2.githubusercontent.com/u/32740899?v=4","name":"Hemabh Kamboj"},"reactions":[],"createdAt":"2018-07-21T17:22:01Z","lastEditedAt":null,"updatedAt":"2018-07-21T17:22:01Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwNjgxMTM5Mw==","url":"https://github.com/coala/coala/pull/5653#issuecomment-406811393","bodyText":"The PR won't be merged until you fix what has been suggested. And every PR should pass all test case.\n\nDo not close this PR\nDo not delete this branch\nDo not create new commits.\n\nMake changes in the same commit and use git commit --amend  to that.","diffHunk":null,"author":{"login":"MacBox7","avatarUrl":"https://avatars0.githubusercontent.com/u/15063552?v=4","name":"Ankit Joshi"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNjc5NTE3Mg==","createdAt":"2018-07-22T06:48:32Z","content":"THUMBS_UP","user":{"login":"ksdme","name":"Kilari Teja"}}],"createdAt":"2018-07-21T17:28:32Z","lastEditedAt":"2018-07-21T17:28:53Z","updatedAt":"2018-07-21T17:28:53Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwNjgxMzQyNg==","url":"https://github.com/coala/coala/pull/5653#issuecomment-406813426","bodyText":"ok, looking the code again, can't capture that a removal of a variable is failing the test.","diffHunk":null,"author":{"login":"HemabhKamboj","avatarUrl":"https://avatars2.githubusercontent.com/u/32740899?v=4","name":"Hemabh Kamboj"},"reactions":[],"createdAt":"2018-07-21T18:04:56Z","lastEditedAt":null,"updatedAt":"2018-07-21T18:04:56Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwNjgzNzg5OQ==","url":"https://github.com/coala/coala/pull/5653#issuecomment-406837899","bodyText":"@HemabhKamboj , please read the errors by gitmate here on your PR.\nPlease read and follow https://coala.io/git closely.","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-22T03:12:24Z","lastEditedAt":null,"updatedAt":"2018-07-22T03:12:24Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwNjgzOTc3NQ==","url":"https://github.com/coala/coala/pull/5653#issuecomment-406839775","bodyText":"The only problem is  you didn't squash commit and commit head, test is not failing because of your changes.","diffHunk":null,"author":{"login":"RaiVaibhav","avatarUrl":"https://avatars3.githubusercontent.com/u/22278438?v=4","name":"Vaibhav Rai"},"reactions":[],"createdAt":"2018-07-22T04:12:22Z","lastEditedAt":null,"updatedAt":"2018-07-22T04:12:22Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwNjg0NzU0Ng==","url":"https://github.com/coala/coala/pull/5653#issuecomment-406847546","bodyText":"You can also find out squashing guide at https://api.coala.io/en/latest/Developers/Git_Basics.html#rebasing.","diffHunk":null,"author":{"login":"ksdme","avatarUrl":"https://avatars1.githubusercontent.com/u/12156014?v=4","name":"Kilari Teja"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNjc5NTY0Nw==","createdAt":"2018-07-22T07:49:36Z","content":"THUMBS_UP","user":{"login":"jayvdb","name":"John Vandenberg"}}],"createdAt":"2018-07-22T07:39:53Z","lastEditedAt":null,"updatedAt":"2018-07-22T07:39:53Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwODYzMDk1Mg==","url":"https://github.com/coala/coala/pull/5653#issuecomment-408630952","bodyText":"@HemabhKamboj please reply and fix this soon otherwise you will be unassigned. For any help ask on coala group.","diffHunk":null,"author":{"login":"MacBox7","avatarUrl":"https://avatars0.githubusercontent.com/u/15063552?v=4","name":"Ankit Joshi"},"reactions":[],"createdAt":"2018-07-28T19:48:57Z","lastEditedAt":null,"updatedAt":"2018-07-28T19:48:57Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwODY1MzQzNA==","url":"https://github.com/coala/coala/pull/5653#issuecomment-408653434","bodyText":"@MacBox7 will do it by today","diffHunk":null,"author":{"login":"HemabhKamboj","avatarUrl":"https://avatars2.githubusercontent.com/u/32740899?v=4","name":"Hemabh Kamboj"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNzEyNjc5NQ==","createdAt":"2018-07-29T05:49:39Z","content":"THUMBS_UP","user":{"login":"MacBox7","name":"Ankit Joshi"}},{"id":"MDg6UmVhY3Rpb24yNzEyODA1MA==","createdAt":"2018-07-29T08:23:21Z","content":"THUMBS_UP","user":{"login":"ksdme","name":"Kilari Teja"}}],"createdAt":"2018-07-29T05:35:51Z","lastEditedAt":null,"updatedAt":"2018-07-29T05:35:51Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwODY3MDM1MQ==","url":"https://github.com/coala/coala/pull/5653#issuecomment-408670351","bodyText":"I followed the instructions of @MacBox7 as he said on Gitter and fetched from coala/master. Now, squashing all new changes to my initial commit 9cae7e80 is saying 'Cannot squash without previous commit'. Should I squash the other commits now?","diffHunk":null,"author":{"login":"HemabhKamboj","avatarUrl":"https://avatars2.githubusercontent.com/u/32740899?v=4","name":"Hemabh Kamboj"},"reactions":[],"createdAt":"2018-07-29T11:36:31Z","lastEditedAt":null,"updatedAt":"2018-07-29T11:36:31Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwODgzMDA4Ng==","url":"https://github.com/coala/coala/pull/5653#issuecomment-408830086","bodyText":"Please reword your commit message.","diffHunk":null,"author":{"login":"ksdme","avatarUrl":"https://avatars1.githubusercontent.com/u/12156014?v=4","name":"Kilari Teja"},"reactions":[],"createdAt":"2018-07-30T11:18:50Z","lastEditedAt":null,"updatedAt":"2018-07-30T11:18:50Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwODgzMzAxNQ==","url":"https://github.com/coala/coala/pull/5653#issuecomment-408833015","bodyText":"Read the commit guidelines at coala.io/commits, you are missing a proper shortlog.","diffHunk":null,"author":{"login":"ksdme","avatarUrl":"https://avatars1.githubusercontent.com/u/12156014?v=4","name":"Kilari Teja"},"reactions":[],"createdAt":"2018-07-30T11:32:21Z","lastEditedAt":null,"updatedAt":"2018-07-30T11:32:21Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwODg1MDkyNQ==","url":"https://github.com/coala/coala/pull/5653#issuecomment-408850925","bodyText":"A couple of issues with your commit message:\n\nThis fixes the typo That was not a typo.\nlines 48 and 89 No point in adding line numbers in commit message.\nMissing period in commit body.\nFixes, this was not a but, you should use Closes.","diffHunk":null,"author":{"login":"ksdme","avatarUrl":"https://avatars1.githubusercontent.com/u/12156014?v=4","name":"Kilari Teja"},"reactions":[],"createdAt":"2018-07-30T12:46:33Z","lastEditedAt":null,"updatedAt":"2018-07-30T12:46:33Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwODg1MjE2Mw==","url":"https://github.com/coala/coala/pull/5653#issuecomment-408852163","bodyText":"You are good to go. Just some minor issue as @ksdme  pointed out.\n\nCommit body is not needed remove it.\nFixes => Closes\nRemoves => Remove\n\nI hope you now know that you can use =>\ngit commit --amend\n<Do the changes>\ngit push -f origin Hemabh\nto do the changes.","diffHunk":null,"author":{"login":"MacBox7","avatarUrl":"https://avatars0.githubusercontent.com/u/15063552?v=4","name":"Ankit Joshi"},"reactions":[],"createdAt":"2018-07-30T12:51:14Z","lastEditedAt":"2018-07-30T12:53:12Z","updatedAt":"2018-07-30T12:53:12Z"}]}}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1532603065000,"issue":{"htmlUrl":"https://github.com/coala/coala/pull/5656","number":5656,"title":"aspects: Default languages=all when using aspects","body":"This ensures that there is no need to pass languages argument\nfor bears supporting all languages by making a list of all languages\nas default for bears when they are run via aspects or both\naspects and settings.\nCloses #5655\n\nFor short term contributors: we understand that getting your commits well\ndefined like we require is a hard task and takes some learning. If you\nlook to help without wanting to contribute long term there's no need\nfor you to learn this. Just drop us a message and we'll take care of brushing\nup your stuff for merge!\nChecklist\n\n I read the commit guidelines and I've followed\nthem.\n I ran coala over my code locally. (All commits have to pass\nindividually. It is not sufficient to have \"fixup commits\" on your PR,\nour bot will still report the issues for the previous commit.) You will\nlikely receive a lot of bot comments and build failures if coala does not\npass on every single commit!\n\nAfter you submit your pull request, DO NOT click the 'Update Branch' button.\nWhen asked for a rebase, consult coala.io/rebase\ninstead.\nPlease consider helping us by reviewing other peoples pull requests as well:\n\npick up any PR at https://coala.io/review\nreview it (check https://coala.io/reviewing for more info)\nif you are sure that it needs work, use corobo mark wip <URL> to get it out\nof the review queue.\n\nThe more you review, the more your score will grow at coala.io and we will\nreview your PRs faster!","comments":4,"createdAt":"2018-07-22T07:11:06Z","updatedAt":"2018-07-26T11:04:25Z","closedAt":"2018-07-26T11:04:00Z","state":"merged","user":{"login":"pareksha","avatarUrl":"https://avatars1.githubusercontent.com/u/32385407?v=4"},"owner":{"login":"pareksha","avatarUrl":"https://avatars1.githubusercontent.com/u/32385407?v=4"},"assignee":{"login":"pareksha","avatarUrl":"https://avatars1.githubusercontent.com/u/32385407?v=4"},"labels":[{"name":"area/aspects","color":"000000"},{"name":"area/documentation","color":"bfe5bf"},{"name":"area/languages","color":"d4c5f9"},{"name":"size/S","color":"B1CF0A"},{"name":"type/bug","color":"e11d21"}],"pullRequest":{"htmlUrl":"https://github.com/coala/coala/pull/5656","comments":[{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDMyMjE5Mg==","url":"https://github.com/coala/coala/pull/5656#discussion_r204322192","bodyText":"Move unknown to top. It is special.\nAnd move these editions to a separate commit, so we can ack that bit and then work on the rest of the patch.","diffHunk":"@@ -17,17 +17,22 @@\n from .definitions.Java import Java\n from .definitions.JavaScript import JavaScript\n from .definitions.JSP import JSP\n+from .definitions.m4 import m4\n from .definitions.Matlab import Matlab\n from .definitions.Markdown import Markdown\n from .definitions.ObjectiveC import ObjectiveC\n from .definitions.PHP import PHP\n from .definitions.PLSQL import PLSQL\n+from .definitions.PowerShell import PowerShell\n from .definitions.Python import Python\n from .definitions.Ruby import Ruby\n from .definitions.Scala import Scala\n from .definitions.Swift import Swift\n+from .definitions.Tcl import Tcl\n from .definitions.Vala import Vala\n from .definitions.TypeScript import TypeScript\n+from .definitions.Unknown import Unknown","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-23T08:39:48Z","lastEditedAt":null,"updatedAt":"2018-07-23T08:39:48Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDMyMjg4Mw==","url":"https://github.com/coala/coala/pull/5656#discussion_r204322883","bodyText":"And arg to include Unknown, default False.","diffHunk":"@@ -350,6 +351,17 @@ def get_all_bears_names():\n     return [bear.name for bear in get_all_bears()]\n \n \n+def get_all_languages():","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-23T08:42:26Z","lastEditedAt":null,"updatedAt":"2018-07-23T08:42:26Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDMyMzMzNA==","url":"https://github.com/coala/coala/pull/5656#discussion_r204323334","bodyText":"They are all here, loaded, so dont look at the directory.","diffHunk":"@@ -350,6 +351,17 @@ def get_all_bears_names():\n     return [bear.name for bear in get_all_bears()]\n \n \n+def get_all_languages():\n+    \"\"\"\n+    Get a ``list`` of all languages supported by coala, including\n+    ``Unknown`` language.\n+    \"\"\"\n+    return Languages([\n+        language_file[: -3] for language_file in\n+        os.listdir('coalib/bearlib/languages/definitions/')","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-23T08:43:42Z","lastEditedAt":null,"updatedAt":"2018-07-23T08:43:42Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDMyNDA3Nw==","url":"https://github.com/coala/coala/pull/5656#discussion_r204324077","bodyText":"This list needs to be loaded from the directory to check all lang files were loaded","diffHunk":"@@ -422,3 +424,38 @@ def test_get_all_bears_names(self):\n                  'TestDepBearAA',\n                  'AspectTestBear',\n                  'TestDepBearDependsAAndAA'})\n+\n+    def test_get_all_languages(self):\n+        with bear_test_module():\n+            languages = get_all_languages()\n+            assert isinstance(languages, tuple)\n+            self.assertSetEqual(\n+                {str(language) for language in languages},\n+                {'C',\n+                 'C#',\n+                 'CPP',\n+                 'CSS',\n+                 'Fortran',\n+                 'Golang',\n+                 'Hypertext Markup Language 2.0, 3.2, 4.0, 4.1, 5, 5.1',\n+                 'Java',\n+                 'JavaScript',\n+                 'JavaServer Pages',\n+                 'Jinja2',\n+                 'Markdown',\n+                 'Matlab',\n+                 'ObjectiveC',\n+                 'PHP',\n+                 'PLSQL',\n+                 'PowerShell',\n+                 'Python 2.7, 3.3, 3.4, 3.5, 3.6',\n+                 'Ruby',\n+                 'Scala',\n+                 'Shell',\n+                 'Swift',\n+                 'Tcl',\n+                 'TypeScript',\n+                 'Unknown',\n+                 'Vala',\n+                 'VisualBasic',\n+                 'm4'})","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-23T08:46:04Z","lastEditedAt":null,"updatedAt":"2018-07-23T08:46:04Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDMyNDI2Ng==","url":"https://github.com/coala/coala/pull/5656#discussion_r204324266","bodyText":"This should go in test_bears dir , after #5651","diffHunk":"@@ -157,6 +157,13 @@ class aspectsFixOnlyTestBear(Bear, aspects={\n     pass\n \n \n+class aspectsGeneralTestBear(Bear, aspects={","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-23T08:46:39Z","lastEditedAt":null,"updatedAt":"2018-07-23T08:46:39Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDMyOTY1Mg==","url":"https://github.com/coala/coala/pull/5656#discussion_r204329652","bodyText":"How are they loaded until I do something like from coalib.bearlib.languages import Python for every language?","diffHunk":"@@ -350,6 +351,17 @@ def get_all_bears_names():\n     return [bear.name for bear in get_all_bears()]\n \n \n+def get_all_languages():\n+    \"\"\"\n+    Get a ``list`` of all languages supported by coala, including\n+    ``Unknown`` language.\n+    \"\"\"\n+    return Languages([\n+        language_file[: -3] for language_file in\n+        os.listdir('coalib/bearlib/languages/definitions/')","author":{"login":"pareksha","avatarUrl":"https://avatars1.githubusercontent.com/u/32385407?v=4","name":"Pareksha Manchanda"},"reactions":[],"createdAt":"2018-07-23T09:04:14Z","lastEditedAt":null,"updatedAt":"2018-07-23T09:04:14Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDMzMDQyMg==","url":"https://github.com/coala/coala/pull/5656#discussion_r204330422","bodyText":"I see, I'll keep it here for now else the tests won't pass. Would rebase as soon as you get the issue solved 👍","diffHunk":"@@ -157,6 +157,13 @@ class aspectsFixOnlyTestBear(Bear, aspects={\n     pass\n \n \n+class aspectsGeneralTestBear(Bear, aspects={","author":{"login":"pareksha","avatarUrl":"https://avatars1.githubusercontent.com/u/32385407?v=4","name":"Pareksha Manchanda"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNjgyMzkzMA==","createdAt":"2018-07-23T09:54:15Z","content":"THUMBS_UP","user":{"login":"jayvdb","name":"John Vandenberg"}}],"createdAt":"2018-07-23T09:07:09Z","lastEditedAt":null,"updatedAt":"2018-07-23T09:07:09Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDMzMjY2OA==","url":"https://github.com/coala/coala/pull/5656#discussion_r204332668","bodyText":"If I load this from the directory, the versions won't come. It would be Python instead of Python 2.7, 3.3, 3.4, 3.5, 3.6. Then I have to use Languages for that, which would render the test useless.\nOne solution to check whether all files are loaded or not is to check that the number of language files in the directory is equal to the number of items supplied by get_all_languages().","diffHunk":"@@ -422,3 +424,38 @@ def test_get_all_bears_names(self):\n                  'TestDepBearAA',\n                  'AspectTestBear',\n                  'TestDepBearDependsAAndAA'})\n+\n+    def test_get_all_languages(self):\n+        with bear_test_module():\n+            languages = get_all_languages()\n+            assert isinstance(languages, tuple)\n+            self.assertSetEqual(\n+                {str(language) for language in languages},\n+                {'C',\n+                 'C#',\n+                 'CPP',\n+                 'CSS',\n+                 'Fortran',\n+                 'Golang',\n+                 'Hypertext Markup Language 2.0, 3.2, 4.0, 4.1, 5, 5.1',\n+                 'Java',\n+                 'JavaScript',\n+                 'JavaServer Pages',\n+                 'Jinja2',\n+                 'Markdown',\n+                 'Matlab',\n+                 'ObjectiveC',\n+                 'PHP',\n+                 'PLSQL',\n+                 'PowerShell',\n+                 'Python 2.7, 3.3, 3.4, 3.5, 3.6',\n+                 'Ruby',\n+                 'Scala',\n+                 'Shell',\n+                 'Swift',\n+                 'Tcl',\n+                 'TypeScript',\n+                 'Unknown',\n+                 'Vala',\n+                 'VisualBasic',\n+                 'm4'})","author":{"login":"pareksha","avatarUrl":"https://avatars1.githubusercontent.com/u/32385407?v=4","name":"Pareksha Manchanda"},"reactions":[],"createdAt":"2018-07-23T09:14:24Z","lastEditedAt":"2018-07-23T09:14:35Z","updatedAt":"2018-07-23T09:14:35Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDM0NDA1OQ==","url":"https://github.com/coala/coala/pull/5656#discussion_r204344059","bodyText":"See coalib.bearlib.languages.__dict__ for one way to get them all\nBut manually listing them is also ok. The test will fail if someone forgets to add one.","diffHunk":"@@ -350,6 +351,17 @@ def get_all_bears_names():\n     return [bear.name for bear in get_all_bears()]\n \n \n+def get_all_languages():\n+    \"\"\"\n+    Get a ``list`` of all languages supported by coala, including\n+    ``Unknown`` language.\n+    \"\"\"\n+    return Languages([\n+        language_file[: -3] for language_file in\n+        os.listdir('coalib/bearlib/languages/definitions/')","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-23T09:53:53Z","lastEditedAt":null,"updatedAt":"2018-07-23T09:53:53Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDM0NDM5MQ==","url":"https://github.com/coala/coala/pull/5656#discussion_r204344391","bodyText":"a count comparson sounds good.","diffHunk":"@@ -422,3 +424,38 @@ def test_get_all_bears_names(self):\n                  'TestDepBearAA',\n                  'AspectTestBear',\n                  'TestDepBearDependsAAndAA'})\n+\n+    def test_get_all_languages(self):\n+        with bear_test_module():\n+            languages = get_all_languages()\n+            assert isinstance(languages, tuple)\n+            self.assertSetEqual(\n+                {str(language) for language in languages},\n+                {'C',\n+                 'C#',\n+                 'CPP',\n+                 'CSS',\n+                 'Fortran',\n+                 'Golang',\n+                 'Hypertext Markup Language 2.0, 3.2, 4.0, 4.1, 5, 5.1',\n+                 'Java',\n+                 'JavaScript',\n+                 'JavaServer Pages',\n+                 'Jinja2',\n+                 'Markdown',\n+                 'Matlab',\n+                 'ObjectiveC',\n+                 'PHP',\n+                 'PLSQL',\n+                 'PowerShell',\n+                 'Python 2.7, 3.3, 3.4, 3.5, 3.6',\n+                 'Ruby',\n+                 'Scala',\n+                 'Shell',\n+                 'Swift',\n+                 'Tcl',\n+                 'TypeScript',\n+                 'Unknown',\n+                 'Vala',\n+                 'VisualBasic',\n+                 'm4'})","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNjgyNDgyMg==","createdAt":"2018-07-23T10:12:57Z","content":"THUMBS_UP","user":{"login":"pareksha","name":"Pareksha Manchanda"}}],"createdAt":"2018-07-23T09:55:15Z","lastEditedAt":null,"updatedAt":"2018-07-23T09:55:15Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDM1OTUxNw==","url":"https://github.com/coala/coala/pull/5656#discussion_r204359517","bodyText":"Unknown was already imported, didn't see at first, removing this extra import","diffHunk":"@@ -17,17 +17,22 @@\n from .definitions.Java import Java\n from .definitions.JavaScript import JavaScript\n from .definitions.JSP import JSP\n+from .definitions.m4 import m4\n from .definitions.Matlab import Matlab\n from .definitions.Markdown import Markdown\n from .definitions.ObjectiveC import ObjectiveC\n from .definitions.PHP import PHP\n from .definitions.PLSQL import PLSQL\n+from .definitions.PowerShell import PowerShell\n from .definitions.Python import Python\n from .definitions.Ruby import Ruby\n from .definitions.Scala import Scala\n from .definitions.Swift import Swift\n+from .definitions.Tcl import Tcl\n from .definitions.Vala import Vala\n from .definitions.TypeScript import TypeScript\n+from .definitions.Unknown import Unknown","author":{"login":"pareksha","avatarUrl":"https://avatars1.githubusercontent.com/u/32385407?v=4","name":"Pareksha Manchanda"},"reactions":[],"createdAt":"2018-07-23T10:56:44Z","lastEditedAt":null,"updatedAt":"2018-07-23T10:56:44Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDM3MDcxNw==","url":"https://github.com/coala/coala/pull/5656#discussion_r204370717","bodyText":"with [key for key in coalib.bearlib.languages.definitions.__dict__], I was getting things like __file__, __spec__ and some other dunders so I added the if statement. If there's another more efficient way to do it, please let me know. :)","diffHunk":"@@ -350,6 +352,18 @@ def get_all_bears_names():\n     return [bear.name for bear in get_all_bears()]\n \n \n+def get_all_languages(include_unknown=False):\n+    \"\"\"\n+    Get a ``list`` of all languages supported by coala, including\n+    ``Unknown`` language.\n+    \"\"\"\n+    languages = [\n+        key for key in definitions.__dict__ if not key.startswith('__')]","author":{"login":"pareksha","avatarUrl":"https://avatars1.githubusercontent.com/u/32385407?v=4","name":"Pareksha Manchanda"},"reactions":[],"createdAt":"2018-07-23T11:43:35Z","lastEditedAt":null,"updatedAt":"2018-07-23T11:43:35Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDQ3MTkyMg==","url":"https://github.com/coala/coala/pull/5656#discussion_r204471922","bodyText":":Param:","diffHunk":"@@ -350,6 +352,18 @@ def get_all_bears_names():\n     return [bear.name for bear in get_all_bears()]\n \n \n+def get_all_languages(include_unknown=False):\n+    \"\"\"\n+    Get a ``list`` of all languages supported by coala, including\n+    ``Unknown`` language.","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-23T16:31:07Z","lastEditedAt":null,"updatedAt":"2018-07-23T16:31:07Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDQ3MjA3MQ==","url":"https://github.com/coala/coala/pull/5656#discussion_r204472071","bodyText":"isinstance","diffHunk":"@@ -350,6 +352,18 @@ def get_all_bears_names():\n     return [bear.name for bear in get_all_bears()]\n \n \n+def get_all_languages(include_unknown=False):\n+    \"\"\"\n+    Get a ``list`` of all languages supported by coala, including\n+    ``Unknown`` language.\n+    \"\"\"\n+    languages = [\n+        key for key in definitions.__dict__ if not key.startswith('__')]","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-23T16:31:39Z","lastEditedAt":null,"updatedAt":"2018-07-23T16:31:39Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDQ5NTIwNw==","url":"https://github.com/coala/coala/pull/5656#discussion_r204495207","bodyText":"It is ready","diffHunk":"@@ -157,6 +157,13 @@ class aspectsFixOnlyTestBear(Bear, aspects={\n     pass\n \n \n+class aspectsGeneralTestBear(Bear, aspects={","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNjg3MjE4OA==","createdAt":"2018-07-24T04:25:21Z","content":"THUMBS_UP","user":{"login":"pareksha","name":"Pareksha Manchanda"}}],"createdAt":"2018-07-23T17:45:25Z","lastEditedAt":null,"updatedAt":"2018-07-23T17:45:25Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDYyNTg1OA==","url":"https://github.com/coala/coala/pull/5656#discussion_r204625858","bodyText":"Shifted LANGUAGE_NAMES and LANGUAGE_COUNT to TestUtilities.py as you did in  #5651.","diffHunk":"@@ -157,6 +157,13 @@ class aspectsFixOnlyTestBear(Bear, aspects={\n     pass\n \n \n+class aspectsGeneralTestBear(Bear, aspects={","author":{"login":"pareksha","avatarUrl":"https://avatars1.githubusercontent.com/u/32385407?v=4","name":"Pareksha Manchanda"},"reactions":[],"createdAt":"2018-07-24T05:17:19Z","lastEditedAt":null,"updatedAt":"2018-07-24T05:17:19Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDYyNTk3NQ==","url":"https://github.com/coala/coala/pull/5656#discussion_r204625975","bodyText":"Added :return: too :)","diffHunk":"@@ -350,6 +352,18 @@ def get_all_bears_names():\n     return [bear.name for bear in get_all_bears()]\n \n \n+def get_all_languages(include_unknown=False):\n+    \"\"\"\n+    Get a ``list`` of all languages supported by coala, including\n+    ``Unknown`` language.","author":{"login":"pareksha","avatarUrl":"https://avatars1.githubusercontent.com/u/32385407?v=4","name":"Pareksha Manchanda"},"reactions":[],"createdAt":"2018-07-24T05:18:19Z","lastEditedAt":null,"updatedAt":"2018-07-24T05:18:19Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDYyNjE4MA==","url":"https://github.com/coala/coala/pull/5656#discussion_r204626180","bodyText":"That helped a lot 👍","diffHunk":"@@ -350,6 +352,18 @@ def get_all_bears_names():\n     return [bear.name for bear in get_all_bears()]\n \n \n+def get_all_languages(include_unknown=False):\n+    \"\"\"\n+    Get a ``list`` of all languages supported by coala, including\n+    ``Unknown`` language.\n+    \"\"\"\n+    languages = [\n+        key for key in definitions.__dict__ if not key.startswith('__')]","author":{"login":"pareksha","avatarUrl":"https://avatars1.githubusercontent.com/u/32385407?v=4","name":"Pareksha Manchanda"},"reactions":[],"createdAt":"2018-07-24T05:18:51Z","lastEditedAt":null,"updatedAt":"2018-07-24T05:18:51Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDYzMDg0Nw==","url":"https://github.com/coala/coala/pull/5656#discussion_r204630847","bodyText":"This Bear needs to be a separate module in our tests/test_bears/ directory","diffHunk":"@@ -157,6 +157,13 @@ class aspectsFixOnlyTestBear(Bear, aspects={\n     pass\n \n \n+class aspectsGeneralTestBear(Bear, aspects={","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-24T05:53:40Z","lastEditedAt":null,"updatedAt":"2018-07-24T05:53:40Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDY2ODY3Ng==","url":"https://github.com/coala/coala/pull/5656#discussion_r204668676","bodyText":"Create constant","diffHunk":"@@ -187,5 +187,5 @@ def test_show_language_bears_output_file(self):\n         os.remove('bears.json')\n \n         self.assertEqual(retval, 0)\n-        self.assertEqual(len(data['bears']), 2)\n+        self.assertEqual(len(data['bears']), 3)","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-24T08:35:55Z","lastEditedAt":null,"updatedAt":"2018-07-24T08:35:55Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDY3ODI1OQ==","url":"https://github.com/coala/coala/pull/5656#discussion_r204678259","bodyText":"JAVA_BEARS_CONSTANT = 3 as a module level constant?","diffHunk":"@@ -187,5 +187,5 @@ def test_show_language_bears_output_file(self):\n         os.remove('bears.json')\n \n         self.assertEqual(retval, 0)\n-        self.assertEqual(len(data['bears']), 2)\n+        self.assertEqual(len(data['bears']), 3)","author":{"login":"pareksha","avatarUrl":"https://avatars1.githubusercontent.com/u/32385407?v=4","name":"Pareksha Manchanda"},"reactions":[],"createdAt":"2018-07-24T09:06:20Z","lastEditedAt":null,"updatedAt":"2018-07-24T09:06:20Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDc1NzA5OA==","url":"https://github.com/coala/coala/pull/5656#discussion_r204757098","bodyText":"Create a constant , derived from the other constants","diffHunk":"@@ -186,8 +186,8 @@ def test_show_language_bears(self, debug=False):\n             retval, stdout, stderr = execute_coala(\n                 coala.main, 'coala', '-B', '-l', 'java', '-I', debug=debug)\n             self.assertEqual(retval, 0)\n-            # 2 bears plus 1 line holding the closing colour escape sequence.\n-            self.assertEqual(len(stdout.splitlines()), 3)\n+            # 3 bears plus 1 line holding the closing colour escape sequence.\n+            self.assertEqual(len(stdout.splitlines()), 4)","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-24T13:35:45Z","lastEditedAt":null,"updatedAt":"2018-07-24T13:35:45Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDc1NzE3Nw==","url":"https://github.com/coala/coala/pull/5656#discussion_r204757177","bodyText":"As above","diffHunk":"@@ -16,8 +16,8 @@ def test_filter_by_language_c(self):\n             retval, stdout, stderr = execute_coala(\n                 coala.main, 'coala', '-B', '--filter-by', 'language', 'c')\n             self.assertEqual(retval, 0)\n-            # 1 bear plus 1 line holding the closing colour escape sequence.\n-            self.assertEqual(len(stdout.strip().splitlines()), 2)\n+            # 2 bears plus 1 line holding the closing colour escape sequence.\n+            self.assertEqual(len(stdout.strip().splitlines()), 3)","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-24T13:35:58Z","lastEditedAt":null,"updatedAt":"2018-07-24T13:35:58Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDc1Nzg1NA==","url":"https://github.com/coala/coala/pull/5656#discussion_r204757854","bodyText":"@MacBox7 this is unsorted?\nWe need to apply a sort here I guess otherwise these will jiggle around randomly","diffHunk":"@@ -466,9 +466,9 @@ def test_get_filtered_bears(self):\n             local_bears, global_bears = get_filtered_bears(","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-24T13:37:53Z","lastEditedAt":null,"updatedAt":"2018-07-24T13:37:53Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDc3Mzg3OQ==","url":"https://github.com/coala/coala/pull/5656#discussion_r204773879","bodyText":"Either we can sort the output of get_filtered_bears or we can provide a utility in TestUtilities.py. Which one do you think would be best?","diffHunk":"@@ -466,9 +466,9 @@ def test_get_filtered_bears(self):\n             local_bears, global_bears = get_filtered_bears(","author":{"login":"MacBox7","avatarUrl":"https://avatars0.githubusercontent.com/u/15063552?v=4","name":"Ankit Joshi"},"reactions":[],"createdAt":"2018-07-24T14:16:55Z","lastEditedAt":null,"updatedAt":"2018-07-24T14:16:55Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDg5ODQ4Nw==","url":"https://github.com/coala/coala/pull/5656#discussion_r204898487","bodyText":"Utility in coalib , used here in tests","diffHunk":"@@ -466,9 +466,9 @@ def test_get_filtered_bears(self):\n             local_bears, global_bears = get_filtered_bears(","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-24T20:23:43Z","lastEditedAt":null,"updatedAt":"2018-07-24T20:23:43Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDk3NjM3Mg==","url":"https://github.com/coala/coala/pull/5656#discussion_r204976372","bodyText":"Will it be a part of this PR?","diffHunk":"@@ -466,9 +466,9 @@ def test_get_filtered_bears(self):\n             local_bears, global_bears = get_filtered_bears(","author":{"login":"pareksha","avatarUrl":"https://avatars1.githubusercontent.com/u/32385407?v=4","name":"Pareksha Manchanda"},"reactions":[],"createdAt":"2018-07-25T04:11:58Z","lastEditedAt":null,"updatedAt":"2018-07-25T04:11:58Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTM5OTAwOA==","url":"https://github.com/coala/coala/pull/5656#discussion_r205399008","bodyText":"Why not assert the instances of all three bears.","diffHunk":"@@ -470,9 +470,9 @@ def test_get_filtered_bears(self):\n         local_bears['cli'] = _sort_bears(local_bears['cli'])\n         global_bears['cli'] = _sort_bears(global_bears['cli'])\n \n-        self.assertEqual(len(local_bears['cli']), 2)\n-        self.assertEqual(str(local_bears['cli'][0]),\n-                         \"<class 'JavaTestBear.JavaTestBear'>\")\n+        self.assertEqual(len(local_bears['cli']), 3)\n         self.assertEqual(str(local_bears['cli'][1]),","author":{"login":"MacBox7","avatarUrl":"https://avatars0.githubusercontent.com/u/15063552?v=4","name":"Ankit Joshi"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNzAxNTAyMw==","createdAt":"2018-07-26T10:45:40Z","content":"THUMBS_UP","user":{"login":"pareksha","name":"Pareksha Manchanda"}}],"createdAt":"2018-07-26T09:59:01Z","lastEditedAt":null,"updatedAt":"2018-07-26T09:59:01Z"}]}}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1532274421000,"issue":{"htmlUrl":"https://github.com/coala/coala/pull/5660","number":5660,"title":"test-requirements.txt: Moban Sync","body":"Sync with mobans template.\n\nFor short term contributors: we understand that getting your commits well\ndefined like we require is a hard task and takes some learning. If you\nlook to help without wanting to contribute long term there's no need\nfor you to learn this. Just drop us a message and we'll take care of brushing\nup your stuff for merge!\nChecklist\n\n I read the commit guidelines and I've followed\nthem.\n I ran coala over my code locally. (All commits have to pass\nindividually. It is not sufficient to have \"fixup commits\" on your PR,\nour bot will still report the issues for the previous commit.) You will\nlikely receive a lot of bot comments and build failures if coala does not\npass on every single commit!\n\nAfter you submit your pull request, DO NOT click the 'Update Branch' button.\nWhen asked for a rebase, consult coala.io/rebase\ninstead.\nPlease consider helping us by reviewing other peoples pull requests as well:\n\npick up any PR at https://coala.io/review\nreview it (check https://coala.io/reviewing for more info)\nif you are sure that it needs work, use corobo mark wip <URL> to get it out\nof the review queue.\n\nThe more you review, the more your score will grow at coala.io and we will\nreview your PRs faster!","comments":4,"createdAt":"2018-07-22T13:58:31Z","updatedAt":"2018-07-22T15:47:01Z","closedAt":"2018-07-22T15:46:48Z","state":"merged","user":{"login":"ksdme","avatarUrl":"https://avatars1.githubusercontent.com/u/12156014?v=4"},"owner":{"login":"ksdme","avatarUrl":"https://avatars1.githubusercontent.com/u/12156014?v=4"},"labels":[{"name":"size/XS","color":"00DE0F"}],"pullRequest":{"htmlUrl":"https://github.com/coala/coala/pull/5660","comments":[]}}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1533092490000,"issue":{"htmlUrl":"https://github.com/coala/coala/pull/5661","number":5661,"title":"changes ArgParser to ArgumentParser in doc strings","body":"For short term contributors: we understand that getting your commits well\ndefined like we require is a hard task and takes some learning. If you\nlook to help without wanting to contribute long term there's no need\nfor you to learn this. Just drop us a message and we'll take care of brushing\nup your stuff for merge!\nChecklist\n\n I read the commit guidelines and I've followed\nthem.\n I ran coala over my code locally. (All commits have to pass\nindividually. It is not sufficient to have \"fixup commits\" on your PR,\nour bot will still report the issues for the previous commit.) You will\nlikely receive a lot of bot comments and build failures if coala does not\npass on every single commit!\n\nAfter you submit your pull request, DO NOT click the 'Update Branch' button.\nWhen asked for a rebase, consult coala.io/rebase\ninstead.\nPlease consider helping us by reviewing other peoples pull requests as well:\n\npick up any PR at https://coala.io/review\nreview it (check https://coala.io/reviewing for more info)\nif you are sure that it needs work, use corobo mark wip <URL> to get it out\nof the review queue.\n\nThe more you review, the more your score will grow at coala.io and we will\nreview your PRs faster!\nFor issue #4188 . I had a earlier PR #5649 but don't know how to change commit messages so closing that.","comments":3,"createdAt":"2018-07-23T06:27:31Z","updatedAt":"2018-08-01T03:01:30Z","closedAt":null,"state":"open","user":{"login":"frunkad","avatarUrl":"https://avatars2.githubusercontent.com/u/33373582?v=4"},"owner":{"login":"frunkad","avatarUrl":"https://avatars2.githubusercontent.com/u/33373582?v=4"},"labels":[{"name":"process/wip","color":"fbca04"},{"name":"size/XS","color":"00DE0F"}],"pullRequest":{"htmlUrl":"https://github.com/coala/coala/pull/5661","comments":[{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk1ODkwNg==","url":"https://github.com/coala/coala/pull/5661#discussion_r205958906","bodyText":"bad indentation","diffHunk":"@@ -469,8 +469,8 @@ def gather_configuration(acquire_settings,\n     :param log_printer:      The log printer to use for logging. The log level\n                              will be adjusted to the one given by the section.\n     :param arg_list:         CLI args to use\n-    :param arg_parser:       Instance of ArgParser that is used to parse\n-                             none-setting arguments.\n+    :param arg_parser:       Instance of argparse.ArgumentParser that is used\n+                            to parse none-setting arguments.","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-07-29T02:28:49Z","lastEditedAt":null,"updatedAt":"2018-07-29T02:28:49Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwODYzMDY5MA==","url":"https://github.com/coala/coala/pull/5661#issuecomment-408630690","bodyText":"@jayvdb done!","diffHunk":null,"author":{"login":"frunkad","avatarUrl":"https://avatars2.githubusercontent.com/u/33373582?v=4","name":"Darshan Baid"},"createdAt":"2018-07-28T19:43:27Z","lastEditedAt":null,"updatedAt":"2018-07-28T19:43:27Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwODY4OTM2Mg==","url":"https://github.com/coala/coala/pull/5661#issuecomment-408689362","bodyText":"Sorry missed that! Now done @jayvdb","diffHunk":null,"author":{"login":"frunkad","avatarUrl":"https://avatars2.githubusercontent.com/u/33373582?v=4","name":"Darshan Baid"},"createdAt":"2018-07-29T16:33:07Z","lastEditedAt":null,"updatedAt":"2018-07-29T16:33:07Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwOTQzMzg1OA==","url":"https://github.com/coala/coala/pull/5661#issuecomment-409433858","bodyText":"#5661 (review)\nnot done","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-08-01T03:01:20Z","lastEditedAt":null,"updatedAt":"2018-08-01T03:01:20Z"}]}}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1532585253000,"issue":{"htmlUrl":"https://github.com/coala/coala/pull/5662","number":5662,"title":"Document unsorted bear lists","body":"Fixes #5654\n\nFor short term contributors: we understand that getting your commits well\ndefined like we require is a hard task and takes some learning. If you\nlook to help without wanting to contribute long term there's no need\nfor you to learn this. Just drop us a message and we'll take care of brushing\nup your stuff for merge!\nChecklist\n\n I read the commit guidelines and I've followed\nthem.\n I ran coala over my code locally. (All commits have to pass\nindividually. It is not sufficient to have \"fixup commits\" on your PR,\nour bot will still report the issues for the previous commit.) You will\nlikely receive a lot of bot comments and build failures if coala does not\npass on every single commit!\n\nAfter you submit your pull request, DO NOT click the 'Update Branch' button.\nWhen asked for a rebase, consult coala.io/rebase\ninstead.\nPlease consider helping us by reviewing other peoples pull requests as well:\n\npick up any PR at https://coala.io/review\nreview it (check https://coala.io/reviewing for more info)\nif you are sure that it needs work, use corobo mark wip <URL> to get it out\nof the review queue.\n\nThe more you review, the more your score will grow at coala.io and we will\nreview your PRs faster!","comments":3,"createdAt":"2018-07-23T10:44:46Z","updatedAt":"2018-07-26T06:07:33Z","closedAt":"2018-07-26T06:07:33Z","state":"merged","user":{"login":"MacBox7","avatarUrl":"https://avatars0.githubusercontent.com/u/15063552?v=4"},"owner":{"login":"MacBox7","avatarUrl":"https://avatars0.githubusercontent.com/u/15063552?v=4"},"assignee":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"difficulty/low","color":"207de5"},{"name":"importance/high","color":"eb6420"},{"name":"process/pending review","color":"bfe5bf"},{"name":"size/XS","color":"00DE0F"},{"name":"type/bug","color":"e11d21"}],"pullRequest":{"htmlUrl":"https://github.com/coala/coala/pull/5662","comments":[{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDM1Nzg3Mg==","url":"https://github.com/coala/coala/pull/5662#discussion_r204357872","bodyText":"We can sort down at this level.\nToo many things will change slightly, and perform badly, especially if a different sorting is needed higher up the stack.\nSorting needs to be done in the CLI layer where the desired use of the data is known.","diffHunk":"@@ -243,7 +243,8 @@ def collect_bears(bear_dirs, bear_globs, kinds, log_printer=None,\n                              'No bears matching \\'{}\\' were found. Make sure '\n                              'you have coala-bears installed or you have typed '\n                              'the name correctly.')\n-    return bears_found\n+    return tuple(map(lambda x: sorted(x, key=lambda y: y.__name__),","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-07-23T10:49:14Z","lastEditedAt":null,"updatedAt":"2018-07-23T10:49:14Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTA1NzA1Mg==","url":"https://github.com/coala/coala/pull/5662#discussion_r205057052","bodyText":"it isnt populated with \"names\"; they a Bear objects?\nAnyway, you can get coverage by putting it to use at test_get_filtered_bears.\nIt is too basic a wrapper around sorted to need its own tests","diffHunk":"@@ -396,3 +396,12 @@ def test_get_all_bears_names(self):\n             self.assertSetEqual(\n                 set(names),\n                 set(TEST_BEAR_NAMES))\n+\n+    def test_bears_sorting(self):\n+        with bear_test_module():\n+            names = get_all_bears()","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-07-25T10:20:54Z","lastEditedAt":null,"updatedAt":"2018-07-25T10:20:54Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTA1NzI1NA==","url":"https://github.com/coala/coala/pull/5662#discussion_r205057254","bodyText":"need to briefly describe the default sort order","diffHunk":"@@ -37,6 +37,18 @@ def _import_bears(file_path, kinds):\n             yield bear_class\n \n \n+def _sort_bears(bears, key=lambda x: x.name.lower(), reverse=False):\n+    \"\"\"\n+    Sort the bear list according to the key provided.\n+\n+    :param bears:           List of bears to be sorted.\n+    :param key:             Key using which comparison should take place.","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-07-25T10:21:36Z","lastEditedAt":null,"updatedAt":"2018-07-25T10:21:36Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTMzMzAzMA==","url":"https://github.com/coala/coala/pull/5662#discussion_r205333030","bodyText":"ehh?.  please keep using a reusable constant in TestUtilities.","diffHunk":"@@ -387,12 +387,38 @@ def test_get_all_bears(self):\n                 assert issubclass(bear, Bear)\n             self.assertSetEqual(\n                 {b.name for b in bears},\n-                set(TEST_BEAR_NAMES))\n+                {'DependentBear',","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-07-26T05:10:14Z","lastEditedAt":null,"updatedAt":"2018-07-26T05:10:14Z"}]}}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1532827121000,"issue":{"htmlUrl":"https://github.com/coala/coala/pull/5663","number":5663,"title":"setup.py: Require dev release of depman","body":"For short term contributors: we understand that getting your commits well\ndefined like we require is a hard task and takes some learning. If you\nlook to help without wanting to contribute long term there's no need\nfor you to learn this. Just drop us a message and we'll take care of brushing\nup your stuff for merge!\nChecklist\n\n I read the commit guidelines and I've followed\nthem.\n I ran coala over my code locally. (All commits have to pass\nindividually. It is not sufficient to have \"fixup commits\" on your PR,\nour bot will still report the issues for the previous commit.) You will\nlikely receive a lot of bot comments and build failures if coala does not\npass on every single commit!\n\nAfter you submit your pull request, DO NOT click the 'Update Branch' button.\nWhen asked for a rebase, consult coala.io/rebase\ninstead.\nPlease consider helping us by reviewing other peoples pull requests as well:\n\npick up any PR at https://coala.io/review\nreview it (check https://coala.io/reviewing for more info)\nif you are sure that it needs work, use corobo mark wip <URL> to get it out\nof the review queue.\n\nThe more you review, the more your score will grow at coala.io and we will\nreview your PRs faster!","comments":5,"createdAt":"2018-07-23T15:39:17Z","updatedAt":"2018-07-29T01:18:41Z","closedAt":"2018-07-29T01:18:40Z","state":"merged","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"process/pending review","color":"bfe5bf"},{"name":"size/M","color":"eb6420"}],"pullRequest":{"htmlUrl":"https://github.com/coala/coala/pull/5663","comments":[{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDQ1ODI4Mg==","url":"https://github.com/coala/coala/pull/5663#discussion_r204458282","bodyText":"> will also work, and be more appropriate.  Still testing that","diffHunk":"@@ -127,6 +128,57 @@ def run(self):\n __dir__ = os.path.dirname(__file__)\n \n \n+def egg_name_to_requirement(name):\n+    name = name.strip()\n+    parts = name.split('-')\n+\n+    # The first part may be v or v0, which would be considered a version\n+    # if processed in the following loop.\n+    name_parts = [parts[0]]\n+    # Pre-releases may contain a '-' and be alpha only, so we must\n+    # parse from the second part to find the first version-like part.\n+    for part in parts[1:]:\n+        version = LooseVersion(part)\n+        version = version.version\n+        v_prefix = version[0] == 'v'\n+        if v_prefix:\n+            version = version[1:]\n+        if isinstance(version[0], int):\n+            break\n+        name_parts.append(part)\n+\n+    version_parts = parts[len(name_parts):]\n+\n+    if not version_parts:\n+        return name\n+\n+    name = '-'.join(name_parts)\n+\n+    version = LooseVersion('-'.join(version_parts))\n+\n+    # Assume that alpha, beta, pre, post & final releases\n+    # are in PyPi so setutools can find it.\n+    if not any(part == 'dev' for part in version.version):\n+        return name + '==' + version\n+\n+    # For development releases, which will not usually be PyPi,\n+    # setuptools will fail with `==` and `~=` as it will look for the\n+    # release in PyPi.\n+    # Decrement the first non-final version part, which should be in PyPi,\n+    # and use version specifier >= so that the installed package from VCS\n+    # will have a version acceptable to the requirement.\n+    for i, part in enumerate(version.version):\n+        if not isinstance(part, int):\n+            break\n+\n+    previous_final_version = version.version[0:i]\n+    previous_final_version[i - 1] -= 1\n+\n+    version = '.'.join(str(part) for part in previous_final_version)\n+\n+    return name + '>=' + version","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-07-23T16:01:40Z","lastEditedAt":null,"updatedAt":"2018-07-23T16:01:40Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDQ2OTM5OA==","url":"https://github.com/coala/coala/pull/5663#discussion_r204469398","bodyText":"version is a LooseVersion object concatenation not possible.","diffHunk":"@@ -127,6 +128,57 @@ def run(self):\n __dir__ = os.path.dirname(__file__)\n \n \n+def egg_name_to_requirement(name):\n+    name = name.strip()\n+    parts = name.split('-')\n+\n+    # The first part may be v or v0, which would be considered a version\n+    # if processed in the following loop.\n+    name_parts = [parts[0]]\n+    # Pre-releases may contain a '-' and be alpha only, so we must\n+    # parse from the second part to find the first version-like part.\n+    for part in parts[1:]:\n+        version = LooseVersion(part)\n+        version = version.version\n+        v_prefix = version[0] == 'v'\n+        if v_prefix:\n+            version = version[1:]\n+        if isinstance(version[0], int):\n+            break\n+        name_parts.append(part)\n+\n+    version_parts = parts[len(name_parts):]\n+\n+    if not version_parts:\n+        return name\n+\n+    name = '-'.join(name_parts)\n+\n+    version = LooseVersion('-'.join(version_parts))\n+\n+    # Assume that alpha, beta, pre, post & final releases\n+    # are in PyPi so setutools can find it.\n+    if not any(part == 'dev' for part in version.version):\n+        return name + '==' + version","author":{"login":"MacBox7","avatarUrl":"https://avatars0.githubusercontent.com/u/15063552?v=4","name":"Ankit Joshi"},"createdAt":"2018-07-23T16:23:23Z","lastEditedAt":null,"updatedAt":"2018-07-23T16:23:23Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDQ3MTk0Nw==","url":"https://github.com/coala/coala/pull/5663#discussion_r204471947","bodyText":"coala-utils-5.0.dev0 would result in negative version. Is this a possible scenario?","diffHunk":"@@ -127,6 +128,57 @@ def run(self):\n __dir__ = os.path.dirname(__file__)\n \n \n+def egg_name_to_requirement(name):\n+    name = name.strip()\n+    parts = name.split('-')\n+\n+    # The first part may be v or v0, which would be considered a version\n+    # if processed in the following loop.\n+    name_parts = [parts[0]]\n+    # Pre-releases may contain a '-' and be alpha only, so we must\n+    # parse from the second part to find the first version-like part.\n+    for part in parts[1:]:\n+        version = LooseVersion(part)\n+        version = version.version\n+        v_prefix = version[0] == 'v'\n+        if v_prefix:\n+            version = version[1:]\n+        if isinstance(version[0], int):\n+            break\n+        name_parts.append(part)\n+\n+    version_parts = parts[len(name_parts):]\n+\n+    if not version_parts:\n+        return name\n+\n+    name = '-'.join(name_parts)\n+\n+    version = LooseVersion('-'.join(version_parts))\n+\n+    # Assume that alpha, beta, pre, post & final releases\n+    # are in PyPi so setutools can find it.\n+    if not any(part == 'dev' for part in version.version):\n+        return name + '==' + version\n+\n+    # For development releases, which will not usually be PyPi,\n+    # setuptools will fail with `==` and `~=` as it will look for the\n+    # release in PyPi.\n+    # Decrement the first non-final version part, which should be in PyPi,\n+    # and use version specifier >= so that the installed package from VCS\n+    # will have a version acceptable to the requirement.\n+    for i, part in enumerate(version.version):\n+        if not isinstance(part, int):\n+            break\n+\n+    previous_final_version = version.version[0:i]\n+    previous_final_version[i - 1] -= 1","author":{"login":"MacBox7","avatarUrl":"https://avatars0.githubusercontent.com/u/15063552?v=4","name":"Ankit Joshi"},"createdAt":"2018-07-23T16:31:15Z","lastEditedAt":null,"updatedAt":"2018-07-23T16:31:15Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwNzM1NzgyNw==","url":"https://github.com/coala/coala/pull/5663#issuecomment-407357827","bodyText":"test-requirements.txt isn't in sync with moban. Leading to failure.","diffHunk":null,"author":{"login":"MacBox7","avatarUrl":"https://avatars0.githubusercontent.com/u/15063552?v=4","name":"Ankit Joshi"},"createdAt":"2018-07-24T10:23:07Z","lastEditedAt":"2018-07-24T10:23:20Z","updatedAt":"2018-07-24T10:23:20Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwODYyODEzOA==","url":"https://github.com/coala/coala/pull/5663#issuecomment-408628138","bodyText":"test-requirements.txt isnt in scope for this PR.","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-07-28T18:55:06Z","lastEditedAt":null,"updatedAt":"2018-07-28T18:55:06Z"}]}}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1532581727000,"issue":{"htmlUrl":"https://github.com/coala/coala/pull/5665","number":5665,"title":"ANURADHAJHA99","body":"For short term contributors: we understand that getting your commits well\ndefined like we require is a hard task and takes some learning. If you\nlook to help without wanting to contribute long term there's no need\nfor you to learn this. Just drop us a message and we'll take care of brushing\nup your stuff for merge!\nChecklist\n\n I read the commit guidelines and I've followed\nthem.\n I ran coala over my code locally. (All commits have to pass\nindividually. It is not sufficient to have \"fixup commits\" on your PR,\nour bot will still report the issues for the previous commit.) You will\nlikely receive a lot of bot comments and build failures if coala does not\npass on every single commit!\n\nAfter you submit your pull request, DO NOT click the 'Update Branch' button.\nWhen asked for a rebase, consult coala.io/rebase\ninstead.\nPlease consider helping us by reviewing other peoples pull requests as well:\n\npick up any PR at https://coala.io/review\nreview it (check https://coala.io/reviewing for more info)\nif you are sure that it needs work, use corobo mark wip <URL> to get it out\nof the review queue.\n\nThe more you review, the more your score will grow at coala.io and we will\nreview your PRs faster!","comments":0,"createdAt":"2018-07-24T21:08:37Z","updatedAt":"2018-07-26T05:08:47Z","closedAt":"2018-07-26T05:08:21Z","state":"closed","user":{"login":"ANURADHAJHA99","avatarUrl":"https://avatars2.githubusercontent.com/u/34815869?v=4"},"owner":{"login":"ANURADHAJHA99","avatarUrl":"https://avatars2.githubusercontent.com/u/34815869?v=4"},"labels":[{"name":"size/XS","color":"00DE0F"},{"name":"status/invalid","color":"000000"}],"pullRequest":{"htmlUrl":"https://github.com/coala/coala/pull/5665","comments":[]}}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1533545769000,"issue":{"htmlUrl":"https://github.com/coala/coala/pull/5666","number":5666,"title":"Profile_Bears: Add Profiling Interface doc","body":"Related to #565","comments":6,"createdAt":"2018-07-25T16:49:24Z","updatedAt":"2018-08-06T08:56:09Z","closedAt":"2018-08-06T08:55:41Z","state":"merged","user":{"login":"RaiVaibhav","avatarUrl":"https://avatars3.githubusercontent.com/u/22278438?v=4"},"owner":{"login":"RaiVaibhav","avatarUrl":"https://avatars3.githubusercontent.com/u/22278438?v=4"},"assignee":{"login":"RaiVaibhav","avatarUrl":"https://avatars3.githubusercontent.com/u/22278438?v=4"},"labels":[{"name":"difficulty/medium","color":"0052cc"},{"name":"importance/low","color":"70E870"},{"name":"process/pending review","color":"bfe5bf"},{"name":"size/XS","color":"00DE0F"},{"name":"type/feature","color":"0052cc"}],"pullRequest":{"htmlUrl":"https://github.com/coala/coala/pull/5666","comments":[{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTM4MjE1Ng==","url":"https://github.com/coala/coala/pull/5666#discussion_r205382156","bodyText":"shouldn't be there another newline here? Not sure if RST requires that","diffHunk":"@@ -0,0 +1,74 @@\n+Profile Bears\n+=============\n+\n+This document provide the overview of coala's Profiling Interface. The\n+Profiling Interface will provide an ability to Profile the Bear's code to\n+optimize its performance.\n+\n+The profiler will start by profiling the run() method of bears because it\n+consumes most of the bears time. So, this is part where bear writer will spend\n+time, as rest of the part like loading the files, collecting the settings,\n+etc. are done by coala itself.\n+\n+.. note::","author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNzAyNDkzNQ==","createdAt":"2018-07-26T14:00:42Z","content":"THUMBS_UP","user":{"login":"RaiVaibhav","name":"Vaibhav Rai"}}],"createdAt":"2018-07-26T09:05:43Z","lastEditedAt":null,"updatedAt":"2018-07-26T09:05:43Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTM4MjI0OQ==","url":"https://github.com/coala/coala/pull/5666#discussion_r205382249","bodyText":"provides ;) --> https://www.gymglish.com/en/english-grammar/the-s-in-the-third-person-singular-form :D","diffHunk":"@@ -0,0 +1,74 @@\n+Profile Bears\n+=============\n+\n+This document provide the overview of coala's Profiling Interface. The","author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"reactions":[],"createdAt":"2018-07-26T09:06:05Z","lastEditedAt":null,"updatedAt":"2018-07-26T09:06:05Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTM4MjI4Ng==","url":"https://github.com/coala/coala/pull/5666#discussion_r205382286","bodyText":"an overview","diffHunk":"@@ -0,0 +1,74 @@\n+Profile Bears\n+=============\n+\n+This document provide the overview of coala's Profiling Interface. The","author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"reactions":[],"createdAt":"2018-07-26T09:06:10Z","lastEditedAt":null,"updatedAt":"2018-07-26T09:06:10Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTM4MjU0NQ==","url":"https://github.com/coala/coala/pull/5666#discussion_r205382545","bodyText":"I think plural sounds better:\nThe Profiling Interfaces provides abilities to Pprofile Bears code","diffHunk":"@@ -0,0 +1,74 @@\n+Profile Bears\n+=============\n+\n+This document provide the overview of coala's Profiling Interface. The\n+Profiling Interface will provide an ability to Profile the Bear's code to","author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"reactions":[],"createdAt":"2018-07-26T09:06:51Z","lastEditedAt":null,"updatedAt":"2018-07-26T09:06:51Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTM4MzY4OA==","url":"https://github.com/coala/coala/pull/5666#discussion_r205383688","bodyText":"You should omit the part \"consumes most the bears time\", that's an assumption that is usually satisfied for larger setups.\nAlso you actually describe the real reason below :)\n-->\nThe profiler will start by profiling the run() method of bears because it\nconsumes most of the bears time. So, this is the part where bear writers will spend time on ...","diffHunk":"@@ -0,0 +1,74 @@\n+Profile Bears\n+=============\n+\n+This document provide the overview of coala's Profiling Interface. The\n+Profiling Interface will provide an ability to Profile the Bear's code to\n+optimize its performance.\n+\n+The profiler will start by profiling the run() method of bears because it\n+consumes most of the bears time. So, this is part where bear writer will spend","author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"reactions":[],"createdAt":"2018-07-26T09:10:08Z","lastEditedAt":null,"updatedAt":"2018-07-26T09:10:08Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTM4Mzc1Mg==","url":"https://github.com/coala/coala/pull/5666#discussion_r205383752","bodyText":"writers","diffHunk":"@@ -0,0 +1,74 @@\n+Profile Bears\n+=============\n+\n+This document provide the overview of coala's Profiling Interface. The\n+Profiling Interface will provide an ability to Profile the Bear's code to\n+optimize its performance.\n+\n+The profiler will start by profiling the run() method of bears because it\n+consumes most of the bears time. So, this is part where bear writer will spend\n+time, as rest of the part like loading the files, collecting the settings,\n+etc. are done by coala itself.\n+\n+.. note::\n+    Enabliling both profiler and debugger on a bear at a same time will result\n+    into error.\n+\n+Bear writer will have the ability to directly dump the raw profile output","author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"reactions":[],"createdAt":"2018-07-26T09:10:22Z","lastEditedAt":null,"updatedAt":"2018-07-26T09:10:22Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTM4NDE1Mg==","url":"https://github.com/coala/coala/pull/5666#discussion_r205384152","bodyText":"Since this is an \"unspecified quantity\" of people you are referring two, you have to choices in fact:\n\nA bear writer\nBear writers","diffHunk":"@@ -0,0 +1,74 @@\n+Profile Bears\n+=============\n+\n+This document provide the overview of coala's Profiling Interface. The\n+Profiling Interface will provide an ability to Profile the Bear's code to\n+optimize its performance.\n+\n+The profiler will start by profiling the run() method of bears because it\n+consumes most of the bears time. So, this is part where bear writer will spend\n+time, as rest of the part like loading the files, collecting the settings,\n+etc. are done by coala itself.\n+\n+.. note::\n+    Enabliling both profiler and debugger on a bear at a same time will result\n+    into error.\n+\n+Bear writer will have the ability to directly dump the raw profile output","author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"reactions":[],"createdAt":"2018-07-26T09:11:32Z","lastEditedAt":null,"updatedAt":"2018-07-26T09:11:32Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTQ2Nzg4NA==","url":"https://github.com/coala/coala/pull/5666#discussion_r205467884","bodyText":"Both will work fine IMO.","diffHunk":"@@ -0,0 +1,74 @@\n+Profile Bears\n+=============\n+\n+This document provide the overview of coala's Profiling Interface. The\n+Profiling Interface will provide an ability to Profile the Bear's code to\n+optimize its performance.\n+\n+The profiler will start by profiling the run() method of bears because it\n+consumes most of the bears time. So, this is part where bear writer will spend\n+time, as rest of the part like loading the files, collecting the settings,\n+etc. are done by coala itself.\n+\n+.. note::","author":{"login":"RaiVaibhav","avatarUrl":"https://avatars3.githubusercontent.com/u/22278438?v=4","name":"Vaibhav Rai"},"reactions":[],"createdAt":"2018-07-26T14:00:26Z","lastEditedAt":null,"updatedAt":"2018-07-26T14:00:26Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjA3NjU4Mw==","url":"https://github.com/coala/coala/pull/5666#discussion_r206076583","bodyText":"an abilities","diffHunk":"@@ -0,0 +1,75 @@\n+Profile Bears\n+=============\n+\n+This document provides an overview of coala's Profiling Interface. The\n+Profiling Interface provides an abilities to profile Bear code to optimize its","author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"reactions":[],"createdAt":"2018-07-30T09:59:16Z","lastEditedAt":null,"updatedAt":"2018-07-30T09:59:16Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjA3Njg4Mg==","url":"https://github.com/coala/coala/pull/5666#discussion_r206076882","bodyText":"I guess it won't work if you enablelel the profiler, but it will if you are Enabling it ;P","diffHunk":"@@ -0,0 +1,75 @@\n+Profile Bears\n+=============\n+\n+This document provides an overview of coala's Profiling Interface. The\n+Profiling Interface provides an abilities to profile Bear code to optimize its\n+performance.\n+\n+The profiler will start by profiling the run() method of bears because this is\n+the part where bear writers will spend time on, as rest of the part like loading\n+the files, collecting the settings, etc. are done by coala itself.\n+\n+.. note::\n+\n+    Enabliling both profiler and debugger on a bear at a same time will result","author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"reactions":[],"createdAt":"2018-07-30T10:00:21Z","lastEditedAt":null,"updatedAt":"2018-07-30T10:00:21Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjA3Njk0OQ==","url":"https://github.com/coala/coala/pull/5666#discussion_r206076949","bodyText":"at a the same time","diffHunk":"@@ -0,0 +1,75 @@\n+Profile Bears\n+=============\n+\n+This document provides an overview of coala's Profiling Interface. The\n+Profiling Interface provides an abilities to profile Bear code to optimize its\n+performance.\n+\n+The profiler will start by profiling the run() method of bears because this is\n+the part where bear writers will spend time on, as rest of the part like loading\n+the files, collecting the settings, etc. are done by coala itself.\n+\n+.. note::\n+\n+    Enabliling both profiler and debugger on a bear at a same time will result","author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"reactions":[],"createdAt":"2018-07-30T10:00:34Z","lastEditedAt":null,"updatedAt":"2018-07-30T10:00:34Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjA5NTU3MQ==","url":"https://github.com/coala/coala/pull/5666#discussion_r206095571","bodyText":"into an error.","diffHunk":"@@ -0,0 +1,75 @@\n+Profile Bears\n+=============\n+\n+This document provides an overview of coala's Profiling Interface. The\n+Profiling Interface provides an abilities to profile Bear code to optimize its\n+performance.\n+\n+The profiler will start by profiling the run() method of bears because this is\n+the part where bear writers will spend time on, as rest of the part like loading\n+the files, collecting the settings, etc. are done by coala itself.\n+\n+.. note::\n+\n+    Enabliling both profiler and debugger on a bear at a same time will result\n+    into error.","author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"reactions":[],"createdAt":"2018-07-30T11:13:52Z","lastEditedAt":null,"updatedAt":"2018-07-30T11:13:52Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjA5NTY3NA==","url":"https://github.com/coala/coala/pull/5666#discussion_r206095674","bodyText":"(binary output)\n\nIs that relevant?","diffHunk":"@@ -0,0 +1,75 @@\n+Profile Bears\n+=============\n+\n+This document provides an overview of coala's Profiling Interface. The\n+Profiling Interface provides an abilities to profile Bear code to optimize its\n+performance.\n+\n+The profiler will start by profiling the run() method of bears because this is\n+the part where bear writers will spend time on, as rest of the part like loading\n+the files, collecting the settings, etc. are done by coala itself.\n+\n+.. note::\n+\n+    Enabliling both profiler and debugger on a bear at a same time will result\n+    into error.\n+\n+Bear writers will have the ability to directly dump the raw profile output\n+(binary output) either on current working directory or to a specified directory","author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"reactions":[],"createdAt":"2018-07-30T11:14:20Z","lastEditedAt":null,"updatedAt":"2018-07-30T11:14:20Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjA5NTgzNA==","url":"https://github.com/coala/coala/pull/5666#discussion_r206095834","bodyText":"Typo ;)","diffHunk":"@@ -0,0 +1,75 @@\n+Profile Bears\n+=============\n+\n+This document provides an overview of coala's Profiling Interface. The\n+Profiling Interface provides an abilities to profile Bear code to optimize its\n+performance.\n+\n+The profiler will start by profiling the run() method of bears because this is\n+the part where bear writers will spend time on, as rest of the part like loading\n+the files, collecting the settings, etc. are done by coala itself.\n+\n+.. note::\n+\n+    Enabliling both profiler and debugger on a bear at a same time will result\n+    into error.\n+\n+Bear writers will have the ability to directly dump the raw profile output\n+(binary output) either on current working directory or to a specified directory\n+name, which can be further used for examination of profiler stats with the help\n+of different modules like ``pstats`` or ``snakeviz``.\n+\n+``--profile`` or ``profile`` (using coafile) is the main argument to enable\n+profiling. It accepts an additional parameter directory name or directory path\n+where profiled files will be dumped, if ``True`` is provided profiled files will\n+be saved to current working directory. If specified directory does not exists it\n+will create one and if path specified is already a file path then it will throw\n+``FileExitsError``.","author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"reactions":[],"createdAt":"2018-07-30T11:15:15Z","lastEditedAt":null,"updatedAt":"2018-07-30T11:15:15Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjA5NjMxNA==","url":"https://github.com/coala/coala/pull/5666#discussion_r206096314","bodyText":"I guess all this belongs into the Usage section. It should be maybe stripped as well since you describe already how to enable the profiler below. But the FileExistsError is important, that could go directly below the Usage paragraph, describing how paths are treated.","diffHunk":"@@ -0,0 +1,75 @@\n+Profile Bears\n+=============\n+\n+This document provides an overview of coala's Profiling Interface. The\n+Profiling Interface provides an abilities to profile Bear code to optimize its\n+performance.\n+\n+The profiler will start by profiling the run() method of bears because this is\n+the part where bear writers will spend time on, as rest of the part like loading\n+the files, collecting the settings, etc. are done by coala itself.\n+\n+.. note::\n+\n+    Enabliling both profiler and debugger on a bear at a same time will result\n+    into error.\n+\n+Bear writers will have the ability to directly dump the raw profile output\n+(binary output) either on current working directory or to a specified directory\n+name, which can be further used for examination of profiler stats with the help\n+of different modules like ``pstats`` or ``snakeviz``.\n+\n+``--profile`` or ``profile`` (using coafile) is the main argument to enable\n+profiling. It accepts an additional parameter directory name or directory path\n+where profiled files will be dumped, if ``True`` is provided profiled files will\n+be saved to current working directory. If specified directory does not exists it\n+will create one and if path specified is already a file path then it will throw\n+``FileExitsError``.","author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"reactions":[],"createdAt":"2018-07-30T11:17:19Z","lastEditedAt":null,"updatedAt":"2018-07-30T11:17:19Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjA5NjQ4Nw==","url":"https://github.com/coala/coala/pull/5666#discussion_r206096487","bodyText":"should be enclosed in backticks ;)\n``{section.name}...prof``","diffHunk":"@@ -0,0 +1,75 @@\n+Profile Bears\n+=============\n+\n+This document provides an overview of coala's Profiling Interface. The\n+Profiling Interface provides an abilities to profile Bear code to optimize its\n+performance.\n+\n+The profiler will start by profiling the run() method of bears because this is\n+the part where bear writers will spend time on, as rest of the part like loading\n+the files, collecting the settings, etc. are done by coala itself.\n+\n+.. note::\n+\n+    Enabliling both profiler and debugger on a bear at a same time will result\n+    into error.\n+\n+Bear writers will have the ability to directly dump the raw profile output\n+(binary output) either on current working directory or to a specified directory\n+name, which can be further used for examination of profiler stats with the help\n+of different modules like ``pstats`` or ``snakeviz``.\n+\n+``--profile`` or ``profile`` (using coafile) is the main argument to enable\n+profiling. It accepts an additional parameter directory name or directory path\n+where profiled files will be dumped, if ``True`` is provided profiled files will\n+be saved to current working directory. If specified directory does not exists it\n+will create one and if path specified is already a file path then it will throw\n+``FileExitsError``.\n+\n+.. note::\n+\n+    All bears (even implicit dependency bears) in a section will be profiled.\n+    Profiled files will have a name format {section.name}_{bear.name}.prof.","author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"reactions":[],"createdAt":"2018-07-30T11:18:00Z","lastEditedAt":null,"updatedAt":"2018-07-30T11:18:00Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjEwMzYzNQ==","url":"https://github.com/coala/coala/pull/5666#discussion_r206103635","bodyText":"i.e. ?\nThose sentences do not connect very well :)","diffHunk":"@@ -0,0 +1,75 @@\n+Profile Bears\n+=============\n+\n+This document provides an overview of coala's Profiling Interface. The\n+Profiling Interface provides an abilities to profile Bear code to optimize its\n+performance.\n+\n+The profiler will start by profiling the run() method of bears because this is\n+the part where bear writers will spend time on, as rest of the part like loading\n+the files, collecting the settings, etc. are done by coala itself.\n+\n+.. note::\n+\n+    Enabliling both profiler and debugger on a bear at a same time will result\n+    into error.\n+\n+Bear writers will have the ability to directly dump the raw profile output\n+(binary output) either on current working directory or to a specified directory\n+name, which can be further used for examination of profiler stats with the help\n+of different modules like ``pstats`` or ``snakeviz``.\n+\n+``--profile`` or ``profile`` (using coafile) is the main argument to enable\n+profiling. It accepts an additional parameter directory name or directory path\n+where profiled files will be dumped, if ``True`` is provided profiled files will\n+be saved to current working directory. If specified directory does not exists it\n+will create one and if path specified is already a file path then it will throw\n+``FileExitsError``.\n+\n+.. note::\n+\n+    All bears (even implicit dependency bears) in a section will be profiled.\n+    Profiled files will have a name format {section.name}_{bear.name}.prof.\n+\n+Usage\n+-----\n+\n+Command Line Interface\n+^^^^^^^^^^^^^^^^^^^^^^\n+\n+Bear writers can invoke the profiler with the ``--profile`` argument, i.e.\n+\n+To dump profiled files in current working directory.","author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"reactions":[],"createdAt":"2018-07-30T11:48:59Z","lastEditedAt":null,"updatedAt":"2018-07-30T11:48:59Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjEwMzc5Nw==","url":"https://github.com/coala/coala/pull/5666#discussion_r206103797","bodyText":"to dumped profiled files to a specified directory: (<-- note the colon)","diffHunk":"@@ -0,0 +1,75 @@\n+Profile Bears\n+=============\n+\n+This document provides an overview of coala's Profiling Interface. The\n+Profiling Interface provides an abilities to profile Bear code to optimize its\n+performance.\n+\n+The profiler will start by profiling the run() method of bears because this is\n+the part where bear writers will spend time on, as rest of the part like loading\n+the files, collecting the settings, etc. are done by coala itself.\n+\n+.. note::\n+\n+    Enabliling both profiler and debugger on a bear at a same time will result\n+    into error.\n+\n+Bear writers will have the ability to directly dump the raw profile output\n+(binary output) either on current working directory or to a specified directory\n+name, which can be further used for examination of profiler stats with the help\n+of different modules like ``pstats`` or ``snakeviz``.\n+\n+``--profile`` or ``profile`` (using coafile) is the main argument to enable\n+profiling. It accepts an additional parameter directory name or directory path\n+where profiled files will be dumped, if ``True`` is provided profiled files will\n+be saved to current working directory. If specified directory does not exists it\n+will create one and if path specified is already a file path then it will throw\n+``FileExitsError``.\n+\n+.. note::\n+\n+    All bears (even implicit dependency bears) in a section will be profiled.\n+    Profiled files will have a name format {section.name}_{bear.name}.prof.\n+\n+Usage\n+-----\n+\n+Command Line Interface\n+^^^^^^^^^^^^^^^^^^^^^^\n+\n+Bear writers can invoke the profiler with the ``--profile`` argument, i.e.\n+\n+To dump profiled files in current working directory.\n+\n+.. code:: shell\n+\n+    $coala -b PEP8Bear,PyUnusedCodeBear -f <filename> --profile\n+\n+Or to dumped profiled files to a specified directory.","author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"reactions":[],"createdAt":"2018-07-30T11:49:37Z","lastEditedAt":null,"updatedAt":"2018-07-30T11:49:37Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjEwMzk0Nw==","url":"https://github.com/coala/coala/pull/5666#discussion_r206103947","bodyText":"choose one, dirname or dirpath, as well as write it completely lower-case to match the same style as <filename>","diffHunk":"@@ -0,0 +1,75 @@\n+Profile Bears\n+=============\n+\n+This document provides an overview of coala's Profiling Interface. The\n+Profiling Interface provides an abilities to profile Bear code to optimize its\n+performance.\n+\n+The profiler will start by profiling the run() method of bears because this is\n+the part where bear writers will spend time on, as rest of the part like loading\n+the files, collecting the settings, etc. are done by coala itself.\n+\n+.. note::\n+\n+    Enabliling both profiler and debugger on a bear at a same time will result\n+    into error.\n+\n+Bear writers will have the ability to directly dump the raw profile output\n+(binary output) either on current working directory or to a specified directory\n+name, which can be further used for examination of profiler stats with the help\n+of different modules like ``pstats`` or ``snakeviz``.\n+\n+``--profile`` or ``profile`` (using coafile) is the main argument to enable\n+profiling. It accepts an additional parameter directory name or directory path\n+where profiled files will be dumped, if ``True`` is provided profiled files will\n+be saved to current working directory. If specified directory does not exists it\n+will create one and if path specified is already a file path then it will throw\n+``FileExitsError``.\n+\n+.. note::\n+\n+    All bears (even implicit dependency bears) in a section will be profiled.\n+    Profiled files will have a name format {section.name}_{bear.name}.prof.\n+\n+Usage\n+-----\n+\n+Command Line Interface\n+^^^^^^^^^^^^^^^^^^^^^^\n+\n+Bear writers can invoke the profiler with the ``--profile`` argument, i.e.\n+\n+To dump profiled files in current working directory.\n+\n+.. code:: shell\n+\n+    $coala -b PEP8Bear,PyUnusedCodeBear -f <filename> --profile\n+\n+Or to dumped profiled files to a specified directory.\n+\n+.. code:: shell\n+\n+    $coala -b PEP8Bear,MypyBear -f <filename> --profile <Dirname/Dirpath>","author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"reactions":[],"createdAt":"2018-07-30T11:50:10Z","lastEditedAt":null,"updatedAt":"2018-07-30T11:50:10Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjEwNDA3Nw==","url":"https://github.com/coala/coala/pull/5666#discussion_r206104077","bodyText":"I would add \"as well\":\n\nUsers can specify to profile bears using a .coafile as well:","diffHunk":"@@ -0,0 +1,75 @@\n+Profile Bears\n+=============\n+\n+This document provides an overview of coala's Profiling Interface. The\n+Profiling Interface provides an abilities to profile Bear code to optimize its\n+performance.\n+\n+The profiler will start by profiling the run() method of bears because this is\n+the part where bear writers will spend time on, as rest of the part like loading\n+the files, collecting the settings, etc. are done by coala itself.\n+\n+.. note::\n+\n+    Enabliling both profiler and debugger on a bear at a same time will result\n+    into error.\n+\n+Bear writers will have the ability to directly dump the raw profile output\n+(binary output) either on current working directory or to a specified directory\n+name, which can be further used for examination of profiler stats with the help\n+of different modules like ``pstats`` or ``snakeviz``.\n+\n+``--profile`` or ``profile`` (using coafile) is the main argument to enable\n+profiling. It accepts an additional parameter directory name or directory path\n+where profiled files will be dumped, if ``True`` is provided profiled files will\n+be saved to current working directory. If specified directory does not exists it\n+will create one and if path specified is already a file path then it will throw\n+``FileExitsError``.\n+\n+.. note::\n+\n+    All bears (even implicit dependency bears) in a section will be profiled.\n+    Profiled files will have a name format {section.name}_{bear.name}.prof.\n+\n+Usage\n+-----\n+\n+Command Line Interface\n+^^^^^^^^^^^^^^^^^^^^^^\n+\n+Bear writers can invoke the profiler with the ``--profile`` argument, i.e.\n+\n+To dump profiled files in current working directory.\n+\n+.. code:: shell\n+\n+    $coala -b PEP8Bear,PyUnusedCodeBear -f <filename> --profile\n+\n+Or to dumped profiled files to a specified directory.\n+\n+.. code:: shell\n+\n+    $coala -b PEP8Bear,MypyBear -f <filename> --profile <Dirname/Dirpath>\n+\n+coafile\n+^^^^^^^\n+\n+Users can specify to profile bears using a ``.coafile``:","author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"reactions":[],"createdAt":"2018-07-30T11:50:42Z","lastEditedAt":null,"updatedAt":"2018-07-30T11:50:42Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjEwNDEyNA==","url":"https://github.com/coala/coala/pull/5666#discussion_r206104124","bodyText":"Same here, sentences do not connect","diffHunk":"@@ -0,0 +1,75 @@\n+Profile Bears\n+=============\n+\n+This document provides an overview of coala's Profiling Interface. The\n+Profiling Interface provides an abilities to profile Bear code to optimize its\n+performance.\n+\n+The profiler will start by profiling the run() method of bears because this is\n+the part where bear writers will spend time on, as rest of the part like loading\n+the files, collecting the settings, etc. are done by coala itself.\n+\n+.. note::\n+\n+    Enabliling both profiler and debugger on a bear at a same time will result\n+    into error.\n+\n+Bear writers will have the ability to directly dump the raw profile output\n+(binary output) either on current working directory or to a specified directory\n+name, which can be further used for examination of profiler stats with the help\n+of different modules like ``pstats`` or ``snakeviz``.\n+\n+``--profile`` or ``profile`` (using coafile) is the main argument to enable\n+profiling. It accepts an additional parameter directory name or directory path\n+where profiled files will be dumped, if ``True`` is provided profiled files will\n+be saved to current working directory. If specified directory does not exists it\n+will create one and if path specified is already a file path then it will throw\n+``FileExitsError``.\n+\n+.. note::\n+\n+    All bears (even implicit dependency bears) in a section will be profiled.\n+    Profiled files will have a name format {section.name}_{bear.name}.prof.\n+\n+Usage\n+-----\n+\n+Command Line Interface\n+^^^^^^^^^^^^^^^^^^^^^^\n+\n+Bear writers can invoke the profiler with the ``--profile`` argument, i.e.\n+\n+To dump profiled files in current working directory.\n+\n+.. code:: shell\n+\n+    $coala -b PEP8Bear,PyUnusedCodeBear -f <filename> --profile\n+\n+Or to dumped profiled files to a specified directory.\n+\n+.. code:: shell\n+\n+    $coala -b PEP8Bear,MypyBear -f <filename> --profile <Dirname/Dirpath>\n+\n+coafile\n+^^^^^^^\n+\n+Users can specify to profile bears using a ``.coafile``:\n+\n+To dump profiled files in current working directory.","author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"reactions":[],"createdAt":"2018-07-30T11:50:52Z","lastEditedAt":null,"updatedAt":"2018-07-30T11:50:52Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjEwNDE5NQ==","url":"https://github.com/coala/coala/pull/5666#discussion_r206104195","bodyText":"dumped profiled ...: (<-- note the colon again)","diffHunk":"@@ -0,0 +1,75 @@\n+Profile Bears\n+=============\n+\n+This document provides an overview of coala's Profiling Interface. The\n+Profiling Interface provides an abilities to profile Bear code to optimize its\n+performance.\n+\n+The profiler will start by profiling the run() method of bears because this is\n+the part where bear writers will spend time on, as rest of the part like loading\n+the files, collecting the settings, etc. are done by coala itself.\n+\n+.. note::\n+\n+    Enabliling both profiler and debugger on a bear at a same time will result\n+    into error.\n+\n+Bear writers will have the ability to directly dump the raw profile output\n+(binary output) either on current working directory or to a specified directory\n+name, which can be further used for examination of profiler stats with the help\n+of different modules like ``pstats`` or ``snakeviz``.\n+\n+``--profile`` or ``profile`` (using coafile) is the main argument to enable\n+profiling. It accepts an additional parameter directory name or directory path\n+where profiled files will be dumped, if ``True`` is provided profiled files will\n+be saved to current working directory. If specified directory does not exists it\n+will create one and if path specified is already a file path then it will throw\n+``FileExitsError``.\n+\n+.. note::\n+\n+    All bears (even implicit dependency bears) in a section will be profiled.\n+    Profiled files will have a name format {section.name}_{bear.name}.prof.\n+\n+Usage\n+-----\n+\n+Command Line Interface\n+^^^^^^^^^^^^^^^^^^^^^^\n+\n+Bear writers can invoke the profiler with the ``--profile`` argument, i.e.\n+\n+To dump profiled files in current working directory.\n+\n+.. code:: shell\n+\n+    $coala -b PEP8Bear,PyUnusedCodeBear -f <filename> --profile\n+\n+Or to dumped profiled files to a specified directory.\n+\n+.. code:: shell\n+\n+    $coala -b PEP8Bear,MypyBear -f <filename> --profile <Dirname/Dirpath>\n+\n+coafile\n+^^^^^^^\n+\n+Users can specify to profile bears using a ``.coafile``:\n+\n+To dump profiled files in current working directory.\n+\n+::\n+\n+    [all]\n+    bears = PEP8Bear,MypyBear\n+    files = <filename>\n+    profile = True\n+\n+Or to dumped profiled files to a specified directory.","author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"reactions":[],"createdAt":"2018-07-30T11:51:11Z","lastEditedAt":null,"updatedAt":"2018-07-30T11:51:11Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjMxMTQxNw==","url":"https://github.com/coala/coala/pull/5666#discussion_r206311417","bodyText":"If the specified directory does not exists it will be created create one. If the specified path points to an already existing file a FileExistsError is thrown.","diffHunk":"@@ -0,0 +1,74 @@\n+Profile Bears\n+=============\n+\n+This document provides an overview of coala's Profiling Interface. The\n+Profiling Interface provides abilities to profile Bear code to optimize its\n+performance.\n+\n+The profiler will start by profiling the run() method of bears because this is\n+the part where bear writers will spend time on, as rest of the part like loading\n+the files, collecting the settings, etc. are done by coala itself.\n+\n+.. note::\n+\n+    Enabling both profiler and debugger on a bear at the same time will result\n+    in error.\n+\n+Bear writers will have the ability to directly dump the raw profile output\n+either on current working directory or to a specified directory name, which can\n+be further used for examination of profiler stats with the help of different\n+modules like ``pstats`` or ``snakeviz``.\n+\n+Usage\n+-----\n+\n+coala's Profiler accepts an additional parameter, directory name or directory\n+path where profiled files will be dumped, if ``True`` is provided profiled\n+files will be saved to current working directory. If specified directory does\n+not exists it will create one and if path specified is already a file path then","author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"reactions":[],"createdAt":"2018-07-30T20:32:35Z","lastEditedAt":null,"updatedAt":"2018-07-30T20:32:35Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjMxMTU4MA==","url":"https://github.com/coala/coala/pull/5666#discussion_r206311580","bodyText":"dirname or dirpath, choose wisely :P","diffHunk":"@@ -0,0 +1,74 @@\n+Profile Bears\n+=============\n+\n+This document provides an overview of coala's Profiling Interface. The\n+Profiling Interface provides abilities to profile Bear code to optimize its\n+performance.\n+\n+The profiler will start by profiling the run() method of bears because this is\n+the part where bear writers will spend time on, as rest of the part like loading\n+the files, collecting the settings, etc. are done by coala itself.\n+\n+.. note::\n+\n+    Enabling both profiler and debugger on a bear at the same time will result\n+    in error.\n+\n+Bear writers will have the ability to directly dump the raw profile output\n+either on current working directory or to a specified directory name, which can\n+be further used for examination of profiler stats with the help of different\n+modules like ``pstats`` or ``snakeviz``.\n+\n+Usage\n+-----\n+\n+coala's Profiler accepts an additional parameter, directory name or directory\n+path where profiled files will be dumped, if ``True`` is provided profiled\n+files will be saved to current working directory. If specified directory does\n+not exists it will create one and if path specified is already a file path then\n+it will throw ``FileExistsError``.\n+\n+.. note::\n+\n+    All bears (even implicit dependency bears) in a section will be profiled.\n+    Profiled files will have a name format ``{section.name}_{bear.name}.prof``.\n+\n+Command Line Interface\n+^^^^^^^^^^^^^^^^^^^^^^\n+\n+Bear writers can invoke the profiler with the ``--profile`` argument.\n+\n+- To dump profile files in current working directory:\n+\n+  .. code:: shell\n+\n+      $coala -b PEP8Bear,PyUnusedCodeBear -f <filename> --profile\n+\n+- To dump profile files to a specified directory:\n+\n+  .. code:: shell\n+\n+      $coala -b PEP8Bear,MypyBear -f <filename> --profile <dirpath>\n+\n+coafile\n+^^^^^^^\n+\n+Users can specify to profile bears using a ``.coafile`` as well.\n+\n+- To dump profile files in current working directory:\n+\n+  ::\n+\n+      [all]\n+      bears = PEP8Bear,MypyBear\n+      files = <filename>\n+      profile = True\n+\n+- To dump profile files to a specified directory:\n+\n+  ::\n+\n+      [all]\n+      bears = PEP8Bear,MypyBear\n+      files = <filename>\n+      profile = DirName/Dirpath","author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNzQ0ODUyNA==","createdAt":"2018-08-04T08:05:39Z","content":"THUMBS_UP","user":{"login":"jayvdb","name":"John Vandenberg"}}],"createdAt":"2018-07-30T20:33:07Z","lastEditedAt":null,"updatedAt":"2018-07-30T20:33:07Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjY1NTgwOQ==","url":"https://github.com/coala/coala/pull/5666#discussion_r206655809","bodyText":"When reading this sounds a bit confusing, it reads like it takes either \"an additional parameter\", or either a \"directory name\" or a \"directory path\". Would recommend following:\n\n... accepts an additional parameter: a directory path where profiled files will be ...","diffHunk":"@@ -0,0 +1,74 @@\n+Profile Bears\n+=============\n+\n+This document provides an overview of coala's Profiling Interface. The\n+Profiling Interface provides abilities to profile Bear code to optimize its\n+performance.\n+\n+The profiler will start by profiling the run() method of bears because this is\n+the part where bear writers will spend time on, as rest of the part like loading\n+the files, collecting the settings, etc. are done by coala itself.\n+\n+.. note::\n+\n+    Enabling both profiler and debugger on a bear at the same time will result\n+    in error.\n+\n+Bear writers will have the ability to directly dump the raw profile output\n+either on current working directory or to a specified directory name, which can\n+be further used for examination of profiler stats with the help of different\n+modules like ``pstats`` or ``snakeviz``.\n+\n+Usage\n+-----\n+\n+coala's Profiler accepts an additional parameter, directory name or directory\n+path where profiled files will be dumped, if ``True`` is provided profiled","author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNzI1OTI0Mw==","createdAt":"2018-07-31T21:56:51Z","content":"THUMBS_UP","user":{"login":"RaiVaibhav","name":"Vaibhav Rai"}}],"createdAt":"2018-07-31T19:32:40Z","lastEditedAt":null,"updatedAt":"2018-07-31T19:32:40Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjY1NTk5OQ==","url":"https://github.com/coala/coala/pull/5666#discussion_r206655999","bodyText":"question is what that means to the regular user, but let's put that aside for now, I'm not sure how coala should handle such \"user-exceptions\" properly (which are intended to generate an error-log and exit).","diffHunk":"@@ -0,0 +1,74 @@\n+Profile Bears\n+=============\n+\n+This document provides an overview of coala's Profiling Interface. The\n+Profiling Interface provides abilities to profile Bear code to optimize its\n+performance.\n+\n+The profiler will start by profiling the run() method of bears because this is\n+the part where bear writers will spend time on, as rest of the part like loading\n+the files, collecting the settings, etc. are done by coala itself.\n+\n+.. note::\n+\n+    Enabling both profiler and debugger on a bear at the same time will result\n+    in error.\n+\n+Bear writers will have the ability to directly dump the raw profile output\n+either on current working directory or to a specified directory name, which can\n+be further used for examination of profiler stats with the help of different\n+modules like ``pstats`` or ``snakeviz``.\n+\n+Usage\n+-----\n+\n+coala's Profiler accepts an additional parameter, directory name or directory\n+path where profiled files will be dumped, if ``True`` is provided profiled\n+files will be saved to current working directory. If the specified directory\n+does not exist it will be created. If the specified path points to an already\n+existing file a ``FileExistsError`` is thrown.","author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNzI1OTIzNw==","createdAt":"2018-07-31T21:56:46Z","content":"THUMBS_UP","user":{"login":"RaiVaibhav","name":"Vaibhav Rai"}}],"createdAt":"2018-07-31T19:33:20Z","lastEditedAt":null,"updatedAt":"2018-07-31T19:33:20Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzc5ODU3OA==","url":"https://github.com/coala/coala/pull/5666#discussion_r207798578","bodyText":": on line above is incompatible with the , here.\nIf you use a colon, you are allowed one phrase after that.  No more.\nThen start a new sentence.","diffHunk":"@@ -0,0 +1,76 @@\n+Profile Bears\n+=============\n+\n+This document provides an overview of coala's Profiling Interface. The\n+Profiling Interface provides abilities to profile Bear code to optimize its\n+performance.\n+\n+The profiler will start by profiling the run() method of bears because this is\n+the part where bear writers will spend time on, as rest of the part like loading\n+the files, collecting the settings, etc. are done by coala itself.\n+\n+.. note::\n+\n+    Enabling both profiler and debugger on a bear at the same time will result\n+    in error.\n+\n+Bear writers will have the ability to directly dump the raw profile output\n+either on current working directory or to a specified directory name, which can\n+be further used for examination of profiler stats with the help of different\n+modules like ``pstats`` or ``snakeviz``.\n+\n+Usage\n+-----\n+\n+coala's Profiler accepts an additional parameter: a directory path where\n+profiled files will be dumped, if ``True`` is provided profiled files will be","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-08-06T07:41:51Z","lastEditedAt":null,"updatedAt":"2018-08-06T07:41:51Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzc5ODc5MA==","url":"https://github.com/coala/coala/pull/5666#discussion_r207798790","bodyText":"Profiled files will get overwritten, if specified directory\n\nI thought this was will cause an error?\nIf I am correct, you obviously have not re-checked this document and it shouldnt be up for review.","diffHunk":"@@ -0,0 +1,76 @@\n+Profile Bears\n+=============\n+\n+This document provides an overview of coala's Profiling Interface. The\n+Profiling Interface provides abilities to profile Bear code to optimize its\n+performance.\n+\n+The profiler will start by profiling the run() method of bears because this is\n+the part where bear writers will spend time on, as rest of the part like loading\n+the files, collecting the settings, etc. are done by coala itself.\n+\n+.. note::\n+\n+    Enabling both profiler and debugger on a bear at the same time will result\n+    in error.\n+\n+Bear writers will have the ability to directly dump the raw profile output\n+either on current working directory or to a specified directory name, which can\n+be further used for examination of profiler stats with the help of different\n+modules like ``pstats`` or ``snakeviz``.\n+\n+Usage\n+-----\n+\n+coala's Profiler accepts an additional parameter: a directory path where\n+profiled files will be dumped, if ``True`` is provided profiled files will be\n+saved to current working directory. If the specified directory does not exist\n+it will be created. If the specified path points to an already existing file\n+a error is raised. Profiled files will get overwritten, if specified directory","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-08-06T07:42:48Z","lastEditedAt":null,"updatedAt":"2018-08-06T07:42:48Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzgwMDA0NQ==","url":"https://github.com/coala/coala/pull/5666#discussion_r207800045","bodyText":"FileExistsError will be thrown and it raise SystemExit when user provide a filepath in --profile but if user provide a directory path and that directory already have profiled files then in the next run of coala file with the same name gets overwritten","diffHunk":"@@ -0,0 +1,76 @@\n+Profile Bears\n+=============\n+\n+This document provides an overview of coala's Profiling Interface. The\n+Profiling Interface provides abilities to profile Bear code to optimize its\n+performance.\n+\n+The profiler will start by profiling the run() method of bears because this is\n+the part where bear writers will spend time on, as rest of the part like loading\n+the files, collecting the settings, etc. are done by coala itself.\n+\n+.. note::\n+\n+    Enabling both profiler and debugger on a bear at the same time will result\n+    in error.\n+\n+Bear writers will have the ability to directly dump the raw profile output\n+either on current working directory or to a specified directory name, which can\n+be further used for examination of profiler stats with the help of different\n+modules like ``pstats`` or ``snakeviz``.\n+\n+Usage\n+-----\n+\n+coala's Profiler accepts an additional parameter: a directory path where\n+profiled files will be dumped, if ``True`` is provided profiled files will be\n+saved to current working directory. If the specified directory does not exist\n+it will be created. If the specified path points to an already existing file\n+a error is raised. Profiled files will get overwritten, if specified directory","author":{"login":"RaiVaibhav","avatarUrl":"https://avatars3.githubusercontent.com/u/22278438?v=4","name":"Vaibhav Rai"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNzQ4NDc1MA==","createdAt":"2018-08-06T07:54:41Z","content":"THUMBS_UP","user":{"login":"jayvdb","name":"John Vandenberg"}}],"createdAt":"2018-08-06T07:48:07Z","lastEditedAt":"2018-08-06T07:48:40Z","updatedAt":"2018-08-06T07:48:40Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzgwNTM1MQ==","url":"https://github.com/coala/coala/pull/5666#discussion_r207805351","bodyText":"ill avoid the next grammar lesson.\nAfter dumped add a full stop.  Add two carraige returns.\nShort simple intros are what people will read.  If the short intro is stuffed into a large paragraph, they will try to avoid it.\nThen explain the profile arg options in a new paragraph.  And this usage section should not mention \"True\" , the title case Python constant, as there are multiple ways to enable profiling, and many do not require the Python keyword True.  Dumb it down.  Use prose.","diffHunk":"@@ -0,0 +1,76 @@\n+Profile Bears\n+=============\n+\n+This document provides an overview of coala's Profiling Interface. The\n+Profiling Interface provides abilities to profile Bear code to optimize its\n+performance.\n+\n+The profiler will start by profiling the run() method of bears because this is\n+the part where bear writers will spend time on, as rest of the part like loading\n+the files, collecting the settings, etc. are done by coala itself.\n+\n+.. note::\n+\n+    Enabling both profiler and debugger on a bear at the same time will result\n+    in error.\n+\n+Bear writers will have the ability to directly dump the raw profile output\n+either on current working directory or to a specified directory name, which can\n+be further used for examination of profiler stats with the help of different\n+modules like ``pstats`` or ``snakeviz``.\n+\n+Usage\n+-----\n+\n+coala's Profiler accepts an additional parameter, a directory path where\n+profiled files will be dumped, if ``True`` is provided profiled files will be","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-08-06T08:08:57Z","lastEditedAt":null,"updatedAt":"2018-08-06T08:08:57Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQxMDYxNjY3NQ==","url":"https://github.com/coala/coala/pull/5666#issuecomment-410616675","bodyText":"As #565 is still open, I guess this could be Closes ... ?","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNzQ4NTE0Ng==","createdAt":"2018-08-06T08:03:06Z","content":"THUMBS_UP","user":{"login":"RaiVaibhav","name":"Vaibhav Rai"}}],"createdAt":"2018-08-06T07:40:01Z","lastEditedAt":null,"updatedAt":"2018-08-06T07:40:01Z"}]}}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1532832519000,"issue":{"htmlUrl":"https://github.com/coala/coala/pull/5669","number":5669,"title":"setup.cfg: Use template","body":"Also use template for tests/conftest.py\n\nFor short term contributors: we understand that getting your commits well\ndefined like we require is a hard task and takes some learning. If you\nlook to help without wanting to contribute long term there's no need\nfor you to learn this. Just drop us a message and we'll take care of brushing\nup your stuff for merge!\nChecklist\n\n I read the commit guidelines and I've followed\nthem.\n I ran coala over my code locally. (All commits have to pass\nindividually. It is not sufficient to have \"fixup commits\" on your PR,\nour bot will still report the issues for the previous commit.) You will\nlikely receive a lot of bot comments and build failures if coala does not\npass on every single commit!\n\nAfter you submit your pull request, DO NOT click the 'Update Branch' button.\nWhen asked for a rebase, consult coala.io/rebase\ninstead.\nPlease consider helping us by reviewing other peoples pull requests as well:\n\npick up any PR at https://coala.io/review\nreview it (check https://coala.io/reviewing for more info)\nif you are sure that it needs work, use corobo mark wip <URL> to get it out\nof the review queue.\n\nThe more you review, the more your score will grow at coala.io and we will\nreview your PRs faster!","comments":4,"createdAt":"2018-07-26T20:04:11Z","updatedAt":"2018-07-29T02:48:39Z","closedAt":"2018-07-29T02:48:39Z","state":"merged","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"size/S","color":"B1CF0A"}],"pullRequest":{"htmlUrl":"https://github.com/coala/coala/pull/5669","comments":[{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk0MDg1MQ==","url":"https://github.com/coala/coala/pull/5669#discussion_r205940851","bodyText":"Should we have this indicated in the logger that this test isn't being run and the dev would need to install pytest-reqs plugin ?","diffHunk":"@@ -1,5 +1,10 @@\n-from pytest_reqs import check_requirements\n+# Allow import to fail to avoid annoying developers\n+try:\n+    from pytest_reqs import check_requirements\n+except ImportError:","author":{"login":"virresh","avatarUrl":"https://avatars0.githubusercontent.com/u/10978108?v=4","name":"Viresh Gupta"},"reactions":[],"createdAt":"2018-07-28T11:10:42Z","lastEditedAt":null,"updatedAt":"2018-07-28T11:10:42Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk0NDM5NA==","url":"https://github.com/coala/coala/pull/5669#discussion_r205944394","bodyText":"Sounds like a good idea,.\nhttps://gitlab.com/coala/mobans/issues/74","diffHunk":"@@ -1,5 +1,10 @@\n-from pytest_reqs import check_requirements\n+# Allow import to fail to avoid annoying developers\n+try:\n+    from pytest_reqs import check_requirements\n+except ImportError:","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNzExNzkxMQ==","createdAt":"2018-07-28T14:31:32Z","content":"THUMBS_UP","user":{"login":"virresh","name":"Viresh Gupta"}}],"createdAt":"2018-07-28T14:08:11Z","lastEditedAt":null,"updatedAt":"2018-07-28T14:08:11Z"}]}}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1532652640000,"issue":{"htmlUrl":"https://github.com/coala/coala/pull/5670","number":5670,"title":"Dep5510","body":"For short term contributors: we understand that getting your commits well\ndefined like we require is a hard task and takes some learning. If you\nlook to help without wanting to contribute long term there's no need\nfor you to learn this. Just drop us a message and we'll take care of brushing\nup your stuff for merge!\nChecklist\n\n I read the commit guidelines and I've followed\nthem.\n I ran coala over my code locally. (All commits have to pass\nindividually. It is not sufficient to have \"fixup commits\" on your PR,\nour bot will still report the issues for the previous commit.) You will\nlikely receive a lot of bot comments and build failures if coala does not\npass on every single commit!\n\nAfter you submit your pull request, DO NOT click the 'Update Branch' button.\nWhen asked for a rebase, consult coala.io/rebase\ninstead.\nPlease consider helping us by reviewing other peoples pull requests as well:\n\npick up any PR at https://coala.io/review\nreview it (check https://coala.io/reviewing for more info)\nif you are sure that it needs work, use corobo mark wip <URL> to get it out\nof the review queue.\n\nThe more you review, the more your score will grow at coala.io and we will\nreview your PRs faster!","comments":6,"createdAt":"2018-07-26T21:54:38Z","updatedAt":"2018-07-27T00:50:40Z","closedAt":"2018-07-27T00:50:25Z","state":"closed","user":{"login":"JameerBabu","avatarUrl":"https://avatars2.githubusercontent.com/u/20906632?v=4"},"owner":{"login":"JameerBabu","avatarUrl":"https://avatars2.githubusercontent.com/u/20906632?v=4"},"assignee":{"login":"JameerBabu","avatarUrl":"https://avatars2.githubusercontent.com/u/20906632?v=4"},"labels":[{"name":"area/documentation","color":"bfe5bf"},{"name":"difficulty/low","color":"207de5"},{"name":"importance/low","color":"70E870"},{"name":"process/pending review","color":"bfe5bf"},{"name":"size/XS","color":"00DE0F"}],"pullRequest":{"htmlUrl":"https://github.com/coala/coala/pull/5670","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQwODI0Nzg3Mg==","url":"https://github.com/coala/coala/pull/5670#issuecomment-408247872","bodyText":"I sincerely apologize for creating another pull request. It had without my prior knowledge.","diffHunk":null,"author":{"login":"JameerBabu","avatarUrl":"https://avatars2.githubusercontent.com/u/20906632?v=4","name":"Jameer Babu"},"createdAt":"2018-07-26T21:58:39Z","lastEditedAt":null,"updatedAt":"2018-07-26T21:58:39Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwODI3ODI4NQ==","url":"https://github.com/coala/coala/pull/5670#issuecomment-408278285","bodyText":"Please test on your own machine, not in a Pull Request.","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-07-27T00:50:39Z","lastEditedAt":null,"updatedAt":"2018-07-27T00:50:39Z"}]}}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1532669629000,"issue":{"htmlUrl":"https://github.com/coala/coala/pull/5672","number":5672,"title":"coalaJSONTest: Remove unnecessary second patch","body":"Fixes #5671\n\nFor short term contributors: we understand that getting your commits well\ndefined like we require is a hard task and takes some learning. If you\nlook to help without wanting to contribute long term there's no need\nfor you to learn this. Just drop us a message and we'll take care of brushing\nup your stuff for merge!\nChecklist\n\n I read the commit guidelines and I've followed\nthem.\n I ran coala over my code locally. (All commits have to pass\nindividually. It is not sufficient to have \"fixup commits\" on your PR,\nour bot will still report the issues for the previous commit.) You will\nlikely receive a lot of bot comments and build failures if coala does not\npass on every single commit!\n\nAfter you submit your pull request, DO NOT click the 'Update Branch' button.\nWhen asked for a rebase, consult coala.io/rebase\ninstead.\nPlease consider helping us by reviewing other peoples pull requests as well:\n\npick up any PR at https://coala.io/review\nreview it (check https://coala.io/reviewing for more info)\nif you are sure that it needs work, use corobo mark wip <URL> to get it out\nof the review queue.\n\nThe more you review, the more your score will grow at coala.io and we will\nreview your PRs faster!","comments":2,"createdAt":"2018-07-27T02:50:30Z","updatedAt":"2018-07-27T05:33:49Z","closedAt":"2018-07-27T05:33:49Z","state":"merged","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"assignee":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"area/CLI","color":"006b75"},{"name":"area/tests","color":"bfd4f2"},{"name":"difficulty/low","color":"207de5"},{"name":"importance/low","color":"70E870"},{"name":"process/approved","color":"009800"},{"name":"size/XS","color":"00DE0F"}],"pullRequest":{"htmlUrl":"https://github.com/coala/coala/pull/5672","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQwODMxMzgyMA==","url":"https://github.com/coala/coala/pull/5672#issuecomment-408313820","bodyText":"Approved on #5645","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-07-27T05:15:48Z","lastEditedAt":null,"updatedAt":"2018-07-27T05:15:48Z"}]}}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1532681642000,"issue":{"htmlUrl":"https://github.com/coala/coala/pull/5673","number":5673,"title":"Constants: Move USER_DATA_DIR to CachingUtilities","body":"Fixes #5664\n\nFor short term contributors: we understand that getting your commits well\ndefined like we require is a hard task and takes some learning. If you\nlook to help without wanting to contribute long term there's no need\nfor you to learn this. Just drop us a message and we'll take care of brushing\nup your stuff for merge!\nChecklist\n\n I read the commit guidelines and I've followed\nthem.\n I ran coala over my code locally. (All commits have to pass\nindividually. It is not sufficient to have \"fixup commits\" on your PR,\nour bot will still report the issues for the previous commit.) You will\nlikely receive a lot of bot comments and build failures if coala does not\npass on every single commit!\n\nAfter you submit your pull request, DO NOT click the 'Update Branch' button.\nWhen asked for a rebase, consult coala.io/rebase\ninstead.\nPlease consider helping us by reviewing other peoples pull requests as well:\n\npick up any PR at https://coala.io/review\nreview it (check https://coala.io/reviewing for more info)\nif you are sure that it needs work, use corobo mark wip <URL> to get it out\nof the review queue.\n\nThe more you review, the more your score will grow at coala.io and we will\nreview your PRs faster!","comments":4,"createdAt":"2018-07-27T05:08:03Z","updatedAt":"2018-07-27T08:54:02Z","closedAt":"2018-07-27T08:54:02Z","state":"merged","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"assignee":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"area/CLI","color":"006b75"},{"name":"area/tests","color":"bfd4f2"},{"name":"difficulty/low","color":"207de5"},{"name":"importance/low","color":"70E870"},{"name":"size/XS","color":"00DE0F"},{"name":"type/bug","color":"e11d21"}],"pullRequest":{"htmlUrl":"https://github.com/coala/coala/pull/5673","comments":[]}}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1531223974000,"issue":{"htmlUrl":"https://github.com/coala/coala/pull/5596","number":5596,"title":"IO.rst: Add FileFactory docs","body":"This adds a new doc IO.rst that describes the\nuse of FileFactory objects and the caching\nmechanism involved for IO operations and also\nupdates the NextGen docs.\n\nFor short term contributors: we understand that getting your commits well\ndefined like we require is a hard task and takes some learning. If you\nlook to help without wanting to contribute long term there's no need\nfor you to learn this. Just drop us a message and we'll take care of brushing\nup your stuff for merge!\nChecklist\n\n I read the commit guidelines and I've followed\nthem.\n I ran coala over my code locally. (All commits have to pass\nindividually. It is not sufficient to have \"fixup commits\" on your PR,\nour bot will still report the issues for the previous commit.) You will\nlikely receive a lot of bot comments and build failures if coala does not\npass on every single commit!\n\nAfter you submit your pull request, DO NOT click the 'Update Branch' button.\nWhen asked for a rebase, consult coala.io/rebase\ninstead.\nPlease consider helping us by reviewing other peoples pull requests as well:\n\npick up any PR at https://coala.io/review\nreview it (check https://coala.io/reviewing for more info)\nif you are sure that it needs work, use corobo mark wip <URL> to get it out\nof the review queue.\n\nThe more you review, the more your score will grow at coala.io and we will\nreview your PRs faster!","comments":6,"createdAt":"2018-07-04T20:09:05Z","updatedAt":"2018-07-10T11:59:34Z","closedAt":"2018-07-10T11:59:34Z","state":"merged","user":{"login":"palash25","avatarUrl":"https://avatars0.githubusercontent.com/u/21367710?v=4"},"owner":{"login":"palash25","avatarUrl":"https://avatars0.githubusercontent.com/u/21367710?v=4"},"labels":[{"name":"process/approved","color":"009800"},{"name":"size/XS","color":"00DE0F"}],"pullRequest":{"htmlUrl":"https://github.com/coala/coala/pull/5596","comments":[{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDgzOTU2Nw==","url":"https://github.com/coala/coala/pull/5596#discussion_r200839567","bodyText":"no periods, since those aren't full sentences :)","diffHunk":"@@ -310,12 +310,23 @@ in case of code clone detection).\n Superior Caching\n ----------------\n \n-The NextGen-Core's caching mechanism is based on task objects. Bears can offload\n-tasks via `generate_tasks()` which get executed by a Python pool. Structure wise\n-the cache is a dictionary-like-object with bear types and cache-tables as key\n-value pairs. The cache-tables themselves are dictionary-like-objects that map\n-the hash values of the task objects (generated by\n-``PersistentHash.persistent_hash``) to the bear results.\n+NextGen-Core's caching can be broken up into two parts:\n+\n+- Memoization of ``FileFactory`` objects.\n+- Caching of task objects.","author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"reactions":[],"createdAt":"2018-07-08T12:52:34Z","lastEditedAt":null,"updatedAt":"2018-07-08T12:52:34Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDgzOTU4Mg==","url":"https://github.com/coala/coala/pull/5596#discussion_r200839582","bodyText":"rather\ncoala -> bears","diffHunk":"@@ -310,12 +310,23 @@ in case of code clone detection).\n Superior Caching\n ----------------\n \n-The NextGen-Core's caching mechanism is based on task objects. Bears can offload\n-tasks via `generate_tasks()` which get executed by a Python pool. Structure wise\n-the cache is a dictionary-like-object with bear types and cache-tables as key\n-value pairs. The cache-tables themselves are dictionary-like-objects that map\n-the hash values of the task objects (generated by\n-``PersistentHash.persistent_hash``) to the bear results.\n+NextGen-Core's caching can be broken up into two parts:\n+\n+- Memoization of ``FileFactory`` objects.\n+- Caching of task objects.\n+\n+Since NextGen-Core provides coala to interface with the files using the","author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"reactions":[],"createdAt":"2018-07-08T12:53:15Z","lastEditedAt":null,"updatedAt":"2018-07-08T12:53:15Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDgzOTc0Mw==","url":"https://github.com/coala/coala/pull/5596#discussion_r200839743","bodyText":"Hm the sentence doesn't read so well imo, maybe\nNextGen-Core passes bears `FileFactory` objects to interface with files. `FileFactory` uses its own caching ...","diffHunk":"@@ -310,12 +310,23 @@ in case of code clone detection).\n Superior Caching\n ----------------\n \n-The NextGen-Core's caching mechanism is based on task objects. Bears can offload\n-tasks via `generate_tasks()` which get executed by a Python pool. Structure wise\n-the cache is a dictionary-like-object with bear types and cache-tables as key\n-value pairs. The cache-tables themselves are dictionary-like-objects that map\n-the hash values of the task objects (generated by\n-``PersistentHash.persistent_hash``) to the bear results.\n+NextGen-Core's caching can be broken up into two parts:\n+\n+- Memoization of ``FileFactory`` objects.\n+- Caching of task objects.\n+\n+Since NextGen-Core provides coala to interface with the files using the","author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"reactions":[],"createdAt":"2018-07-08T12:59:53Z","lastEditedAt":null,"updatedAt":"2018-07-08T12:59:53Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDgzOTc1MQ==","url":"https://github.com/coala/coala/pull/5596#discussion_r200839751","bodyText":"a bit reordering makes it easier to read:\nso that whenever these properties are accessed the cached results are returned instead of loading the files again.","diffHunk":"@@ -310,12 +310,23 @@ in case of code clone detection).\n Superior Caching\n ----------------\n \n-The NextGen-Core's caching mechanism is based on task objects. Bears can offload\n-tasks via `generate_tasks()` which get executed by a Python pool. Structure wise\n-the cache is a dictionary-like-object with bear types and cache-tables as key\n-value pairs. The cache-tables themselves are dictionary-like-objects that map\n-the hash values of the task objects (generated by\n-``PersistentHash.persistent_hash``) to the bear results.\n+NextGen-Core's caching can be broken up into two parts:\n+\n+- Memoization of ``FileFactory`` objects.\n+- Caching of task objects.\n+\n+Since NextGen-Core provides coala to interface with the files using the\n+``FileFactory``, ``FileFactory`` uses its own caching mechanism to ensure\n+high performance I/O operations. The file contents are accessed using\n+properties which are memoized so that whenever these properties are accessed\n+instead of loading the files again the cached results are returned.","author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"reactions":[],"createdAt":"2018-07-08T13:00:15Z","lastEditedAt":null,"updatedAt":"2018-07-08T13:00:15Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDgzOTg1Mw==","url":"https://github.com/coala/coala/pull/5596#discussion_r200839853","bodyText":"For raw I would definitely mention the idea to easily deploy analysis that works on raw files only. As long as you don't use string, the contents will be never decoded, and you never run into problems. No quirky USE_RAW_FILES any more.","diffHunk":"@@ -0,0 +1,35 @@\n+coala's IO Mechanism\n+====================\n+\n+The interface\n+-------------\n+\n+Instead of directly loading files from a project directory coala uses a\n+class called ``FileFactory`` that provides an interface for dealing with\n+files.\n+\n+``FileFactory`` provides the following advantages as compared to simple file\n+loading.\n+\n+- Lazy-loading of files: Files don't have to be immediately loaded into the\n+  memory, instead coala collects all the ``FileFactory`` objects first which\n+  are in turn used to access the file contents when needed.\n+- Various modes to access contents: ``FileFactory`` provides three modes to\n+  access the file contents. As a string using ``FileFactory.string``, as a\n+  list using ``FileFactory.lines`` and in raw format using ``FileFactory.raw``.\n+  To access a particular line in the file one can use\n+  ``FileFactory.line(line_number)``.","author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"reactions":[],"createdAt":"2018-07-08T13:03:25Z","lastEditedAt":"2018-07-08T13:08:50Z","updatedAt":"2018-07-08T13:08:50Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDgzOTk1MA==","url":"https://github.com/coala/coala/pull/5596#discussion_r200839950","bodyText":"maybe repetitivie function calls -> unnecessary load ? Not sure... But \"repetitive function calls\" do also apply from user's perspective. If the user invokes string thousand times, then I would call that repetitive function calls :P","diffHunk":"@@ -0,0 +1,35 @@\n+coala's IO Mechanism\n+====================\n+\n+The interface\n+-------------\n+\n+Instead of directly loading files from a project directory coala uses a\n+class called ``FileFactory`` that provides an interface for dealing with\n+files.\n+\n+``FileFactory`` provides the following advantages as compared to simple file\n+loading.\n+\n+- Lazy-loading of files: Files don't have to be immediately loaded into the\n+  memory, instead coala collects all the ``FileFactory`` objects first which\n+  are in turn used to access the file contents when needed.\n+- Various modes to access contents: ``FileFactory`` provides three modes to\n+  access the file contents. As a string using ``FileFactory.string``, as a\n+  list using ``FileFactory.lines`` and in raw format using ``FileFactory.raw``.\n+  To access a particular line in the file one can use\n+  ``FileFactory.line(line_number)``.\n+- High Performance: ``FileFactory``'s properties are cached to reduce\n+  repetitive function calls for the same ``FileFactory`` objects.","author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"reactions":[],"createdAt":"2018-07-08T13:05:29Z","lastEditedAt":null,"updatedAt":"2018-07-08T13:05:29Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDgzOTk1Nw==","url":"https://github.com/coala/coala/pull/5596#discussion_r200839957","bodyText":"Maybe just \"Interface\"? :)","diffHunk":"@@ -0,0 +1,35 @@\n+coala's IO Mechanism\n+====================\n+\n+The interface","author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"reactions":[],"createdAt":"2018-07-08T13:05:39Z","lastEditedAt":null,"updatedAt":"2018-07-08T13:05:39Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDgzOTk3OQ==","url":"https://github.com/coala/coala/pull/5596#discussion_r200839979","bodyText":"Could be maybe emitted completely, since what follows is a general description of the IO features^^","diffHunk":"@@ -0,0 +1,35 @@\n+coala's IO Mechanism\n+====================\n+\n+The interface","author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"reactions":[],"createdAt":"2018-07-08T13:06:13Z","lastEditedAt":null,"updatedAt":"2018-07-08T13:06:13Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDg0MTI3Ng==","url":"https://github.com/coala/coala/pull/5596#discussion_r200841276","bodyText":"Oh forgot: Definitely put a link/reference to your IO docs :D If you like in a new commit, since you haven't introduced IO.rst yet.","diffHunk":"@@ -310,12 +310,22 @@ in case of code clone detection).\n Superior Caching\n ----------------\n \n-The NextGen-Core's caching mechanism is based on task objects. Bears can offload\n-tasks via `generate_tasks()` which get executed by a Python pool. Structure wise\n-the cache is a dictionary-like-object with bear types and cache-tables as key\n-value pairs. The cache-tables themselves are dictionary-like-objects that map\n-the hash values of the task objects (generated by\n-``PersistentHash.persistent_hash``) to the bear results.\n+NextGen-Core's caching can be broken up into two parts:\n+\n+- Memoization of ``FileFactory`` objects\n+- Caching of task objects\n+\n+Since NextGen-Core passes bears ``FileFactory`` objects to interface with\n+files, ``FileFactory`` uses its own caching mechanism to ensure\n+high performance I/O operations. Whenever a property is accessed the cached\n+results are returned instead of loading the files again.","author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"reactions":[],"createdAt":"2018-07-08T13:49:42Z","lastEditedAt":null,"updatedAt":"2018-07-08T13:49:42Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDg0MTUzMg==","url":"https://github.com/coala/coala/pull/5596#discussion_r200841532","bodyText":"\"mode\" is confusing here, since you are describing a mode right now (\"Various modes to access contents:\").","diffHunk":"@@ -0,0 +1,37 @@\n+coala's IO Mechanism\n+====================\n+\n+Instead of directly loading files from a project directory coala uses a\n+class called ``FileFactory`` that provides an interface for dealing with\n+files.\n+\n+``FileFactory`` provides the following advantages as compared to simple file\n+loading.\n+\n+- Lazy-loading of files: Files don't have to be immediately loaded into the\n+  memory, instead coala collects all the ``FileFactory`` objects first which\n+  are in turn used to access the file contents when needed.\n+- Various modes to access contents: ``FileFactory`` provides three modes to\n+  access the file contents. As a string using ``FileFactory.string``, as a\n+  list using ``FileFactory.lines`` and in raw format using ``FileFactory.raw``.\n+  To access a particular line in the file one can use\n+  ``FileFactory.line(line_number)``. Another benefit of storing the raw file\n+  contents is the ability to easily deploy analysis that works on raw files\n+  only. Since the contents are not decoded as long as ``FileFactory.string``\n+  is not called we don't need to have a separate mode for using raw files","author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"reactions":[],"createdAt":"2018-07-08T13:58:46Z","lastEditedAt":null,"updatedAt":"2018-07-08T13:58:46Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDg0MTU3NQ==","url":"https://github.com/coala/coala/pull/5596#discussion_r200841575","bodyText":"accessing the same property multiple times for a FileFactory objects.","diffHunk":"@@ -0,0 +1,37 @@\n+coala's IO Mechanism\n+====================\n+\n+Instead of directly loading files from a project directory coala uses a\n+class called ``FileFactory`` that provides an interface for dealing with\n+files.\n+\n+``FileFactory`` provides the following advantages as compared to simple file\n+loading.\n+\n+- Lazy-loading of files: Files don't have to be immediately loaded into the\n+  memory, instead coala collects all the ``FileFactory`` objects first which\n+  are in turn used to access the file contents when needed.\n+- Various modes to access contents: ``FileFactory`` provides three modes to\n+  access the file contents. As a string using ``FileFactory.string``, as a\n+  list using ``FileFactory.lines`` and in raw format using ``FileFactory.raw``.\n+  To access a particular line in the file one can use\n+  ``FileFactory.line(line_number)``. Another benefit of storing the raw file\n+  contents is the ability to easily deploy analysis that works on raw files\n+  only. Since the contents are not decoded as long as ``FileFactory.string``\n+  is not called we don't need to have a separate mode for using raw files\n+  anymore.\n+- High Performance: ``FileFactory``'s properties are cached to reduce\n+  unnecessary load caused by accessing the same property for a\n+  ``FileFactory`` objects.","author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNjE0NDQ4OA==","createdAt":"2018-07-08T14:33:26Z","content":"THUMBS_UP","user":{"login":"palash25","name":"Palash Nigam"}}],"createdAt":"2018-07-08T14:00:27Z","lastEditedAt":null,"updatedAt":"2018-07-08T14:00:27Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDg0MjM4OQ==","url":"https://github.com/coala/coala/pull/5596#discussion_r200842389","bodyText":"is it a module, or a decorator? ;)","diffHunk":"@@ -0,0 +1,37 @@\n+coala's IO Mechanism\n+====================\n+\n+Instead of directly loading files from a project directory coala uses a\n+class called ``FileFactory`` that provides an interface for dealing with\n+files.\n+\n+``FileFactory`` provides the following advantages as compared to simple file\n+loading.\n+\n+- Lazy-loading of files: Files don't have to be immediately loaded into the\n+  memory, instead coala collects all the ``FileFactory`` objects first which\n+  are in turn used to access the file contents when needed.\n+- Various modes to access contents: ``FileFactory`` provides three modes to\n+  access the file contents. As a string using ``FileFactory.string``, as a\n+  list using ``FileFactory.lines`` and in raw format using ``FileFactory.raw``.\n+  To access a particular line in the file one can use\n+  ``FileFactory.line(line_number)``. Another benefit of storing the raw file\n+  contents is the ability to easily deploy analysis that works on raw files\n+  only. Since the contents are not decoded as long as ``FileFactory.string``\n+  is not called we don't need to have a separate mode for using raw files\n+  anymore.\n+- High Performance: ``FileFactory``'s properties are cached to reduce\n+  unnecessary load caused by accessing the same property for a\n+  ``FileFactory`` objects.\n+\n+\n+Caching\n+-------\n+\n+``FileFactory`` uses a module called ``memoized_property`` to decorate its","author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"reactions":[],"createdAt":"2018-07-08T14:23:26Z","lastEditedAt":null,"updatedAt":"2018-07-08T14:23:26Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDg0NDM1Mg==","url":"https://github.com/coala/coala/pull/5596#discussion_r200844352","bodyText":"I changed the heading to various formats and the raw mode parts is kept the same to avoid confusion.","diffHunk":"@@ -0,0 +1,37 @@\n+coala's IO Mechanism\n+====================\n+\n+Instead of directly loading files from a project directory coala uses a\n+class called ``FileFactory`` that provides an interface for dealing with\n+files.\n+\n+``FileFactory`` provides the following advantages as compared to simple file\n+loading.\n+\n+- Lazy-loading of files: Files don't have to be immediately loaded into the\n+  memory, instead coala collects all the ``FileFactory`` objects first which\n+  are in turn used to access the file contents when needed.\n+- Various modes to access contents: ``FileFactory`` provides three modes to\n+  access the file contents. As a string using ``FileFactory.string``, as a\n+  list using ``FileFactory.lines`` and in raw format using ``FileFactory.raw``.\n+  To access a particular line in the file one can use\n+  ``FileFactory.line(line_number)``. Another benefit of storing the raw file\n+  contents is the ability to easily deploy analysis that works on raw files\n+  only. Since the contents are not decoded as long as ``FileFactory.string``\n+  is not called we don't need to have a separate mode for using raw files","author":{"login":"palash25","avatarUrl":"https://avatars0.githubusercontent.com/u/21367710?v=4","name":"Palash Nigam"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNjE0ODAyMg==","createdAt":"2018-07-08T19:19:33Z","content":"THUMBS_UP","user":{"login":"Makman2","name":"Mischa Krüger"}}],"createdAt":"2018-07-08T15:34:10Z","lastEditedAt":null,"updatedAt":"2018-07-08T15:34:10Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDg1MDYyNQ==","url":"https://github.com/coala/coala/pull/5596#discussion_r200850625","bodyText":"I would exclude the period from the link ;)\ncheck out the `IO docs<http://...>`_.","diffHunk":"@@ -318,7 +318,9 @@ NextGen-Core's caching can be broken up into two parts:\n Since NextGen-Core passes bears ``FileFactory`` objects to interface with\n files, ``FileFactory`` uses its own caching mechanism to ensure\n high performance I/O operations. Whenever a property is accessed the cached\n-results are returned instead of loading the files again.\n+results are returned instead of loading the files again. For more details check\n+out the `IO docs.","author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"reactions":[],"createdAt":"2018-07-08T19:21:16Z","lastEditedAt":null,"updatedAt":"2018-07-08T19:21:16Z"}]}}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1531127873000,"issue":{"htmlUrl":"https://github.com/coala/coala/pull/5598","number":5598,"title":"Git_Basics.rst: Adds bullets","body":"Rectifies a minor syntax error due to which bullets\nweren't being rendered.\n\nFor short term contributors: we understand that getting your commits well\ndefined like we require is a hard task and takes some learning. If you\nlook to help without wanting to contribute long term there's no need\nfor you to learn this. Just drop us a message and we'll take care of brushing\nup your stuff for merge!\nChecklist\n\n I read the commit guidelines and I've followed\nthem.\n I ran coala over my code locally. (All commits have to pass\nindividually. It is not sufficient to have \"fixup commits\" on your PR,\nour bot will still report the issues for the previous commit.) You will\nlikely receive a lot of bot comments and build failures if coala does not\npass on every single commit!\n\nAfter you submit your pull request, DO NOT click the 'Update Branch' button.\nWhen asked for a rebase, consult coala.io/rebase\ninstead.\nPlease consider helping us by reviewing other peoples pull requests as well:\n\npick up any PR at https://coala.io/review\nreview it (check https://coala.io/reviewing for more info)\nif you are sure that it needs work, use corobo mark wip <URL> to get it out\nof the review queue.\n\nThe more you review, the more your score will grow at coala.io and we will\nreview your PRs faster!","comments":2,"createdAt":"2018-07-05T05:22:09Z","updatedAt":"2018-07-09T09:17:53Z","closedAt":null,"state":"open","user":{"login":"0110G","avatarUrl":"https://avatars1.githubusercontent.com/u/39427377?v=4"},"owner":{"login":"0110G","avatarUrl":"https://avatars1.githubusercontent.com/u/39427377?v=4"},"labels":[{"name":"process/wip","color":"fbca04"},{"name":"size/XS","color":"00DE0F"}],"pullRequest":{"htmlUrl":"https://github.com/coala/coala/pull/5598","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQwMjYyODcwNQ==","url":"https://github.com/coala/coala/pull/5598#issuecomment-402628705","bodyText":"@0110G running coala and pytest on your local system before pushing the code will help you. And go through the newcomer's guide. It helps a lot. :)","diffHunk":null,"author":{"login":"pareksha","avatarUrl":"https://avatars1.githubusercontent.com/u/32385407?v=4","name":"Pareksha Manchanda"},"createdAt":"2018-07-05T07:20:14Z","lastEditedAt":null,"updatedAt":"2018-07-05T07:20:14Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwMjczMDk4Mw==","url":"https://github.com/coala/coala/pull/5598#issuecomment-402730983","bodyText":"Yeah. I read it but having a difficult time with git as a beginner. Please tolerate me :))","diffHunk":null,"author":{"login":"0110G","avatarUrl":"https://avatars1.githubusercontent.com/u/39427377?v=4","name":null},"createdAt":"2018-07-05T13:58:37Z","lastEditedAt":null,"updatedAt":"2018-07-05T13:58:37Z"}]}}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1533537231000,"issue":{"htmlUrl":"https://github.com/coala/coala/pull/5599","number":5599,"title":"Add: Profiling Interface","body":"Add Profiler Interface.\nRelated to #565","comments":8,"createdAt":"2018-07-05T12:30:54Z","updatedAt":"2018-08-06T06:33:51Z","closedAt":"2018-08-06T06:33:30Z","state":"merged","user":{"login":"RaiVaibhav","avatarUrl":"https://avatars3.githubusercontent.com/u/22278438?v=4"},"owner":{"login":"RaiVaibhav","avatarUrl":"https://avatars3.githubusercontent.com/u/22278438?v=4"},"labels":[{"name":"size/M","color":"eb6420"},{"name":"status/ci-approved","color":"ededed"}],"pullRequest":{"htmlUrl":"https://github.com/coala/coala/pull/5599","comments":[{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTQ1OTkzMg==","url":"https://github.com/coala/coala/pull/5599#discussion_r201459932","bodyText":"check against boolean values, not string:\nif self.profile is True:","diffHunk":"@@ -305,6 +310,45 @@ def log_message(self, log_message, timestamp=None, **kwargs):\n     def run(self, *args, dependency_results=None, **kwargs):\n         raise NotImplementedError\n \n+    def setup_profile(self, prof=None):\n+        path = os.getcwd()\n+        if self.profile == 'True':","author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"reactions":[],"createdAt":"2018-07-10T19:05:37Z","lastEditedAt":null,"updatedAt":"2018-07-10T19:05:37Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTQ2MDA3Ng==","url":"https://github.com/coala/coala/pull/5599#discussion_r201460076","bodyText":"superfluous","diffHunk":"@@ -305,6 +310,45 @@ def log_message(self, log_message, timestamp=None, **kwargs):\n     def run(self, *args, dependency_results=None, **kwargs):\n         raise NotImplementedError\n \n+    def setup_profile(self, prof=None):\n+        path = os.getcwd()\n+        if self.profile == 'True':\n+            filename = '{}_{}.prof'.format(self.section.name, self.name)\n+            open(filename, 'wb')","author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"reactions":[],"createdAt":"2018-07-10T19:06:03Z","lastEditedAt":null,"updatedAt":"2018-07-10T19:06:03Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTQ2MjU3MA==","url":"https://github.com/coala/coala/pull/5599#discussion_r201462570","bodyText":"please name them properly ;) proper naming automatically makes code documented :)","diffHunk":"@@ -305,6 +310,45 @@ def log_message(self, log_message, timestamp=None, **kwargs):\n     def run(self, *args, dependency_results=None, **kwargs):\n         raise NotImplementedError\n \n+    def setup_profile(self, prof=None):\n+        path = os.getcwd()\n+        if self.profile == 'True':\n+            filename = '{}_{}.prof'.format(self.section.name, self.name)\n+            open(filename, 'wb')\n+            prof.dump_stats(filename)\n+        else:\n+            subdir = self.profile\n+            filepath = os.path.join(path, subdir)\n+            if os.path.isdir(filepath):\n+                filename = '{}_{}.prof'.format(self.section.name, self.name)\n+                open(os.path.join(filepath, filename), 'wb')\n+                prof.dump_stats(os.path.join(filepath, filename))\n+\n+            else:\n+                os.mkdir(os.path.join(path, subdir))\n+                filename = '{}_{}.prof'.format(self.section.name, self.name)\n+                open(os.path.join(filepath, filename), 'wb')\n+                prof.dump_stats(os.path.join(filepath, filename))\n+\n+    def profile_run(self, *args, **kwargs):\n+        prof1 = cProfile.Profile()","author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"reactions":[],"createdAt":"2018-07-10T19:15:56Z","lastEditedAt":null,"updatedAt":"2018-07-10T19:15:56Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTQ2MjYxMw==","url":"https://github.com/coala/coala/pull/5599#discussion_r201462613","bodyText":"not Iterable instead of GeneratorType?","diffHunk":"@@ -305,6 +310,45 @@ def log_message(self, log_message, timestamp=None, **kwargs):\n     def run(self, *args, dependency_results=None, **kwargs):\n         raise NotImplementedError\n \n+    def setup_profile(self, prof=None):\n+        path = os.getcwd()\n+        if self.profile == 'True':\n+            filename = '{}_{}.prof'.format(self.section.name, self.name)\n+            open(filename, 'wb')\n+            prof.dump_stats(filename)\n+        else:\n+            subdir = self.profile\n+            filepath = os.path.join(path, subdir)\n+            if os.path.isdir(filepath):\n+                filename = '{}_{}.prof'.format(self.section.name, self.name)\n+                open(os.path.join(filepath, filename), 'wb')\n+                prof.dump_stats(os.path.join(filepath, filename))\n+\n+            else:\n+                os.mkdir(os.path.join(path, subdir))\n+                filename = '{}_{}.prof'.format(self.section.name, self.name)\n+                open(os.path.join(filepath, filename), 'wb')\n+                prof.dump_stats(os.path.join(filepath, filename))\n+\n+    def profile_run(self, *args, **kwargs):\n+        prof1 = cProfile.Profile()\n+        bear_results = prof1.runcall(self.run, *args, **kwargs)\n+        if isinstance(bear_results, types.GeneratorType):","author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"reactions":[],"createdAt":"2018-07-10T19:16:08Z","lastEditedAt":null,"updatedAt":"2018-07-10T19:16:08Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTQ2Mjg2Ng==","url":"https://github.com/coala/coala/pull/5599#discussion_r201462866","bodyText":"redundant","diffHunk":"@@ -305,6 +310,45 @@ def log_message(self, log_message, timestamp=None, **kwargs):\n     def run(self, *args, dependency_results=None, **kwargs):\n         raise NotImplementedError\n \n+    def setup_profile(self, prof=None):\n+        path = os.getcwd()\n+        if self.profile == 'True':\n+            filename = '{}_{}.prof'.format(self.section.name, self.name)\n+            open(filename, 'wb')\n+            prof.dump_stats(filename)\n+        else:\n+            subdir = self.profile\n+            filepath = os.path.join(path, subdir)\n+            if os.path.isdir(filepath):\n+                filename = '{}_{}.prof'.format(self.section.name, self.name)\n+                open(os.path.join(filepath, filename), 'wb')\n+                prof.dump_stats(os.path.join(filepath, filename))\n+\n+            else:\n+                os.mkdir(os.path.join(path, subdir))\n+                filename = '{}_{}.prof'.format(self.section.name, self.name)\n+                open(os.path.join(filepath, filename), 'wb')","author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"reactions":[],"createdAt":"2018-07-10T19:17:02Z","lastEditedAt":null,"updatedAt":"2018-07-10T19:17:02Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTQ2Mjg3OQ==","url":"https://github.com/coala/coala/pull/5599#discussion_r201462879","bodyText":"redundant","diffHunk":"@@ -305,6 +310,45 @@ def log_message(self, log_message, timestamp=None, **kwargs):\n     def run(self, *args, dependency_results=None, **kwargs):\n         raise NotImplementedError\n \n+    def setup_profile(self, prof=None):\n+        path = os.getcwd()\n+        if self.profile == 'True':\n+            filename = '{}_{}.prof'.format(self.section.name, self.name)\n+            open(filename, 'wb')\n+            prof.dump_stats(filename)\n+        else:\n+            subdir = self.profile\n+            filepath = os.path.join(path, subdir)\n+            if os.path.isdir(filepath):\n+                filename = '{}_{}.prof'.format(self.section.name, self.name)\n+                open(os.path.join(filepath, filename), 'wb')","author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"reactions":[],"createdAt":"2018-07-10T19:17:05Z","lastEditedAt":null,"updatedAt":"2018-07-10T19:17:05Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTQ2NDI5OA==","url":"https://github.com/coala/coala/pull/5599#discussion_r201464298","bodyText":"documentation missing ;)","diffHunk":"@@ -262,7 +265,8 @@ def __init__(self,\n                  section: Section,\n                  message_queue,\n                  timeout=0,\n-                 debugger=False):\n+                 debugger=False,\n+                 profile=False):","author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"reactions":[],"createdAt":"2018-07-10T19:22:08Z","lastEditedAt":null,"updatedAt":"2018-07-10T19:22:08Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTQ2NDQzNA==","url":"https://github.com/coala/coala/pull/5599#discussion_r201464434","bodyText":"path is only used in the else branch, please move it there","diffHunk":"@@ -305,6 +310,45 @@ def log_message(self, log_message, timestamp=None, **kwargs):\n     def run(self, *args, dependency_results=None, **kwargs):\n         raise NotImplementedError\n \n+    def setup_profile(self, prof=None):\n+        path = os.getcwd()","author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"reactions":[],"createdAt":"2018-07-10T19:22:42Z","lastEditedAt":null,"updatedAt":"2018-07-10T19:22:42Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTQ2NDYzMA==","url":"https://github.com/coala/coala/pull/5599#discussion_r201464630","bodyText":"you should check if it's actually an absolute path. So\n\nit's a relative path: append it to os.getcwd\nit's an absolute path: ignore os.getcwd","diffHunk":"@@ -305,6 +310,45 @@ def log_message(self, log_message, timestamp=None, **kwargs):\n     def run(self, *args, dependency_results=None, **kwargs):\n         raise NotImplementedError\n \n+    def setup_profile(self, prof=None):\n+        path = os.getcwd()\n+        if self.profile == 'True':\n+            filename = '{}_{}.prof'.format(self.section.name, self.name)\n+            open(filename, 'wb')\n+            prof.dump_stats(filename)\n+        else:\n+            subdir = self.profile","author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"reactions":[],"createdAt":"2018-07-10T19:23:30Z","lastEditedAt":null,"updatedAt":"2018-07-10T19:23:30Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTQ2NDkyNg==","url":"https://github.com/coala/coala/pull/5599#discussion_r201464926","bodyText":"I guess the API saving the dumps already respect that, so in fact you don't need the join below, just pass self.profile to prof.dump_stats :)","diffHunk":"@@ -305,6 +310,45 @@ def log_message(self, log_message, timestamp=None, **kwargs):\n     def run(self, *args, dependency_results=None, **kwargs):\n         raise NotImplementedError\n \n+    def setup_profile(self, prof=None):\n+        path = os.getcwd()\n+        if self.profile == 'True':\n+            filename = '{}_{}.prof'.format(self.section.name, self.name)\n+            open(filename, 'wb')\n+            prof.dump_stats(filename)\n+        else:\n+            subdir = self.profile","author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"reactions":[],"createdAt":"2018-07-10T19:24:41Z","lastEditedAt":null,"updatedAt":"2018-07-10T19:24:41Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTQ2NTUwNA==","url":"https://github.com/coala/coala/pull/5599#discussion_r201465504","bodyText":"Looks like a bit copied from above. How about doing\nself.filename = '{}_{}.prof'.format(self.section.name, self.name) if self.profile is True else self.profile","diffHunk":"@@ -305,6 +310,45 @@ def log_message(self, log_message, timestamp=None, **kwargs):\n     def run(self, *args, dependency_results=None, **kwargs):\n         raise NotImplementedError\n \n+    def setup_profile(self, prof=None):\n+        path = os.getcwd()\n+        if self.profile == 'True':\n+            filename = '{}_{}.prof'.format(self.section.name, self.name)\n+            open(filename, 'wb')\n+            prof.dump_stats(filename)\n+        else:\n+            subdir = self.profile\n+            filepath = os.path.join(path, subdir)\n+            if os.path.isdir(filepath):\n+                filename = '{}_{}.prof'.format(self.section.name, self.name)\n+                open(os.path.join(filepath, filename), 'wb')\n+                prof.dump_stats(os.path.join(filepath, filename))\n+\n+            else:\n+                os.mkdir(os.path.join(path, subdir))\n+                filename = '{}_{}.prof'.format(self.section.name, self.name)\n+                open(os.path.join(filepath, filename), 'wb')","author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"reactions":[],"createdAt":"2018-07-10T19:26:50Z","lastEditedAt":null,"updatedAt":"2018-07-10T19:26:50Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTQ2NTY0Mw==","url":"https://github.com/coala/coala/pull/5599#discussion_r201465643","bodyText":"Why not actually running everything in the same profile object?","diffHunk":"@@ -305,6 +310,45 @@ def log_message(self, log_message, timestamp=None, **kwargs):\n     def run(self, *args, dependency_results=None, **kwargs):\n         raise NotImplementedError\n \n+    def setup_profile(self, prof=None):\n+        path = os.getcwd()\n+        if self.profile == 'True':\n+            filename = '{}_{}.prof'.format(self.section.name, self.name)\n+            open(filename, 'wb')\n+            prof.dump_stats(filename)\n+        else:\n+            subdir = self.profile\n+            filepath = os.path.join(path, subdir)\n+            if os.path.isdir(filepath):\n+                filename = '{}_{}.prof'.format(self.section.name, self.name)\n+                open(os.path.join(filepath, filename), 'wb')\n+                prof.dump_stats(os.path.join(filepath, filename))\n+\n+            else:\n+                os.mkdir(os.path.join(path, subdir))\n+                filename = '{}_{}.prof'.format(self.section.name, self.name)\n+                open(os.path.join(filepath, filename), 'wb')\n+                prof.dump_stats(os.path.join(filepath, filename))\n+\n+    def profile_run(self, *args, **kwargs):\n+        prof1 = cProfile.Profile()","author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"reactions":[],"createdAt":"2018-07-10T19:27:16Z","lastEditedAt":null,"updatedAt":"2018-07-10T19:27:16Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTQ2NjE0MA==","url":"https://github.com/coala/coala/pull/5599#discussion_r201466140","bodyText":"what arguments does it take?","diffHunk":"@@ -249,6 +249,9 @@ def default_arg_parser(formatter_class=None):\n         ' additional arguments. If used without arguments, all bears specified'\n         ' with --bears will be debugged (even implicit dependency bears).')\n \n+    outputs_group.add_argument(\n+        '--profile', nargs='?', const=True, help='Profile Bears')","author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"reactions":[],"createdAt":"2018-07-10T19:29:09Z","lastEditedAt":null,"updatedAt":"2018-07-10T19:29:09Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzQ3NTI2Mw==","url":"https://github.com/coala/coala/pull/5599#discussion_r203475263","bodyText":"why do you introduce documentation about the debugger in the commit for the profiler?","diffHunk":"@@ -273,6 +277,10 @@ def __init__(self,\n                               time limit, use 0.\n         :raises TypeError:    Raised when ``message_queue`` is no queue.\n         :raises RuntimeError: Raised when bear requirements are not fulfilled.\n+        :param debugger       A flag which enable debugger on those bears which\n+                              are specified in ``debug_bears`` settings.","author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNjY0OTYwNg==","createdAt":"2018-07-18T19:31:11Z","content":"THUMBS_UP","user":{"login":"RaiVaibhav","name":"Vaibhav Rai"}}],"createdAt":"2018-07-18T18:01:36Z","lastEditedAt":null,"updatedAt":"2018-07-18T18:01:36Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzQ3NTQ1MA==","url":"https://github.com/coala/coala/pull/5599#discussion_r203475450","bodyText":"mismatch with the actual parameter name profile. But I guess you should call it profiler in the signature, analogous to debugger","diffHunk":"@@ -273,6 +277,10 @@ def __init__(self,\n                               time limit, use 0.\n         :raises TypeError:    Raised when ``message_queue`` is no queue.\n         :raises RuntimeError: Raised when bear requirements are not fulfilled.\n+        :param debugger       A flag which enable debugger on those bears which\n+                              are specified in ``debug_bears`` settings.\n+        :param profiler       The Path or name of directory where profiler file","author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"reactions":[],"createdAt":"2018-07-18T18:02:08Z","lastEditedAt":null,"updatedAt":"2018-07-18T18:02:08Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzQ3NTQ5NQ==","url":"https://github.com/coala/coala/pull/5599#discussion_r203475495","bodyText":"Ppath","diffHunk":"@@ -273,6 +277,10 @@ def __init__(self,\n                               time limit, use 0.\n         :raises TypeError:    Raised when ``message_queue`` is no queue.\n         :raises RuntimeError: Raised when bear requirements are not fulfilled.\n+        :param debugger       A flag which enable debugger on those bears which\n+                              are specified in ``debug_bears`` settings.\n+        :param profiler       The Path or name of directory where profiler file","author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"reactions":[],"createdAt":"2018-07-18T18:02:19Z","lastEditedAt":null,"updatedAt":"2018-07-18T18:02:19Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzQ3ODUzMQ==","url":"https://github.com/coala/coala/pull/5599#discussion_r203478531","bodyText":"so you won't create a dump file? It has to exist already? Sounds not so good\ndon't print, rather exceptions, since it's an invalid state for the bear with profiling enabled.","diffHunk":"@@ -305,6 +314,36 @@ def log_message(self, log_message, timestamp=None, **kwargs):\n     def run(self, *args, dependency_results=None, **kwargs):\n         raise NotImplementedError\n \n+    def setup_profile(self, profiler=None):\n+        filename = '{}_{}.prof'.format(self.section.name, self.name)\n+        if self.profile is True:\n+            profiler.dump_stats(filename)\n+        elif os.path.exists(self.profile) and os.path.isdir(self.profile):\n+            profiler.dump_stats(os.path.join(self.profile, filename))\n+        elif not os.path.isfile(self.profile):\n+            os.mkdir(os.path.join(self.profile))\n+            profiler.dump_stats(os.path.join(self.profile, filename))\n+        else:\n+            print('directory and filename cannot be same', file=sys.stdout)","author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"reactions":[],"createdAt":"2018-07-18T18:11:52Z","lastEditedAt":null,"updatedAt":"2018-07-18T18:11:52Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzQ3ODc3Ng==","url":"https://github.com/coala/coala/pull/5599#discussion_r203478776","bodyText":"please deduplicate the code, you use self.setup_profile twice in both branches.","diffHunk":"@@ -305,6 +314,36 @@ def log_message(self, log_message, timestamp=None, **kwargs):\n     def run(self, *args, dependency_results=None, **kwargs):\n         raise NotImplementedError\n \n+    def setup_profile(self, profiler=None):\n+        filename = '{}_{}.prof'.format(self.section.name, self.name)\n+        if self.profile is True:\n+            profiler.dump_stats(filename)\n+        elif os.path.exists(self.profile) and os.path.isdir(self.profile):\n+            profiler.dump_stats(os.path.join(self.profile, filename))\n+        elif not os.path.isfile(self.profile):\n+            os.mkdir(os.path.join(self.profile))\n+            profiler.dump_stats(os.path.join(self.profile, filename))\n+        else:\n+            print('directory and filename cannot be same', file=sys.stdout)\n+\n+    def profile_run(self, *args, profile=None, **kwargs):\n+        profile = cProfile.Profile() if profile is None else profile\n+        bear_results = profile.runcall(self.run, *args, **kwargs)\n+        if isinstance(bear_results, collections.Iterable):\n+            results = []\n+            iterator = iter(bear_results)\n+            while True:\n+                try:\n+                    result = profile.runcall(next, iterator)\n+                    results.append(result)\n+                except StopIteration:\n+                    break\n+            self.setup_profile(profiler=profile)\n+            return results\n+        else:\n+            self.setup_profile(profiler=profile)","author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"reactions":[],"createdAt":"2018-07-18T18:12:39Z","lastEditedAt":null,"updatedAt":"2018-07-18T18:12:39Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzQ3ODk1NA==","url":"https://github.com/coala/coala/pull/5599#discussion_r203478954","bodyText":"what if profile and debugger are both given? I thought that's an invalid state, thus an exception should be raised?","diffHunk":"@@ -283,6 +291,7 @@ def __init__(self,\n         self.message_queue = message_queue\n         self.timeout = timeout\n         self.debugger = debugger\n+        self.profile = profile","author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNzIyOTg2NQ==","createdAt":"2018-07-31T13:42:30Z","content":"THUMBS_UP","user":{"login":"RaiVaibhav","name":"Vaibhav Rai"}}],"createdAt":"2018-07-18T18:13:15Z","lastEditedAt":null,"updatedAt":"2018-07-18T18:13:15Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzQ3OTU0Nw==","url":"https://github.com/coala/coala/pull/5599#discussion_r203479547","bodyText":"function name doesn't resemble what it's doing","diffHunk":"@@ -305,6 +314,36 @@ def log_message(self, log_message, timestamp=None, **kwargs):\n     def run(self, *args, dependency_results=None, **kwargs):\n         raise NotImplementedError\n \n+    def setup_profile(self, profiler=None):","author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNjY0OTY5MQ==","createdAt":"2018-07-18T19:32:53Z","content":"THUMBS_UP","user":{"login":"RaiVaibhav","name":"Vaibhav Rai"}}],"createdAt":"2018-07-18T18:15:13Z","lastEditedAt":null,"updatedAt":"2018-07-18T18:15:13Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzQ3OTczNw==","url":"https://github.com/coala/coala/pull/5599#discussion_r203479737","bodyText":"Function name should be preceded with an underscore, I guess nobody should directly call that^^","diffHunk":"@@ -305,6 +314,36 @@ def log_message(self, log_message, timestamp=None, **kwargs):\n     def run(self, *args, dependency_results=None, **kwargs):\n         raise NotImplementedError\n \n+    def setup_profile(self, profiler=None):","author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNjY0OTY4OQ==","createdAt":"2018-07-18T19:32:47Z","content":"THUMBS_UP","user":{"login":"RaiVaibhav","name":"Vaibhav Rai"}}],"createdAt":"2018-07-18T18:15:45Z","lastEditedAt":null,"updatedAt":"2018-07-18T18:15:45Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzQ3OTkyMQ==","url":"https://github.com/coala/coala/pull/5599#discussion_r203479921","bodyText":"True is allowed as well^^","diffHunk":"@@ -273,6 +277,10 @@ def __init__(self,\n                               time limit, use 0.\n         :raises TypeError:    Raised when ``message_queue`` is no queue.\n         :raises RuntimeError: Raised when bear requirements are not fulfilled.\n+        :param debugger       A flag which enable debugger on those bears which\n+                              are specified in ``debug_bears`` settings.\n+        :param profiler       The Path or name of directory where profiler file\n+                              will dump.","author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"reactions":[],"createdAt":"2018-07-18T18:16:13Z","lastEditedAt":null,"updatedAt":"2018-07-18T18:16:13Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzQ4MDQ3Ng==","url":"https://github.com/coala/coala/pull/5599#discussion_r203480476","bodyText":"PS:\n3. I don't understand the message^^\n4. sys.stdout is default for print","diffHunk":"@@ -305,6 +314,36 @@ def log_message(self, log_message, timestamp=None, **kwargs):\n     def run(self, *args, dependency_results=None, **kwargs):\n         raise NotImplementedError\n \n+    def setup_profile(self, profiler=None):\n+        filename = '{}_{}.prof'.format(self.section.name, self.name)\n+        if self.profile is True:\n+            profiler.dump_stats(filename)\n+        elif os.path.exists(self.profile) and os.path.isdir(self.profile):\n+            profiler.dump_stats(os.path.join(self.profile, filename))\n+        elif not os.path.isfile(self.profile):\n+            os.mkdir(os.path.join(self.profile))\n+            profiler.dump_stats(os.path.join(self.profile, filename))\n+        else:\n+            print('directory and filename cannot be same', file=sys.stdout)","author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"reactions":[],"createdAt":"2018-07-18T18:18:06Z","lastEditedAt":null,"updatedAt":"2018-07-18T18:18:06Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzQ4MTE4Mw==","url":"https://github.com/coala/coala/pull/5599#discussion_r203481183","bodyText":"not sure this behaviour is too complicated... why not just allowing True/False and put it either into the working directory or a subdirectory like profile/profile-data/bear-profiling/... ?","diffHunk":"@@ -305,6 +314,36 @@ def log_message(self, log_message, timestamp=None, **kwargs):\n     def run(self, *args, dependency_results=None, **kwargs):\n         raise NotImplementedError\n \n+    def setup_profile(self, profiler=None):\n+        filename = '{}_{}.prof'.format(self.section.name, self.name)\n+        if self.profile is True:\n+            profiler.dump_stats(filename)\n+        elif os.path.exists(self.profile) and os.path.isdir(self.profile):\n+            profiler.dump_stats(os.path.join(self.profile, filename))\n+        elif not os.path.isfile(self.profile):\n+            os.mkdir(os.path.join(self.profile))\n+            profiler.dump_stats(os.path.join(self.profile, filename))","author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"reactions":[],"createdAt":"2018-07-18T18:20:28Z","lastEditedAt":null,"updatedAt":"2018-07-18T18:20:28Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzQ4MjI5Mw==","url":"https://github.com/coala/coala/pull/5599#discussion_r203482293","bodyText":"since how do we want to configure it for many bears if the user can pick the filename? Specifying individual file names for each bears as a feature is not necessarily helpful^^ people usually just want the data, if the filenames are not to their likings, they should reformat.","diffHunk":"@@ -305,6 +314,36 @@ def log_message(self, log_message, timestamp=None, **kwargs):\n     def run(self, *args, dependency_results=None, **kwargs):\n         raise NotImplementedError\n \n+    def setup_profile(self, profiler=None):\n+        filename = '{}_{}.prof'.format(self.section.name, self.name)\n+        if self.profile is True:\n+            profiler.dump_stats(filename)\n+        elif os.path.exists(self.profile) and os.path.isdir(self.profile):\n+            profiler.dump_stats(os.path.join(self.profile, filename))\n+        elif not os.path.isfile(self.profile):\n+            os.mkdir(os.path.join(self.profile))\n+            profiler.dump_stats(os.path.join(self.profile, filename))","author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"reactions":[],"createdAt":"2018-07-18T18:24:10Z","lastEditedAt":null,"updatedAt":"2018-07-18T18:24:10Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzQ5NTE0Nw==","url":"https://github.com/coala/coala/pull/5599#discussion_r203495147","bodyText":"@Makman2\n\n\nfirst it will check the value of self.profile if its True then it will dump the profiler files in the current working directory,\n\n\nelse  it will check whether the path given or directory name or in self.profile  already exists and also check it is a directory if yes then it will dump the profiler files in that directory.\n\n\nelse it will check whether the path given or directory name is already a file (not directory) if it is not a file then it will create a directory with the name passed in self.profile or the path passed and dump the profiler files in this directory.\n\n\nelse last case which left is user is passing the filename or filepath in self.profile then it becomes obvious that it is not possible to dump profiler files in file (I will raise the exception in this case instead of printing a message)","diffHunk":"@@ -305,6 +314,36 @@ def log_message(self, log_message, timestamp=None, **kwargs):\n     def run(self, *args, dependency_results=None, **kwargs):\n         raise NotImplementedError\n \n+    def setup_profile(self, profiler=None):\n+        filename = '{}_{}.prof'.format(self.section.name, self.name)\n+        if self.profile is True:\n+            profiler.dump_stats(filename)\n+        elif os.path.exists(self.profile) and os.path.isdir(self.profile):\n+            profiler.dump_stats(os.path.join(self.profile, filename))\n+        elif not os.path.isfile(self.profile):\n+            os.mkdir(os.path.join(self.profile))\n+            profiler.dump_stats(os.path.join(self.profile, filename))\n+        else:\n+            print('directory and filename cannot be same', file=sys.stdout)","author":{"login":"RaiVaibhav","avatarUrl":"https://avatars3.githubusercontent.com/u/22278438?v=4","name":"Vaibhav Rai"},"reactions":[],"createdAt":"2018-07-18T19:05:33Z","lastEditedAt":"2018-07-19T04:07:43Z","updatedAt":"2018-07-19T04:07:43Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzQ5NTU5OQ==","url":"https://github.com/coala/coala/pull/5599#discussion_r203495599","bodyText":"What it the bear return is not iterable I know you already said a bear which return none is a buggy bear but that bear can be profiled IMO","diffHunk":"@@ -305,6 +314,36 @@ def log_message(self, log_message, timestamp=None, **kwargs):\n     def run(self, *args, dependency_results=None, **kwargs):\n         raise NotImplementedError\n \n+    def setup_profile(self, profiler=None):\n+        filename = '{}_{}.prof'.format(self.section.name, self.name)\n+        if self.profile is True:\n+            profiler.dump_stats(filename)\n+        elif os.path.exists(self.profile) and os.path.isdir(self.profile):\n+            profiler.dump_stats(os.path.join(self.profile, filename))\n+        elif not os.path.isfile(self.profile):\n+            os.mkdir(os.path.join(self.profile))\n+            profiler.dump_stats(os.path.join(self.profile, filename))\n+        else:\n+            print('directory and filename cannot be same', file=sys.stdout)\n+\n+    def profile_run(self, *args, profile=None, **kwargs):\n+        profile = cProfile.Profile() if profile is None else profile\n+        bear_results = profile.runcall(self.run, *args, **kwargs)\n+        if isinstance(bear_results, collections.Iterable):\n+            results = []\n+            iterator = iter(bear_results)\n+            while True:\n+                try:\n+                    result = profile.runcall(next, iterator)\n+                    results.append(result)\n+                except StopIteration:\n+                    break\n+            self.setup_profile(profiler=profile)\n+            return results\n+        else:\n+            self.setup_profile(profiler=profile)","author":{"login":"RaiVaibhav","avatarUrl":"https://avatars3.githubusercontent.com/u/22278438?v=4","name":"Vaibhav Rai"},"reactions":[],"createdAt":"2018-07-18T19:07:06Z","lastEditedAt":null,"updatedAt":"2018-07-18T19:07:06Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzQ5NzcyOA==","url":"https://github.com/coala/coala/pull/5599#discussion_r203497728","bodyText":"No its not, If I understand here correctly then you are talking about this filename = '{}_{}.prof'.format(self.section.name, self.name) this part was added in cEP and also it is also giving a useful information like suppose some bear ABCBear in 2 different sections of .coafile then it will create a files with name sectionOne_ABCBear and sectionTwo_ABCBear. (here section name is my assumption)","diffHunk":"@@ -305,6 +314,36 @@ def log_message(self, log_message, timestamp=None, **kwargs):\n     def run(self, *args, dependency_results=None, **kwargs):\n         raise NotImplementedError\n \n+    def setup_profile(self, profiler=None):\n+        filename = '{}_{}.prof'.format(self.section.name, self.name)\n+        if self.profile is True:\n+            profiler.dump_stats(filename)\n+        elif os.path.exists(self.profile) and os.path.isdir(self.profile):\n+            profiler.dump_stats(os.path.join(self.profile, filename))\n+        elif not os.path.isfile(self.profile):\n+            os.mkdir(os.path.join(self.profile))\n+            profiler.dump_stats(os.path.join(self.profile, filename))","author":{"login":"RaiVaibhav","avatarUrl":"https://avatars3.githubusercontent.com/u/22278438?v=4","name":"Vaibhav Rai"},"reactions":[],"createdAt":"2018-07-18T19:14:45Z","lastEditedAt":null,"updatedAt":"2018-07-18T19:14:45Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzQ5ODcxOA==","url":"https://github.com/coala/coala/pull/5599#discussion_r203498718","bodyText":"not sure this behaviour is too complicated\n\nI don't think its complicated 😅","diffHunk":"@@ -305,6 +314,36 @@ def log_message(self, log_message, timestamp=None, **kwargs):\n     def run(self, *args, dependency_results=None, **kwargs):\n         raise NotImplementedError\n \n+    def setup_profile(self, profiler=None):\n+        filename = '{}_{}.prof'.format(self.section.name, self.name)\n+        if self.profile is True:\n+            profiler.dump_stats(filename)\n+        elif os.path.exists(self.profile) and os.path.isdir(self.profile):\n+            profiler.dump_stats(os.path.join(self.profile, filename))\n+        elif not os.path.isfile(self.profile):\n+            os.mkdir(os.path.join(self.profile))\n+            profiler.dump_stats(os.path.join(self.profile, filename))","author":{"login":"RaiVaibhav","avatarUrl":"https://avatars3.githubusercontent.com/u/22278438?v=4","name":"Vaibhav Rai"},"reactions":[],"createdAt":"2018-07-18T19:18:22Z","lastEditedAt":null,"updatedAt":"2018-07-18T19:18:22Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzUwMjExMQ==","url":"https://github.com/coala/coala/pull/5599#discussion_r203502111","bodyText":"Yeah I accidentally squashed in my last update","diffHunk":"@@ -273,6 +277,10 @@ def __init__(self,\n                               time limit, use 0.\n         :raises TypeError:    Raised when ``message_queue`` is no queue.\n         :raises RuntimeError: Raised when bear requirements are not fulfilled.\n+        :param debugger       A flag which enable debugger on those bears which\n+                              are specified in ``debug_bears`` settings.","author":{"login":"RaiVaibhav","avatarUrl":"https://avatars3.githubusercontent.com/u/22278438?v=4","name":"Vaibhav Rai"},"reactions":[],"createdAt":"2018-07-18T19:31:08Z","lastEditedAt":null,"updatedAt":"2018-07-18T19:31:08Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzU5NzM3Mw==","url":"https://github.com/coala/coala/pull/5599#discussion_r203597373","bodyText":"actually, the cli argument is --profile so I am directly using the profile keyword and passing same to bear init , do you want me to change it to --profiler or make it self.profiler = profile?","diffHunk":"@@ -273,6 +277,10 @@ def __init__(self,\n                               time limit, use 0.\n         :raises TypeError:    Raised when ``message_queue`` is no queue.\n         :raises RuntimeError: Raised when bear requirements are not fulfilled.\n+        :param debugger       A flag which enable debugger on those bears which\n+                              are specified in ``debug_bears`` settings.\n+        :param profiler       The Path or name of directory where profiler file","author":{"login":"RaiVaibhav","avatarUrl":"https://avatars3.githubusercontent.com/u/22278438?v=4","name":"Vaibhav Rai"},"reactions":[],"createdAt":"2018-07-19T04:16:19Z","lastEditedAt":null,"updatedAt":"2018-07-19T04:16:19Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzU5Nzk2Nw==","url":"https://github.com/coala/coala/pull/5599#discussion_r203597967","bodyText":"verified one more time its working for all the case, the mistake I have done is a for every bear run it will print directory and filename cannot be same and I have to solve this warning thing 👍","diffHunk":"@@ -305,6 +314,36 @@ def log_message(self, log_message, timestamp=None, **kwargs):\n     def run(self, *args, dependency_results=None, **kwargs):\n         raise NotImplementedError\n \n+    def setup_profile(self, profiler=None):\n+        filename = '{}_{}.prof'.format(self.section.name, self.name)\n+        if self.profile is True:\n+            profiler.dump_stats(filename)\n+        elif os.path.exists(self.profile) and os.path.isdir(self.profile):\n+            profiler.dump_stats(os.path.join(self.profile, filename))\n+        elif not os.path.isfile(self.profile):\n+            os.mkdir(os.path.join(self.profile))\n+            profiler.dump_stats(os.path.join(self.profile, filename))\n+        else:\n+            print('directory and filename cannot be same', file=sys.stdout)","author":{"login":"RaiVaibhav","avatarUrl":"https://avatars3.githubusercontent.com/u/22278438?v=4","name":"Vaibhav Rai"},"reactions":[],"createdAt":"2018-07-19T04:22:25Z","lastEditedAt":null,"updatedAt":"2018-07-19T04:22:25Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzYyNjMzOQ==","url":"https://github.com/coala/coala/pull/5599#discussion_r203626339","bodyText":"IMO this also get the ouput we want and also cover the case where user pass the path or filename which is actually a file not a directory it will give a proper error which user can understand easily (as we can't create a file and directory with the same name)\ni.e., FileExistsError: [Errno 17] File exists: '/home/vaibhav/test/my.txt'\nBut if /home/vaibhav/test/my.txt is a directory then it will not give any error\n, what I was not wanted was to halt the coala normal execution and I am hoping this is the thing you wanted?\n    def setup_profile(self, profiler=None):\n        filename = '{}_{}.prof'.format(self.section.name, self.name)\n        if self.profile is True:\n            profiler.dump_stats(filename)\n        else:\n            if os.path.exists(self.profile) and os.path.isdir(self.profile):\n                profiler.dump_stats(os.path.join(self.profile, filename))\n            else:\n                os.mkdir(os.path.join(self.profile))\n                profiler.dump_stats(os.path.join(self.profile, filename))","diffHunk":"@@ -305,6 +314,36 @@ def log_message(self, log_message, timestamp=None, **kwargs):\n     def run(self, *args, dependency_results=None, **kwargs):\n         raise NotImplementedError\n \n+    def setup_profile(self, profiler=None):\n+        filename = '{}_{}.prof'.format(self.section.name, self.name)\n+        if self.profile is True:\n+            profiler.dump_stats(filename)\n+        elif os.path.exists(self.profile) and os.path.isdir(self.profile):\n+            profiler.dump_stats(os.path.join(self.profile, filename))\n+        elif not os.path.isfile(self.profile):\n+            os.mkdir(os.path.join(self.profile))\n+            profiler.dump_stats(os.path.join(self.profile, filename))\n+        else:\n+            print('directory and filename cannot be same', file=sys.stdout)","author":{"login":"RaiVaibhav","avatarUrl":"https://avatars3.githubusercontent.com/u/22278438?v=4","name":"Vaibhav Rai"},"reactions":[],"createdAt":"2018-07-19T07:31:01Z","lastEditedAt":"2018-07-19T07:33:17Z","updatedAt":"2018-07-19T07:33:17Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzYyOTQ0Ng==","url":"https://github.com/coala/coala/pull/5599#discussion_r203629446","bodyText":"It's okay to halt coala's execution, if the user requested to profile code, but you can't profile because of such filename issues, you want to rather stop and make the user fix it. Otherwise you do a full coala run (that depending on the setup could take minutes) without profiling which wastes time.","diffHunk":"@@ -305,6 +314,36 @@ def log_message(self, log_message, timestamp=None, **kwargs):\n     def run(self, *args, dependency_results=None, **kwargs):\n         raise NotImplementedError\n \n+    def setup_profile(self, profiler=None):\n+        filename = '{}_{}.prof'.format(self.section.name, self.name)\n+        if self.profile is True:\n+            profiler.dump_stats(filename)\n+        elif os.path.exists(self.profile) and os.path.isdir(self.profile):\n+            profiler.dump_stats(os.path.join(self.profile, filename))\n+        elif not os.path.isfile(self.profile):\n+            os.mkdir(os.path.join(self.profile))\n+            profiler.dump_stats(os.path.join(self.profile, filename))\n+        else:\n+            print('directory and filename cannot be same', file=sys.stdout)","author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"reactions":[],"createdAt":"2018-07-19T07:44:53Z","lastEditedAt":null,"updatedAt":"2018-07-19T07:44:53Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzYzMDUyNA==","url":"https://github.com/coala/coala/pull/5599#discussion_r203630524","bodyText":"And yeah, your code looks better 👍 However one doubt: So if the user specifies a path in self.profile, we want to make it a directory, right?\nBesides two improvements:\n\nIn the first else branch, you execute profiler.dump_stats(os.path.join(...)) regardless on which branch, that can be moved outside the if ;)\nsince in the end you will always do dump_stats, and the only thing that changes is the filename, how about doing:\n\n    def setup_profile(self, profiler=None):\n        filename = '{}_{}.prof'.format(self.section.name, self.name)\n        if self.profile is True:\n            path = filename\n        else:\n            if not (os.path.exists(self.profile) and os.path.isdir(self.profile)):\n                os.mkdir(os.path.join(self.profile))\n            \n            path = os.path.join(self.profile, filename)            \n\n        profiler.dump_stats(path)","diffHunk":"@@ -305,6 +314,36 @@ def log_message(self, log_message, timestamp=None, **kwargs):\n     def run(self, *args, dependency_results=None, **kwargs):\n         raise NotImplementedError\n \n+    def setup_profile(self, profiler=None):\n+        filename = '{}_{}.prof'.format(self.section.name, self.name)\n+        if self.profile is True:\n+            profiler.dump_stats(filename)\n+        elif os.path.exists(self.profile) and os.path.isdir(self.profile):\n+            profiler.dump_stats(os.path.join(self.profile, filename))\n+        elif not os.path.isfile(self.profile):\n+            os.mkdir(os.path.join(self.profile))\n+            profiler.dump_stats(os.path.join(self.profile, filename))\n+        else:\n+            print('directory and filename cannot be same', file=sys.stdout)","author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"reactions":[],"createdAt":"2018-07-19T07:49:06Z","lastEditedAt":"2018-07-19T07:49:33Z","updatedAt":"2018-07-19T07:49:33Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzYzMTE3Mw==","url":"https://github.com/coala/coala/pull/5599#discussion_r203631173","bodyText":"that's not what I mean ;) In both branches you use self.setup_profile, so in any case self.setup_profile will be executed. You can make the code a bit more compact by moving that out of the if clause:\nif ...\n   results = ... # I know this name is already used here, but choose some other good name or so.\nelse ...\n   results = ...\n\nself.setup_profile(profiler=profile)\nreturn results","diffHunk":"@@ -305,6 +314,36 @@ def log_message(self, log_message, timestamp=None, **kwargs):\n     def run(self, *args, dependency_results=None, **kwargs):\n         raise NotImplementedError\n \n+    def setup_profile(self, profiler=None):\n+        filename = '{}_{}.prof'.format(self.section.name, self.name)\n+        if self.profile is True:\n+            profiler.dump_stats(filename)\n+        elif os.path.exists(self.profile) and os.path.isdir(self.profile):\n+            profiler.dump_stats(os.path.join(self.profile, filename))\n+        elif not os.path.isfile(self.profile):\n+            os.mkdir(os.path.join(self.profile))\n+            profiler.dump_stats(os.path.join(self.profile, filename))\n+        else:\n+            print('directory and filename cannot be same', file=sys.stdout)\n+\n+    def profile_run(self, *args, profile=None, **kwargs):\n+        profile = cProfile.Profile() if profile is None else profile\n+        bear_results = profile.runcall(self.run, *args, **kwargs)\n+        if isinstance(bear_results, collections.Iterable):\n+            results = []\n+            iterator = iter(bear_results)\n+            while True:\n+                try:\n+                    result = profile.runcall(next, iterator)\n+                    results.append(result)\n+                except StopIteration:\n+                    break\n+            self.setup_profile(profiler=profile)\n+            return results\n+        else:\n+            self.setup_profile(profiler=profile)","author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"reactions":[],"createdAt":"2018-07-19T07:52:06Z","lastEditedAt":null,"updatedAt":"2018-07-19T07:52:06Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzYzMTcxNw==","url":"https://github.com/coala/coala/pull/5599#discussion_r203631717","bodyText":"you are talking about this filename = '{}_{}.prof'.format(self.section.name, self.name)\n\nNope, that is totally okay :) However, with the above code changes by you, my doubts may do not apply any more. So nvm for now :3","diffHunk":"@@ -305,6 +314,36 @@ def log_message(self, log_message, timestamp=None, **kwargs):\n     def run(self, *args, dependency_results=None, **kwargs):\n         raise NotImplementedError\n \n+    def setup_profile(self, profiler=None):\n+        filename = '{}_{}.prof'.format(self.section.name, self.name)\n+        if self.profile is True:\n+            profiler.dump_stats(filename)\n+        elif os.path.exists(self.profile) and os.path.isdir(self.profile):\n+            profiler.dump_stats(os.path.join(self.profile, filename))\n+        elif not os.path.isfile(self.profile):\n+            os.mkdir(os.path.join(self.profile))\n+            profiler.dump_stats(os.path.join(self.profile, filename))","author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"reactions":[],"createdAt":"2018-07-19T07:54:04Z","lastEditedAt":null,"updatedAt":"2018-07-19T07:54:04Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzYzMTk3NQ==","url":"https://github.com/coala/coala/pull/5599#discussion_r203631975","bodyText":"Ah right. Then keep the name profile, however, the docstring has to be corrected ;)","diffHunk":"@@ -273,6 +277,10 @@ def __init__(self,\n                               time limit, use 0.\n         :raises TypeError:    Raised when ``message_queue`` is no queue.\n         :raises RuntimeError: Raised when bear requirements are not fulfilled.\n+        :param debugger       A flag which enable debugger on those bears which\n+                              are specified in ``debug_bears`` settings.\n+        :param profiler       The Path or name of directory where profiler file","author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"reactions":[],"createdAt":"2018-07-19T07:55:14Z","lastEditedAt":null,"updatedAt":"2018-07-19T07:55:14Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzg2MTU1Nw==","url":"https://github.com/coala/coala/pull/5599#discussion_r203861557","bodyText":"The docstring doesn't really apply here. Since this is working directly on a bear, it's not tied to the debug_bears setting in the section. The step where debug_bears is parsed and bears are selected to be debugged happens before. Just say simply that if True, a debugger is started.","diffHunk":"@@ -276,6 +276,8 @@ def __init__(self,\n                               time limit, use 0.\n         :raises TypeError:    Raised when ``message_queue`` is no queue.\n         :raises RuntimeError: Raised when bear requirements are not fulfilled.\n+        :param debugger       A flag which enable debugger on those bears which\n+                              are specified in ``debug_bears`` settings.","author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"reactions":[],"createdAt":"2018-07-19T20:31:13Z","lastEditedAt":null,"updatedAt":"2018-07-19T20:31:13Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzg2MTYzMA==","url":"https://github.com/coala/coala/pull/5599#discussion_r203861630","bodyText":"missing colon after :param profile","diffHunk":"@@ -273,6 +276,10 @@ def __init__(self,\n                               time limit, use 0.\n         :raises TypeError:    Raised when ``message_queue`` is no queue.\n         :raises RuntimeError: Raised when bear requirements are not fulfilled.\n+        :param profile        A flag which enable profiler on bears of a","author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"reactions":[],"createdAt":"2018-07-19T20:31:27Z","lastEditedAt":null,"updatedAt":"2018-07-19T20:31:27Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzg2MjMwMQ==","url":"https://github.com/coala/coala/pull/5599#discussion_r203862301","bodyText":"--> A flag which enables profileing on this bear.\nIt's not really a flag then, is it? Since it accepts paths as well.\nNothing is mentioned that True is a valid value (a bit confusing is that you mention \"if none provided then...\", which suggests that None will do the trick)","diffHunk":"@@ -273,6 +276,10 @@ def __init__(self,\n                               time limit, use 0.\n         :raises TypeError:    Raised when ``message_queue`` is no queue.\n         :raises RuntimeError: Raised when bear requirements are not fulfilled.\n+        :param profile        A flag which enable profiler on bears of a\n+                              section. Contains path or name of directory where\n+                              profiled files will dump if none provided then\n+                              profiled files will dump in current directory.","author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"reactions":[],"createdAt":"2018-07-19T20:33:57Z","lastEditedAt":null,"updatedAt":"2018-07-19T20:33:57Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzg2MjM1NA==","url":"https://github.com/coala/coala/pull/5599#discussion_r203862354","bodyText":"bump","diffHunk":"@@ -283,6 +291,7 @@ def __init__(self,\n         self.message_queue = message_queue\n         self.timeout = timeout\n         self.debugger = debugger\n+        self.profile = profile","author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"reactions":[],"createdAt":"2018-07-19T20:34:08Z","lastEditedAt":null,"updatedAt":"2018-07-19T20:34:08Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzg2MjgwNQ==","url":"https://github.com/coala/coala/pull/5599#discussion_r203862805","bodyText":"which files are profiled? ;) --> the name has to become better still :)","diffHunk":"@@ -305,6 +313,34 @@ def log_message(self, log_message, timestamp=None, **kwargs):\n     def run(self, *args, dependency_results=None, **kwargs):\n         raise NotImplementedError\n \n+    def _dump_profiled_files(self, profiler):","author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"reactions":[],"createdAt":"2018-07-19T20:35:53Z","lastEditedAt":null,"updatedAt":"2018-07-19T20:35:53Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzg2MzA3OQ==","url":"https://github.com/coala/coala/pull/5599#discussion_r203863079","bodyText":"since you use path only here, you could inline it","diffHunk":"@@ -305,6 +313,34 @@ def log_message(self, log_message, timestamp=None, **kwargs):\n     def run(self, *args, dependency_results=None, **kwargs):\n         raise NotImplementedError\n \n+    def _dump_profiled_files(self, profiler):\n+        filename = '{}_{}.prof'.format(self.section.name, self.name)\n+        if self.profile is True:\n+            profiler.dump_stats(filename)\n+        else:\n+            if not (os.path.exists(self.profile) and\n+                    os.path.isdir(self.profile)):\n+                os.mkdir(os.path.join(self.profile))\n+            path = os.path.join(self.profile, filename)\n+            profiler.dump_stats(path)","author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"reactions":[],"createdAt":"2018-07-19T20:36:48Z","lastEditedAt":null,"updatedAt":"2018-07-19T20:36:48Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzg2Mzk1Nw==","url":"https://github.com/coala/coala/pull/5599#discussion_r203863957","bodyText":"the exception should be inside __init__. Don't allow to create bears that can't run.","diffHunk":"@@ -318,8 +354,13 @@ def run_bear_from_section(self, args, kwargs):\n             self.warn('The bear {} cannot be executed.'.format(\n                 self.name), str(err))\n             return\n-        if self.debugger:\n+        if self.profile and self.debugger:\n+            raise ValueError('Invalid argument passed, run debugger or '\n+                             'profiler one at a time.')","author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"reactions":[],"createdAt":"2018-07-19T20:39:36Z","lastEditedAt":null,"updatedAt":"2018-07-19T20:39:36Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzg2NjExNw==","url":"https://github.com/coala/coala/pull/5599#discussion_r203866117","bodyText":"a Performant Bears --> performant bears\nNever use \"a\" for plurals. A plural form without \"a\" is equivalent and a grammatical correct sentence.","diffHunk":"@@ -249,6 +249,15 @@ def default_arg_parser(formatter_class=None):\n         ' additional arguments. If used without arguments, all bears specified'\n         ' with --bears will be debugged (even implicit dependency bears).')\n \n+    outputs_group.add_argument(\n+        '--profile', nargs='?', const=True,\n+        help='Enable bear profiling with cProfile, that can help to create'\n+        ' a Performant Bears by profiling the Bear code. To specify where to'","author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"reactions":[],"createdAt":"2018-07-19T20:47:11Z","lastEditedAt":null,"updatedAt":"2018-07-19T20:47:11Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzg2NjI1Ng==","url":"https://github.com/coala/coala/pull/5599#discussion_r203866256","bodyText":"to to","diffHunk":"@@ -249,6 +249,15 @@ def default_arg_parser(formatter_class=None):\n         ' additional arguments. If used without arguments, all bears specified'\n         ' with --bears will be debugged (even implicit dependency bears).')\n \n+    outputs_group.add_argument(\n+        '--profile', nargs='?', const=True,\n+        help='Enable bear profiling with cProfile, that can help to create'\n+        ' a Performant Bears by profiling the Bear code. To specify where to'\n+        ' to dump the profile files, supply the path or the directory name, all'","author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"reactions":[],"createdAt":"2018-07-19T20:47:40Z","lastEditedAt":null,"updatedAt":"2018-07-19T20:47:40Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzg2NjM1OA==","url":"https://github.com/coala/coala/pull/5599#discussion_r203866358","bodyText":"all the bears","diffHunk":"@@ -249,6 +249,15 @@ def default_arg_parser(formatter_class=None):\n         ' additional arguments. If used without arguments, all bears specified'\n         ' with --bears will be debugged (even implicit dependency bears).')\n \n+    outputs_group.add_argument(\n+        '--profile', nargs='?', const=True,\n+        help='Enable bear profiling with cProfile, that can help to create'\n+        ' a Performant Bears by profiling the Bear code. To specify where to'\n+        ' to dump the profile files, supply the path or the directory name, all'\n+        ' the bear (even implicit dependency bears) in a section will get'","author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"reactions":[],"createdAt":"2018-07-19T20:48:02Z","lastEditedAt":null,"updatedAt":"2018-07-19T20:48:02Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzg2NjUzNA==","url":"https://github.com/coala/coala/pull/5599#discussion_r203866534","bodyText":"will get profile be profiled","diffHunk":"@@ -249,6 +249,15 @@ def default_arg_parser(formatter_class=None):\n         ' additional arguments. If used without arguments, all bears specified'\n         ' with --bears will be debugged (even implicit dependency bears).')\n \n+    outputs_group.add_argument(\n+        '--profile', nargs='?', const=True,\n+        help='Enable bear profiling with cProfile, that can help to create'\n+        ' a Performant Bears by profiling the Bear code. To specify where to'\n+        ' to dump the profile files, supply the path or the directory name, all'\n+        ' the bear (even implicit dependency bears) in a section will get'\n+        ' profile and there profile data will save in the specified directory'","author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"reactions":[],"createdAt":"2018-07-19T20:48:40Z","lastEditedAt":null,"updatedAt":"2018-07-19T20:48:40Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzg2NzYwMA==","url":"https://github.com/coala/coala/pull/5599#discussion_r203867600","bodyText":"I would place a period here so it's easier to read:\n\"In a section will be profiled. Profile data will be saved in the specified directory or path.\"","diffHunk":"@@ -249,6 +249,15 @@ def default_arg_parser(formatter_class=None):\n         ' additional arguments. If used without arguments, all bears specified'\n         ' with --bears will be debugged (even implicit dependency bears).')\n \n+    outputs_group.add_argument(\n+        '--profile', nargs='?', const=True,\n+        help='Enable bear profiling with cProfile, that can help to create'\n+        ' a Performant Bears by profiling the Bear code. To specify where to'\n+        ' to dump the profile files, supply the path or the directory name, all'\n+        ' the bear (even implicit dependency bears) in a section will get'\n+        ' profile and there profile data will save in the specified directory'","author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"reactions":[],"createdAt":"2018-07-19T20:52:29Z","lastEditedAt":null,"updatedAt":"2018-07-19T20:52:29Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzg2Nzc2OA==","url":"https://github.com/coala/coala/pull/5599#discussion_r203867768","bodyText":"Up to you: Maybe we shouldn't document that, people will understand what the naming scheme means once they see a profile dump.","diffHunk":"@@ -249,6 +249,15 @@ def default_arg_parser(formatter_class=None):\n         ' additional arguments. If used without arguments, all bears specified'\n         ' with --bears will be debugged (even implicit dependency bears).')\n \n+    outputs_group.add_argument(\n+        '--profile', nargs='?', const=True,\n+        help='Enable bear profiling with cProfile, that can help to create'\n+        ' a Performant Bears by profiling the Bear code. To specify where to'\n+        ' to dump the profile files, supply the path or the directory name, all'\n+        ' the bear (even implicit dependency bears) in a section will get'\n+        ' profile and there profile data will save in the specified directory'\n+        ' or the path with name format {section.name}_{bear.name}.prof.')","author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNjczMDg1MA==","createdAt":"2018-07-20T05:24:57Z","content":"THUMBS_UP","user":{"login":"RaiVaibhav","name":"Vaibhav Rai"}}],"createdAt":"2018-07-19T20:53:03Z","lastEditedAt":null,"updatedAt":"2018-07-19T20:53:03Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzg2ODIxOQ==","url":"https://github.com/coala/coala/pull/5599#discussion_r203868219","bodyText":"and what if it's false? ;) This is not so bullet proof, especially as coala allows words like \"yes\", \"nope\" ... as boolean values. I know we have done it for the debugger feature like this, but maybe now is the time to start thinking about that.","diffHunk":"@@ -312,6 +312,11 @@ def instantiate_bears(section,\n     :param console_printer:  Object to print messages on the console.\n     :return:                 The local and global bear instance lists.\n     \"\"\"\n+    profile = (False if 'profile' not in section or (\n+                section['profile'].value == 'False') else (","author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"reactions":[],"createdAt":"2018-07-19T20:54:41Z","lastEditedAt":null,"updatedAt":"2018-07-19T20:54:41Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzkzNjA3Nw==","url":"https://github.com/coala/coala/pull/5599#discussion_r203936077","bodyText":"Makman we are not handeling the ValueError in processing.py should I handle the ValueError so that other bear can initialize and  run?","diffHunk":"@@ -318,8 +354,13 @@ def run_bear_from_section(self, args, kwargs):\n             self.warn('The bear {} cannot be executed.'.format(\n                 self.name), str(err))\n             return\n-        if self.debugger:\n+        if self.profile and self.debugger:\n+            raise ValueError('Invalid argument passed, run debugger or '\n+                             'profiler one at a time.')","author":{"login":"RaiVaibhav","avatarUrl":"https://avatars3.githubusercontent.com/u/22278438?v=4","name":"Vaibhav Rai"},"reactions":[],"createdAt":"2018-07-20T04:37:49Z","lastEditedAt":null,"updatedAt":"2018-07-20T04:37:49Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzk0MDQxNg==","url":"https://github.com/coala/coala/pull/5599#discussion_r203940416","bodyText":"Although this will be included in Profiling Interface doc but I want to be here as sometimes people like me use --help to get the information about flag 😛","diffHunk":"@@ -249,6 +249,15 @@ def default_arg_parser(formatter_class=None):\n         ' additional arguments. If used without arguments, all bears specified'\n         ' with --bears will be debugged (even implicit dependency bears).')\n \n+    outputs_group.add_argument(\n+        '--profile', nargs='?', const=True,\n+        help='Enable bear profiling with cProfile, that can help to create'\n+        ' a Performant Bears by profiling the Bear code. To specify where to'\n+        ' to dump the profile files, supply the path or the directory name, all'\n+        ' the bear (even implicit dependency bears) in a section will get'\n+        ' profile and there profile data will save in the specified directory'\n+        ' or the path with name format {section.name}_{bear.name}.prof.')","author":{"login":"RaiVaibhav","avatarUrl":"https://avatars3.githubusercontent.com/u/22278438?v=4","name":"Vaibhav Rai"},"reactions":[],"createdAt":"2018-07-20T05:24:26Z","lastEditedAt":"2018-07-20T05:24:47Z","updatedAt":"2018-07-20T05:24:47Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQxMDEwOTMzMQ==","url":"https://github.com/coala/coala/pull/5599#issuecomment-410109331","bodyText":"@RaiVaibhav , you might need the Windows trick that is being used at https://github.com/coala/coala-bears/pull/2523/files#diff-c3fb76c94bc425a8cdc7577d5d0e3e31R60","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNzQ0ODUxMA==","createdAt":"2018-08-04T08:03:45Z","content":"THUMBS_DOWN","user":{"login":"jayvdb","name":"John Vandenberg"}}],"createdAt":"2018-08-03T00:40:43Z","lastEditedAt":null,"updatedAt":"2018-08-03T00:40:43Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQxMDEzNjE3Ng==","url":"https://github.com/coala/coala/pull/5599#issuecomment-410136176","bodyText":"shutil.rmtree will throw NotADirectoryError as I am checking for the file :)","diffHunk":null,"author":{"login":"RaiVaibhav","avatarUrl":"https://avatars3.githubusercontent.com/u/22278438?v=4","name":"Vaibhav Rai"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNzQ0ODUwNw==","createdAt":"2018-08-04T08:03:40Z","content":"THUMBS_UP","user":{"login":"jayvdb","name":"John Vandenberg"}}],"createdAt":"2018-08-03T03:46:42Z","lastEditedAt":null,"updatedAt":"2018-08-03T03:46:42Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQxMDEzNjQwMA==","url":"https://github.com/coala/coala/pull/5599#issuecomment-410136400","bodyText":"I findout the reason of previous problem here  https://www.logilab.org/blogentry/17873\nSo instead of hardcoding I used NamedTemporaryFile + with so solve the problem.","diffHunk":null,"author":{"login":"RaiVaibhav","avatarUrl":"https://avatars3.githubusercontent.com/u/22278438?v=4","name":"Vaibhav Rai"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNzQ0ODQ5NQ==","createdAt":"2018-08-04T08:03:02Z","content":"THUMBS_UP","user":{"login":"jayvdb","name":"John Vandenberg"}}],"createdAt":"2018-08-03T03:48:34Z","lastEditedAt":null,"updatedAt":"2018-08-03T03:48:34Z"}]}}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1531042095000,"issue":{"htmlUrl":"https://github.com/coala/coala/pull/5606","number":5606,"title":"coalib/parsing : Changed \"comment_seperators\" to \"comment_separators\"","body":"This changes the variable name \"comment_seperators\" to \"comment_separators\" in files CliParsing.py and ConfParser.py.\nOld name is added as a deprecated argument in the corresponding files.\nFixes #5510\n\nFor short term contributors: we understand that getting your commits well\ndefined like we require is a hard task and takes some learning. If you\nlook to help without wanting to contribute long term there's no need\nfor you to learn this. Just drop us a message and we'll take care of brushing\nup your stuff for merge!\nChecklist\n\n I read the commit guidelines and I've followed\nthem.\n I ran coala over my code locally. (All commits have to pass\nindividually. It is not sufficient to have \"fixup commits\" on your PR,\nour bot will still report the issues for the previous commit.) You will\nlikely receive a lot of bot comments and build failures if coala does not\npass on every single commit!\n\nAfter you submit your pull request, DO NOT click the 'Update Branch' button.\nWhen asked for a rebase, consult coala.io/rebase\ninstead.\nPlease consider helping us by reviewing other peoples pull requests as well:\n\npick up any PR at https://coala.io/review\nreview it (check https://coala.io/reviewing for more info)\nif you are sure that it needs work, use corobo mark wip <URL> to get it out\nof the review queue.\n\nThe more you review, the more your score will grow at coala.io and we will\nreview your PRs faster!","comments":4,"createdAt":"2018-07-08T08:48:16Z","updatedAt":"2018-07-08T09:28:15Z","closedAt":"2018-07-08T09:28:15Z","state":"closed","user":{"login":"JameerBabu","avatarUrl":"https://avatars2.githubusercontent.com/u/20906632?v=4"},"owner":{"login":"JameerBabu","avatarUrl":"https://avatars2.githubusercontent.com/u/20906632?v=4"},"assignee":{"login":"JameerBabu","avatarUrl":"https://avatars2.githubusercontent.com/u/20906632?v=4"},"labels":[{"name":"area/documentation","color":"bfe5bf"},{"name":"difficulty/low","color":"207de5"},{"name":"importance/low","color":"70E870"},{"name":"process/pending review","color":"bfe5bf"},{"name":"size/XS","color":"00DE0F"}],"pullRequest":{"htmlUrl":"https://github.com/coala/coala/pull/5606","comments":[]}}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1531042058000,"issue":{"htmlUrl":"https://github.com/coala/coala/pull/5607","number":5607,"title":"coalib/parsing : Changing \"comment_seperators\" to \"comment_separators\"","body":"This changes the variable name \"comment_seperators\" to \"comment_separators\" in files CliParsing.py and ConfParser.py.\nOld name is added as a deprecated argument in the corresponding files.\nFixes #5510\n\nFor short term contributors: we understand that getting your commits well\ndefined like we require is a hard task and takes some learning. If you\nlook to help without wanting to contribute long term there's no need\nfor you to learn this. Just drop us a message and we'll take care of brushing\nup your stuff for merge!\nChecklist\n\n I read the commit guidelines and I've followed\nthem.\n I ran coala over my code locally. (All commits have to pass\nindividually. It is not sufficient to have \"fixup commits\" on your PR,\nour bot will still report the issues for the previous commit.) You will\nlikely receive a lot of bot comments and build failures if coala does not\npass on every single commit!\n\nAfter you submit your pull request, DO NOT click the 'Update Branch' button.\nWhen asked for a rebase, consult coala.io/rebase\ninstead.\nPlease consider helping us by reviewing other peoples pull requests as well:\n\npick up any PR at https://coala.io/review\nreview it (check https://coala.io/reviewing for more info)\nif you are sure that it needs work, use corobo mark wip <URL> to get it out\nof the review queue.\n\nThe more you review, the more your score will grow at coala.io and we will\nreview your PRs faster!","comments":4,"createdAt":"2018-07-08T09:20:52Z","updatedAt":"2018-07-08T09:27:38Z","closedAt":"2018-07-08T09:27:38Z","state":"closed","user":{"login":"JameerBabu","avatarUrl":"https://avatars2.githubusercontent.com/u/20906632?v=4"},"owner":{"login":"JameerBabu","avatarUrl":"https://avatars2.githubusercontent.com/u/20906632?v=4"},"assignee":{"login":"JameerBabu","avatarUrl":"https://avatars2.githubusercontent.com/u/20906632?v=4"},"labels":[{"name":"area/documentation","color":"bfe5bf"},{"name":"difficulty/low","color":"207de5"},{"name":"importance/low","color":"70E870"},{"name":"process/pending review","color":"bfe5bf"},{"name":"size/XS","color":"00DE0F"}],"pullRequest":{"htmlUrl":"https://github.com/coala/coala/pull/5607","comments":[]}}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1532652769000,"issue":{"htmlUrl":"https://github.com/coala/coala/pull/5608","number":5608,"title":"coalib/parsing : Changed \"comment_seperators\" to \"comment_separators\"","body":"This changes the variable name \"comment_seperators\" to \"comment_separators\" in files CliParsing.py and ConfParser.py.\nOld name is added as a deprecated argument in the corresponding files.\nFixes #5510\n\nFor short term contributors: we understand that getting your commits well\ndefined like we require is a hard task and takes some learning. If you\nlook to help without wanting to contribute long term there's no need\nfor you to learn this. Just drop us a message and we'll take care of brushing\nup your stuff for merge!\nChecklist\n\n I read the commit guidelines and I've followed\nthem.\n I ran coala over my code locally. (All commits have to pass\nindividually. It is not sufficient to have \"fixup commits\" on your PR,\nour bot will still report the issues for the previous commit.) You will\nlikely receive a lot of bot comments and build failures if coala does not\npass on every single commit!\n\nAfter you submit your pull request, DO NOT click the 'Update Branch' button.\nWhen asked for a rebase, consult coala.io/rebase\ninstead.\nPlease consider helping us by reviewing other peoples pull requests as well:\n\npick up any PR at https://coala.io/review\nreview it (check https://coala.io/reviewing for more info)\nif you are sure that it needs work, use corobo mark wip <URL> to get it out\nof the review queue.\n\nThe more you review, the more your score will grow at coala.io and we will\nreview your PRs faster!","comments":9,"createdAt":"2018-07-08T10:50:19Z","updatedAt":"2018-07-27T00:52:49Z","closedAt":"2018-07-27T00:51:37Z","state":"closed","user":{"login":"JameerBabu","avatarUrl":"https://avatars2.githubusercontent.com/u/20906632?v=4"},"owner":{"login":"JameerBabu","avatarUrl":"https://avatars2.githubusercontent.com/u/20906632?v=4"},"assignee":{"login":"JameerBabu","avatarUrl":"https://avatars2.githubusercontent.com/u/20906632?v=4"},"labels":[{"name":"area/documentation","color":"bfe5bf"},{"name":"difficulty/low","color":"207de5"},{"name":"importance/low","color":"70E870"},{"name":"process/wip","color":"fbca04"},{"name":"size/XS","color":"00DE0F"}],"pullRequest":{"htmlUrl":"https://github.com/coala/coala/pull/5608","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQwMzI4MDM2Ng==","url":"https://github.com/coala/coala/pull/5608#issuecomment-403280366","bodyText":"@JameerBabu, dont close pull requests. Ask for help on https://coala.io/chat if you need it","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-07-08T11:15:09Z","lastEditedAt":null,"updatedAt":"2018-07-08T11:15:09Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwNjE1NjMxOA==","url":"https://github.com/coala/coala/pull/5608#issuecomment-406156318","bodyText":"Ask for help on gitter.","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-07-19T05:07:20Z","lastEditedAt":null,"updatedAt":"2018-07-19T05:07:20Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwODI3ODU1OA==","url":"https://github.com/coala/coala/pull/5608#issuecomment-408278558","bodyText":"You have not been asking for help on gitter as requested.\nYou have opened five pull requests for this, and are still not nearly close to understanding Python syntax for decorators.","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-07-27T00:52:49Z","lastEditedAt":null,"updatedAt":"2018-07-27T00:52:49Z"}]}}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1531049670000,"issue":{"htmlUrl":"https://github.com/coala/coala/pull/5609","number":5609,"title":"coalib/parsing : Changed \"comment_seperators\" to \"comment_separators\"","body":"This changes the variable name \"comment_seperators\" to \"comment_separators\" in files CliParsing.py and ConfParser.py.\nOld name is added as a deprecated argument in the corresponding files.\nFixes #5510\n\nFor short term contributors: we understand that getting your commits well\ndefined like we require is a hard task and takes some learning. If you\nlook to help without wanting to contribute long term there's no need\nfor you to learn this. Just drop us a message and we'll take care of brushing\nup your stuff for merge!\nChecklist\n\n I read the commit guidelines and I've followed\nthem.\n I ran coala over my code locally. (All commits have to pass\nindividually. It is not sufficient to have \"fixup commits\" on your PR,\nour bot will still report the issues for the previous commit.) You will\nlikely receive a lot of bot comments and build failures if coala does not\npass on every single commit!\n\nAfter you submit your pull request, DO NOT click the 'Update Branch' button.\nWhen asked for a rebase, consult coala.io/rebase\ninstead.\nPlease consider helping us by reviewing other peoples pull requests as well:\n\npick up any PR at https://coala.io/review\nreview it (check https://coala.io/reviewing for more info)\nif you are sure that it needs work, use corobo mark wip <URL> to get it out\nof the review queue.\n\nThe more you review, the more your score will grow at coala.io and we will\nreview your PRs faster!","comments":6,"createdAt":"2018-07-08T11:19:21Z","updatedAt":"2018-07-08T11:34:30Z","closedAt":"2018-07-08T11:29:12Z","state":"closed","user":{"login":"JameerBabu","avatarUrl":"https://avatars2.githubusercontent.com/u/20906632?v=4"},"owner":{"login":"JameerBabu","avatarUrl":"https://avatars2.githubusercontent.com/u/20906632?v=4"},"assignee":{"login":"JameerBabu","avatarUrl":"https://avatars2.githubusercontent.com/u/20906632?v=4"},"labels":[{"name":"area/documentation","color":"bfe5bf"},{"name":"difficulty/low","color":"207de5"},{"name":"importance/low","color":"70E870"},{"name":"process/pending review","color":"bfe5bf"},{"name":"size/XS","color":"00DE0F"}],"pullRequest":{"htmlUrl":"https://github.com/coala/coala/pull/5609","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQwMzI4MTA2Ng==","url":"https://github.com/coala/coala/pull/5609#issuecomment-403281066","bodyText":"#5608 is your pull request.\nDo not close and open new pull requests.\nRepeat and you'll be banned from @coala .","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-07-08T11:29:12Z","lastEditedAt":null,"updatedAt":"2018-07-08T11:29:12Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwMzI4MTM5MQ==","url":"https://github.com/coala/coala/pull/5609#issuecomment-403281391","bodyText":"@jayvdb  I am really sorry for that . I will never do it in the feature.","diffHunk":null,"author":{"login":"JameerBabu","avatarUrl":"https://avatars2.githubusercontent.com/u/20906632?v=4","name":"Jameer Babu"},"createdAt":"2018-07-08T11:34:30Z","lastEditedAt":null,"updatedAt":"2018-07-08T11:34:30Z"}]}}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1533270038000,"issue":{"htmlUrl":"https://github.com/coala/coala/pull/5610","number":5610,"title":"Bears.py: Add Debugger Setting toolset","body":"Add the code of Settings inspection\ntoolset so that user can access the\nsettings of a Bear in Debug environment\nand add initial test.\nRelated to #5545","comments":11,"createdAt":"2018-07-08T14:11:00Z","updatedAt":"2018-08-03T04:20:38Z","closedAt":"2018-07-27T09:32:03Z","state":"merged","user":{"login":"RaiVaibhav","avatarUrl":"https://avatars3.githubusercontent.com/u/22278438?v=4"},"owner":{"login":"RaiVaibhav","avatarUrl":"https://avatars3.githubusercontent.com/u/22278438?v=4"},"labels":[{"name":"size/S","color":"B1CF0A"},{"name":"status/ci-approved","color":"ededed"}],"pullRequest":{"htmlUrl":"https://github.com/coala/coala/pull/5610","comments":[{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTQ2ODEyNg==","url":"https://github.com/coala/coala/pull/5610#discussion_r201468126","bodyText":"why not just declaring an optional argument bear=None? Then you don't need to pop it off from kwargs","diffHunk":"@@ -26,6 +26,11 @@\n \n class Debugger(pdb.Pdb):\n \n+    def __init__(self, *args, **kwargs):\n+        self.bear = kwargs.get('bear', None)\n+        kwargs.pop('bear', None)","author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNjI2NDAxMQ==","createdAt":"2018-07-10T20:30:51Z","content":"THUMBS_UP","user":{"login":"RaiVaibhav","name":"Vaibhav Rai"}}],"createdAt":"2018-07-10T19:36:33Z","lastEditedAt":null,"updatedAt":"2018-07-10T19:36:33Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTQ3MDU3MA==","url":"https://github.com/coala/coala/pull/5610#discussion_r201470570","bodyText":"that should be\nself.message('%s = %r' % (param, section_params_dict[param] if param in section_params_dict else md.optional_params[param][2]))","diffHunk":"@@ -34,6 +39,19 @@ def do_quit(self, arg):\n     do_q = do_quit\n     do_exit = do_quit\n \n+    def do_settings(self, arg):\n+        md = self.bear.get_metadata()\n+        section_params_dict = md.create_params_from_section(self.bear.section)\n+        for param in md.non_optional_params:\n+            self.message('%s = %r' % (param, section_params_dict[param]))\n+        for param in md.optional_params:\n+            if param in section_params_dict:\n+                self.message('%s = %r' % (param, section_params_dict[param]))\n+            else:\n+                self.message('%s = %r' % (param,\n+                                          md.optional_params[param][2]))","author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNjI2MzkwMg==","createdAt":"2018-07-10T20:29:08Z","content":"THUMBS_UP","user":{"login":"RaiVaibhav","name":"Vaibhav Rai"}}],"createdAt":"2018-07-10T19:45:50Z","lastEditedAt":null,"updatedAt":"2018-07-10T19:45:50Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTgzNjk3NQ==","url":"https://github.com/coala/coala/pull/5610#discussion_r201836975","bodyText":"redundant braces after else","diffHunk":"@@ -34,6 +38,17 @@ def do_quit(self, arg):\n     do_q = do_quit\n     do_exit = do_quit\n \n+    def do_settings(self, arg):\n+        md = self.bear.get_metadata()\n+        section_params_dict = md.create_params_from_section(self.bear.section)\n+        for param in md.non_optional_params:\n+            self.message('%s = %r' % (param, section_params_dict[param]))\n+        for param in md.optional_params:\n+            self.message('%s = %r' % (param, section_params_dict[param] if\n+                                      param in section_params_dict else (","author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"reactions":[],"createdAt":"2018-07-11T20:58:44Z","lastEditedAt":null,"updatedAt":"2018-07-11T20:58:44Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTgzNzc4Ng==","url":"https://github.com/coala/coala/pull/5610#discussion_r201837786","bodyText":"with_self_onscope?","diffHunk":"@@ -489,6 +498,16 @@ def test_debug_run_with_no_return(self, runcall):\n         kwargs = {}\n         self.assertIsNone(my_bear.run_bear_from_section(args, kwargs))\n \n+    def test_debugger_settings_with_self_onscope(self):","author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"reactions":[],"createdAt":"2018-07-11T21:01:27Z","lastEditedAt":null,"updatedAt":"2018-07-11T21:01:27Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTgzNzk5Nw==","url":"https://github.com/coala/coala/pull/5610#discussion_r201837997","bodyText":"maybe put bear=None after *args?","diffHunk":"@@ -26,6 +26,10 @@\n \n class Debugger(pdb.Pdb):\n \n+    def __init__(self, bear=None, *args, **kwargs):","author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"reactions":[],"createdAt":"2018-07-11T21:02:10Z","lastEditedAt":null,"updatedAt":"2018-07-11T21:02:10Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMjU0MDU0MQ==","url":"https://github.com/coala/coala/pull/5610#discussion_r202540541","bodyText":"when there bear object is none i.e., debug_run(self.run, Debugger(bear=None), *args, **kwargs) then if use tries to use the settings commands it will give a message \"Name 'settings' is not defined.\" (self.error is actually print function so it will be like a error message)","diffHunk":"@@ -34,6 +38,21 @@ def do_quit(self, arg):\n     do_q = do_quit\n     do_exit = do_quit\n \n+    def do_settings(self, arg):\n+        if self.bear is not None:\n+            md = self.bear.get_metadata()\n+            section_params_dict = md.create_params_from_section(\n+                                  self.bear.section)\n+            for param in md.non_optional_params:\n+                self.message('%s = %r' % (param, section_params_dict[param]))\n+            for param in md.optional_params:\n+                self.message('%s = %r' % (param, section_params_dict[param] if\n+                                          param in section_params_dict else\n+                                          md.optional_params[param][2]))\n+            return 1\n+        else:\n+            self.error(\"Name 'settings' is not defined.\")","author":{"login":"RaiVaibhav","avatarUrl":"https://avatars3.githubusercontent.com/u/22278438?v=4","name":"Vaibhav Rai"},"reactions":[],"createdAt":"2018-07-15T11:38:13Z","lastEditedAt":"2018-07-15T11:39:33Z","updatedAt":"2018-07-15T11:39:33Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMjg4ODk5Mg==","url":"https://github.com/coala/coala/pull/5610#discussion_r202888992","bodyText":"Can't changed to debug_run(self.run, *args, Debugger(bear=self), **kwargs) for python3.4 during running pytest it will throw SyntaxError SyntaxError: only named arguments may follow *expression","diffHunk":"@@ -319,7 +338,7 @@ def run_bear_from_section(self, args, kwargs):\n                 self.name), str(err))\n             return\n         if self.debugger:\n-            return debug_run(self.run, Debugger(), *args, **kwargs)\n+            return debug_run(self.run, Debugger(bear=self), *args, **kwargs)","author":{"login":"RaiVaibhav","avatarUrl":"https://avatars3.githubusercontent.com/u/22278438?v=4","name":"Vaibhav Rai"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNjcxNzM3NA==","createdAt":"2018-07-19T21:00:26Z","content":"THUMBS_UP","user":{"login":"Makman2","name":"Mischa Krüger"}}],"createdAt":"2018-07-17T04:06:21Z","lastEditedAt":null,"updatedAt":"2018-07-17T04:06:21Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDExNjg5Mw==","url":"https://github.com/coala/coala/pull/5610#discussion_r204116893","bodyText":"invoke super.__init__ always as soon as possible.","diffHunk":"@@ -26,6 +26,10 @@\n \n class Debugger(pdb.Pdb):\n \n+    def __init__(self, *args, bear=None, **kwargs):\n+        self.bear = bear\n+        super(Debugger, self).__init__(*args, **kwargs)","author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"reactions":[],"createdAt":"2018-07-20T17:33:30Z","lastEditedAt":null,"updatedAt":"2018-07-20T17:33:30Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDExNzMxOA==","url":"https://github.com/coala/coala/pull/5610#discussion_r204117318","bodyText":"It's a good habit to not run into weird states of the object, since you don't know what might happen to self.bear in the meanwhile. C++ for example enforces you to initialize other supers first (a slightly different syntax though), or Java does the same, which is often a good decision.","diffHunk":"@@ -26,6 +26,10 @@\n \n class Debugger(pdb.Pdb):\n \n+    def __init__(self, *args, bear=None, **kwargs):\n+        self.bear = bear\n+        super(Debugger, self).__init__(*args, **kwargs)","author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"reactions":[],"createdAt":"2018-07-20T17:35:06Z","lastEditedAt":null,"updatedAt":"2018-07-20T17:35:06Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDEyMjc1Mw==","url":"https://github.com/coala/coala/pull/5610#discussion_r204122753","bodyText":"If not passing a bear is an erroneous state, raise an exception while instantiating the debugger. This is easiest and will always require you to initialize the debugger properly.","diffHunk":"@@ -34,6 +38,21 @@ def do_quit(self, arg):\n     do_q = do_quit\n     do_exit = do_quit\n \n+    def do_settings(self, arg):\n+        if self.bear is not None:\n+            md = self.bear.get_metadata()\n+            section_params_dict = md.create_params_from_section(\n+                                  self.bear.section)\n+            for param in md.non_optional_params:\n+                self.message('%s = %r' % (param, section_params_dict[param]))\n+            for param in md.optional_params:\n+                self.message('%s = %r' % (param, section_params_dict[param] if\n+                                          param in section_params_dict else\n+                                          md.optional_params[param][2]))\n+            return 1\n+        else:\n+            self.error(\"Name 'settings' is not defined.\")","author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNjc2NTg1MQ==","createdAt":"2018-07-20T18:20:57Z","content":"THUMBS_UP","user":{"login":"RaiVaibhav","name":"Vaibhav Rai"}}],"createdAt":"2018-07-20T17:53:54Z","lastEditedAt":null,"updatedAt":"2018-07-20T17:53:54Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDEyNDk1OQ==","url":"https://github.com/coala/coala/pull/5610#discussion_r204124959","bodyText":"without checking that the settings are actually printed this test is not very representative^^","diffHunk":"@@ -489,6 +498,18 @@ def test_debug_run_with_no_return(self, runcall):\n         kwargs = {}\n         self.assertIsNone(my_bear.run_bear_from_section(args, kwargs))\n \n+    def test_do_settings(self):\n+        section = Section('name', None)\n+        section.append(Setting('x', '85'))\n+        section.append(Setting('y', 'kbc3'))\n+        section.append(Setting('z', '75'))\n+        my_bear = TestOneBear(section, self.queue)\n+        dbg = Debugger(bear=my_bear)\n+        arg = ()\n+        self.assertEqual(dbg.do_settings(arg), 1)","author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"reactions":[],"createdAt":"2018-07-20T18:01:58Z","lastEditedAt":null,"updatedAt":"2018-07-20T18:01:58Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDEyOTcxMg==","url":"https://github.com/coala/coala/pull/5610#discussion_r204129712","bodyText":"@Makman2  I think thats why we created a ideal test DebugBearsTest ?, I will try with mock and make test more effective","diffHunk":"@@ -489,6 +498,18 @@ def test_debug_run_with_no_return(self, runcall):\n         kwargs = {}\n         self.assertIsNone(my_bear.run_bear_from_section(args, kwargs))\n \n+    def test_do_settings(self):\n+        section = Section('name', None)\n+        section.append(Setting('x', '85'))\n+        section.append(Setting('y', 'kbc3'))\n+        section.append(Setting('z', '75'))\n+        my_bear = TestOneBear(section, self.queue)\n+        dbg = Debugger(bear=my_bear)\n+        arg = ()\n+        self.assertEqual(dbg.do_settings(arg), 1)","author":{"login":"RaiVaibhav","avatarUrl":"https://avatars3.githubusercontent.com/u/22278438?v=4","name":"Vaibhav Rai"},"reactions":[],"createdAt":"2018-07-20T18:19:34Z","lastEditedAt":null,"updatedAt":"2018-07-20T18:19:34Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDQ5ODE2Nw==","url":"https://github.com/coala/coala/pull/5610#discussion_r204498167","bodyText":"since bear is actually not optional, you should remove the default value None","diffHunk":"@@ -26,6 +26,14 @@\n \n class Debugger(pdb.Pdb):\n \n+    def __init__(self, *args, bear=None, **kwargs):","author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"reactions":[],"createdAt":"2018-07-23T17:54:32Z","lastEditedAt":null,"updatedAt":"2018-07-23T17:54:32Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDQ5ODQ3Mw==","url":"https://github.com/coala/coala/pull/5610#discussion_r204498473","bodyText":"I would actually just say \"Bear missing\". That is short and easy to understand :P","diffHunk":"@@ -26,6 +26,14 @@\n \n class Debugger(pdb.Pdb):\n \n+    def __init__(self, *args, bear=None, **kwargs):\n+        if bear is None:\n+            raise ValueError('Invalid argument passed. Bear object '\n+                             'must passed as a argument for inspecting bear '\n+                             'settings in debugging environment.')","author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"reactions":[],"createdAt":"2018-07-23T17:55:27Z","lastEditedAt":null,"updatedAt":"2018-07-23T17:55:27Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDQ5ODU4Ng==","url":"https://github.com/coala/coala/pull/5610#discussion_r204498586","bodyText":"Maybe make even a type-check: if not isinstance(bear, Bear)","diffHunk":"@@ -26,6 +26,14 @@\n \n class Debugger(pdb.Pdb):\n \n+    def __init__(self, *args, bear=None, **kwargs):\n+        if bear is None:","author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"reactions":[],"createdAt":"2018-07-23T17:55:49Z","lastEditedAt":null,"updatedAt":"2018-07-23T17:55:49Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDg5OTUzNA==","url":"https://github.com/coala/coala/pull/5610#discussion_r204899534","bodyText":"bear should be before *args","diffHunk":"@@ -26,6 +26,12 @@\n \n class Debugger(pdb.Pdb):\n \n+    def __init__(self, *args, bear, **kwargs):","author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"reactions":[],"createdAt":"2018-07-24T20:27:23Z","lastEditedAt":null,"updatedAt":"2018-07-24T20:27:23Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDg5OTY0MQ==","url":"https://github.com/coala/coala/pull/5610#discussion_r204899641","bodyText":"hm now it's not really missing, but it's not a bear ^^","diffHunk":"@@ -26,6 +26,12 @@\n \n class Debugger(pdb.Pdb):\n \n+    def __init__(self, *args, bear, **kwargs):\n+        if not isinstance(bear, Bear):\n+            raise ValueError('Bear missing.')","author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"reactions":[],"createdAt":"2018-07-24T20:27:49Z","lastEditedAt":null,"updatedAt":"2018-07-24T20:27:49Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQxMDE0MDE1MQ==","url":"https://github.com/coala/coala/pull/5610#issuecomment-410140151","bodyText":"Related to #1101","diffHunk":null,"author":{"login":"RaiVaibhav","avatarUrl":"https://avatars3.githubusercontent.com/u/22278438?v=4","name":"Vaibhav Rai"},"reactions":[],"createdAt":"2018-08-03T04:20:38Z","lastEditedAt":null,"updatedAt":"2018-08-03T04:20:38Z"}]}}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1531111923000,"issue":{"htmlUrl":"https://github.com/coala/coala/pull/5611","number":5611,"title":"Newcomers_Guide.rst: display message as note block","body":"For short term contributors: we understand that getting your commits well\ndefined like we require is a hard task and takes some learning. If you\nlook to help without wanting to contribute long term there's no need\nfor you to learn this. Just drop us a message and we'll take care of brushing\nup your stuff for merge!\nChecklist\n\n I read the commit guidelines and I've followed\nthem.\n I ran coala over my code locally. (All commits have to pass\nindividually. It is not sufficient to have \"fixup commits\" on your PR,\nour bot will still report the issues for the previous commit.) You will\nlikely receive a lot of bot comments and build failures if coala does not\npass on every single commit!\n\nAfter you submit your pull request, DO NOT click the 'Update Branch' button.\nWhen asked for a rebase, consult coala.io/rebase\ninstead.\nPlease consider helping us by reviewing other peoples pull requests as well:\n\npick up any PR at https://coala.io/review\nreview it (check https://coala.io/reviewing for more info)\nif you are sure that it needs work, use corobo mark wip <URL> to get it out\nof the review queue.\n\nThe more you review, the more your score will grow at coala.io and we will\nreview your PRs faster!","comments":3,"createdAt":"2018-07-08T15:58:18Z","updatedAt":"2018-07-09T04:52:03Z","closedAt":"2018-07-09T03:28:37Z","state":"closed","user":{"login":null,"avatarUrl":null},"owner":{"login":null,"avatarUrl":null},"labels":[{"name":"process/pending review","color":"bfe5bf"},{"name":"size/XS","color":"00DE0F"}],"pullRequest":{"htmlUrl":"https://github.com/coala/coala/pull/5611","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQwMzM1OTI3OQ==","url":"https://github.com/coala/coala/pull/5611#issuecomment-403359279","bodyText":"@lixun509 , please do not close PRs or delete your repository.\nAsk for help if you encounter a problem.\nRead https://coala.io/newcomer and https://coala.io/git very carefully.","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-07-09T04:52:02Z","lastEditedAt":null,"updatedAt":"2018-07-09T04:52:02Z"}]}}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1531121661000,"issue":{"htmlUrl":"https://github.com/coala/coala/pull/5612","number":5612,"title":"Useful_Links.rst: Change Basic rST link","body":"The new link points to working reST documentation page.\nCloses #5604\n\nFor short term contributors: we understand that getting your commits well\ndefined like we require is a hard task and takes some learning. If you\nlook to help without wanting to contribute long term there's no need\nfor you to learn this. Just drop us a message and we'll take care of brushing\nup your stuff for merge!\nChecklist\n\n I read the commit guidelines and I've followed\nthem.\n I ran coala over my code locally. (All commits have to pass\nindividually. It is not sufficient to have \"fixup commits\" on your PR,\nour bot will still report the issues for the previous commit.) You will\nlikely receive a lot of bot comments and build failures if coala does not\npass on every single commit!\n\nAfter you submit your pull request, DO NOT click the 'Update Branch' button.\nWhen asked for a rebase, consult coala.io/rebase\ninstead.\nPlease consider helping us by reviewing other peoples pull requests as well:\n\npick up any PR at https://coala.io/review\nreview it (check https://coala.io/reviewing for more info)\nif you are sure that it needs work, use corobo mark wip <URL> to get it out\nof the review queue.\n\nThe more you review, the more your score will grow at coala.io and we will\nreview your PRs faster!","comments":7,"createdAt":"2018-07-08T16:41:10Z","updatedAt":"2018-07-09T07:34:21Z","closedAt":"2018-07-09T07:34:08Z","state":"merged","user":{"login":"m3rc3n4ry","avatarUrl":"https://avatars2.githubusercontent.com/u/29359259?v=4"},"owner":{"login":"m3rc3n4ry","avatarUrl":"https://avatars2.githubusercontent.com/u/29359259?v=4"},"assignee":{"login":"m3rc3n4ry","avatarUrl":"https://avatars2.githubusercontent.com/u/29359259?v=4"},"labels":[{"name":"area/documentation","color":"bfe5bf"},{"name":"difficulty/newcomer","color":"65C8FF"},{"name":"size/XS","color":"00DE0F"}],"pullRequest":{"htmlUrl":"https://github.com/coala/coala/pull/5612","comments":[]}}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1531738189000,"issue":{"htmlUrl":"https://github.com/coala/coala/pull/5616","number":5616,"title":".travis.yml: Use bears master","body":"Related to coala/meta#123\nAlso removes the GitCommitBear hack around\ncoala/coala-bears#1037","comments":7,"createdAt":"2018-07-09T12:25:05Z","updatedAt":"2018-07-16T10:49:49Z","closedAt":"2018-07-16T10:45:20Z","state":"merged","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"size/XS","color":"00DE0F"}],"pullRequest":{"htmlUrl":"https://github.com/coala/coala/pull/5616","comments":[{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTA3MDIyMQ==","url":"https://github.com/coala/coala/pull/5616#discussion_r201070221","bodyText":"Btw, I still quite don't understand about this. Doesn't pip install coala-bears[alldeps] --pre -U already install the master branch of coala-bears ?","diffHunk":"@@ -109,12 +110,8 @@ script:\n   - py.test\n   - python setup.py bdist_wheel\n   - pip install ./dist/coala-*.whl\n-  - pip install coala-bears[alldeps] --pre -U\n-  # https://github.com/coala/coala-bears/issues/1037\n-  - >\n-    if [[ \"$TRAVIS_PULL_REQUEST\" != \"false\" ]]; then\n-      sed -i.bak '/bears = GitCommitBear/d' .coafile\n-    fi\n+  - curl -fsSL -o coala-bears.zip $BEARS_ZIP_URL/master\n+  - pip install coala-bears.zip[alldeps] --pre -U","author":{"login":"refeed","avatarUrl":"https://avatars1.githubusercontent.com/u/20320125?v=4","name":"Rafid Aslam"},"reactions":[],"createdAt":"2018-07-09T16:41:26Z","lastEditedAt":null,"updatedAt":"2018-07-09T16:41:26Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTA3NzE3NQ==","url":"https://github.com/coala/coala/pull/5616#discussion_r201077175","bodyText":"No. It installs the pre-release in pypi, from January 2018.\nWe still are not ready to do pre-releases yet, with coala-utils and dependency-management still needing more work and need to be released first.","diffHunk":"@@ -109,12 +110,8 @@ script:\n   - py.test\n   - python setup.py bdist_wheel\n   - pip install ./dist/coala-*.whl\n-  - pip install coala-bears[alldeps] --pre -U\n-  # https://github.com/coala/coala-bears/issues/1037\n-  - >\n-    if [[ \"$TRAVIS_PULL_REQUEST\" != \"false\" ]]; then\n-      sed -i.bak '/bears = GitCommitBear/d' .coafile\n-    fi\n+  - curl -fsSL -o coala-bears.zip $BEARS_ZIP_URL/master\n+  - pip install coala-bears.zip[alldeps] --pre -U","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNjE5MDA3Ng==","createdAt":"2018-07-09T17:06:37Z","content":"THUMBS_UP","user":{"login":"refeed","name":"Rafid Aslam"}}],"createdAt":"2018-07-09T17:02:54Z","lastEditedAt":null,"updatedAt":"2018-07-09T17:02:54Z"}]}}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1531149386000,"issue":{"htmlUrl":"https://github.com/coala/coala/pull/5617","number":5617,"title":"travis.yml: Remove GitHub merge commit workaround","body":"For short term contributors: we understand that getting your commits well\ndefined like we require is a hard task and takes some learning. If you\nlook to help without wanting to contribute long term there's no need\nfor you to learn this. Just drop us a message and we'll take care of brushing\nup your stuff for merge!\nChecklist\n\n I read the commit guidelines and I've followed\nthem.\n I ran coala over my code locally. (All commits have to pass\nindividually. It is not sufficient to have \"fixup commits\" on your PR,\nour bot will still report the issues for the previous commit.) You will\nlikely receive a lot of bot comments and build failures if coala does not\npass on every single commit!\n\nAfter you submit your pull request, DO NOT click the 'Update Branch' button.\nWhen asked for a rebase, consult coala.io/rebase\ninstead.\nPlease consider helping us by reviewing other peoples pull requests as well:\n\npick up any PR at https://coala.io/review\nreview it (check https://coala.io/reviewing for more info)\nif you are sure that it needs work, use corobo mark wip <URL> to get it out\nof the review queue.\n\nThe more you review, the more your score will grow at coala.io and we will\nreview your PRs faster!","comments":2,"createdAt":"2018-07-09T13:53:40Z","updatedAt":"2018-07-09T15:16:26Z","closedAt":"2018-07-09T15:16:26Z","state":"closed","user":{"login":"kriti21","avatarUrl":"https://avatars3.githubusercontent.com/u/19872082?v=4"},"owner":{"login":"kriti21","avatarUrl":"https://avatars3.githubusercontent.com/u/19872082?v=4"},"labels":[{"name":"process/pending review","color":"bfe5bf"},{"name":"size/XS","color":"00DE0F"}],"pullRequest":{"htmlUrl":"https://github.com/coala/coala/pull/5617","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQwMzUwMTkzOQ==","url":"https://github.com/coala/coala/pull/5617#issuecomment-403501939","bodyText":"@jayvdb Please review","diffHunk":null,"author":{"login":"kriti21","avatarUrl":"https://avatars3.githubusercontent.com/u/19872082?v=4","name":"Kriti Rohilla"},"createdAt":"2018-07-09T14:38:42Z","lastEditedAt":null,"updatedAt":"2018-07-09T14:38:42Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwMzUxNTA5NQ==","url":"https://github.com/coala/coala/pull/5617#issuecomment-403515095","bodyText":"Duplicate of #5616","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-07-09T15:16:26Z","lastEditedAt":null,"updatedAt":"2018-07-09T15:16:26Z"}]}}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1531199399000,"issue":{"htmlUrl":"https://github.com/coala/coala/pull/5618","number":5618,"title":"Replace memoized_property with cached_property","body":"For short term contributors: we understand that getting your commits well\ndefined like we require is a hard task and takes some learning. If you\nlook to help without wanting to contribute long term there's no need\nfor you to learn this. Just drop us a message and we'll take care of brushing\nup your stuff for merge!\nChecklist\n\n I read the commit guidelines and I've followed\nthem.\n I ran coala over my code locally. (All commits have to pass\nindividually. It is not sufficient to have \"fixup commits\" on your PR,\nour bot will still report the issues for the previous commit.) You will\nlikely receive a lot of bot comments and build failures if coala does not\npass on every single commit!\n\nAfter you submit your pull request, DO NOT click the 'Update Branch' button.\nWhen asked for a rebase, consult coala.io/rebase\ninstead.\nPlease consider helping us by reviewing other peoples pull requests as well:\n\npick up any PR at https://coala.io/review\nreview it (check https://coala.io/reviewing for more info)\nif you are sure that it needs work, use corobo mark wip <URL> to get it out\nof the review queue.\n\nThe more you review, the more your score will grow at coala.io and we will\nreview your PRs faster!","comments":2,"createdAt":"2018-07-09T14:41:44Z","updatedAt":"2018-07-10T05:09:59Z","closedAt":"2018-07-09T23:04:55Z","state":"merged","user":{"login":"palash25","avatarUrl":"https://avatars0.githubusercontent.com/u/21367710?v=4"},"owner":{"login":"palash25","avatarUrl":"https://avatars0.githubusercontent.com/u/21367710?v=4"},"labels":[],"pullRequest":{"htmlUrl":"https://github.com/coala/coala/pull/5618","comments":[]}}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1532688853000,"issue":{"htmlUrl":"https://github.com/coala/coala/pull/5620","number":5620,"title":"Debug_bears.rst: Add Debugger Settings docs","body":"Related to #1101","comments":14,"createdAt":"2018-07-10T12:01:43Z","updatedAt":"2018-07-27T10:54:13Z","closedAt":"2018-07-27T10:54:06Z","state":"merged","user":{"login":"RaiVaibhav","avatarUrl":"https://avatars3.githubusercontent.com/u/22278438?v=4"},"owner":{"login":"RaiVaibhav","avatarUrl":"https://avatars3.githubusercontent.com/u/22278438?v=4"},"labels":[{"name":"size/XS","color":"00DE0F"},{"name":"status/blocked","color":"e11d21"},{"name":"status/ci-approved","color":"ededed"}],"pullRequest":{"htmlUrl":"https://github.com/coala/coala/pull/5620","comments":[{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTQ3Mzk2NA==","url":"https://github.com/coala/coala/pull/5620#discussion_r201473964","bodyText":"I would rather call it \"debugger features\" or similar, and then you can write up in the future all coming tweaks to enhance the debugging experience ;)","diffHunk":"@@ -122,3 +122,74 @@ Or to debug all bears specified by ``bears`` setting:\n     bears = PEP8Bear,MypyBear\n     files = <filename>\n     debug_bears = True\n+\n+Inspect Bear settings","author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"reactions":[],"createdAt":"2018-07-10T19:58:41Z","lastEditedAt":null,"updatedAt":"2018-07-10T19:58:41Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTQ3NDE1MA==","url":"https://github.com/coala/coala/pull/5620#discussion_r201474150","bodyText":"That sounds like that settings is common in pdb and has been included now because it's not default.\nYou should emphasize that this is a new command people can use to see quickly the settings passed.","diffHunk":"@@ -122,3 +122,74 @@ Or to debug all bears specified by ``bears`` setting:\n     bears = PEP8Bear,MypyBear\n     files = <filename>\n     debug_bears = True\n+\n+Inspect Bear settings\n+---------------------\n+\n+External pdb command ``settings`` has been included to inspect the bear","author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"reactions":[],"createdAt":"2018-07-10T19:59:21Z","lastEditedAt":null,"updatedAt":"2018-07-10T19:59:21Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTQ3NDM3Nw==","url":"https://github.com/coala/coala/pull/5620#discussion_r201474377","bodyText":"--> displays (no apostrophe)","diffHunk":"@@ -122,3 +122,74 @@ Or to debug all bears specified by ``bears`` setting:\n     bears = PEP8Bear,MypyBear\n     files = <filename>\n     debug_bears = True\n+\n+Inspect Bear settings\n+---------------------\n+\n+External pdb command ``settings`` has been included to inspect the bear\n+settings in the debugging environment.(``settings`` command display's the","author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"reactions":[],"createdAt":"2018-07-10T20:00:09Z","lastEditedAt":null,"updatedAt":"2018-07-10T20:00:09Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTQ3NDUyOQ==","url":"https://github.com/coala/coala/pull/5620#discussion_r201474529","bodyText":"The text in the braces shouldn't be in braces, it's essential and not a side note.","diffHunk":"@@ -122,3 +122,74 @@ Or to debug all bears specified by ``bears`` setting:\n     bears = PEP8Bear,MypyBear\n     files = <filename>\n     debug_bears = True\n+\n+Inspect Bear settings\n+---------------------\n+\n+External pdb command ``settings`` has been included to inspect the bear\n+settings in the debugging environment.(``settings`` command display's the\n+updated setting of a Bear)","author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"reactions":[],"createdAt":"2018-07-10T20:00:42Z","lastEditedAt":null,"updatedAt":"2018-07-10T20:00:42Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTQ3NDk5OA==","url":"https://github.com/coala/coala/pull/5620#discussion_r201474998","bodyText":"-> Below","diffHunk":"@@ -122,3 +122,74 @@ Or to debug all bears specified by ``bears`` setting:\n     bears = PEP8Bear,MypyBear\n     files = <filename>\n     debug_bears = True\n+\n+Inspect Bear settings\n+---------------------\n+\n+External pdb command ``settings`` has been included to inspect the bear\n+settings in the debugging environment.(``settings`` command display's the\n+updated setting of a Bear)\n+\n+Bellow is the code of simple CharCheckBear which check whether the","author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"reactions":[],"createdAt":"2018-07-10T20:02:14Z","lastEditedAt":null,"updatedAt":"2018-07-10T20:02:14Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTQ3NTIzNA==","url":"https://github.com/coala/coala/pull/5620#discussion_r201475234","bodyText":"missing single backtick after message","diffHunk":"@@ -122,3 +122,74 @@ Or to debug all bears specified by ``bears`` setting:\n     bears = PEP8Bear,MypyBear\n     files = <filename>\n     debug_bears = True\n+\n+Inspect Bear settings\n+---------------------\n+\n+External pdb command ``settings`` has been included to inspect the bear\n+settings in the debugging environment.(``settings`` command display's the\n+updated setting of a Bear)\n+\n+Bellow is the code of simple CharCheckBear which check whether the\n+passed message contains character more than 79.\n+\n+.. code:: python\n+\n+    import logging\n+\n+    from coalib.bears.LocalBear import LocalBear\n+\n+\n+    class CharCheckBear(LocalBear):\n+        def run(self, filename, file, message: str, line_length: int = 79):\n+            \"\"\"\n+            Detect if a passed string contain characters more than 79.\n+\n+            :param message:\n+                enter the message.\n+            \"\"\"\n+            if len(message)<=79:\n+                yield self.new_result(message=message, file=filename)\n+            else:\n+                yield self.new_result(message='message contains character '\n+                                              'more than 79', file=filename)\n+\n+In the above example ``line_length`` is optional and ``message` is non optional","author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"reactions":[],"createdAt":"2018-07-10T20:03:06Z","lastEditedAt":null,"updatedAt":"2018-07-10T20:03:06Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTQ3NTQ2NQ==","url":"https://github.com/coala/coala/pull/5620#discussion_r201475465","bodyText":"Wouldn't put coala into backticks, it's rather a name than a code term here","diffHunk":"@@ -122,3 +122,74 @@ Or to debug all bears specified by ``bears`` setting:\n     bears = PEP8Bear,MypyBear\n     files = <filename>\n     debug_bears = True\n+\n+Inspect Bear settings\n+---------------------\n+\n+External pdb command ``settings`` has been included to inspect the bear\n+settings in the debugging environment.(``settings`` command display's the\n+updated setting of a Bear)\n+\n+Bellow is the code of simple CharCheckBear which check whether the\n+passed message contains character more than 79.\n+\n+.. code:: python\n+\n+    import logging\n+\n+    from coalib.bears.LocalBear import LocalBear\n+\n+\n+    class CharCheckBear(LocalBear):\n+        def run(self, filename, file, message: str, line_length: int = 79):\n+            \"\"\"\n+            Detect if a passed string contain characters more than 79.\n+\n+            :param message:\n+                enter the message.\n+            \"\"\"\n+            if len(message)<=79:\n+                yield self.new_result(message=message, file=filename)\n+            else:\n+                yield self.new_result(message='message contains character '\n+                                              'more than 79', file=filename)\n+\n+In the above example ``line_length`` is optional and ``message` is non optional\n+setting of a CharCheckBear. After invoking debugger on CharCheckBear ``coala``","author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"reactions":[],"createdAt":"2018-07-10T20:03:52Z","lastEditedAt":null,"updatedAt":"2018-07-10T20:03:52Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTQ3NTczOQ==","url":"https://github.com/coala/coala/pull/5620#discussion_r201475739","bodyText":"line_length is not used\nThis example doesn't round up so nicely, SpaceConsistencyBear is similar, and what's especially weird is that you lint on message, not on file ;) Please provide a better example 👍","diffHunk":"@@ -122,3 +122,74 @@ Or to debug all bears specified by ``bears`` setting:\n     bears = PEP8Bear,MypyBear\n     files = <filename>\n     debug_bears = True\n+\n+Inspect Bear settings\n+---------------------\n+\n+External pdb command ``settings`` has been included to inspect the bear\n+settings in the debugging environment.(``settings`` command display's the\n+updated setting of a Bear)\n+\n+Bellow is the code of simple CharCheckBear which check whether the\n+passed message contains character more than 79.\n+\n+.. code:: python\n+\n+    import logging\n+\n+    from coalib.bears.LocalBear import LocalBear\n+\n+\n+    class CharCheckBear(LocalBear):\n+        def run(self, filename, file, message: str, line_length: int = 79):\n+            \"\"\"\n+            Detect if a passed string contain characters more than 79.\n+\n+            :param message:\n+                enter the message.\n+            \"\"\"\n+            if len(message)<=79:\n+                yield self.new_result(message=message, file=filename)\n+            else:\n+                yield self.new_result(message='message contains character '\n+                                              'more than 79', file=filename)","author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNjI5NTAxNA==","createdAt":"2018-07-11T10:50:11Z","content":"LAUGH","user":{"login":"RaiVaibhav","name":"Vaibhav Rai"}},{"id":"MDg6UmVhY3Rpb24yNjI5NTAxOQ==","createdAt":"2018-07-11T10:50:15Z","content":"THUMBS_UP","user":{"login":"RaiVaibhav","name":"Vaibhav Rai"}}],"createdAt":"2018-07-10T20:04:49Z","lastEditedAt":null,"updatedAt":"2018-07-10T20:04:49Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTQ3NjIyMQ==","url":"https://github.com/coala/coala/pull/5620#discussion_r201476221","bodyText":"hmmm just recognized, \"Voldemort\" is maybe not good path component here ;) but we can change that afterwards, since untouched parts of the file has the same paths.","diffHunk":"@@ -122,3 +122,74 @@ Or to debug all bears specified by ``bears`` setting:\n     bears = PEP8Bear,MypyBear\n     files = <filename>\n     debug_bears = True\n+\n+Inspect Bear settings\n+---------------------\n+\n+External pdb command ``settings`` has been included to inspect the bear\n+settings in the debugging environment.(``settings`` command display's the\n+updated setting of a Bear)\n+\n+Bellow is the code of simple CharCheckBear which check whether the\n+passed message contains character more than 79.\n+\n+.. code:: python\n+\n+    import logging\n+\n+    from coalib.bears.LocalBear import LocalBear\n+\n+\n+    class CharCheckBear(LocalBear):\n+        def run(self, filename, file, message: str, line_length: int = 79):\n+            \"\"\"\n+            Detect if a passed string contain characters more than 79.\n+\n+            :param message:\n+                enter the message.\n+            \"\"\"\n+            if len(message)<=79:\n+                yield self.new_result(message=message, file=filename)\n+            else:\n+                yield self.new_result(message='message contains character '\n+                                              'more than 79', file=filename)\n+\n+In the above example ``line_length`` is optional and ``message` is non optional\n+setting of a CharCheckBear. After invoking debugger on CharCheckBear ``coala``\n+will first ask the value of all unpassed non optional setting i.e, ``message``\n+in our case and after debugger will get invoke on ``run()`` method of\n+CharCheckBear, pdb ``settings`` command will be used to display the updated\n+optional and non optional settings of a Bear in debugging environment i.e.,\n+\n+::\n+\n+    Please enter a value for the setting \"message\" (enter the message.) needed\n+    by CharCheckBear for section \"cli\":\n+    Hello World\n+    [DEBUG][17:25:09] Platform Linux -- Python 3.6.5, coalib\n+    0.12.0.dev99999999999999\n+    Executing section cli...\n+    [DEBUG][17:25:09] Files that will be checked:\n+    /home/Voldemort/test/mytest.py\n+    [DEBUG][17:25:09] coala is run only on changed files, bears' log messages\n+    from previous runs may not appear. You may use the `--flush-cache` flag to\n+    see them.\n+    [DEBUG][17:25:09] Running bear CharCheckBear...\n+    > /home/Voldemort/coala-bears/bears/general/CharCheckBear.py(14)run()","author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"reactions":[],"createdAt":"2018-07-10T20:06:36Z","lastEditedAt":null,"updatedAt":"2018-07-10T20:06:36Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTQ3NjQ5MA==","url":"https://github.com/coala/coala/pull/5620#discussion_r201476490","bodyText":"I would execute q to quit the debugger and wouldn't print the result here, not relevant","diffHunk":"@@ -122,3 +122,74 @@ Or to debug all bears specified by ``bears`` setting:\n     bears = PEP8Bear,MypyBear\n     files = <filename>\n     debug_bears = True\n+\n+Inspect Bear settings\n+---------------------\n+\n+External pdb command ``settings`` has been included to inspect the bear\n+settings in the debugging environment.(``settings`` command display's the\n+updated setting of a Bear)\n+\n+Bellow is the code of simple CharCheckBear which check whether the\n+passed message contains character more than 79.\n+\n+.. code:: python\n+\n+    import logging\n+\n+    from coalib.bears.LocalBear import LocalBear\n+\n+\n+    class CharCheckBear(LocalBear):\n+        def run(self, filename, file, message: str, line_length: int = 79):\n+            \"\"\"\n+            Detect if a passed string contain characters more than 79.\n+\n+            :param message:\n+                enter the message.\n+            \"\"\"\n+            if len(message)<=79:\n+                yield self.new_result(message=message, file=filename)\n+            else:\n+                yield self.new_result(message='message contains character '\n+                                              'more than 79', file=filename)\n+\n+In the above example ``line_length`` is optional and ``message` is non optional\n+setting of a CharCheckBear. After invoking debugger on CharCheckBear ``coala``\n+will first ask the value of all unpassed non optional setting i.e, ``message``\n+in our case and after debugger will get invoke on ``run()`` method of\n+CharCheckBear, pdb ``settings`` command will be used to display the updated\n+optional and non optional settings of a Bear in debugging environment i.e.,\n+\n+::\n+\n+    Please enter a value for the setting \"message\" (enter the message.) needed\n+    by CharCheckBear for section \"cli\":\n+    Hello World\n+    [DEBUG][17:25:09] Platform Linux -- Python 3.6.5, coalib\n+    0.12.0.dev99999999999999\n+    Executing section cli...\n+    [DEBUG][17:25:09] Files that will be checked:\n+    /home/Voldemort/test/mytest.py\n+    [DEBUG][17:25:09] coala is run only on changed files, bears' log messages\n+    from previous runs may not appear. You may use the `--flush-cache` flag to\n+    see them.\n+    [DEBUG][17:25:09] Running bear CharCheckBear...\n+    > /home/Voldemort/coala-bears/bears/general/CharCheckBear.py(14)run()\n+    -> if len(message)<=79:\n+    (Pdb) settings\n+    line_length = 79\n+    message = 'Hello World'\n+    (Pdb) c\n+    --Return--\n+    > /home/Voldemort/coala-bears/bears/general/CharCheckBear.py(14)run()->None\n+    -> if len(message)<=79:\n+    (Pdb) c\n+\n+    mytest.py\n+    **** HelloWorldBear [Section: cli | Severity: NORMAL] ****\n+    !    ! Hello World\n+    [    ] *0. Do (N)othing\n+    [    ]  1. (O)pen file\n+    [    ]  2. Add (I)gnore comment\n+    [    ] Enter number (Ctrl-D to exit):","author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"reactions":[],"createdAt":"2018-07-10T20:07:34Z","lastEditedAt":null,"updatedAt":"2018-07-10T20:07:34Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDEyNzA1MQ==","url":"https://github.com/coala/coala/pull/5620#discussion_r204127051","bodyText":"Use title case for headings -> Debugger Features\nSame for all other titles below (like Inspect Bear Settings). You can read about title case here","diffHunk":"@@ -122,3 +122,88 @@ Or to debug all bears specified by ``bears`` setting:\n     bears = PEP8Bear,MypyBear\n     files = <filename>\n     debug_bears = True\n+\n+Debugger features","author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"reactions":[],"createdAt":"2018-07-20T18:09:37Z","lastEditedAt":null,"updatedAt":"2018-07-20T18:09:37Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDEyODU4Nw==","url":"https://github.com/coala/coala/pull/5620#discussion_r204128587","bodyText":"-->\nA new command settings is included in [...] Bear settings in the debugging environment. It displays all passed settings of a Bear and their values so you can quickly inspect them.","diffHunk":"@@ -122,3 +122,88 @@ Or to debug all bears specified by ``bears`` setting:\n     bears = PEP8Bear,MypyBear\n     files = <filename>\n     debug_bears = True\n+\n+Debugger features\n+-----------------\n+\n+Inspect Bear settings\n+^^^^^^^^^^^^^^^^^^^^^\n+\n+New command ``settings`` included in coala's Debugging Interface to inspect\n+Bear settings in debugging environment, ``settings`` command displays the\n+updated setting of a Bear i.e., user can quickly inspect the passed settings.","author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"reactions":[],"createdAt":"2018-07-20T18:15:16Z","lastEditedAt":null,"updatedAt":"2018-07-20T18:15:16Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDEyODkyMA==","url":"https://github.com/coala/coala/pull/5620#discussion_r204128920","bodyText":"Below is an example bear which detects if a file [...]","diffHunk":"@@ -122,3 +122,88 @@ Or to debug all bears specified by ``bears`` setting:\n     bears = PEP8Bear,MypyBear\n     files = <filename>\n     debug_bears = True\n+\n+Debugger features\n+-----------------\n+\n+Inspect Bear settings\n+^^^^^^^^^^^^^^^^^^^^^\n+\n+New command ``settings`` included in coala's Debugging Interface to inspect\n+Bear settings in debugging environment, ``settings`` command displays the\n+updated setting of a Bear i.e., user can quickly inspect the passed settings.\n+\n+Below is the code of simple TooManyLinesBear which detects if a file has more","author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"reactions":[],"createdAt":"2018-07-20T18:16:37Z","lastEditedAt":null,"updatedAt":"2018-07-20T18:16:37Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDEyOTEyMg==","url":"https://github.com/coala/coala/pull/5620#discussion_r204129122","bodyText":"redundant braces around len(file)","diffHunk":"@@ -122,3 +122,88 @@ Or to debug all bears specified by ``bears`` setting:\n     bears = PEP8Bear,MypyBear\n     files = <filename>\n     debug_bears = True\n+\n+Debugger features\n+-----------------\n+\n+Inspect Bear settings\n+^^^^^^^^^^^^^^^^^^^^^\n+\n+New command ``settings`` included in coala's Debugging Interface to inspect\n+Bear settings in debugging environment, ``settings`` command displays the\n+updated setting of a Bear i.e., user can quickly inspect the passed settings.\n+\n+Below is the code of simple TooManyLinesBear which detects if a file has more\n+than ``max_number_of_lines`` lines.\n+\n+.. code:: python\n+\n+    from coalib.results.Result import Result\n+    from coalib.bears.LocalBear import LocalBear\n+\n+\n+    class TooManyLinesBear(LocalBear):\n+\n+        def run(self, filename, file, max_number_of_lines: int):\n+            \"\"\"\n+            Detects if a file has more than ``max_number_of_lines`` lines.\n+\n+            :param max_number_of_lines:\n+                Maximum number of lines to be allowed for a file.\n+            \"\"\"\n+\n+            if len(file) > max_number_of_lines:\n+                yield Result.from_values(\n+                    origin=self,\n+                    message=('This file has {} lines, while {} lines'\n+                             ' are allowed'\n+                             .format((len(file)), max_number_of_lines)),","author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"reactions":[],"createdAt":"2018-07-20T18:17:24Z","lastEditedAt":null,"updatedAt":"2018-07-20T18:17:24Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDEyOTI2Mw==","url":"https://github.com/coala/coala/pull/5620#discussion_r204129263","bodyText":"is a non-optional setting of a TooManyLineBear.","diffHunk":"@@ -122,3 +122,88 @@ Or to debug all bears specified by ``bears`` setting:\n     bears = PEP8Bear,MypyBear\n     files = <filename>\n     debug_bears = True\n+\n+Debugger features\n+-----------------\n+\n+Inspect Bear settings\n+^^^^^^^^^^^^^^^^^^^^^\n+\n+New command ``settings`` included in coala's Debugging Interface to inspect\n+Bear settings in debugging environment, ``settings`` command displays the\n+updated setting of a Bear i.e., user can quickly inspect the passed settings.\n+\n+Below is the code of simple TooManyLinesBear which detects if a file has more\n+than ``max_number_of_lines`` lines.\n+\n+.. code:: python\n+\n+    from coalib.results.Result import Result\n+    from coalib.bears.LocalBear import LocalBear\n+\n+\n+    class TooManyLinesBear(LocalBear):\n+\n+        def run(self, filename, file, max_number_of_lines: int):\n+            \"\"\"\n+            Detects if a file has more than ``max_number_of_lines`` lines.\n+\n+            :param max_number_of_lines:\n+                Maximum number of lines to be allowed for a file.\n+            \"\"\"\n+\n+            if len(file) > max_number_of_lines:\n+                yield Result.from_values(\n+                    origin=self,\n+                    message=('This file has {} lines, while {} lines'\n+                             ' are allowed'\n+                             .format((len(file)), max_number_of_lines)),\n+                    file=filename)\n+\n+In the above example ``max_number_of_lines`` is non optional setting of a","author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"reactions":[],"createdAt":"2018-07-20T18:17:56Z","lastEditedAt":null,"updatedAt":"2018-07-20T18:17:56Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDEyOTYwMg==","url":"https://github.com/coala/coala/pull/5620#discussion_r204129602","bodyText":"invoking the debugger","diffHunk":"@@ -122,3 +122,88 @@ Or to debug all bears specified by ``bears`` setting:\n     bears = PEP8Bear,MypyBear\n     files = <filename>\n     debug_bears = True\n+\n+Debugger features\n+-----------------\n+\n+Inspect Bear settings\n+^^^^^^^^^^^^^^^^^^^^^\n+\n+New command ``settings`` included in coala's Debugging Interface to inspect\n+Bear settings in debugging environment, ``settings`` command displays the\n+updated setting of a Bear i.e., user can quickly inspect the passed settings.\n+\n+Below is the code of simple TooManyLinesBear which detects if a file has more\n+than ``max_number_of_lines`` lines.\n+\n+.. code:: python\n+\n+    from coalib.results.Result import Result\n+    from coalib.bears.LocalBear import LocalBear\n+\n+\n+    class TooManyLinesBear(LocalBear):\n+\n+        def run(self, filename, file, max_number_of_lines: int):\n+            \"\"\"\n+            Detects if a file has more than ``max_number_of_lines`` lines.\n+\n+            :param max_number_of_lines:\n+                Maximum number of lines to be allowed for a file.\n+            \"\"\"\n+\n+            if len(file) > max_number_of_lines:\n+                yield Result.from_values(\n+                    origin=self,\n+                    message=('This file has {} lines, while {} lines'\n+                             ' are allowed'\n+                             .format((len(file)), max_number_of_lines)),\n+                    file=filename)\n+\n+In the above example ``max_number_of_lines`` is non optional setting of a\n+TooManyLinesBear. After invoking debugger on TooManyLinesBear coala will first","author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"reactions":[],"createdAt":"2018-07-20T18:19:12Z","lastEditedAt":null,"updatedAt":"2018-07-20T18:19:12Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDEzMDA1Mw==","url":"https://github.com/coala/coala/pull/5620#discussion_r204130053","bodyText":"I'm not sure if it's relevant to explain again the whole coala process.","diffHunk":"@@ -122,3 +122,88 @@ Or to debug all bears specified by ``bears`` setting:\n     bears = PEP8Bear,MypyBear\n     files = <filename>\n     debug_bears = True\n+\n+Debugger features\n+-----------------\n+\n+Inspect Bear settings\n+^^^^^^^^^^^^^^^^^^^^^\n+\n+New command ``settings`` included in coala's Debugging Interface to inspect\n+Bear settings in debugging environment, ``settings`` command displays the\n+updated setting of a Bear i.e., user can quickly inspect the passed settings.\n+\n+Below is the code of simple TooManyLinesBear which detects if a file has more\n+than ``max_number_of_lines`` lines.\n+\n+.. code:: python\n+\n+    from coalib.results.Result import Result\n+    from coalib.bears.LocalBear import LocalBear\n+\n+\n+    class TooManyLinesBear(LocalBear):\n+\n+        def run(self, filename, file, max_number_of_lines: int):\n+            \"\"\"\n+            Detects if a file has more than ``max_number_of_lines`` lines.\n+\n+            :param max_number_of_lines:\n+                Maximum number of lines to be allowed for a file.\n+            \"\"\"\n+\n+            if len(file) > max_number_of_lines:\n+                yield Result.from_values(\n+                    origin=self,\n+                    message=('This file has {} lines, while {} lines'\n+                             ' are allowed'\n+                             .format((len(file)), max_number_of_lines)),\n+                    file=filename)\n+\n+In the above example ``max_number_of_lines`` is non optional setting of a\n+TooManyLinesBear. After invoking debugger on TooManyLinesBear coala will first\n+ask the value of all unpassed non optional setting i.e, ``max_number_of_lines``\n+and after that debugger will get invoke on ``run()`` method of TooManyLinesBear,\n+``settings`` command will be used to display the updated optional and non\n+optional settings of a Bear in debugging environment i.e.,","author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"reactions":[],"createdAt":"2018-07-20T18:20:44Z","lastEditedAt":null,"updatedAt":"2018-07-20T18:20:44Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDIxMTc5Nw==","url":"https://github.com/coala/coala/pull/5620#discussion_r204211797","bodyText":"I wanted that user get familiar with coala process and can easily understand the settings part of\ndebugger, If you will say I will remove the above 2 line 👍 . For now I am updating without removing it.","diffHunk":"@@ -122,3 +122,88 @@ Or to debug all bears specified by ``bears`` setting:\n     bears = PEP8Bear,MypyBear\n     files = <filename>\n     debug_bears = True\n+\n+Debugger features\n+-----------------\n+\n+Inspect Bear settings\n+^^^^^^^^^^^^^^^^^^^^^\n+\n+New command ``settings`` included in coala's Debugging Interface to inspect\n+Bear settings in debugging environment, ``settings`` command displays the\n+updated setting of a Bear i.e., user can quickly inspect the passed settings.\n+\n+Below is the code of simple TooManyLinesBear which detects if a file has more\n+than ``max_number_of_lines`` lines.\n+\n+.. code:: python\n+\n+    from coalib.results.Result import Result\n+    from coalib.bears.LocalBear import LocalBear\n+\n+\n+    class TooManyLinesBear(LocalBear):\n+\n+        def run(self, filename, file, max_number_of_lines: int):\n+            \"\"\"\n+            Detects if a file has more than ``max_number_of_lines`` lines.\n+\n+            :param max_number_of_lines:\n+                Maximum number of lines to be allowed for a file.\n+            \"\"\"\n+\n+            if len(file) > max_number_of_lines:\n+                yield Result.from_values(\n+                    origin=self,\n+                    message=('This file has {} lines, while {} lines'\n+                             ' are allowed'\n+                             .format((len(file)), max_number_of_lines)),\n+                    file=filename)\n+\n+In the above example ``max_number_of_lines`` is non optional setting of a\n+TooManyLinesBear. After invoking debugger on TooManyLinesBear coala will first\n+ask the value of all unpassed non optional setting i.e, ``max_number_of_lines``\n+and after that debugger will get invoke on ``run()`` method of TooManyLinesBear,\n+``settings`` command will be used to display the updated optional and non\n+optional settings of a Bear in debugging environment i.e.,","author":{"login":"RaiVaibhav","avatarUrl":"https://avatars3.githubusercontent.com/u/22278438?v=4","name":"Vaibhav Rai"},"reactions":[],"createdAt":"2018-07-21T14:10:49Z","lastEditedAt":null,"updatedAt":"2018-07-21T14:10:49Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDIzNzk2NQ==","url":"https://github.com/coala/coala/pull/5620#discussion_r204237965","bodyText":"the debugger will be invoked on run() method of TooManyLinesBear. Then the settings command...","diffHunk":"@@ -122,3 +122,88 @@ Or to debug all bears specified by ``bears`` setting:\n     bears = PEP8Bear,MypyBear\n     files = <filename>\n     debug_bears = True\n+\n+Debugger Features\n+-----------------\n+\n+Inspect Bear Settings\n+^^^^^^^^^^^^^^^^^^^^^\n+\n+A new command ``settings`` is included in coala's Debugging Interface to\n+inspect Bear settings in the debugging environment. It displays all passed\n+settings of a Bear and their values so you can quickly inspect them.\n+\n+Below is an example Bear which detects if a file has more than\n+``max_number_of_lines`` lines.\n+\n+.. code:: python\n+\n+    from coalib.results.Result import Result\n+    from coalib.bears.LocalBear import LocalBear\n+\n+\n+    class TooManyLinesBear(LocalBear):\n+\n+        def run(self, filename, file, max_number_of_lines: int):\n+            \"\"\"\n+            Detects if a file has more than ``max_number_of_lines`` lines.\n+\n+            :param max_number_of_lines:\n+                Maximum number of lines to be allowed for a file.\n+            \"\"\"\n+\n+            if len(file) > max_number_of_lines:\n+                yield Result.from_values(\n+                    origin=self,\n+                    message=('This file has {} lines, while {} lines'\n+                             ' are allowed'\n+                             .format(len(file), max_number_of_lines)),\n+                    file=filename)\n+\n+In the above example ``max_number_of_lines`` is a non-optional setting. After\n+invoking the debugger on TooManyLinesBear, coala will first ask the value of\n+all unpassed non optional setting i.e, ``max_number_of_lines`` and after that\n+debugger will get invoke on ``run()`` method of TooManyLinesBear, ``settings``","author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"reactions":[],"createdAt":"2018-07-22T12:09:06Z","lastEditedAt":null,"updatedAt":"2018-07-22T12:09:06Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDIzODAwMQ==","url":"https://github.com/coala/coala/pull/5620#discussion_r204238001","bodyText":"-->\n, i.e.\ni.e. always follows a comma if used in a regular sentence (except if you use braces)","diffHunk":"@@ -122,3 +122,88 @@ Or to debug all bears specified by ``bears`` setting:\n     bears = PEP8Bear,MypyBear\n     files = <filename>\n     debug_bears = True\n+\n+Debugger Features\n+-----------------\n+\n+Inspect Bear Settings\n+^^^^^^^^^^^^^^^^^^^^^\n+\n+A new command ``settings`` is included in coala's Debugging Interface to\n+inspect Bear settings in the debugging environment. It displays all passed\n+settings of a Bear and their values so you can quickly inspect them.\n+\n+Below is an example Bear which detects if a file has more than\n+``max_number_of_lines`` lines.\n+\n+.. code:: python\n+\n+    from coalib.results.Result import Result\n+    from coalib.bears.LocalBear import LocalBear\n+\n+\n+    class TooManyLinesBear(LocalBear):\n+\n+        def run(self, filename, file, max_number_of_lines: int):\n+            \"\"\"\n+            Detects if a file has more than ``max_number_of_lines`` lines.\n+\n+            :param max_number_of_lines:\n+                Maximum number of lines to be allowed for a file.\n+            \"\"\"\n+\n+            if len(file) > max_number_of_lines:\n+                yield Result.from_values(\n+                    origin=self,\n+                    message=('This file has {} lines, while {} lines'\n+                             ' are allowed'\n+                             .format(len(file), max_number_of_lines)),\n+                    file=filename)\n+\n+In the above example ``max_number_of_lines`` is a non-optional setting. After\n+invoking the debugger on TooManyLinesBear, coala will first ask the value of\n+all unpassed non optional setting i.e, ``max_number_of_lines`` and after that\n+debugger will get invoke on ``run()`` method of TooManyLinesBear, ``settings``\n+command will be used to display the updated optional and non-optional\n+settings of a Bear in debugging environment i.e.,","author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"reactions":[],"createdAt":"2018-07-22T12:10:36Z","lastEditedAt":null,"updatedAt":"2018-07-22T12:10:36Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDM4MjYxNw==","url":"https://github.com/coala/coala/pull/5620#discussion_r204382617","bodyText":", i.e.","diffHunk":"@@ -122,3 +122,88 @@ Or to debug all bears specified by ``bears`` setting:\n     bears = PEP8Bear,MypyBear\n     files = <filename>\n     debug_bears = True\n+\n+Debugger Features\n+-----------------\n+\n+Inspect Bear Settings\n+^^^^^^^^^^^^^^^^^^^^^\n+\n+A new command ``settings`` is included in coala's Debugging Interface to\n+inspect Bear settings in the debugging environment. It displays all passed\n+settings of a Bear and their values so you can quickly inspect them.\n+\n+Below is an example Bear which detects if a file has more than\n+``max_number_of_lines`` lines.\n+\n+.. code:: python\n+\n+    from coalib.results.Result import Result\n+    from coalib.bears.LocalBear import LocalBear\n+\n+\n+    class TooManyLinesBear(LocalBear):\n+\n+        def run(self, filename, file, max_number_of_lines: int):\n+            \"\"\"\n+            Detects if a file has more than ``max_number_of_lines`` lines.\n+\n+            :param max_number_of_lines:\n+                Maximum number of lines to be allowed for a file.\n+            \"\"\"\n+\n+            if len(file) > max_number_of_lines:\n+                yield Result.from_values(\n+                    origin=self,\n+                    message=('This file has {} lines, while {} lines'\n+                             ' are allowed'\n+                             .format(len(file), max_number_of_lines)),\n+                    file=filename)\n+\n+In the above example ``max_number_of_lines`` is a non-optional setting. After\n+invoking the debugger on TooManyLinesBear, coala will first ask the value of\n+all unpassed non optional setting i.e, ``max_number_of_lines`` and after that","author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"reactions":[],"createdAt":"2018-07-23T12:30:46Z","lastEditedAt":null,"updatedAt":"2018-07-23T12:30:46Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDM4MjY0Nw==","url":"https://github.com/coala/coala/pull/5620#discussion_r204382647","bodyText":"spacing:\nenvironment, i.e.","diffHunk":"@@ -122,3 +122,88 @@ Or to debug all bears specified by ``bears`` setting:\n     bears = PEP8Bear,MypyBear\n     files = <filename>\n     debug_bears = True\n+\n+Debugger Features\n+-----------------\n+\n+Inspect Bear Settings\n+^^^^^^^^^^^^^^^^^^^^^\n+\n+A new command ``settings`` is included in coala's Debugging Interface to\n+inspect Bear settings in the debugging environment. It displays all passed\n+settings of a Bear and their values so you can quickly inspect them.\n+\n+Below is an example Bear which detects if a file has more than\n+``max_number_of_lines`` lines.\n+\n+.. code:: python\n+\n+    from coalib.results.Result import Result\n+    from coalib.bears.LocalBear import LocalBear\n+\n+\n+    class TooManyLinesBear(LocalBear):\n+\n+        def run(self, filename, file, max_number_of_lines: int):\n+            \"\"\"\n+            Detects if a file has more than ``max_number_of_lines`` lines.\n+\n+            :param max_number_of_lines:\n+                Maximum number of lines to be allowed for a file.\n+            \"\"\"\n+\n+            if len(file) > max_number_of_lines:\n+                yield Result.from_values(\n+                    origin=self,\n+                    message=('This file has {} lines, while {} lines'\n+                             ' are allowed'\n+                             .format(len(file), max_number_of_lines)),\n+                    file=filename)\n+\n+In the above example ``max_number_of_lines`` is a non-optional setting. After\n+invoking the debugger on TooManyLinesBear, coala will first ask the value of\n+all unpassed non optional setting i.e, ``max_number_of_lines`` and after that\n+debugger will be invoked. Then the ``settings`` command will be used to\n+display the updated optional and non-optional settings of a Bear in\n+debugging environment ,i.e.","author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"reactions":[],"createdAt":"2018-07-23T12:30:54Z","lastEditedAt":null,"updatedAt":"2018-07-23T12:30:54Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwMzc5ODU0MQ==","url":"https://github.com/coala/coala/pull/5620#issuecomment-403798541","bodyText":"Block because of #5610","diffHunk":null,"author":{"login":"RaiVaibhav","avatarUrl":"https://avatars3.githubusercontent.com/u/22278438?v=4","name":"Vaibhav Rai"},"reactions":[],"createdAt":"2018-07-10T12:05:27Z","lastEditedAt":null,"updatedAt":"2018-07-10T12:05:27Z"}]}}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1532011158000,"issue":{"htmlUrl":"https://github.com/coala/coala/pull/5622","number":5622,"title":"requirements.txt: Use coala-utils master","body":"Related to coala/meta#123","comments":5,"createdAt":"2018-07-10T15:53:18Z","updatedAt":"2018-07-19T14:39:18Z","closedAt":"2018-07-19T14:39:12Z","state":"merged","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"size/XS","color":"00DE0F"}],"pullRequest":{"htmlUrl":"https://github.com/coala/coala/pull/5622","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQwNTIwOTA5Ng==","url":"https://github.com/coala/coala/pull/5622#issuecomment-405209096","bodyText":"This is failing because AppVeyor doesnt have setuptools 21+ installed, and coala-utils uses environment markers.\nhttps://ci.appveyor.com/project/coala/coala/build/1.0.13506/job/3ih7e4co250hend2","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-07-16T10:42:50Z","lastEditedAt":null,"updatedAt":"2018-07-16T10:42:50Z"}]}}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1532011345000,"issue":{"htmlUrl":"https://github.com/coala/coala/pull/5623","number":5623,"title":"requirements.txt: Use depman master","body":"Depends on https://gitlab.com/coala/package_manager/merge_requests/144\nUnnecessarily depends on #5622 , but that one should go in first.","comments":6,"createdAt":"2018-07-10T15:54:24Z","updatedAt":"2018-07-19T14:42:25Z","closedAt":"2018-07-19T14:42:16Z","state":"merged","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"process/wip","color":"fbca04"},{"name":"size/XS","color":"00DE0F"}],"pullRequest":{"htmlUrl":"https://github.com/coala/coala/pull/5623","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQwNjI0Mzc3Nw==","url":"https://github.com/coala/coala/pull/5623#issuecomment-406243777","bodyText":"would need a rebase","diffHunk":null,"author":{"login":"anctartica","avatarUrl":"https://avatars0.githubusercontent.com/u/7020962?v=4","name":""},"createdAt":"2018-07-19T11:25:14Z","lastEditedAt":null,"updatedAt":"2018-07-19T11:25:14Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwNjI5OTkxNQ==","url":"https://github.com/coala/coala/pull/5623#issuecomment-406299915","bodyText":"No rebase needed.  It was stacked on top of the other PR.","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-07-19T14:39:45Z","lastEditedAt":null,"updatedAt":"2018-07-19T14:39:45Z"}]}}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1531742811000,"issue":{"htmlUrl":"https://github.com/coala/coala/pull/5624","number":5624,"title":".moban.yaml: Add cached_property","body":"This was omitted from 54622c2.\nRelated to #5618\n\nFor short term contributors: we understand that getting your commits well\ndefined like we require is a hard task and takes some learning. If you\nlook to help without wanting to contribute long term there's no need\nfor you to learn this. Just drop us a message and we'll take care of brushing\nup your stuff for merge!\nChecklist\n\n I read the commit guidelines and I've followed\nthem.\n I ran coala over my code locally. (All commits have to pass\nindividually. It is not sufficient to have \"fixup commits\" on your PR,\nour bot will still report the issues for the previous commit.) You will\nlikely receive a lot of bot comments and build failures if coala does not\npass on every single commit!\n\nAfter you submit your pull request, DO NOT click the 'Update Branch' button.\nWhen asked for a rebase, consult coala.io/rebase\ninstead.\nPlease consider helping us by reviewing other peoples pull requests as well:\n\npick up any PR at https://coala.io/review\nreview it (check https://coala.io/reviewing for more info)\nif you are sure that it needs work, use corobo mark wip <URL> to get it out\nof the review queue.\n\nThe more you review, the more your score will grow at coala.io and we will\nreview your PRs faster!","comments":10,"createdAt":"2018-07-10T23:12:28Z","updatedAt":"2018-07-16T12:06:51Z","closedAt":"2018-07-16T12:06:51Z","state":"merged","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"size/XS","color":"00DE0F"}],"pullRequest":{"htmlUrl":"https://github.com/coala/coala/pull/5624","comments":[]}}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1533481643000,"issue":{"htmlUrl":"https://github.com/coala/coala/pull/5627","number":5627,"title":"[WIP] Integrate FileFactory with the core","body":"For short term contributors: we understand that getting your commits well\ndefined like we require is a hard task and takes some learning. If you\nlook to help without wanting to contribute long term there's no need\nfor you to learn this. Just drop us a message and we'll take care of brushing\nup your stuff for merge!\nChecklist\n\n I read the commit guidelines and I've followed\nthem.\n I ran coala over my code locally. (All commits have to pass\nindividually. It is not sufficient to have \"fixup commits\" on your PR,\nour bot will still report the issues for the previous commit.) You will\nlikely receive a lot of bot comments and build failures if coala does not\npass on every single commit!\n\nAfter you submit your pull request, DO NOT click the 'Update Branch' button.\nWhen asked for a rebase, consult coala.io/rebase\ninstead.\nPlease consider helping us by reviewing other peoples pull requests as well:\n\npick up any PR at https://coala.io/review\nreview it (check https://coala.io/reviewing for more info)\nif you are sure that it needs work, use corobo mark wip <URL> to get it out\nof the review queue.\n\nThe more you review, the more your score will grow at coala.io and we will\nreview your PRs faster!","comments":22,"createdAt":"2018-07-11T18:35:17Z","updatedAt":"2018-08-05T15:07:23Z","closedAt":null,"state":"open","user":{"login":"palash25","avatarUrl":"https://avatars0.githubusercontent.com/u/21367710?v=4"},"owner":{"login":"palash25","avatarUrl":"https://avatars0.githubusercontent.com/u/21367710?v=4"},"labels":[{"name":"process/wip","color":"fbca04"},{"name":"size/S","color":"B1CF0A"}],"pullRequest":{"htmlUrl":"https://github.com/coala/coala/pull/5627","comments":[{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzg0OTEwMQ==","url":"https://github.com/coala/coala/pull/5627#discussion_r203849101","bodyText":"hm okay so right now we actually try to be smart and detect the encoding... maybe we should really offer different encodings when accessing FileFactory.string (or provide a separate decode function, while string is utf-8 by default). But let's save that for later","diffHunk":"@@ -267,16 +268,17 @@ def get_file_dict(filename_list, log_printer=None, allow_raw_files=False):\n     :return:                Reads the content of each file into a dictionary\n                             with filenames as keys.\n     \"\"\"\n-    file_dict = {}\n+    file_set = {}\n     for filename in filename_list:\n         try:\n-            with open(filename, 'r',\n-                      encoding=detect_encoding(filename)) as _file:","author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"createdAt":"2018-07-19T19:46:17Z","lastEditedAt":null,"updatedAt":"2018-07-19T19:46:17Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzg0OTIyMQ==","url":"https://github.com/coala/coala/pull/5627#discussion_r203849221","bodyText":"please a comment why we do this here :) (accessing .string without using its value)","diffHunk":"@@ -267,16 +268,17 @@ def get_file_dict(filename_list, log_printer=None, allow_raw_files=False):\n     :return:                Reads the content of each file into a dictionary\n                             with filenames as keys.\n     \"\"\"\n-    file_dict = {}\n+    file_set = {}\n     for filename in filename_list:\n         try:\n-            with open(filename, 'r',\n-                      encoding=detect_encoding(filename)) as _file:\n-                file_dict[filename] = tuple(_file.readlines())\n+            file_set[filename] = FileFactory(filename)\n+            file_set[filename].string","author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"createdAt":"2018-07-19T19:46:47Z","lastEditedAt":null,"updatedAt":"2018-07-19T19:46:47Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzg1NDczOQ==","url":"https://github.com/coala/coala/pull/5627#discussion_r203854739","bodyText":"ah only list works here? :)","diffHunk":"@@ -498,6 +500,8 @@ def yield_ignore_ranges(file_dict):\n         if file is None:\n             continue\n \n+        file = list(file.lines)","author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"createdAt":"2018-07-19T20:06:41Z","lastEditedAt":null,"updatedAt":"2018-07-19T20:06:41Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzg1NjM0Mg==","url":"https://github.com/coala/coala/pull/5627#discussion_r203856342","bodyText":"It's still a dict, isn't it?","diffHunk":"@@ -267,16 +268,17 @@ def get_file_dict(filename_list, log_printer=None, allow_raw_files=False):\n     :return:                Reads the content of each file into a dictionary\n                             with filenames as keys.\n     \"\"\"\n-    file_dict = {}\n+    file_set = {}","author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"createdAt":"2018-07-19T20:12:45Z","lastEditedAt":null,"updatedAt":"2018-07-19T20:12:45Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzg1NjY0Mw==","url":"https://github.com/coala/coala/pull/5627#discussion_r203856643","bodyText":"we could actually override __getitem__ for FileFactory, then you don't have to use lines explicitly ;) However, this is clearer anyway.","diffHunk":"@@ -221,7 +222,7 @@ def print_lines(console_printer,\n                               color=FILE_LINES_COLOR,\n                               end='')\n \n-        line = file_dict[sourcerange.file][i - 1].rstrip('\\n')\n+        line = file_dict[sourcerange.file].lines[i - 1].rstrip('\\n')","author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"createdAt":"2018-07-19T20:13:56Z","lastEditedAt":null,"updatedAt":"2018-07-19T20:13:56Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzg2MDE4OA==","url":"https://github.com/coala/coala/pull/5627#discussion_r203860188","bodyText":"file is now a FileFactory? This doesn't seem to be backwards compatible^^ Everybody has to change bears^^","diffHunk":"@@ -13,6 +13,6 @@ def run(self, filename, file):\n         \"\"\"\n         yield Result.from_values(\n             origin=self,\n-            message='This file has {count} lines.'.format(count=len(file)),\n+            message='This file has {count} lines.'.format(count=len(file.lines)),","author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"createdAt":"2018-07-19T20:26:05Z","lastEditedAt":null,"updatedAt":"2018-07-19T20:26:05Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzg2MDM5MQ==","url":"https://github.com/coala/coala/pull/5627#discussion_r203860391","bodyText":"I want to do the switch of actually using file factories in the nextgen-core. So internally we already work with them, but at bears side nothing changes.","diffHunk":"@@ -13,6 +13,6 @@ def run(self, filename, file):\n         \"\"\"\n         yield Result.from_values(\n             origin=self,\n-            message='This file has {count} lines.'.format(count=len(file)),\n+            message='This file has {count} lines.'.format(count=len(file.lines)),","author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"createdAt":"2018-07-19T20:26:49Z","lastEditedAt":null,"updatedAt":"2018-07-19T20:26:49Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDAwMjg3NA==","url":"https://github.com/coala/coala/pull/5627#discussion_r204002874","bodyText":"We talked about not calling it a file_dict and instead a file_set but that was a long time ago before GSoC I think. I will change it back to a file_dict for now and we can decide on a better name afterwards.","diffHunk":"@@ -267,16 +268,17 @@ def get_file_dict(filename_list, log_printer=None, allow_raw_files=False):\n     :return:                Reads the content of each file into a dictionary\n                             with filenames as keys.\n     \"\"\"\n-    file_dict = {}\n+    file_set = {}","author":{"login":"palash25","avatarUrl":"https://avatars0.githubusercontent.com/u/21367710?v=4","name":"Palash Nigam"},"createdAt":"2018-07-20T10:31:42Z","lastEditedAt":null,"updatedAt":"2018-07-20T10:31:42Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDAwMzUxOA==","url":"https://github.com/coala/coala/pull/5627#discussion_r204003518","bodyText":"Its to invoke FileFactory.string in case of raw files to raise a UnicodeDecode error so that we can move into the except clause that handles the raw files. Its the only workaround we have for the old core. I think you suggested this to me.\nI will add a comment explaining it 👍","diffHunk":"@@ -267,16 +268,17 @@ def get_file_dict(filename_list, log_printer=None, allow_raw_files=False):\n     :return:                Reads the content of each file into a dictionary\n                             with filenames as keys.\n     \"\"\"\n-    file_dict = {}\n+    file_set = {}\n     for filename in filename_list:\n         try:\n-            with open(filename, 'r',\n-                      encoding=detect_encoding(filename)) as _file:\n-                file_dict[filename] = tuple(_file.readlines())\n+            file_set[filename] = FileFactory(filename)\n+            file_set[filename].string","author":{"login":"palash25","avatarUrl":"https://avatars0.githubusercontent.com/u/21367710?v=4","name":"Palash Nigam"},"createdAt":"2018-07-20T10:34:06Z","lastEditedAt":null,"updatedAt":"2018-07-20T10:34:06Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDAwNzE3NQ==","url":"https://github.com/coala/coala/pull/5627#discussion_r204007175","bodyText":"you are right that's unnecessary tuple works too 😅\nRemoved list","diffHunk":"@@ -498,6 +500,8 @@ def yield_ignore_ranges(file_dict):\n         if file is None:\n             continue\n \n+        file = list(file.lines)","author":{"login":"palash25","avatarUrl":"https://avatars0.githubusercontent.com/u/21367710?v=4","name":"Palash Nigam"},"createdAt":"2018-07-20T10:51:32Z","lastEditedAt":null,"updatedAt":"2018-07-20T10:51:32Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDAyMjIyMw==","url":"https://github.com/coala/coala/pull/5627#discussion_r204022223","bodyText":"So the FileFactories are all collected in get_file_dict and then they are passed around in the bears for analysis right. So before this the bears used to receive the file-contents.\nCan you explain this to me a little better? What would the bears receive now to run the analysis on whether it is FileFactory or FileFactory.lines? I don't know all the details of a coala run.\nIs there a part of the codebase where we can make changes so that all the bears receive only the file contents and not the objects so that we don't have to change the bears implementation individually, you know like a middleware between the collection of objects and the actual analysis?","diffHunk":"@@ -13,6 +13,6 @@ def run(self, filename, file):\n         \"\"\"\n         yield Result.from_values(\n             origin=self,\n-            message='This file has {count} lines.'.format(count=len(file)),\n+            message='This file has {count} lines.'.format(count=len(file.lines)),","author":{"login":"palash25","avatarUrl":"https://avatars0.githubusercontent.com/u/21367710?v=4","name":"Palash Nigam"},"createdAt":"2018-07-20T12:04:05Z","lastEditedAt":"2018-07-20T12:05:16Z","updatedAt":"2018-07-20T12:05:16Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDEwNjUwMA==","url":"https://github.com/coala/coala/pull/5627#discussion_r204106500","bodyText":"Can you explain this to me a little better? What would the bears receive now to run the analysis on whether it is FileFactory or FileFactory.lines? I don't know all the details of a coala run.\n\nDefinitely FileFactory.lines for now. The old bears expect that currently.\n\nIs there a part of the codebase where we can make changes so that all the bears receive only the file contents and not the objects so that we don't have to change the bears implementation individually, you know like a middleware between the collection of objects and the actual analysis?\n\nYeah inside Processing.py. Instead of giving bears the file factory objects, give them file_factory.lines. I know we currently loose the lazy-loading capability with that, but that's easiest for now.\nIf you want to keep the lazy loading capabilities, we could write (like you suggested) some kind of \"middleware\", meaning we have a proxy dict object that gives access to file contents that works the same way as before for bears, but calls the right functions of FileFactory in the background.\nLike:\nclass FileDict:  # mimics dict\n    def __getitem__(self, filename):\n        return self._my_file_middlewares[filename]\n    #...\n\nclass FileMiddleware:\n    def __getitem__(self, lineindex):\n        return self._underlying_file_proxy.lines[lineindex]\n    #...","diffHunk":"@@ -13,6 +13,6 @@ def run(self, filename, file):\n         \"\"\"\n         yield Result.from_values(\n             origin=self,\n-            message='This file has {count} lines.'.format(count=len(file)),\n+            message='This file has {count} lines.'.format(count=len(file.lines)),","author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"createdAt":"2018-07-20T16:54:36Z","lastEditedAt":null,"updatedAt":"2018-07-20T16:54:36Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDEyNTkyMw==","url":"https://github.com/coala/coala/pull/5627#discussion_r204125923","bodyText":"fine with me 👍","diffHunk":"@@ -267,16 +268,17 @@ def get_file_dict(filename_list, log_printer=None, allow_raw_files=False):\n     :return:                Reads the content of each file into a dictionary\n                             with filenames as keys.\n     \"\"\"\n-    file_dict = {}\n+    file_set = {}","author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"createdAt":"2018-07-20T18:05:27Z","lastEditedAt":null,"updatedAt":"2018-07-20T18:05:27Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDEyNjI3OA==","url":"https://github.com/coala/coala/pull/5627#discussion_r204126278","bodyText":"Its to invoke FileFactory.string in case of raw files to raise a UnicodeDecode error so that we can move into the except clause that handles the raw files. Its the only workaround we have for the old core. I think you suggested this to me.\n\nI know, I just wanted to encourage you to explain it to others reading the code as well that are not into the topic ;)","diffHunk":"@@ -267,16 +268,17 @@ def get_file_dict(filename_list, log_printer=None, allow_raw_files=False):\n     :return:                Reads the content of each file into a dictionary\n                             with filenames as keys.\n     \"\"\"\n-    file_dict = {}\n+    file_set = {}\n     for filename in filename_list:\n         try:\n-            with open(filename, 'r',\n-                      encoding=detect_encoding(filename)) as _file:\n-                file_dict[filename] = tuple(_file.readlines())\n+            file_set[filename] = FileFactory(filename)\n+            file_set[filename].string","author":{"login":"Makman2","avatarUrl":"https://avatars3.githubusercontent.com/u/6023916?v=4","name":"Mischa Krüger"},"createdAt":"2018-07-20T18:06:44Z","lastEditedAt":null,"updatedAt":"2018-07-20T18:06:44Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwNDI5MTY1OQ==","url":"https://github.com/coala/coala/pull/5627#issuecomment-404291659","bodyText":"These are the failing tests out of which the ignore ranges tests seems to be the toughest one to fix.\nFAIL tests/coalaCITest.py::coalaCITest::test_find_no_issues\nFAIL tests/coalaCITest.py::coalaCITest::test_find_no_issues_debug\nFAIL tests/coalaCITest.py::coalaCITest::test_section_ordering\nFAIL tests/coalaTest.py::coalaTest::test_coala_with_color\nFAIL tests/coalaTest.py::coalaTest::test_coala_without_color\nFAIL tests/output/ConsoleInteractionTest.py::ConsoleInteractionTest::test_print_results_multiple_ranges\nFAIL tests/processes/ProcessingTest.py::ProcessingTest::test_yield_ignore_ranges\nFAIL tests/results/result_actions/ShowPatchActionTest.py::ShowPatchActionTest::test_apply\nFAIL tests/testing/LocalBearTestHelperTest.py::LocalBearCheckResultsTest::test_bad_assertComparableObjectsEqual\nFAIL tests/testing/LocalBearTestHelperTest.py::LocalBearCheckResultsTest::test_good_assertComparableObjectsEqual","diffHunk":null,"author":{"login":"palash25","avatarUrl":"https://avatars0.githubusercontent.com/u/21367710?v=4","name":"Palash Nigam"},"createdAt":"2018-07-11T19:58:51Z","lastEditedAt":"2018-07-13T14:15:40Z","updatedAt":"2018-07-13T14:15:40Z"}]}}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1531731484000,"issue":{"htmlUrl":"https://github.com/coala/coala/pull/5629","number":5629,"title":"aspects: Rename class `docs` to follow CapWords","body":"This renames class name docs to Docs so that\nit follows CapWords convention.\nCloses #5626\n\nFor short term contributors: we understand that getting your commits well\ndefined like we require is a hard task and takes some learning. If you\nlook to help without wanting to contribute long term there's no need\nfor you to learn this. Just drop us a message and we'll take care of brushing\nup your stuff for merge!\nChecklist\n\n I read the commit guidelines and I've followed\nthem.\n I ran coala over my code locally. (All commits have to pass\nindividually. It is not sufficient to have \"fixup commits\" on your PR,\nour bot will still report the issues for the previous commit.) You will\nlikely receive a lot of bot comments and build failures if coala does not\npass on every single commit!\n\nAfter you submit your pull request, DO NOT click the 'Update Branch' button.\nWhen asked for a rebase, consult coala.io/rebase\ninstead.\nPlease consider helping us by reviewing other peoples pull requests as well:\n\npick up any PR at https://coala.io/review\nreview it (check https://coala.io/reviewing for more info)\nif you are sure that it needs work, use corobo mark wip <URL> to get it out\nof the review queue.\n\nThe more you review, the more your score will grow at coala.io and we will\nreview your PRs faster!","comments":10,"createdAt":"2018-07-12T10:55:12Z","updatedAt":"2018-07-16T08:58:04Z","closedAt":"2018-07-16T08:58:04Z","state":"merged","user":{"login":"pareksha","avatarUrl":"https://avatars1.githubusercontent.com/u/32385407?v=4"},"owner":{"login":"pareksha","avatarUrl":"https://avatars1.githubusercontent.com/u/32385407?v=4"},"assignee":{"login":"pareksha","avatarUrl":"https://avatars1.githubusercontent.com/u/32385407?v=4"},"labels":[{"name":"difficulty/low","color":"207de5"},{"name":"size/S","color":"B1CF0A"},{"name":"type/codestyle","color":"d4c5f9"}],"pullRequest":{"htmlUrl":"https://github.com/coala/coala/pull/5629","comments":[]}}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1531640333000,"issue":{"htmlUrl":"https://github.com/coala/coala/pull/5630","number":5630,"title":"BearTest: Replace httpstat with Google teapot","body":"Use httpbin instead of httpbin because\nof SSL certification error.\nCloses #5628","comments":9,"createdAt":"2018-07-12T10:57:11Z","updatedAt":"2018-07-15T07:38:53Z","closedAt":"2018-07-15T07:38:53Z","state":"merged","user":{"login":"RaiVaibhav","avatarUrl":"https://avatars3.githubusercontent.com/u/22278438?v=4"},"owner":{"login":"RaiVaibhav","avatarUrl":"https://avatars3.githubusercontent.com/u/22278438?v=4"},"labels":[{"name":"area/CI","color":"eb6420"},{"name":"area/tests","color":"bfd4f2"},{"name":"size/XS","color":"00DE0F"},{"name":"status/ci-approved","color":"ededed"},{"name":"type/bug","color":"e11d21"}],"pullRequest":{"htmlUrl":"https://github.com/coala/coala/pull/5630","comments":[{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMjIwNTkwMQ==","url":"https://github.com/coala/coala/pull/5630#discussion_r202205901","bodyText":"I think we should use the Google Teapot.\nSee #5628 (comment) for background.","diffHunk":"@@ -515,7 +515,7 @@ def setUp(self):\n         super().setUp()\n         self.mock_url = 'https://test.com'\n         self.filename = 'test.html'\n-        self.teapot_url = 'https://httpstat.us/418'\n+        self.teapot_url = 'https://httpbin.org/status/418'","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-07-12T23:13:17Z","lastEditedAt":null,"updatedAt":"2018-07-12T23:13:17Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwNDY4MzcyMg==","url":"https://github.com/coala/coala/pull/5630#issuecomment-404683722","bodyText":"Seems like only travis failing right now for all three https://travis-ci.org/coala/coala/jobs/403347645\nbut on a different test and IMO It should pass but didn't get till now why the test failed","diffHunk":null,"author":{"login":"RaiVaibhav","avatarUrl":"https://avatars3.githubusercontent.com/u/22278438?v=4","name":"Vaibhav Rai"},"createdAt":"2018-07-12T23:43:34Z","lastEditedAt":"2018-07-12T23:44:58Z","updatedAt":"2018-07-12T23:44:58Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwNDcwMjkyMQ==","url":"https://github.com/coala/coala/pull/5630#issuecomment-404702921","bodyText":"And failed several times after restarting . We have an issue about those tests. This failure is also becoming quite annoying.","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-07-13T02:00:44Z","lastEditedAt":null,"updatedAt":"2018-07-13T02:00:44Z"}]}}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1531668324000,"issue":{"htmlUrl":"https://github.com/coala/coala/pull/5632","number":5632,"title":"Testing_Bears.rst: add self to run method","body":"This adds missing self keyword to TooManyLinesBear run method in example docs for testing\nThis also changes the position of argument file and filename for run method\nThis closes #5625\n\nFor short term contributors: we understand that getting your commits well\ndefined like we require is a hard task and takes some learning. If you\nlook to help without wanting to contribute long term there's no need\nfor you to learn this. Just drop us a message and we'll take care of brushing\nup your stuff for merge!\nChecklist\n\n I read the commit guidelines and I've followed\nthem.\n I ran coala over my code locally. (All commits have to pass\nindividually. It is not sufficient to have \"fixup commits\" on your PR,\nour bot will still report the issues for the previous commit.) You will\nlikely receive a lot of bot comments and build failures if coala does not\npass on every single commit!\n\nAfter you submit your pull request, DO NOT click the 'Update Branch' button.\nWhen asked for a rebase, consult coala.io/rebase\ninstead.\nPlease consider helping us by reviewing other peoples pull requests as well:\n\npick up any PR at https://coala.io/review\nreview it (check https://coala.io/reviewing for more info)\nif you are sure that it needs work, use corobo mark wip <URL> to get it out\nof the review queue.\n\nThe more you review, the more your score will grow at coala.io and we will\nreview your PRs faster!","comments":8,"createdAt":"2018-07-15T12:20:28Z","updatedAt":"2018-07-15T15:25:24Z","closedAt":"2018-07-15T15:25:24Z","state":"merged","user":{"login":"sinscary","avatarUrl":"https://avatars0.githubusercontent.com/u/13782355?v=4"},"owner":{"login":"sinscary","avatarUrl":"https://avatars0.githubusercontent.com/u/13782355?v=4"},"assignee":{"login":"sinscary","avatarUrl":"https://avatars0.githubusercontent.com/u/13782355?v=4"},"labels":[{"name":"area/CI","color":"eb6420"},{"name":"difficulty/newcomer","color":"65C8FF"},{"name":"size/XS","color":"00DE0F"}],"pullRequest":{"htmlUrl":"https://github.com/coala/coala/pull/5632","comments":[{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMjU0MzU3MA==","url":"https://github.com/coala/coala/pull/5632#discussion_r202543570","bodyText":"Any particular reason to place this argument here ?\nIMO the order should be alphabetical/dictionary order unless otherwise needed.\ni.e\ndef run(self,\n        file,\n        filename,\n    ...","diffHunk":"@@ -24,8 +24,9 @@ Let us understand how to write tests for ``TooManyLinesBear`` in ``some_dir``.\n \n     class TooManyLinesBear(LocalBear):\n \n-        def run(file,\n+        def run(self,\n                 filename,\n+                file,","author":{"login":"virresh","avatarUrl":"https://avatars0.githubusercontent.com/u/10978108?v=4","name":"Viresh Gupta"},"createdAt":"2018-07-15T13:39:35Z","lastEditedAt":"2018-07-15T13:40:25Z","updatedAt":"2018-07-15T13:40:25Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMjU0MzY5Ng==","url":"https://github.com/coala/coala/pull/5632#discussion_r202543696","bodyText":"@virresh LocalBear run method has arguments in same order. As TooManyLinesBear inherits from that, arguments should be in same order. To keep these arguments in alphabetical order I have to make a change in LocalBear class.","diffHunk":"@@ -24,8 +24,9 @@ Let us understand how to write tests for ``TooManyLinesBear`` in ``some_dir``.\n \n     class TooManyLinesBear(LocalBear):\n \n-        def run(file,\n+        def run(self,\n                 filename,\n+                file,","author":{"login":"sinscary","avatarUrl":"https://avatars0.githubusercontent.com/u/13782355?v=4","name":"Nitesh Sharma"},"createdAt":"2018-07-15T13:44:45Z","lastEditedAt":null,"updatedAt":"2018-07-15T13:44:45Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMjU0Mzg2NQ==","url":"https://github.com/coala/coala/pull/5632#discussion_r202543865","bodyText":"Oh\nI missed that\nChanges look good then 👍\nJust the nit-pick of closes to Closes and it looks good to go then.","diffHunk":"@@ -24,8 +24,9 @@ Let us understand how to write tests for ``TooManyLinesBear`` in ``some_dir``.\n \n     class TooManyLinesBear(LocalBear):\n \n-        def run(file,\n+        def run(self,\n                 filename,\n+                file,","author":{"login":"virresh","avatarUrl":"https://avatars0.githubusercontent.com/u/10978108?v=4","name":"Viresh Gupta"},"createdAt":"2018-07-15T13:50:53Z","lastEditedAt":null,"updatedAt":"2018-07-15T13:50:53Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMjU0NDE4Mw==","url":"https://github.com/coala/coala/pull/5632#discussion_r202544183","bodyText":"why break lines here when you have so much space","diffHunk":"@@ -24,8 +24,9 @@ Let us understand how to write tests for ``TooManyLinesBear`` in ``some_dir``.\n \n     class TooManyLinesBear(LocalBear):\n \n-        def run(file,\n+        def run(self,","author":{"login":"ishanSrt","avatarUrl":"https://avatars2.githubusercontent.com/u/29859362?v=4","name":"Ishan Srivastava"},"createdAt":"2018-07-15T14:04:23Z","lastEditedAt":null,"updatedAt":"2018-07-15T14:04:23Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMjU0NDMyMA==","url":"https://github.com/coala/coala/pull/5632#discussion_r202544320","bodyText":"It was already like that in docs. I was just following the same pattern. You want me to change it ? But that change will reflect in docs also.","diffHunk":"@@ -24,8 +24,9 @@ Let us understand how to write tests for ``TooManyLinesBear`` in ``some_dir``.\n \n     class TooManyLinesBear(LocalBear):\n \n-        def run(file,\n+        def run(self,","author":{"login":"sinscary","avatarUrl":"https://avatars0.githubusercontent.com/u/13782355?v=4","name":"Nitesh Sharma"},"createdAt":"2018-07-15T14:10:09Z","lastEditedAt":"2018-07-15T14:10:32Z","updatedAt":"2018-07-15T14:10:32Z"}]}}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1531917548000,"issue":{"htmlUrl":"https://github.com/coala/coala/pull/5633","number":5633,"title":"Update Writing_Tests.rst: Remove unwanted quotes","body":"This remove unwanted back-quotes in the documentation.\nThere is attempt to make the code bold & inline literal together.\nFixes coala#3855\nFor short term contributors: we understand that getting your commits well\ndefined like we require is a hard task and takes some learning. If you\nlook to help without wanting to contribute long term there's no need\nfor you to learn this. Just drop us a message and we'll take care of brushing\nup your stuff for merge!\nChecklist\n\n I read the commit guidelines and I've followed\nthem.\n I ran coala over my code locally. (All commits have to pass\nindividually. It is not sufficient to have \"fixup commits\" on your PR,\nour bot will still report the issues for the previous commit.) You will\nlikely receive a lot of bot comments and build failures if coala does not\npass on every single commit!\n\nAfter you submit your pull request, DO NOT click the 'Update Branch' button.\nWhen asked for a rebase, consult coala.io/rebase\ninstead.\nPlease consider helping us by reviewing other peoples pull requests as well:\n\npick up any PR at https://coala.io/review\nreview it (check https://coala.io/reviewing for more info)\nif you are sure that it needs work, use corobo mark wip <URL> to get it out\nof the review queue.\n\nThe more you review, the more your score will grow at coala.io and we will\nreview your PRs faster!","comments":3,"createdAt":"2018-07-17T07:18:50Z","updatedAt":"2018-07-18T12:39:08Z","closedAt":"2018-07-18T12:14:16Z","state":"closed","user":{"login":"JoeSiew","avatarUrl":"https://avatars3.githubusercontent.com/u/40135419?v=4"},"owner":{"login":"JoeSiew","avatarUrl":"https://avatars3.githubusercontent.com/u/40135419?v=4"},"assignee":{"login":"JoeSiew","avatarUrl":"https://avatars3.githubusercontent.com/u/40135419?v=4"},"labels":[{"name":"area/documentation","color":"bfe5bf"},{"name":"difficulty/newcomer","color":"65C8FF"},{"name":"process/pending review","color":"bfe5bf"},{"name":"size/XS","color":"00DE0F"}],"pullRequest":{"htmlUrl":"https://github.com/coala/coala/pull/5633","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQwNTUxNTAxMA==","url":"https://github.com/coala/coala/pull/5633#issuecomment-405515010","bodyText":"Noted pareksha, will work on it.","diffHunk":null,"author":{"login":"JoeSiew","avatarUrl":"https://avatars3.githubusercontent.com/u/40135419?v=4","name":null},"createdAt":"2018-07-17T09:11:53Z","lastEditedAt":null,"updatedAt":"2018-07-17T09:11:53Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwNTkxNjEwMQ==","url":"https://github.com/coala/coala/pull/5633#issuecomment-405916101","bodyText":"Sorry guys, i screw up this pull request as i deleted my fork repository that submitted this pull request.","diffHunk":null,"author":{"login":"JoeSiew","avatarUrl":"https://avatars3.githubusercontent.com/u/40135419?v=4","name":null},"createdAt":"2018-07-18T12:39:08Z","lastEditedAt":null,"updatedAt":"2018-07-18T12:39:08Z"}]}}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1531880992000,"issue":{"htmlUrl":"https://github.com/coala/coala/pull/5634","number":5634,"title":"check_unsupported.sh: Use template","body":"Small improvements by sharing the logic with bears repository.\nThe use of coverage run has been discontinued as coverage of\nsetup.py is not needed for assert_supported_version\nas bears repo now has mock tests for that function.\nRelated to https://gitlab.com/coala/mobans/issues/65\n\nFor short term contributors: we understand that getting your commits well\ndefined like we require is a hard task and takes some learning. If you\nlook to help without wanting to contribute long term there's no need\nfor you to learn this. Just drop us a message and we'll take care of brushing\nup your stuff for merge!\nChecklist\n\n I read the commit guidelines and I've followed\nthem.\n I ran coala over my code locally. (All commits have to pass\nindividually. It is not sufficient to have \"fixup commits\" on your PR,\nour bot will still report the issues for the previous commit.) You will\nlikely receive a lot of bot comments and build failures if coala does not\npass on every single commit!\n\nAfter you submit your pull request, DO NOT click the 'Update Branch' button.\nWhen asked for a rebase, consult coala.io/rebase\ninstead.\nPlease consider helping us by reviewing other peoples pull requests as well:\n\npick up any PR at https://coala.io/review\nreview it (check https://coala.io/reviewing for more info)\nif you are sure that it needs work, use corobo mark wip <URL> to get it out\nof the review queue.\n\nThe more you review, the more your score will grow at coala.io and we will\nreview your PRs faster!","comments":6,"createdAt":"2018-07-17T07:49:28Z","updatedAt":"2018-07-18T02:29:52Z","closedAt":"2018-07-18T02:29:52Z","state":"merged","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"size/XS","color":"00DE0F"}],"pullRequest":{"htmlUrl":"https://github.com/coala/coala/pull/5634","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQwNTUxMTI3Nw==","url":"https://github.com/coala/coala/pull/5634#issuecomment-405511277","bodyText":"Demo https://travis-ci.org/jayvdb/coala/builds/404774420 is commit jayvdb@855141d which has parent jayvdb@2843072 which is in this PR","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-07-17T08:59:08Z","lastEditedAt":null,"updatedAt":"2018-07-17T08:59:08Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwNTUxMjIzNw==","url":"https://github.com/coala/coala/pull/5634#issuecomment-405512237","bodyText":"Python 3.3 failure is #5636","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-07-17T09:02:22Z","lastEditedAt":null,"updatedAt":"2018-07-17T09:02:22Z"}]}}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1532066450000,"issue":{"htmlUrl":"https://github.com/coala/coala/pull/5635","number":5635,"title":" .moban.yaml: Add CI check scripts","body":"Related to https://gitlab.com/coala/mobans/issues/65","comments":1,"createdAt":"2018-07-17T08:12:44Z","updatedAt":"2018-07-20T06:00:50Z","closedAt":null,"state":"open","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"process/pending review","color":"bfe5bf"},{"name":"size/XS","color":"00DE0F"}],"pullRequest":{"htmlUrl":"https://github.com/coala/coala/pull/5635","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQwNTQ5ODM2Mw==","url":"https://github.com/coala/coala/pull/5635#issuecomment-405498363","bodyText":"Depends on #5634","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-07-17T08:13:13Z","lastEditedAt":null,"updatedAt":"2018-07-17T08:13:13Z"}]}}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1533312843000,"issue":{"htmlUrl":"https://github.com/coala/coala/pull/5638","number":5638,"title":"LocalBearTestHelper: Modify for `aspects` testing","body":"This modifies LocalBearTestHelper to make it compatible\nfor testing aspects in coala-bears.\nCloses #5637\n\nFor short term contributors: we understand that getting your commits well\ndefined like we require is a hard task and takes some learning. If you\nlook to help without wanting to contribute long term there's no need\nfor you to learn this. Just drop us a message and we'll take care of brushing\nup your stuff for merge!\nChecklist\n\n I read the commit guidelines and I've followed\nthem.\n I ran coala over my code locally. (All commits have to pass\nindividually. It is not sufficient to have \"fixup commits\" on your PR,\nour bot will still report the issues for the previous commit.) You will\nlikely receive a lot of bot comments and build failures if coala does not\npass on every single commit!\n\nAfter you submit your pull request, DO NOT click the 'Update Branch' button.\nWhen asked for a rebase, consult coala.io/rebase\ninstead.\nPlease consider helping us by reviewing other peoples pull requests as well:\n\npick up any PR at https://coala.io/review\nreview it (check https://coala.io/reviewing for more info)\nif you are sure that it needs work, use corobo mark wip <URL> to get it out\nof the review queue.\n\nThe more you review, the more your score will grow at coala.io and we will\nreview your PRs faster!","comments":7,"createdAt":"2018-07-18T08:16:49Z","updatedAt":"2018-08-03T16:14:03Z","closedAt":"2018-08-03T16:14:00Z","state":"merged","user":{"login":"pareksha","avatarUrl":"https://avatars1.githubusercontent.com/u/32385407?v=4"},"owner":{"login":"pareksha","avatarUrl":"https://avatars1.githubusercontent.com/u/32385407?v=4"},"assignee":{"login":"pareksha","avatarUrl":"https://avatars1.githubusercontent.com/u/32385407?v=4"},"labels":[{"name":"area/aspects","color":"000000"},{"name":"area/documentation","color":"bfe5bf"},{"name":"process/needs rebase","color":"e52db1"},{"name":"size/XS","color":"00DE0F"}],"pullRequest":{"htmlUrl":"https://github.com/coala/coala/pull/5638","comments":[{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzM2MDYxMQ==","url":"https://github.com/coala/coala/pull/5638#discussion_r203360611","bodyText":"It is better to make a new AspectsTestBear instead of changing the TestBear IMO.","diffHunk":"@@ -1,8 +1,20 @@\n from coalib.bears.LocalBear import LocalBear\n+from coalib.bearlib.aspects import map_setting_to_aspect\n+from coalib.bearlib.aspects.Formatting import TrailingSpace\n \n \n-class TestBear(LocalBear):\n+class TestBear(","author":{"login":"sangamcse","avatarUrl":"https://avatars2.githubusercontent.com/u/26381717?v=4","name":"Sangam Kumar"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNjY0NTE4Ng==","createdAt":"2018-07-18T18:08:43Z","content":"THUMBS_UP","user":{"login":"jayvdb","name":"John Vandenberg"}}],"createdAt":"2018-07-18T12:35:13Z","lastEditedAt":null,"updatedAt":"2018-07-18T12:35:13Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzQ0NDU0OQ==","url":"https://github.com/coala/coala/pull/5638#discussion_r203444549","bodyText":"I don't think there's a need for that, after all each of the existing actual coala bear code will be modified to make it compatible with aspects, we won't be creating new bears which work with aspects. That is what is to be tested here.","diffHunk":"@@ -1,8 +1,20 @@\n from coalib.bears.LocalBear import LocalBear\n+from coalib.bearlib.aspects import map_setting_to_aspect\n+from coalib.bearlib.aspects.Formatting import TrailingSpace\n \n \n-class TestBear(LocalBear):\n+class TestBear(","author":{"login":"pareksha","avatarUrl":"https://avatars1.githubusercontent.com/u/32385407?v=4","name":"Pareksha Manchanda"},"reactions":[],"createdAt":"2018-07-18T16:24:20Z","lastEditedAt":null,"updatedAt":"2018-07-18T16:24:20Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzQ3NTY4Mw==","url":"https://github.com/coala/coala/pull/5638#discussion_r203475683","bodyText":"But we need tests to ensure the old bear system does not break.\nPlease create a subclass AspectsTestBear","diffHunk":"@@ -1,8 +1,20 @@\n from coalib.bears.LocalBear import LocalBear\n+from coalib.bearlib.aspects import map_setting_to_aspect\n+from coalib.bearlib.aspects.Formatting import TrailingSpace\n \n \n-class TestBear(LocalBear):\n+class TestBear(","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-18T18:02:53Z","lastEditedAt":null,"updatedAt":"2018-07-18T18:02:53Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzQ3NzM3MQ==","url":"https://github.com/coala/coala/pull/5638#discussion_r203477371","bodyText":"This should be aspects=[get_aspect('Indentation')] only, and even that should not be necessary. This info can be obtained by default from the bear metadata (if not we need to fix it).\nAll this dirty work must be done in verify_local_bear.","diffHunk":"@@ -26,6 +30,22 @@\n                               valid_files=files,\n                               invalid_files=())\n \n+language = str(TestBear.languages[0])\n+aspect_list = [get_aspect('Indentation')(language, allow_trailing_spaces=True)]\n+\n+invalidAspectTest = verify_local_bear(TestBear,\n+                                      valid_files=(),\n+                                      invalid_files=files,\n+                                      settings={'result': False},\n+                                      aspects=AspectList(aspect_list),","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-18T18:08:24Z","lastEditedAt":null,"updatedAt":"2018-07-18T18:08:24Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzYwNjcwNg==","url":"https://github.com/coala/coala/pull/5638#discussion_r203606706","bodyText":"@jayvdb prior to this design, I had tried to make the aspect_list in verify_local_bear only, doing something like this\naspect_list = []\nfor aspect_setting, value in aspects.items():\n    aspect, taste = aspect_setting\n    aspect_list.append([get_aspect(aspect)(language, taste=value)])\naspects = AspectList(aspect_list)\n\nBut aspects are not interpreting this to AspectList([get_aspect('TrailingSpace')(language, allow_trailing_spaces=True)]) while passing aspect_list={('TrailingSpace', 'allow_trailing_spaces'): True} from the tests. This is because taste=value is interpreting as taste=True not allow_trailing_spaces=True, even tried string 'allow_trailing_spaces'=True gives an error that you can't assign to a string literal.  Even tried passing dictionary to it but no good. And we can't set the tastes after creating the aspect object in the current aspect core.\nI spent 4 hours brainstorming on this, but of no use. That is why I redesigned the whole thing. And this is the design we have been following for tests in mapping functions like map_setting_to_aspect as well (\n  \n    \n      coala/tests/bearlib/aspects/DecoratorsTest.py\n    \n    \n         Line 47\n      in\n      2843072\n    \n    \n    \n    \n\n        \n          \n           self.section.aspects = AspectList([ \n        \n    \n  \n\n).","diffHunk":"@@ -26,6 +30,22 @@\n                               valid_files=files,\n                               invalid_files=())\n \n+language = str(TestBear.languages[0])\n+aspect_list = [get_aspect('Indentation')(language, allow_trailing_spaces=True)]\n+\n+invalidAspectTest = verify_local_bear(TestBear,\n+                                      valid_files=(),\n+                                      invalid_files=files,\n+                                      settings={'result': False},\n+                                      aspects=AspectList(aspect_list),","author":{"login":"pareksha","avatarUrl":"https://avatars1.githubusercontent.com/u/32385407?v=4","name":"Pareksha Manchanda"},"reactions":[],"createdAt":"2018-07-19T05:39:27Z","lastEditedAt":null,"updatedAt":"2018-07-19T05:39:27Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTczODEzOQ==","url":"https://github.com/coala/coala/pull/5638#discussion_r205738139","bodyText":"Now it's being tested using AspectsGeneralTestBear created in the languages=all patch.","diffHunk":"@@ -1,8 +1,20 @@\n from coalib.bears.LocalBear import LocalBear\n+from coalib.bearlib.aspects import map_setting_to_aspect\n+from coalib.bearlib.aspects.Formatting import TrailingSpace\n \n \n-class TestBear(LocalBear):\n+class TestBear(","author":{"login":"pareksha","avatarUrl":"https://avatars1.githubusercontent.com/u/32385407?v=4","name":"Pareksha Manchanda"},"reactions":[],"createdAt":"2018-07-27T10:57:43Z","lastEditedAt":null,"updatedAt":"2018-07-27T10:57:43Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTkyODA4NQ==","url":"https://github.com/coala/coala/pull/5638#discussion_r205928085","bodyText":"finish this line at the open (, and dedent everything after it to start at 4 spaces and keep indenting from there.\nthen you wont hit 80cpl so quickly and need to squish everything in the last 10 chars.","diffHunk":"@@ -25,6 +30,25 @@\n validTest = verify_local_bear(TestBear,\n                               valid_files=files,\n                               invalid_files=())\n+min_files = ('This is valid.',)\n+max_files = ('This is particularly an invalid file',)\n+AspectTest = verify_local_bear(AspectsGeneralTestBear,\n+                               valid_files=min_files,\n+                               invalid_files=max_files,\n+                               aspects=AspectList([\n+                                    get_aspect('LineLength')(\n+                                        'Unknown', max_line_length=20),\n+                                    ]),\n+                               )\n+PriorityAspectsTest = verify_local_bear(AspectsGeneralTestBear,","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-28T01:12:37Z","lastEditedAt":null,"updatedAt":"2018-07-28T01:12:37Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTkyODEwMQ==","url":"https://github.com/coala/coala/pull/5638#discussion_r205928101","bodyText":"revise the layout to use the 80 cpl effectively.","diffHunk":"@@ -25,6 +30,25 @@\n validTest = verify_local_bear(TestBear,\n                               valid_files=files,\n                               invalid_files=())\n+min_files = ('This is valid.',)\n+max_files = ('This is particularly an invalid file',)\n+AspectTest = verify_local_bear(AspectsGeneralTestBear,","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-28T01:13:05Z","lastEditedAt":null,"updatedAt":"2018-07-28T01:13:05Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTkyODIxOA==","url":"https://github.com/coala/coala/pull/5638#discussion_r205928218","bodyText":"default to None, not empty list.\nmake adjustments anywhere else that breaks when it encounters None.","diffHunk":"@@ -275,7 +295,9 @@ def check_line_result_count(self,\n                                 force_linebreaks=True,\n                                 create_tempfile=True,\n                                 tempfile_kwargs={},\n-                                settings={}):\n+                                settings={},\n+                                aspects=[],","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-28T01:16:37Z","lastEditedAt":null,"updatedAt":"2018-07-28T01:16:37Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTkyODIyOA==","url":"https://github.com/coala/coala/pull/5638#discussion_r205928228","bodyText":"aspects=None,","diffHunk":"@@ -314,6 +340,7 @@ def verify_local_bear(bear,\n                       invalid_files,\n                       filename=None,\n                       settings={},\n+                      aspects=[],","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-28T01:16:56Z","lastEditedAt":null,"updatedAt":"2018-07-28T01:16:56Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTkyODI2OA==","url":"https://github.com/coala/coala/pull/5638#discussion_r205928268","bodyText":"only set this if aspects has a value.","diffHunk":"@@ -352,6 +381,7 @@ def setUp(self):\n                             queue.Queue())\n             for name, value in settings.items():\n                 self.section.append(Setting(name, value))\n+            self.section.aspects = aspects","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-28T01:18:05Z","lastEditedAt":null,"updatedAt":"2018-07-28T01:18:05Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwNjc4MTYyMw==","url":"https://github.com/coala/coala/pull/5638#issuecomment-406781623","bodyText":"Blocked until it is working correctly in a bears repo PR.","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-21T08:48:54Z","lastEditedAt":null,"updatedAt":"2018-07-21T08:48:54Z"}]}}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1532096730000,"issue":{"htmlUrl":"https://github.com/coala/coala/pull/5639","number":5639,"title":"Update Writing_Tests.rst: Remove unwanted quotes","body":"This remove unwanted back-quotes in the documentation.\nThere is attempt to make the code bold & inline literal together.\nFixes #3855\nFor short term contributors: we understand that getting your commits well\ndefined like we require is a hard task and takes some learning. If you\nlook to help without wanting to contribute long term there's no need\nfor you to learn this. Just drop us a message and we'll take care of brushing\nup your stuff for merge!\nChecklist\n\n I read the commit guidelines and I've followed\nthem.\n I ran coala over my code locally. (All commits have to pass\nindividually. It is not sufficient to have \"fixup commits\" on your PR,\nour bot will still report the issues for the previous commit.) You will\nlikely receive a lot of bot comments and build failures if coala does not\npass on every single commit!\n\nAfter you submit your pull request, DO NOT click the 'Update Branch' button.\nWhen asked for a rebase, consult coala.io/rebase\ninstead.\nPlease consider helping us by reviewing other peoples pull requests as well:\n\npick up any PR at https://coala.io/review\nreview it (check https://coala.io/reviewing for more info)\nif you are sure that it needs work, use corobo mark wip <URL> to get it out\nof the review queue.\n\nThe more you review, the more your score will grow at coala.io and we will\nreview your PRs faster!","comments":9,"createdAt":"2018-07-18T12:41:23Z","updatedAt":"2018-07-20T14:25:30Z","closedAt":"2018-07-20T14:24:36Z","state":"merged","user":{"login":"JoeSiew","avatarUrl":"https://avatars3.githubusercontent.com/u/40135419?v=4"},"owner":{"login":"JoeSiew","avatarUrl":"https://avatars3.githubusercontent.com/u/40135419?v=4"},"assignee":{"login":"JoeSiew","avatarUrl":"https://avatars3.githubusercontent.com/u/40135419?v=4"},"labels":[{"name":"area/documentation","color":"bfe5bf"},{"name":"difficulty/newcomer","color":"65C8FF"},{"name":"size/XS","color":"00DE0F"}],"pullRequest":{"htmlUrl":"https://github.com/coala/coala/pull/5639","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQwNjE1MTAwNw==","url":"https://github.com/coala/coala/pull/5639#issuecomment-406151007","bodyText":"Ugh.  Repeat of #5633 .  @JoeSiew , do not ever delete your fork.\nFollow our newcomers guide carefully https://github.com/coala/coala/blob/master/docs/Developers/Newcomers_Guide.rst","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNjY2ODM3NA==","createdAt":"2018-07-19T05:18:10Z","content":"THUMBS_UP","user":{"login":"JoeSiew","name":null}},{"id":"MDg6UmVhY3Rpb24yNjY2OTE0OQ==","createdAt":"2018-07-19T05:50:30Z","content":"THUMBS_UP","user":{"login":"pareksha","name":"Pareksha Manchanda"}}],"createdAt":"2018-07-19T04:27:56Z","lastEditedAt":null,"updatedAt":"2018-07-19T04:27:56Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwNjE1NzY4NQ==","url":"https://github.com/coala/coala/pull/5639#issuecomment-406157685","bodyText":"Noted @jayvdb , will be more careful in the future to prevent any more mistake.","diffHunk":null,"author":{"login":"JoeSiew","avatarUrl":"https://avatars3.githubusercontent.com/u/40135419?v=4","name":null},"reactions":[],"createdAt":"2018-07-19T05:17:38Z","lastEditedAt":"2018-07-19T05:17:54Z","updatedAt":"2018-07-19T05:17:54Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwNjE3MjkyMw==","url":"https://github.com/coala/coala/pull/5639#issuecomment-406172923","bodyText":"Well, it is a syntax & rendering bug, so it can stay as 'Fixes'.\nBut since you deleted your fork, the punishment is that you need to rebase this commit manually.\nFollow the newcomer guide, and also our git guide in the same directory.","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-19T06:49:40Z","lastEditedAt":null,"updatedAt":"2018-07-19T06:49:40Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwNjU1MTU5Ng==","url":"https://github.com/coala/coala/pull/5639#issuecomment-406551596","bodyText":"Needs rebase .. ping a maintainer when CI passes, so we can push it straight in","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-20T09:55:22Z","lastEditedAt":null,"updatedAt":"2018-07-20T09:55:22Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwNjYwMDkzOQ==","url":"https://github.com/coala/coala/pull/5639#issuecomment-406600939","bodyText":"@jayvdb , all the checks has passed","diffHunk":null,"author":{"login":"JoeSiew","avatarUrl":"https://avatars3.githubusercontent.com/u/40135419?v=4","name":null},"reactions":[],"createdAt":"2018-07-20T13:29:31Z","lastEditedAt":null,"updatedAt":"2018-07-20T13:29:31Z"}]}}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1531990803000,"issue":{"htmlUrl":"https://github.com/coala/coala/pull/5641","number":5641,"title":"appveyor.yml: Sync moban","body":"Closes #5640\n\nFor short term contributors: we understand that getting your commits well\ndefined like we require is a hard task and takes some learning. If you\nlook to help without wanting to contribute long term there's no need\nfor you to learn this. Just drop us a message and we'll take care of brushing\nup your stuff for merge!\nChecklist\n\n I read the commit guidelines and I've followed\nthem.\n I ran coala over my code locally. (All commits have to pass\nindividually. It is not sufficient to have \"fixup commits\" on your PR,\nour bot will still report the issues for the previous commit.) You will\nlikely receive a lot of bot comments and build failures if coala does not\npass on every single commit!\n\nAfter you submit your pull request, DO NOT click the 'Update Branch' button.\nWhen asked for a rebase, consult coala.io/rebase\ninstead.\nPlease consider helping us by reviewing other peoples pull requests as well:\n\npick up any PR at https://coala.io/review\nreview it (check https://coala.io/reviewing for more info)\nif you are sure that it needs work, use corobo mark wip <URL> to get it out\nof the review queue.\n\nThe more you review, the more your score will grow at coala.io and we will\nreview your PRs faster!","comments":9,"createdAt":"2018-07-19T05:22:29Z","updatedAt":"2018-07-19T09:00:03Z","closedAt":"2018-07-19T08:59:44Z","state":"merged","user":{"login":"anctartica","avatarUrl":"https://avatars0.githubusercontent.com/u/7020962?v=4"},"owner":{"login":"anctartica","avatarUrl":"https://avatars0.githubusercontent.com/u/7020962?v=4"},"labels":[{"name":"platform/windows","color":"0052cc"},{"name":"size/XS","color":"00DE0F"},{"name":"type/bug","color":"e11d21"}],"pullRequest":{"htmlUrl":"https://github.com/coala/coala/pull/5641","comments":[]}}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1532669636000,"issue":{"htmlUrl":"https://github.com/coala/coala/pull/5645","number":5645,"title":"DefaultArgParser: Remove pragma nocover","body":"Related to #4166\n\nFor short term contributors: we understand that getting your commits well\ndefined like we require is a hard task and takes some learning. If you\nlook to help without wanting to contribute long term there's no need\nfor you to learn this. Just drop us a message and we'll take care of brushing\nup your stuff for merge!\nChecklist\n\n I read the commit guidelines and I've followed\nthem.\n I ran coala over my code locally. (All commits have to pass\nindividually. It is not sufficient to have \"fixup commits\" on your PR,\nour bot will still report the issues for the previous commit.) You will\nlikely receive a lot of bot comments and build failures if coala does not\npass on every single commit!\n\nAfter you submit your pull request, DO NOT click the 'Update Branch' button.\nWhen asked for a rebase, consult coala.io/rebase\ninstead.\nPlease consider helping us by reviewing other peoples pull requests as well:\n\npick up any PR at https://coala.io/review\nreview it (check https://coala.io/reviewing for more info)\nif you are sure that it needs work, use corobo mark wip <URL> to get it out\nof the review queue.\n\nThe more you review, the more your score will grow at coala.io and we will\nreview your PRs faster!","comments":9,"createdAt":"2018-07-20T09:02:46Z","updatedAt":"2018-07-27T05:33:56Z","closedAt":"2018-07-27T05:33:47Z","state":"merged","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"assignee":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"area/CLI","color":"006b75"},{"name":"area/tests","color":"bfd4f2"},{"name":"difficulty/low","color":"207de5"},{"name":"importance/low","color":"70E870"},{"name":"process/pending review","color":"bfe5bf"},{"name":"size/S","color":"B1CF0A"}],"pullRequest":{"htmlUrl":"https://github.com/coala/coala/pull/5645","comments":[{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDA4OTk2NQ==","url":"https://github.com/coala/coala/pull/5645#discussion_r204089965","bodyText":"I don't really understand what the setUp and tearDown have achieved over here","diffHunk":"@@ -31,3 +43,25 @@ def test_metavar_not_in_optional_args_sections(self):\n                           flags=re.DOTALL)\n         self.assertIsNotNone(match)\n         self.assertEqual(match.group(1), '-a, --all')\n+\n+\n+class AutocompleteTest(unittest.TestCase):\n+\n+    def setUp(self):\n+        self._old_argcomplete = coalib.parsing.DefaultArgParser.argcomplete\n+\n+    def tearDown(self):\n+        coalib.parsing.DefaultArgParser.argcomplete = self._old_argcomplete","author":{"login":"ishanSrt","avatarUrl":"https://avatars2.githubusercontent.com/u/29859362?v=4","name":"Ishan Srivastava"},"reactions":[],"createdAt":"2018-07-20T15:54:14Z","lastEditedAt":null,"updatedAt":"2018-07-20T15:54:14Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDEzMTkzNQ==","url":"https://github.com/coala/coala/pull/5645#discussion_r204131935","bodyText":"they create a backup of the state of the variable, and restore it.\nall test methods should have zero side effects after they are run, otherwise other tests may break unexpectedly and unpredictably (a good test suite uses randomised test orders to detect code which implicitly depends on other code having been run, or not been run, first).","diffHunk":"@@ -31,3 +43,25 @@ def test_metavar_not_in_optional_args_sections(self):\n                           flags=re.DOTALL)\n         self.assertIsNotNone(match)\n         self.assertEqual(match.group(1), '-a, --all')\n+\n+\n+class AutocompleteTest(unittest.TestCase):\n+\n+    def setUp(self):\n+        self._old_argcomplete = coalib.parsing.DefaultArgParser.argcomplete\n+\n+    def tearDown(self):\n+        coalib.parsing.DefaultArgParser.argcomplete = self._old_argcomplete","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-20T18:27:18Z","lastEditedAt":null,"updatedAt":"2018-07-20T18:27:18Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDE0MTAzNg==","url":"https://github.com/coala/coala/pull/5645#discussion_r204141036","bodyText":"everything seems legit except for this line. what's this for?","diffHunk":"@@ -31,3 +43,25 @@ def test_metavar_not_in_optional_args_sections(self):\n                           flags=re.DOTALL)\n         self.assertIsNotNone(match)\n         self.assertEqual(match.group(1), '-a, --all')\n+\n+\n+class AutocompleteTest(unittest.TestCase):\n+\n+    def setUp(self):\n+        self._old_argcomplete = coalib.parsing.DefaultArgParser.argcomplete\n+\n+    def tearDown(self):\n+        coalib.parsing.DefaultArgParser.argcomplete = self._old_argcomplete\n+\n+    def test_argcomplete_bear_names(self):\n+        self.assertEqual(_argcomplete_bears_names(), get_all_bears_names())\n+\n+    def test_missing_argcomplete(self):\n+        if coalib.parsing.DefaultArgParser.argcomplete is not None:\n+            coalib.parsing.DefaultArgParser.argcomplete = None\n+        fake_importer = Mock(side_effect=ImportError('import missing'))\n+        with patch('builtins.__import__', new=fake_importer):\n+            default_arg_parser()\n+        self.assertFalse(coalib.parsing.DefaultArgParser.argcomplete)\n+        # Dummy usage\n+        coalib.parsing.DefaultArgParser.argcomplete = argcomplete","author":{"login":"ishanSrt","avatarUrl":"https://avatars2.githubusercontent.com/u/29859362?v=4","name":"Ishan Srivastava"},"reactions":[],"createdAt":"2018-07-20T19:01:08Z","lastEditedAt":null,"updatedAt":"2018-07-20T19:01:08Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDE0MTE0Ng==","url":"https://github.com/coala/coala/pull/5645#discussion_r204141146","bodyText":"how come your gitmate tests pass even after this?","diffHunk":"@@ -1,8 +1,19 @@\n import argparse\n import re\n import unittest\n+from unittest.mock import patch, Mock\n \n-from coalib.parsing.DefaultArgParser import CustomFormatter\n+# Imported and unused here, to ensure an ImportError occurs here\n+# instead of inside coalib.  Please install it for the test to pass.\n+import argcomplete","author":{"login":"ishanSrt","avatarUrl":"https://avatars2.githubusercontent.com/u/29859362?v=4","name":"Ishan Srivastava"},"reactions":[],"createdAt":"2018-07-20T19:01:33Z","lastEditedAt":"2018-07-20T19:01:44Z","updatedAt":"2018-07-20T19:01:44Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDE0MTQ4NQ==","url":"https://github.com/coala/coala/pull/5645#discussion_r204141485","bodyText":"I mean when your tear down function is already resetting it","diffHunk":"@@ -31,3 +43,25 @@ def test_metavar_not_in_optional_args_sections(self):\n                           flags=re.DOTALL)\n         self.assertIsNotNone(match)\n         self.assertEqual(match.group(1), '-a, --all')\n+\n+\n+class AutocompleteTest(unittest.TestCase):\n+\n+    def setUp(self):\n+        self._old_argcomplete = coalib.parsing.DefaultArgParser.argcomplete\n+\n+    def tearDown(self):\n+        coalib.parsing.DefaultArgParser.argcomplete = self._old_argcomplete\n+\n+    def test_argcomplete_bear_names(self):\n+        self.assertEqual(_argcomplete_bears_names(), get_all_bears_names())\n+\n+    def test_missing_argcomplete(self):\n+        if coalib.parsing.DefaultArgParser.argcomplete is not None:\n+            coalib.parsing.DefaultArgParser.argcomplete = None\n+        fake_importer = Mock(side_effect=ImportError('import missing'))\n+        with patch('builtins.__import__', new=fake_importer):\n+            default_arg_parser()\n+        self.assertFalse(coalib.parsing.DefaultArgParser.argcomplete)\n+        # Dummy usage\n+        coalib.parsing.DefaultArgParser.argcomplete = argcomplete","author":{"login":"ishanSrt","avatarUrl":"https://avatars2.githubusercontent.com/u/29859362?v=4","name":"Ishan Srivastava"},"reactions":[],"createdAt":"2018-07-20T19:03:07Z","lastEditedAt":null,"updatedAt":"2018-07-20T19:03:07Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDE5NTM0NQ==","url":"https://github.com/coala/coala/pull/5645#discussion_r204195345","bodyText":"It uses the argcomplete import at the top of the file which ensures that the test module fails loudly with a suitable error message if it is not installed, instead of the import rather silently failing and the test method being a bit confusing in how it fails.","diffHunk":"@@ -31,3 +43,25 @@ def test_metavar_not_in_optional_args_sections(self):\n                           flags=re.DOTALL)\n         self.assertIsNotNone(match)\n         self.assertEqual(match.group(1), '-a, --all')\n+\n+\n+class AutocompleteTest(unittest.TestCase):\n+\n+    def setUp(self):\n+        self._old_argcomplete = coalib.parsing.DefaultArgParser.argcomplete\n+\n+    def tearDown(self):\n+        coalib.parsing.DefaultArgParser.argcomplete = self._old_argcomplete\n+\n+    def test_argcomplete_bear_names(self):\n+        self.assertEqual(_argcomplete_bears_names(), get_all_bears_names())\n+\n+    def test_missing_argcomplete(self):\n+        if coalib.parsing.DefaultArgParser.argcomplete is not None:\n+            coalib.parsing.DefaultArgParser.argcomplete = None\n+        fake_importer = Mock(side_effect=ImportError('import missing'))\n+        with patch('builtins.__import__', new=fake_importer):\n+            default_arg_parser()\n+        self.assertFalse(coalib.parsing.DefaultArgParser.argcomplete)\n+        # Dummy usage\n+        coalib.parsing.DefaultArgParser.argcomplete = argcomplete","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNjc4NTIwNA==","createdAt":"2018-07-21T13:25:56Z","content":"THUMBS_UP","user":{"login":"ishanSrt","name":"Ishan Srivastava"}}],"createdAt":"2018-07-21T00:34:41Z","lastEditedAt":null,"updatedAt":"2018-07-21T00:34:41Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDIwOTE4NQ==","url":"https://github.com/coala/coala/pull/5645#discussion_r204209185","bodyText":"Because I added a usage of the import, but the line here hasnt been modified so GitHub still shows this error","diffHunk":"@@ -1,8 +1,19 @@\n import argparse\n import re\n import unittest\n+from unittest.mock import patch, Mock\n \n-from coalib.parsing.DefaultArgParser import CustomFormatter\n+# Imported and unused here, to ensure an ImportError occurs here\n+# instead of inside coalib.  Please install it for the test to pass.\n+import argcomplete","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-21T11:58:30Z","lastEditedAt":null,"updatedAt":"2018-07-21T11:58:30Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDIxMDg3MQ==","url":"https://github.com/coala/coala/pull/5645#discussion_r204210871","bodyText":"yeah I get you!","diffHunk":"@@ -31,3 +43,25 @@ def test_metavar_not_in_optional_args_sections(self):\n                           flags=re.DOTALL)\n         self.assertIsNotNone(match)\n         self.assertEqual(match.group(1), '-a, --all')\n+\n+\n+class AutocompleteTest(unittest.TestCase):\n+\n+    def setUp(self):\n+        self._old_argcomplete = coalib.parsing.DefaultArgParser.argcomplete\n+\n+    def tearDown(self):\n+        coalib.parsing.DefaultArgParser.argcomplete = self._old_argcomplete\n+\n+    def test_argcomplete_bear_names(self):\n+        self.assertEqual(_argcomplete_bears_names(), get_all_bears_names())\n+\n+    def test_missing_argcomplete(self):\n+        if coalib.parsing.DefaultArgParser.argcomplete is not None:\n+            coalib.parsing.DefaultArgParser.argcomplete = None\n+        fake_importer = Mock(side_effect=ImportError('import missing'))\n+        with patch('builtins.__import__', new=fake_importer):\n+            default_arg_parser()\n+        self.assertFalse(coalib.parsing.DefaultArgParser.argcomplete)\n+        # Dummy usage\n+        coalib.parsing.DefaultArgParser.argcomplete = argcomplete","author":{"login":"ishanSrt","avatarUrl":"https://avatars2.githubusercontent.com/u/29859362?v=4","name":"Ishan Srivastava"},"reactions":[],"createdAt":"2018-07-21T13:26:05Z","lastEditedAt":null,"updatedAt":"2018-07-21T13:26:05Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTY2NjE1OA==","url":"https://github.com/coala/coala/pull/5645#discussion_r205666158","bodyText":"One question does *args, **kwargs is needed here?\nI don't see it getting anywhere used. or you used it for future references?","diffHunk":"@@ -369,6 +369,10 @@ def get_all_bears_names():\n     return [bear.name for bear in get_all_bears()]\n \n \n+def _argcomplete_bears_names(*args, **kwargs):","author":{"login":"RaiVaibhav","avatarUrl":"https://avatars3.githubusercontent.com/u/22278438?v=4","name":"Vaibhav Rai"},"reactions":[],"createdAt":"2018-07-27T04:37:31Z","lastEditedAt":null,"updatedAt":"2018-07-27T04:37:31Z"}]}}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1532425904000,"issue":{"htmlUrl":"https://github.com/coala/coala/pull/5647","number":5647,"title":"Update ConsoleInteraction.py","body":"For short term contributors: we understand that getting your commits well\ndefined like we require is a hard task and takes some learning. If you\nlook to help without wanting to contribute long term there's no need\nfor you to learn this. Just drop us a message and we'll take care of brushing\nup your stuff for merge!\nChecklist\n\n I read the commit guidelines and I've followed\nthem.\n I ran coala over my code locally. (All commits have to pass\nindividually. It is not sufficient to have \"fixup commits\" on your PR,\nour bot will still report the issues for the previous commit.) You will\nlikely receive a lot of bot comments and build failures if coala does not\npass on every single commit!\n\nAfter you submit your pull request, DO NOT click the 'Update Branch' button.\nWhen asked for a rebase, consult coala.io/rebase\ninstead.\nPlease consider helping us by reviewing other peoples pull requests as well:\n\npick up any PR at https://coala.io/review\nreview it (check https://coala.io/reviewing for more info)\nif you are sure that it needs work, use corobo mark wip <URL> to get it out\nof the review queue.\n\nThe more you review, the more your score will grow at coala.io and we will\nreview your PRs faster!","comments":12,"createdAt":"2018-07-20T14:35:31Z","updatedAt":"2018-07-24T09:51:44Z","closedAt":"2018-07-20T18:25:46Z","state":"merged","user":{"login":"XDoubleU","avatarUrl":"https://avatars3.githubusercontent.com/u/28691666?v=4"},"owner":{"login":"XDoubleU","avatarUrl":"https://avatars3.githubusercontent.com/u/28691666?v=4"},"assignee":{"login":"JoeSiew","avatarUrl":"https://avatars3.githubusercontent.com/u/40135419?v=4"},"labels":[{"name":"area/documentation","color":"bfe5bf"},{"name":"difficulty/newcomer","color":"65C8FF"},{"name":"size/XS","color":"00DE0F"}],"pullRequest":{"htmlUrl":"https://github.com/coala/coala/pull/5647","comments":[{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDA2Njc5MA==","url":"https://github.com/coala/coala/pull/5647#discussion_r204066790","bodyText":"remove the round brackets which are no longer needed.","diffHunk":"@@ -36,8 +36,7 @@\n from coala_utils.string_processing.Core import join_names\n \n from pygments import highlight\n-from pygments.formatters import (TerminalTrueColorFormatter,\n-                                 TerminalFormatter)\n+from pygments.formatters import (TerminalTrueColorFormatter)","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-07-20T14:40:08Z","lastEditedAt":null,"updatedAt":"2018-07-20T14:40:08Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwNzM0OTI0MA==","url":"https://github.com/coala/coala/pull/5647#issuecomment-407349240","bodyText":"The issue being referenced here is of #3855. But should be of #5643.","diffHunk":null,"author":{"login":"MacBox7","avatarUrl":"https://avatars0.githubusercontent.com/u/15063552?v=4","name":"Ankit Joshi"},"createdAt":"2018-07-24T09:51:44Z","lastEditedAt":null,"updatedAt":"2018-07-24T09:51:44Z"}]}}},{"repoOwner":"coala","repoName":"coala","updatedAtMs":1532171254000,"issue":{"htmlUrl":"https://github.com/coala/coala/pull/5648","number":5648,"title":"Smell.py: Fix docstring typo","body":"This fixes typo and changes Customer... to Customer {\nFixes #5364\n\nFor short term contributors: we understand that getting your commits well\ndefined like we require is a hard task and takes some learning. If you\nlook to help without wanting to contribute long term there's no need\nfor you to learn this. Just drop us a message and we'll take care of brushing\nup your stuff for merge!\nChecklist\n\n I read the commit guidelines and I've followed\nthem.\n I ran coala over my code locally. (All commits have to pass\nindividually. It is not sufficient to have \"fixup commits\" on your PR,\nour bot will still report the issues for the previous commit.) You will\nlikely receive a lot of bot comments and build failures if coala does not\npass on every single commit!\n\nAfter you submit your pull request, DO NOT click the 'Update Branch' button.\nWhen asked for a rebase, consult coala.io/rebase\ninstead.\nPlease consider helping us by reviewing other peoples pull requests as well:\n\npick up any PR at https://coala.io/review\nreview it (check https://coala.io/reviewing for more info)\nif you are sure that it needs work, use corobo mark wip <URL> to get it out\nof the review queue.\n\nThe more you review, the more your score will grow at coala.io and we will\nreview your PRs faster!","comments":4,"createdAt":"2018-07-21T10:41:10Z","updatedAt":"2018-07-21T11:07:34Z","closedAt":"2018-07-21T11:07:15Z","state":"merged","user":{"login":"Ishaan28malik","avatarUrl":"https://avatars3.githubusercontent.com/u/27343592?v=4"},"owner":{"login":"Ishaan28malik","avatarUrl":"https://avatars3.githubusercontent.com/u/27343592?v=4"},"labels":[{"name":"area/documentation","color":"bfe5bf"},{"name":"difficulty/newcomer","color":"65C8FF"},{"name":"size/XS","color":"00DE0F"}],"pullRequest":{"htmlUrl":"https://github.com/coala/coala/pull/5648","comments":[]}}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1531268692000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/pull/2603","number":2603,"title":"ClangBear.py: Rename range to range_obj","body":"This prevents renaming of the range keyword from range --> range_obj in\nClangBear.py.\nCloses #2585\n\nFor short term contributors: we understand that getting your commits well\ndefined like we require is a hard task and takes some learning. If you\nlook to help without wanting to contribute long term there's no need\nfor you to learn this. Just drop us a message and we'll take care of brushing\nup your stuff for merge!\nChecklist\n\n I read the commit guidelines and I've followed\nthem.\n I ran coala over my code locally. (All commits have to pass\nindividually. It is not sufficient to have \"fixup commits\" on your PR,\nour bot will still report the issues for the previous commit.) You will\nlikely receive a lot of bot comments and build failures if coala does not\npass on every single commit!\n\nAfter you submit your pull request, DO NOT click the 'Update Branch' button.\nWhen asked for a rebase, consult coala.io/rebase\ninstead.\nPlease consider helping us by reviewing other peoples pull requests as well:\n\npick up any PR at https://coala.io/review\nreview it (check https://coala.io/reviewing for more info)\nif you are sure that it needs work, use corobo mark wip <URL> to get it out\nof the review queue.\n\nThe more you review, the more your score will grow at coala.io and we will\nreview your PRs faster!","comments":6,"createdAt":"2018-07-10T22:27:49Z","updatedAt":"2018-07-11T00:24:52Z","closedAt":"2018-07-11T00:24:52Z","state":"closed","user":{"login":"kUSHAL0601","avatarUrl":"https://avatars3.githubusercontent.com/u/29600964?v=4"},"owner":{"login":"kUSHAL0601","avatarUrl":"https://avatars3.githubusercontent.com/u/29600964?v=4"},"labels":[{"name":"difficulty/newcomer","color":"65C8FF"},{"name":"process/approved","color":"009800"},{"name":"size/XS","color":"00DE0F"},{"name":"type/bug","color":"e11d21"}],"pullRequest":{"htmlUrl":"https://github.com/coala/coala-bears/pull/2603","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQwNDAwMDQ2NA==","url":"https://github.com/coala/coala-bears/pull/2603#issuecomment-404000464","bodyText":"This is a duplicate of #2586","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-07-10T23:47:07Z","lastEditedAt":null,"updatedAt":"2018-07-10T23:47:07Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwNDAwNjQ0Nw==","url":"https://github.com/coala/coala-bears/pull/2603#issuecomment-404006447","bodyText":"This PR is broken because the contributor deleted their repository (twice!)","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-07-11T00:24:52Z","lastEditedAt":null,"updatedAt":"2018-07-11T00:24:52Z"}]}}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1531277443000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/pull/2604","number":2604,"title":"Renaming range to range_obj","body":"Changing range --> range_bear in ClangBear.py to avoid reuse of keyword range\nCloses #2585\n\nFor short term contributors: we understand that getting your commits well\ndefined like we require is a hard task and takes some learning. If you\nlook to help without wanting to contribute long term there's no need\nfor you to learn this. Just drop us a message and we'll take care of brushing\nup your stuff for merge!\nChecklist\n\n I read the commit guidelines and I've followed\nthem.\n I ran coala over my code locally. (All commits have to pass\nindividually. It is not sufficient to have \"fixup commits\" on your PR,\nour bot will still report the issues for the previous commit.) You will\nlikely receive a lot of bot comments and build failures if coala does not\npass on every single commit!\n\nAfter you submit your pull request, DO NOT click the 'Update Branch' button.\nWhen asked for a rebase, consult coala.io/rebase\ninstead.\nPlease consider helping us by reviewing other peoples pull requests as well:\n\npick up any PR at https://coala.io/review\nreview it (check https://coala.io/reviewing for more info)\nif you are sure that it needs work, use corobo mark wip <URL> to get it out\nof the review queue.\n\nThe more you review, the more your score will grow at coala.io and we will\nreview your PRs faster!","comments":8,"createdAt":"2018-07-11T01:31:01Z","updatedAt":"2018-07-11T02:50:43Z","closedAt":"2018-07-11T02:50:43Z","state":"closed","user":{"login":"kUSHAL0601","avatarUrl":"https://avatars3.githubusercontent.com/u/29600964?v=4"},"owner":{"login":"kUSHAL0601","avatarUrl":"https://avatars3.githubusercontent.com/u/29600964?v=4"},"labels":[{"name":"difficulty/newcomer","color":"65C8FF"},{"name":"process/pending review","color":"bfe5bf"},{"name":"size/XS","color":"00DE0F"},{"name":"type/bug","color":"e11d21"}],"pullRequest":{"htmlUrl":"https://github.com/coala/coala-bears/pull/2604","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQwNDAyODA3OA==","url":"https://github.com/coala/coala-bears/pull/2604#issuecomment-404028078","bodyText":"Sorry .. This was your third time.  You are not reading the guides , and are not finding the solutions before making a mess.","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-07-11T02:50:43Z","lastEditedAt":null,"updatedAt":"2018-07-11T02:50:43Z"}]}}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1532323260000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/pull/2605","number":2605,"title":"CPDBear: Update URL","body":"Update URL from https://pmd.github.io/pmd-5.4.1/usage/cpd-usage.html\nto https://pmd.github.io/pmd-6.4.0/pmd_userdocs_cpd.html\nCloses #2518\n\nFor short term contributors: we understand that getting your commits well\ndefined like we require is a hard task and takes some learning. If you\nlook to help without wanting to contribute long term there's no need\nfor you to learn this. Just drop us a message and we'll take care of brushing\nup your stuff for merge!\nChecklist\n\n I read the commit guidelines and I've followed\nthem.\n I ran coala over my code locally. (All commits have to pass\nindividually. It is not sufficient to have \"fixup commits\" on your PR,\nour bot will still report the issues for the previous commit.) You will\nlikely receive a lot of bot comments and build failures if coala does not\npass on every single commit!\n\nAfter you submit your pull request, DO NOT click the 'Update Branch' button.\nWhen asked for a rebase, consult coala.io/rebase\ninstead.\nPlease consider helping us by reviewing other peoples pull requests as well:\n\npick up any PR at https://coala.io/review\nreview it (check https://coala.io/reviewing for more info)\nif you are sure that it needs work, use corobo mark wip <URL> to get it out\nof the review queue.\n\nThe more you review, the more your score will grow at coala.io and we will\nreview your PRs faster!","comments":19,"createdAt":"2018-07-11T13:15:21Z","updatedAt":"2018-07-23T05:21:00Z","closedAt":"2018-07-23T05:20:25Z","state":"merged","user":{"login":"Hrithik19","avatarUrl":"https://avatars2.githubusercontent.com/u/41113407?v=4"},"owner":{"login":"Hrithik19","avatarUrl":"https://avatars2.githubusercontent.com/u/41113407?v=4"},"assignee":{"login":"Hrithik19","avatarUrl":"https://avatars2.githubusercontent.com/u/41113407?v=4"},"labels":[{"name":"area/documentation","color":"c5def5"},{"name":"difficulty/newcomer","color":"65C8FF"},{"name":"size/XS","color":"00DE0F"}],"pullRequest":{"htmlUrl":"https://github.com/coala/coala-bears/pull/2605","comments":[]}}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1531449377000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/pull/2606","number":2606,"title":"TextLintBearTest: Replace httpstat.us with Google","body":"httpstat.us and httpbin.org have repeatedly been\ncausing failures in tests for days at a time.\nThe Google Teapot is a reliable error page.\nCloses #2588\n\nFor short term contributors: we understand that getting your commits well\ndefined like we require is a hard task and takes some learning. If you\nlook to help without wanting to contribute long term there's no need\nfor you to learn this. Just drop us a message and we'll take care of brushing\nup your stuff for merge!\nChecklist\n\n I read the commit guidelines and I've followed\nthem.\n I ran coala over my code locally. (All commits have to pass\nindividually. It is not sufficient to have \"fixup commits\" on your PR,\nour bot will still report the issues for the previous commit.) You will\nlikely receive a lot of bot comments and build failures if coala does not\npass on every single commit!\n\nAfter you submit your pull request, DO NOT click the 'Update Branch' button.\nWhen asked for a rebase, consult coala.io/rebase\ninstead.\nPlease consider helping us by reviewing other peoples pull requests as well:\n\npick up any PR at https://coala.io/review\nreview it (check https://coala.io/reviewing for more info)\nif you are sure that it needs work, use corobo mark wip <URL> to get it out\nof the review queue.\n\nThe more you review, the more your score will grow at coala.io and we will\nreview your PRs faster!","comments":8,"createdAt":"2018-07-13T01:29:04Z","updatedAt":"2018-07-13T02:36:17Z","closedAt":"2018-07-13T02:36:16Z","state":"merged","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"assignee":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"area/tests","color":"c5def5"},{"name":"difficulty/low","color":"207de5"},{"name":"importance/critical","color":"e11d21"},{"name":"size/XS","color":"00DE0F"},{"name":"type/dependencies","color":"b60205"}],"pullRequest":{"htmlUrl":"https://github.com/coala/coala-bears/pull/2606","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQwNDcwNTI5NQ==","url":"https://github.com/coala/coala-bears/pull/2606#issuecomment-404705295","bodyText":"Seems fine.","diffHunk":null,"author":{"login":"nemaniarjun","avatarUrl":"https://avatars0.githubusercontent.com/u/15715894?v=4","name":"Arjun Nemani"},"createdAt":"2018-07-13T02:18:30Z","lastEditedAt":null,"updatedAt":"2018-07-13T02:18:30Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwNDcwNTM5OA==","url":"https://github.com/coala/coala-bears/pull/2606#issuecomment-404705398","bodyText":"woops forgot I cant ack.","diffHunk":null,"author":{"login":"nemaniarjun","avatarUrl":"https://avatars0.githubusercontent.com/u/15715894?v=4","name":"Arjun Nemani"},"createdAt":"2018-07-13T02:19:11Z","lastEditedAt":null,"updatedAt":"2018-07-13T02:19:11Z"}]}}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1531742625000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/pull/2608","number":2608,"title":" ESLintBear: Fix KeyErrors for file level errors","body":"Fixes #2533","comments":9,"createdAt":"2018-07-13T06:01:14Z","updatedAt":"2018-07-16T12:03:45Z","closedAt":"2018-07-16T12:03:45Z","state":"merged","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"difficulty/low","color":"207de5"},{"name":"importance/medium","color":"fbca04"},{"name":"size/XS","color":"00DE0F"},{"name":"type/bug","color":"e11d21"}],"pullRequest":{"htmlUrl":"https://github.com/coala/coala-bears/pull/2608","comments":[{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMjM1Mzc4Mg==","url":"https://github.com/coala/coala-bears/pull/2608#discussion_r202353782","bodyText":"Note ive created #2607 to determine how we handle this properly.","diffHunk":"@@ -67,3 +77,36 @@\n     create_tempfile=False,\n     settings={'eslint_config': os.path.join(test_dir,\n                                             'eslintconfig_import.json')})\n+\n+\n+@generate_skip_decorator(ESLintBear)\n+class ESLintBearIgnoredFileTest(LocalBearTestHelper):\n+\n+    def setUp(self):\n+        self.section = Section('')\n+        self.uut = ESLintBear(self.section, Queue())\n+\n+    def test_lint_config_file(self):\n+\n+        self.maxDiff = None\n+        config_filename = os.path.join(test_dir, '.eslintrc.js')\n+\n+        self.section.append(Setting('eslint_config', config_filename))\n+\n+        expected = Result.from_values(\n+            'ESLintBear',\n+            'File ignored by default.  Use a negated ignore pattern '","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-07-13T13:45:03Z","lastEditedAt":null,"updatedAt":"2018-07-13T13:45:03Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwNTA4MjQxNw==","url":"https://github.com/coala/coala-bears/pull/2608#issuecomment-405082417","bodyText":"Why is there a 2 spaces between sentences in commit 71c67c0 ?","diffHunk":null,"author":{"login":"blazeu","avatarUrl":"https://avatars0.githubusercontent.com/u/1438859?v=4","name":"Surya Widi"},"createdAt":"2018-07-15T10:44:21Z","lastEditedAt":"2018-07-15T10:44:54Z","updatedAt":"2018-07-15T10:44:54Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwNTE3OTkwOA==","url":"https://github.com/coala/coala-bears/pull/2608#issuecomment-405179908","bodyText":"Because that is proper English :P Fixed.","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-07-16T08:34:48Z","lastEditedAt":null,"updatedAt":"2018-07-16T08:34:48Z"}]}}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1532355599000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/pull/2612","number":2612,"title":"Python minimum version 3.4.4","body":"Closes #2611\nCloses #2488","comments":6,"createdAt":"2018-07-17T03:58:45Z","updatedAt":"2018-07-23T14:19:59Z","closedAt":null,"state":"open","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"assignee":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"area/ci","color":"d93f0b"},{"name":"difficulty/low","color":"207de5"},{"name":"importance/high","color":"eb6420"},{"name":"process/pending review","color":"bfe5bf"},{"name":"size/XS","color":"00DE0F"},{"name":"type/bug","color":"e11d21"},{"name":"type/dependencies","color":"b60205"}],"pullRequest":{"htmlUrl":"https://github.com/coala/coala-bears/pull/2612","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQwNTQ1MzY4MQ==","url":"https://github.com/coala/coala-bears/pull/2612#issuecomment-405453681","bodyText":"Demo of the py27 and py33 jobs: https://travis-ci.org/jayvdb/coala-bears/builds/404723796\nThat is commit jayvdb@8229d58 which has parent 807b537, same commit as this PR.","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-07-17T04:10:31Z","lastEditedAt":null,"updatedAt":"2018-07-17T04:10:31Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwNTQ1Mzg4Mw==","url":"https://github.com/coala/coala-bears/pull/2612#issuecomment-405453883","bodyText":"The GitMate PR error is because of the revert commit, 44012a9 , which goes over the length limit because #2241 hasnt been finished.","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-07-17T04:12:14Z","lastEditedAt":null,"updatedAt":"2018-07-17T04:12:14Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwNTUxMDY1Ng==","url":"https://github.com/coala/coala-bears/pull/2612#issuecomment-405510656","bodyText":"Demo https://travis-ci.org/jayvdb/coala-bears/builds/404768441\nis commit jayvdb@3728c6d with parent jayvdb@ace719b which is the same as this PR","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-07-17T08:57:04Z","lastEditedAt":null,"updatedAt":"2018-07-17T08:57:04Z"}]}}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1533342711000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/pull/2613","number":2613,"title":"LineLengthBear: Migrate to aspects","body":"This migrates LineLengthBear to its respective\naspects and tastes.\nCloses #2602\n\nFor short term contributors: we understand that getting your commits well\ndefined like we require is a hard task and takes some learning. If you\nlook to help without wanting to contribute long term there's no need\nfor you to learn this. Just drop us a message and we'll take care of brushing\nup your stuff for merge!\nChecklist\n\n I read the commit guidelines and I've followed\nthem.\n I ran coala over my code locally. (All commits have to pass\nindividually. It is not sufficient to have \"fixup commits\" on your PR,\nour bot will still report the issues for the previous commit.) You will\nlikely receive a lot of bot comments and build failures if coala does not\npass on every single commit!\n\nAfter you submit your pull request, DO NOT click the 'Update Branch' button.\nWhen asked for a rebase, consult coala.io/rebase\ninstead.\nPlease consider helping us by reviewing other peoples pull requests as well:\n\npick up any PR at https://coala.io/review\nreview it (check https://coala.io/reviewing for more info)\nif you are sure that it needs work, use corobo mark wip <URL> to get it out\nof the review queue.\n\nThe more you review, the more your score will grow at coala.io and we will\nreview your PRs faster!","comments":4,"createdAt":"2018-07-17T04:14:43Z","updatedAt":"2018-08-04T00:31:51Z","closedAt":"2018-08-04T00:31:51Z","state":"merged","user":{"login":"pareksha","avatarUrl":"https://avatars1.githubusercontent.com/u/32385407?v=4"},"owner":{"login":"pareksha","avatarUrl":"https://avatars1.githubusercontent.com/u/32385407?v=4"},"assignee":{"login":"pareksha","avatarUrl":"https://avatars1.githubusercontent.com/u/32385407?v=4"},"labels":[{"name":"size/XS","color":"00DE0F"}],"pullRequest":{"htmlUrl":"https://github.com/coala/coala-bears/pull/2613","comments":[{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMjg5Nzk0MQ==","url":"https://github.com/coala/coala-bears/pull/2613#discussion_r202897941","bodyText":"Below it says LANGUAGES = {'All'}.\nAnd the logic of this bear should work with any language.\nI dont believe we have any language properties which help with these settings.\nCan we drop languages here?\nI will need to see some new tests for this bear which use aspects in the settings; that will help us understand how this works.","diffHunk":"@@ -5,15 +5,33 @@\n from coalib.bears.LocalBear import LocalBear\n from coalib.results.Result import Result\n from coalib.settings.Setting import typed_list\n+from coalib.bearlib.aspects import map_setting_to_aspect\n+from coalib.bearlib.aspects.Formatting import (\n+    Formatting,\n+    LineLength,\n+    Indentation,\n+)\n \n \n-class LineLengthBear(LocalBear):\n+class LineLengthBear(\n+        LocalBear,\n+        aspects={\n+            'detect': [\n+                LineLength,\n+                Indentation,\n+            ]},\n+        languages=['python'],","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-17T05:28:33Z","lastEditedAt":null,"updatedAt":"2018-07-17T05:28:33Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMjg5ODA4MA==","url":"https://github.com/coala/coala-bears/pull/2613#discussion_r202898080","bodyText":"Again, why py here?\nCan it be omitted?\nNeed tests to validate what works vs what doesnt work, so we can see if any coalib changes are needed to make this implementation sensible.","diffHunk":"@@ -49,4 +67,6 @@ def run(self,\n                     line=line_number + 1,\n                     column=max_line_length + 1,\n                     end_line=line_number + 1,\n-                    end_column=len(line))\n+                    end_column=len(line),\n+                    aspect=Formatting('py'),","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-17T05:29:41Z","lastEditedAt":null,"updatedAt":"2018-07-17T05:29:41Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMjkyNTQ5MA==","url":"https://github.com/coala/coala-bears/pull/2613#discussion_r202925490","bodyText":"We can't drop it. I don't know why but bear classes accept either 1 or 3 arguments. If I don't specify the language, it gives an error. We need a list of all languages here. I see most of the language files are imported here https://github.com/coala/coala/blob/master/coalib/bearlib/languages/__init__.py, can we import rest of the files there and make a function to return a list of all languages (in a separate PR)?","diffHunk":"@@ -5,15 +5,33 @@\n from coalib.bears.LocalBear import LocalBear\n from coalib.results.Result import Result\n from coalib.settings.Setting import typed_list\n+from coalib.bearlib.aspects import map_setting_to_aspect\n+from coalib.bearlib.aspects.Formatting import (\n+    Formatting,\n+    LineLength,\n+    Indentation,\n+)\n \n \n-class LineLengthBear(LocalBear):\n+class LineLengthBear(\n+        LocalBear,\n+        aspects={\n+            'detect': [\n+                LineLength,\n+                Indentation,\n+            ]},\n+        languages=['python'],","author":{"login":"pareksha","avatarUrl":"https://avatars1.githubusercontent.com/u/32385407?v=4","name":"Pareksha Manchanda"},"reactions":[],"createdAt":"2018-07-17T07:56:41Z","lastEditedAt":"2018-07-17T07:58:35Z","updatedAt":"2018-07-17T07:58:35Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMjkyOTczMw==","url":"https://github.com/coala/coala-bears/pull/2613#discussion_r202929733","bodyText":"Currently, we have to pass the language here to create an object of the Formatting aspect. Otherwise, it pops an error, I will see if I can do some changes in the aspect core to omit this. I had explained the problem before https://gitter.im/coala/aspects?at=5b46f760b5efcd5aeef47912. But got no response.\nRegarding the tests, LocalBearTestHelper needs to be modified for adding the tests. Let me know whether to do it here or in a separate PR?","diffHunk":"@@ -49,4 +67,6 @@ def run(self,\n                     line=line_number + 1,\n                     column=max_line_length + 1,\n                     end_line=line_number + 1,\n-                    end_column=len(line))\n+                    end_column=len(line),\n+                    aspect=Formatting('py'),","author":{"login":"pareksha","avatarUrl":"https://avatars1.githubusercontent.com/u/32385407?v=4","name":"Pareksha Manchanda"},"reactions":[],"createdAt":"2018-07-17T08:12:09Z","lastEditedAt":null,"updatedAt":"2018-07-17T08:12:09Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMjk4NjYyMA==","url":"https://github.com/coala/coala-bears/pull/2613#discussion_r202986620","bodyText":"Yes, we need an object which represents 'all languages' (including Unknown) which can be imported and used here.","diffHunk":"@@ -5,15 +5,33 @@\n from coalib.bears.LocalBear import LocalBear\n from coalib.results.Result import Result\n from coalib.settings.Setting import typed_list\n+from coalib.bearlib.aspects import map_setting_to_aspect\n+from coalib.bearlib.aspects.Formatting import (\n+    Formatting,\n+    LineLength,\n+    Indentation,\n+)\n \n \n-class LineLengthBear(LocalBear):\n+class LineLengthBear(\n+        LocalBear,\n+        aspects={\n+            'detect': [\n+                LineLength,\n+                Indentation,\n+            ]},\n+        languages=['python'],","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-17T11:31:37Z","lastEditedAt":null,"updatedAt":"2018-07-17T11:31:37Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMjk4NjY3NQ==","url":"https://github.com/coala/coala-bears/pull/2613#discussion_r202986675","bodyText":"an approach you might like to try (test on a different fork; no PR necessary) is adding a bear setting for language : Language = Unknown , which you can pass to the Formatting aspect to make it happy.\nLocalBearTestHelper is in a different repo, so it needs to be a separate PR.","diffHunk":"@@ -49,4 +67,6 @@ def run(self,\n                     line=line_number + 1,\n                     column=max_line_length + 1,\n                     end_line=line_number + 1,\n-                    end_column=len(line))\n+                    end_column=len(line),\n+                    aspect=Formatting('py'),","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNjYwOTQzMg==","createdAt":"2018-07-18T07:14:31Z","content":"THUMBS_UP","user":{"login":"pareksha","name":"Pareksha Manchanda"}}],"createdAt":"2018-07-17T11:31:49Z","lastEditedAt":null,"updatedAt":"2018-07-17T11:31:49Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTkyNzkwNw==","url":"https://github.com/coala/coala-bears/pull/2613#discussion_r205927907","bodyText":"including this aspect is confusing.\nThe test files do not use tabs, so this is irrelevant, and the bear has a default value, so it isnt needed here.\nCreate a separate test for the indent aspect.","diffHunk":"@@ -26,3 +30,29 @@\n     settings={\n         'max_line_length': '4',\n         'ignore_length_regex': 'http://, https://, ftp://'})\n+\n+\n+LineLengthBearAspectTest = verify_local_bear(\n+    LineLengthBear,\n+    valid_files=(test_file,),\n+    invalid_files=('testa',\n+                   'test line'),\n+    aspects=AspectList([\n+        get_aspect('LineLength')('Unknown', max_line_length=4),\n+        get_aspect('Indentation')('Unknown', indent_size=2),","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-28T01:08:57Z","lastEditedAt":null,"updatedAt":"2018-07-28T01:08:57Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTkyNzk1MA==","url":"https://github.com/coala/coala-bears/pull/2613#discussion_r205927950","bodyText":"as above.","diffHunk":"@@ -26,3 +30,29 @@\n     settings={\n         'max_line_length': '4',\n         'ignore_length_regex': 'http://, https://, ftp://'})\n+\n+\n+LineLengthBearAspectTest = verify_local_bear(\n+    LineLengthBear,\n+    valid_files=(test_file,),\n+    invalid_files=('testa',\n+                   'test line'),\n+    aspects=AspectList([\n+        get_aspect('LineLength')('Unknown', max_line_length=4),\n+        get_aspect('Indentation')('Unknown', indent_size=2),\n+        ]),\n+        )\n+\n+\n+LineLengthBearAspectPriorityTest = verify_local_bear(\n+    LineLengthBear,\n+    valid_files=(test_file,),\n+    invalid_files=('testa',\n+                   'test line'),\n+    aspects=AspectList([\n+        get_aspect('Indentation')('Unknown', indent_size=2),","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-28T01:09:19Z","lastEditedAt":null,"updatedAt":"2018-07-28T01:09:19Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTkzMTU1Nw==","url":"https://github.com/coala/coala-bears/pull/2613#discussion_r205931557","bodyText":"Yes, you are right, seems like LineLengthBear is not for indentation. Even doing only settings={'indent_size': '4'} gives an error as the bear does not yield any result. I am removing this aspect from this bear. 👍","diffHunk":"@@ -26,3 +30,29 @@\n     settings={\n         'max_line_length': '4',\n         'ignore_length_regex': 'http://, https://, ftp://'})\n+\n+\n+LineLengthBearAspectTest = verify_local_bear(\n+    LineLengthBear,\n+    valid_files=(test_file,),\n+    invalid_files=('testa',\n+                   'test line'),\n+    aspects=AspectList([\n+        get_aspect('LineLength')('Unknown', max_line_length=4),\n+        get_aspect('Indentation')('Unknown', indent_size=2),","author":{"login":"pareksha","avatarUrl":"https://avatars1.githubusercontent.com/u/32385407?v=4","name":"Pareksha Manchanda"},"reactions":[],"createdAt":"2018-07-28T03:47:57Z","lastEditedAt":"2018-07-28T03:50:41Z","updatedAt":"2018-07-28T03:50:41Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzM4OTYyMg==","url":"https://github.com/coala/coala-bears/pull/2613#discussion_r207389622","bodyText":"This should be language: language = languages.Unknown.  Also this arg should be the first setting, immediately after file.\nWas there some problem doing that?\nI notice that AnnotationBear and IndentationBear uses language: str\nCPDBear uses language: language","diffHunk":"@@ -1,26 +1,43 @@\n import re\n+import logging\n \n from coalib.bearlib import deprecate_settings\n from coalib.bearlib.spacing.SpacingHelper import SpacingHelper\n from coalib.bears.LocalBear import LocalBear\n from coalib.results.Result import Result\n from coalib.settings.Setting import typed_list\n+from coalib.bearlib.languages.Language import Language, UnknownLanguageError\n+from coalib.bearlib.aspects import map_setting_to_aspect\n+from coalib.bearlib.aspects.Formatting import (\n+    Formatting,\n+    LineLength,\n+)\n \n \n-class LineLengthBear(LocalBear):\n+class LineLengthBear(\n+        LocalBear,\n+        aspects={\n+            'detect': [\n+                LineLength,\n+            ]},\n+        ):\n     LANGUAGES = {'All'}\n     AUTHORS = {'The coala developers'}\n     AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n     LICENSE = 'AGPL-3.0'\n     CAN_DETECT = {'Formatting'}\n \n+    @map_setting_to_aspect(\n+        max_line_length=LineLength.max_line_length,\n+    )\n     @deprecate_settings(indent_size='tab_width')\n     def run(self,\n             filename,\n             file,\n             max_line_length: int = 79,\n             indent_size: int = SpacingHelper.DEFAULT_TAB_WIDTH,\n             ignore_length_regex: typed_list(str) = (),\n+            language: str = None,","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-08-02T22:05:49Z","lastEditedAt":null,"updatedAt":"2018-08-02T22:05:49Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzM5MTE0Mg==","url":"https://github.com/coala/coala-bears/pull/2613#discussion_r207391142","bodyText":"this disappears when you use language: language","diffHunk":"@@ -30,7 +47,30 @@ def run(self,\n         :param indent_size:         Number of spaces per indentation level.\n         :param ignore_length_regex: Lines matching each of the regular\n                                     expressions in this list will be ignored.\n+        :param language:            Programming language of the source code.\n         '''\n+        if language:\n+            try:\n+                language = Language[language]","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-08-02T22:13:15Z","lastEditedAt":null,"updatedAt":"2018-08-02T22:13:15Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzM5MTUyNg==","url":"https://github.com/coala/coala-bears/pull/2613#discussion_r207391526","bodyText":"Ideally coalib sets max_line_length automatically in coalib using aspects + language.\nA project for another day ... ;-)","diffHunk":"@@ -30,7 +47,30 @@ def run(self,\n         :param indent_size:         Number of spaces per indentation level.\n         :param ignore_length_regex: Lines matching each of the regular\n                                     expressions in this list will be ignored.\n+        :param language:            Programming language of the source code.\n         '''\n+        if language:\n+            try:\n+                language = Language[language]\n+            except UnknownLanguageError:\n+                logging.warn(\n+                    language + ' is an invalid language name '\n+                    'or is not recognized by coala. Language specific '\n+                    'line length limitation can not be applied.'\n+                )\n+                language = Language['Unknown']\n+            else:\n+                if 'max_line_length' in language.attributes:\n+                    max_line_length = language.max_line_length","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-08-02T22:15:15Z","lastEditedAt":null,"updatedAt":"2018-08-02T22:15:15Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzM5MjA3OQ==","url":"https://github.com/coala/coala-bears/pull/2613#discussion_r207392079","bodyText":"no.  we fall back to the setting , which will be in the arg max_line_length, which defaults to 79 cpl.\nBut most Language will never have a max_line_length, because most languages dont restrict that, so this warning is not user friendly, nor is it developer friendly.  We dont want patches for adding max_line_length to language definitions unless the language does restrict line length, and we know that is rare.","diffHunk":"@@ -30,7 +47,30 @@ def run(self,\n         :param indent_size:         Number of spaces per indentation level.\n         :param ignore_length_regex: Lines matching each of the regular\n                                     expressions in this list will be ignored.\n+        :param language:            Programming language of the source code.\n         '''\n+        if language:\n+            try:\n+                language = Language[language]\n+            except UnknownLanguageError:\n+                logging.warn(\n+                    language + ' is an invalid language name '\n+                    'or is not recognized by coala. Language specific '\n+                    'line length limitation can not be applied.'\n+                )\n+                language = Language['Unknown']\n+            else:\n+                if 'max_line_length' in language.attributes:\n+                    max_line_length = language.max_line_length\n+                else:\n+                    logging.warn(\n+                        'Language ' + str(language) + ' does not have '\n+                        '`maximum line length` defined in coalang. '\n+                        'Falling back to 80 characters as maximum line length.'","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNzM5NzA1Nw==","createdAt":"2018-08-03T05:37:50Z","content":"THUMBS_UP","user":{"login":"pareksha","name":"Pareksha Manchanda"}}],"createdAt":"2018-08-02T22:18:11Z","lastEditedAt":null,"updatedAt":"2018-08-02T22:18:11Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzM5MjkxNw==","url":"https://github.com/coala/coala-bears/pull/2613#discussion_r207392917","bodyText":"closing brackets for these verify_local_bear calls should be hard set against the left margin","diffHunk":"@@ -26,3 +34,50 @@\n     settings={\n         'max_line_length': '4',\n         'ignore_length_regex': 'http://, https://, ftp://'})\n+\n+\n+LineLengthBearLangSpecificLineLengthTest = verify_local_bear(\n+    LineLengthBear,\n+    valid_files=(test_file,),\n+    invalid_files=(invalid_VB_file,),\n+    settings={'language': 'VisualBasic'},\n+        )\n+\n+\n+LineLengthBearValidLanguageTest = verify_local_bear(\n+    LineLengthBear,\n+    valid_files=(test_file,),\n+    invalid_files=(invalid_general_file,),\n+    settings={'language': 'C'},\n+        )","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-08-02T22:22:33Z","lastEditedAt":null,"updatedAt":"2018-08-02T22:22:33Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzQ0MDY3NQ==","url":"https://github.com/coala/coala-bears/pull/2613#discussion_r207440675","bodyText":"Okay, I'll remove the warning :)","diffHunk":"@@ -30,7 +47,30 @@ def run(self,\n         :param indent_size:         Number of spaces per indentation level.\n         :param ignore_length_regex: Lines matching each of the regular\n                                     expressions in this list will be ignored.\n+        :param language:            Programming language of the source code.\n         '''\n+        if language:\n+            try:\n+                language = Language[language]\n+            except UnknownLanguageError:\n+                logging.warn(\n+                    language + ' is an invalid language name '\n+                    'or is not recognized by coala. Language specific '\n+                    'line length limitation can not be applied.'\n+                )\n+                language = Language['Unknown']\n+            else:\n+                if 'max_line_length' in language.attributes:\n+                    max_line_length = language.max_line_length\n+                else:\n+                    logging.warn(\n+                        'Language ' + str(language) + ' does not have '\n+                        '`maximum line length` defined in coalang. '\n+                        'Falling back to 80 characters as maximum line length.'","author":{"login":"pareksha","avatarUrl":"https://avatars1.githubusercontent.com/u/32385407?v=4","name":"Pareksha Manchanda"},"reactions":[],"createdAt":"2018-08-03T04:55:46Z","lastEditedAt":null,"updatedAt":"2018-08-03T04:55:46Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzQ0NDk4MQ==","url":"https://github.com/coala/coala-bears/pull/2613#discussion_r207444981","bodyText":"The problem I am facing with language: language is in case of an invalid language. It is designed for bears where one valid language is compulsory. If the language is invalid, it jumps out of the bear with ValueError (without running the bear), we won't be able to set the language to Unknown if there is an invalid language. Even if I do language: language = None, it doesn't help.","diffHunk":"@@ -1,26 +1,43 @@\n import re\n+import logging\n \n from coalib.bearlib import deprecate_settings\n from coalib.bearlib.spacing.SpacingHelper import SpacingHelper\n from coalib.bears.LocalBear import LocalBear\n from coalib.results.Result import Result\n from coalib.settings.Setting import typed_list\n+from coalib.bearlib.languages.Language import Language, UnknownLanguageError\n+from coalib.bearlib.aspects import map_setting_to_aspect\n+from coalib.bearlib.aspects.Formatting import (\n+    Formatting,\n+    LineLength,\n+)\n \n \n-class LineLengthBear(LocalBear):\n+class LineLengthBear(\n+        LocalBear,\n+        aspects={\n+            'detect': [\n+                LineLength,\n+            ]},\n+        ):\n     LANGUAGES = {'All'}\n     AUTHORS = {'The coala developers'}\n     AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n     LICENSE = 'AGPL-3.0'\n     CAN_DETECT = {'Formatting'}\n \n+    @map_setting_to_aspect(\n+        max_line_length=LineLength.max_line_length,\n+    )\n     @deprecate_settings(indent_size='tab_width')\n     def run(self,\n             filename,\n             file,\n             max_line_length: int = 79,\n             indent_size: int = SpacingHelper.DEFAULT_TAB_WIDTH,\n             ignore_length_regex: typed_list(str) = (),\n+            language: str = None,","author":{"login":"pareksha","avatarUrl":"https://avatars1.githubusercontent.com/u/32385407?v=4","name":"Pareksha Manchanda"},"reactions":[],"createdAt":"2018-08-03T05:35:38Z","lastEditedAt":null,"updatedAt":"2018-08-03T05:35:38Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzQ1NDUwNQ==","url":"https://github.com/coala/coala-bears/pull/2613#discussion_r207454505","bodyText":"If the language is invalid, it should give a ValueError.  They should omit it, or specify language = Unknown ;-).","diffHunk":"@@ -1,26 +1,43 @@\n import re\n+import logging\n \n from coalib.bearlib import deprecate_settings\n from coalib.bearlib.spacing.SpacingHelper import SpacingHelper\n from coalib.bears.LocalBear import LocalBear\n from coalib.results.Result import Result\n from coalib.settings.Setting import typed_list\n+from coalib.bearlib.languages.Language import Language, UnknownLanguageError\n+from coalib.bearlib.aspects import map_setting_to_aspect\n+from coalib.bearlib.aspects.Formatting import (\n+    Formatting,\n+    LineLength,\n+)\n \n \n-class LineLengthBear(LocalBear):\n+class LineLengthBear(\n+        LocalBear,\n+        aspects={\n+            'detect': [\n+                LineLength,\n+            ]},\n+        ):\n     LANGUAGES = {'All'}\n     AUTHORS = {'The coala developers'}\n     AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n     LICENSE = 'AGPL-3.0'\n     CAN_DETECT = {'Formatting'}\n \n+    @map_setting_to_aspect(\n+        max_line_length=LineLength.max_line_length,\n+    )\n     @deprecate_settings(indent_size='tab_width')\n     def run(self,\n             filename,\n             file,\n             max_line_length: int = 79,\n             indent_size: int = SpacingHelper.DEFAULT_TAB_WIDTH,\n             ignore_length_regex: typed_list(str) = (),\n+            language: str = None,","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-08-03T06:44:51Z","lastEditedAt":null,"updatedAt":"2018-08-03T06:44:51Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzQ5Njc4Nw==","url":"https://github.com/coala/coala-bears/pull/2613#discussion_r207496787","bodyText":"If the user has specified a language, we should respect that when we create the Result.","diffHunk":"@@ -30,7 +46,13 @@ def run(self,\n         :param indent_size:         Number of spaces per indentation level.\n         :param ignore_length_regex: Lines matching each of the regular\n                                     expressions in this list will be ignored.\n+        :param language:            Programming language of the source code.\n         '''\n+        if 'max_line_length' in language.attributes:\n+            max_line_length = language.max_line_length\n+        else:\n+            language = Language['Unknown']","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-08-03T09:52:06Z","lastEditedAt":null,"updatedAt":"2018-08-03T09:52:06Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzQ5Njk2MA==","url":"https://github.com/coala/coala-bears/pull/2613#discussion_r207496960","bodyText":"#2613 (comment) not done.","diffHunk":"@@ -26,3 +34,42 @@\n     settings={\n         'max_line_length': '4',\n         'ignore_length_regex': 'http://, https://, ftp://'})\n+\n+\n+LineLengthBearLangSpecificLineLengthTest = verify_local_bear(\n+    LineLengthBear,\n+    valid_files=(test_file,),\n+    invalid_files=(invalid_VB_file,),\n+    settings={'language': 'VisualBasic'},\n+    )","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-08-03T09:52:46Z","lastEditedAt":null,"updatedAt":"2018-08-03T09:52:46Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzU0MTM5NQ==","url":"https://github.com/coala/coala-bears/pull/2613#discussion_r207541395","bodyText":"should have also been moved up","diffHunk":"@@ -30,7 +46,11 @@ def run(self,\n         :param indent_size:         Number of spaces per indentation level.\n         :param ignore_length_regex: Lines matching each of the regular\n                                     expressions in this list will be ignored.\n+        :param language:            Programming language of the source code.","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNzQxODc5OQ==","createdAt":"2018-08-03T14:16:34Z","content":"THUMBS_UP","user":{"login":"pareksha","name":"Pareksha Manchanda"}}],"createdAt":"2018-08-03T13:20:20Z","lastEditedAt":null,"updatedAt":"2018-08-03T13:20:20Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzU1ODc2OQ==","url":"https://github.com/coala/coala-bears/pull/2613#discussion_r207558769","bodyText":"Yeah, forgot, will move up once core PR is merged so that there's only one next push :)","diffHunk":"@@ -30,7 +46,11 @@ def run(self,\n         :param indent_size:         Number of spaces per indentation level.\n         :param ignore_length_regex: Lines matching each of the regular\n                                     expressions in this list will be ignored.\n+        :param language:            Programming language of the source code.","author":{"login":"pareksha","avatarUrl":"https://avatars1.githubusercontent.com/u/32385407?v=4","name":"Pareksha Manchanda"},"reactions":[],"createdAt":"2018-08-03T14:16:46Z","lastEditedAt":null,"updatedAt":"2018-08-03T14:16:46Z"}]}}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1532321649000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/pull/2614","number":2614,"title":" .moban.yaml: Add CI check scripts","body":"Depends on #2612","comments":2,"createdAt":"2018-07-17T08:16:18Z","updatedAt":"2018-07-23T04:54:09Z","closedAt":null,"state":"open","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"area/ci","color":"d93f0b"},{"name":"difficulty/low","color":"207de5"},{"name":"importance/high","color":"eb6420"},{"name":"process/pending review","color":"bfe5bf"},{"name":"size/S","color":"B1CF0A"},{"name":"status/blocked","color":"e11d21"},{"name":"type/dependencies","color":"b60205"}],"pullRequest":{"htmlUrl":"https://github.com/coala/coala-bears/pull/2614","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQwNjkzODg3Mw==","url":"https://github.com/coala/coala-bears/pull/2614#issuecomment-406938873","bodyText":"TextLintBearTest is failing on Python 3.6.\nhttps://travis-ci.org/coala/coala-bears/jobs/404782492#L7735","diffHunk":null,"author":{"login":"sangamcse","avatarUrl":"https://avatars2.githubusercontent.com/u/26381717?v=4","name":"Sangam Kumar"},"createdAt":"2018-07-23T04:54:09Z","lastEditedAt":null,"updatedAt":"2018-07-23T04:54:09Z"}]}}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1533461236000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/pull/2615","number":2615,"title":"setup.cfg: Remove pytest config 'python_functions'","body":"setup.cfg currently contains:\npython_functions = *_test\nThis has the effect of allowing functions like test(..) to\nexist and not be considered test functions.  Two sets have appeared.\nWhen pytest defaults are used, these two sets of functions called\ntest(..) result in pytest loading failures as they are not valid\npytest test functions, but are helper functions for unittests.\nThe arguments on these functions should be fixture names, and they\nare not.  This confuses people who know pytest naming conventions.\n\nFor short term contributors: we understand that getting your commits well\ndefined like we require is a hard task and takes some learning. If you\nlook to help without wanting to contribute long term there's no need\nfor you to learn this. Just drop us a message and we'll take care of brushing\nup your stuff for merge!\nChecklist\n\n I read the commit guidelines and I've followed\nthem.\n I ran coala over my code locally. (All commits have to pass\nindividually. It is not sufficient to have \"fixup commits\" on your PR,\nour bot will still report the issues for the previous commit.) You will\nlikely receive a lot of bot comments and build failures if coala does not\npass on every single commit!\n\nAfter you submit your pull request, DO NOT click the 'Update Branch' button.\nWhen asked for a rebase, consult coala.io/rebase\ninstead.\nPlease consider helping us by reviewing other peoples pull requests as well:\n\npick up any PR at https://coala.io/review\nreview it (check https://coala.io/reviewing for more info)\nif you are sure that it needs work, use corobo mark wip <URL> to get it out\nof the review queue.\n\nThe more you review, the more your score will grow at coala.io and we will\nreview your PRs faster!","comments":11,"createdAt":"2018-07-17T15:17:31Z","updatedAt":"2018-08-05T09:27:16Z","closedAt":"2018-08-05T09:26:53Z","state":"merged","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"size/XS","color":"00DE0F"}],"pullRequest":{"htmlUrl":"https://github.com/coala/coala-bears/pull/2615","comments":[]}}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1533152049000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/pull/2616","number":2616,"title":".ci/generate_bear_requirements.py:  Generates R dependencies","body":"Changes made in generate_bear_requirements.py and .mobal.yaml to\ngenerate R dependencies using Jinja template\n(.moban.dt/Description.jj2)\nCloses #2482\n\nFor short term contributors: we understand that getting your commits well\ndefined like we require is a hard task and takes some learning. If you\nlook to help without wanting to contribute long term there's no need\nfor you to learn this. Just drop us a message and we'll take care of brushing\nup your stuff for merge!\nChecklist\n\n I read the commit guidelines and I've followed\nthem.\n I ran coala over my code locally. (All commits have to pass\nindividually. It is not sufficient to have \"fixup commits\" on your PR,\nour bot will still report the issues for the previous commit.) You will\nlikely receive a lot of bot comments and build failures if coala does not\npass on every single commit!\n\nAfter you submit your pull request, DO NOT click the 'Update Branch' button.\nWhen asked for a rebase, consult coala.io/rebase\ninstead.\nPlease consider helping us by reviewing other peoples pull requests as well:\n\npick up any PR at https://coala.io/review\nreview it (check https://coala.io/reviewing for more info)\nif you are sure that it needs work, use corobo mark wip <URL> to get it out\nof the review queue.\n\nThe more you review, the more your score will grow at coala.io and we will\nreview your PRs faster!","comments":6,"createdAt":"2018-07-18T11:07:35Z","updatedAt":"2018-08-01T19:34:09Z","closedAt":"2018-08-01T19:34:08Z","state":"closed","user":{"login":"SubbulakshmiRS","avatarUrl":"https://avatars3.githubusercontent.com/u/32260751?v=4"},"owner":{"login":"SubbulakshmiRS","avatarUrl":"https://avatars3.githubusercontent.com/u/32260751?v=4"},"assignee":{"login":"SubbulakshmiRS","avatarUrl":"https://avatars3.githubusercontent.com/u/32260751?v=4"},"labels":[{"name":"difficulty/low","color":"207de5"},{"name":"importance/low","color":"70e870"},{"name":"process/pending review","color":"bfe5bf"},{"name":"size/XS","color":"00DE0F"}],"pullRequest":{"htmlUrl":"https://github.com/coala/coala-bears/pull/2616","comments":[{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzU5OTkxMw==","url":"https://github.com/coala/coala-bears/pull/2616#discussion_r203599913","bodyText":"needs to come from the variables in .moban.yaml","diffHunk":"@@ -0,0 +1,16 @@\n+Package: coala\n+Version: 0.12.0.dev","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-07-19T04:41:00Z","lastEditedAt":null,"updatedAt":"2018-07-19T04:41:00Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzU5OTkxOQ==","url":"https://github.com/coala/coala-bears/pull/2616#discussion_r203599919","bodyText":"needs to come from the variables in .moban.yaml","diffHunk":"@@ -0,0 +1,16 @@\n+Package: coala","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-07-19T04:41:05Z","lastEditedAt":null,"updatedAt":"2018-07-19T04:41:05Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzU5OTkzNQ==","url":"https://github.com/coala/coala-bears/pull/2616#discussion_r203599935","bodyText":"needs to come from the variables in .moban.yaml","diffHunk":"@@ -0,0 +1,16 @@\n+Package: coala\n+Version: 0.12.0.dev\n+Title: R dependencies of Coala package\n+Author: The coala developers","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-07-19T04:41:17Z","lastEditedAt":null,"updatedAt":"2018-07-19T04:41:17Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzU5OTk0Mw==","url":"https://github.com/coala/coala-bears/pull/2616#discussion_r203599943","bodyText":"needs to come from the variables in .moban.yaml","diffHunk":"@@ -0,0 +1,16 @@\n+Package: coala\n+Version: 0.12.0.dev\n+Title: R dependencies of Coala package\n+Author: The coala developers\n+Mainainer: Lasse Schuirmann, Fabian Neuschmidt, Mischa Krxfcger\n+Description: Coala is used for linting and fixing code for all languages.","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-07-19T04:41:23Z","lastEditedAt":null,"updatedAt":"2018-07-19T04:41:23Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzU5OTk0OQ==","url":"https://github.com/coala/coala-bears/pull/2616#discussion_r203599949","bodyText":"Mainainer is spelling mistake; and the value needs to come from the variables in .moban.yaml","diffHunk":"@@ -0,0 +1,16 @@\n+Package: coala\n+Version: 0.12.0.dev\n+Title: R dependencies of Coala package\n+Author: The coala developers\n+Mainainer: Lasse Schuirmann, Fabian Neuschmidt, Mischa Krxfcger","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-07-19T04:41:28Z","lastEditedAt":null,"updatedAt":"2018-07-19T04:41:28Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzYwMDA3Mw==","url":"https://github.com/coala/coala-bears/pull/2616#discussion_r203600073","bodyText":"needs to come from the variables in .moban.yaml","diffHunk":"@@ -0,0 +1,16 @@\n+Package: coala\n+Version: 0.12.0.dev\n+Title: R dependencies of Coala package","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-07-19T04:43:00Z","lastEditedAt":null,"updatedAt":"2018-07-19T04:43:00Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzYwMDEyMg==","url":"https://github.com/coala/coala-bears/pull/2616#discussion_r203600122","bodyText":"please git add Description and commit it as part of your commit.","diffHunk":"@@ -31,6 +31,7 @@ targets:\n   - Gemfile: Gemfile.jj2\n   - package.json: package.json.jj2\n   - bear-requirements.txt: bear-requirements.txt.jj2\n+  - Decription: Description.jj2","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-07-19T04:43:24Z","lastEditedAt":null,"updatedAt":"2018-07-19T04:43:24Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzYwOTQ3OA==","url":"https://github.com/coala/coala-bears/pull/2616#discussion_r203609478","bodyText":"@jayvdb Maybe it is better if we keep these alphabetically sorted. The diff will be large and will need careful reviewing but, probably better in the long term.","diffHunk":"@@ -214,6 +224,8 @@ def sort_requirements(req_dict):\n     requirements['gem_requirements'] = get_gem_requirements(gem_reqs)\n     requirements['npm_requirements'] = get_npm_requirements(npm_reqs)\n     requirements['pip_requirements'] = get_pip_requirements(pip_reqs)\n+    requirements['r_requirements'] = get_r_requirements(r_reqs)","author":{"login":"nemaniarjun","avatarUrl":"https://avatars0.githubusercontent.com/u/15715894?v=4","name":"Arjun Nemani"},"createdAt":"2018-07-19T05:58:06Z","lastEditedAt":null,"updatedAt":"2018-07-19T05:58:06Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzc2NjA0Nw==","url":"https://github.com/coala/coala-bears/pull/2616#discussion_r203766047","bodyText":"what was the use of inherited_requirements here?","diffHunk":"@@ -152,6 +159,9 @@ def get_pip_requirements(requirements):\n     inherited_requirements = get_inherited_requirements()\n     return _get_requirements(requirements, '~=', inherited_requirements)\n \n+def get_r_requirements(requirements):\n+    inherited_requirements=get_inherited_requirements()\n+    return _get_requirements(requirements, '>=')","author":{"login":"anctartica","avatarUrl":"https://avatars0.githubusercontent.com/u/7020962?v=4","name":""},"createdAt":"2018-07-19T15:13:16Z","lastEditedAt":null,"updatedAt":"2018-07-19T15:13:16Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzc2NjE3Mg==","url":"https://github.com/coala/coala-bears/pull/2616#discussion_r203766172","bodyText":"remove it 😄","diffHunk":"@@ -152,6 +159,9 @@ def get_pip_requirements(requirements):\n     inherited_requirements = get_inherited_requirements()\n     return _get_requirements(requirements, '~=', inherited_requirements)\n \n+def get_r_requirements(requirements):\n+    inherited_requirements=get_inherited_requirements()\n+    return _get_requirements(requirements, '>=')","author":{"login":"anctartica","avatarUrl":"https://avatars0.githubusercontent.com/u/7020962?v=4","name":""},"createdAt":"2018-07-19T15:13:35Z","lastEditedAt":null,"updatedAt":"2018-07-19T15:13:35Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzc2NzYwOQ==","url":"https://github.com/coala/coala-bears/pull/2616#discussion_r203767609","bodyText":"remove this blank line","diffHunk":"@@ -214,6 +224,8 @@ def sort_requirements(req_dict):\n     requirements['gem_requirements'] = get_gem_requirements(gem_reqs)\n     requirements['npm_requirements'] = get_npm_requirements(npm_reqs)\n     requirements['pip_requirements'] = get_pip_requirements(pip_reqs)\n+    requirements['r_requirements'] = get_r_requirements(r_reqs)\n+","author":{"login":"anctartica","avatarUrl":"https://avatars0.githubusercontent.com/u/7020962?v=4","name":""},"createdAt":"2018-07-19T15:17:34Z","lastEditedAt":null,"updatedAt":"2018-07-19T15:17:34Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDA3NDA3MQ==","url":"https://github.com/coala/coala-bears/pull/2616#discussion_r204074071","bodyText":"I tried doing so but this error came up,\nfatal: pathspec 'Description' did not match any files\nI was only able to execute the above command when i created a empty file of same name .","diffHunk":"@@ -31,6 +31,7 @@ targets:\n   - Gemfile: Gemfile.jj2\n   - package.json: package.json.jj2\n   - bear-requirements.txt: bear-requirements.txt.jj2\n+  - Decription: Description.jj2","author":{"login":"SubbulakshmiRS","avatarUrl":"https://avatars3.githubusercontent.com/u/32260751?v=4","name":"R S Subbulakshmi"},"createdAt":"2018-07-20T15:01:57Z","lastEditedAt":null,"updatedAt":"2018-07-20T15:01:57Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDA3NzkzNA==","url":"https://github.com/coala/coala-bears/pull/2616#discussion_r204077934","bodyText":"@anctartica has a fix for that at #2625\nWe can merge that first, then this one","diffHunk":"@@ -214,6 +224,8 @@ def sort_requirements(req_dict):\n     requirements['gem_requirements'] = get_gem_requirements(gem_reqs)\n     requirements['npm_requirements'] = get_npm_requirements(npm_reqs)\n     requirements['pip_requirements'] = get_pip_requirements(pip_reqs)\n+    requirements['r_requirements'] = get_r_requirements(r_reqs)","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-07-20T15:14:41Z","lastEditedAt":null,"updatedAt":"2018-07-20T15:14:41Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDA3ODQ2OQ==","url":"https://github.com/coala/coala-bears/pull/2616#discussion_r204078469","bodyText":"This should be R dependencies for {{ description }}","diffHunk":"@@ -0,0 +1,16 @@\n+Package: {{ name }}\n+Version: {{ build_version }}\n+Title: R dependencies of Coala package","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-07-20T15:16:20Z","lastEditedAt":null,"updatedAt":"2018-07-20T15:16:20Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDEwMjk2NA==","url":"https://github.com/coala/coala-bears/pull/2616#discussion_r204102964","bodyText":"remove this blank line","diffHunk":"@@ -30,6 +30,8 @@\n from dependency_management.requirements.GemRequirement import GemRequirement\n from dependency_management.requirements.NpmRequirement import NpmRequirement\n from dependency_management.requirements.PipRequirement import PipRequirement\n+from dependency_management.requirements.RscriptRequirement import RscriptRequirement\n+","author":{"login":"anctartica","avatarUrl":"https://avatars0.githubusercontent.com/u/7020962?v=4","name":""},"createdAt":"2018-07-20T16:41:12Z","lastEditedAt":null,"updatedAt":"2018-07-20T16:41:12Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwNjE1MzI1Ng==","url":"https://github.com/coala/coala-bears/pull/2616#issuecomment-406153256","bodyText":"The commands in https://github.com/coala/coala-bears/blob/master/.ci/deps.r.sh can be simplified to install the packages listed in the new Description file..","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-07-19T04:45:48Z","lastEditedAt":null,"updatedAt":"2018-07-19T04:45:48Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwNjg1OTAzMg==","url":"https://github.com/coala/coala-bears/pull/2616#issuecomment-406859032","bodyText":"Can you please rebase","diffHunk":null,"author":{"login":"anctartica","avatarUrl":"https://avatars0.githubusercontent.com/u/7020962?v=4","name":""},"createdAt":"2018-07-22T11:30:32Z","lastEditedAt":"2018-07-22T11:30:41Z","updatedAt":"2018-07-22T11:30:41Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwNjkwODk3MA==","url":"https://github.com/coala/coala-bears/pull/2616#issuecomment-406908970","bodyText":"@SubbulakshmiRS see #2616 (comment) and #2616 (review)\nYou must run moban and then git add Description .  If you get an error, you need to investigate and fix it.  Or ask for help.\nIf you do not add Description , this PR can not be reviewed / merged.","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-07-23T00:23:50Z","lastEditedAt":"2018-07-23T00:25:54Z","updatedAt":"2018-07-23T00:25:54Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwOTY5NTEwNQ==","url":"https://github.com/coala/coala-bears/pull/2616#issuecomment-409695105","bodyText":"Zero changes since last time.\nTaking too long.\nReassigning issue.","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-08-01T19:34:08Z","lastEditedAt":null,"updatedAt":"2018-08-01T19:34:08Z"}]}}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1532265118000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/pull/2620","number":2620,"title":"appveyor.yml: Sync moban","body":"Closes #2619\n\nFor short term contributors: we understand that getting your commits well\ndefined like we require is a hard task and takes some learning. If you\nlook to help without wanting to contribute long term there's no need\nfor you to learn this. Just drop us a message and we'll take care of brushing\nup your stuff for merge!\nChecklist\n\n I read the commit guidelines and I've followed\nthem.\n I ran coala over my code locally. (All commits have to pass\nindividually. It is not sufficient to have \"fixup commits\" on your PR,\nour bot will still report the issues for the previous commit.) You will\nlikely receive a lot of bot comments and build failures if coala does not\npass on every single commit!\n\nAfter you submit your pull request, DO NOT click the 'Update Branch' button.\nWhen asked for a rebase, consult coala.io/rebase\ninstead.\nPlease consider helping us by reviewing other peoples pull requests as well:\n\npick up any PR at https://coala.io/review\nreview it (check https://coala.io/reviewing for more info)\nif you are sure that it needs work, use corobo mark wip <URL> to get it out\nof the review queue.\n\nThe more you review, the more your score will grow at coala.io and we will\nreview your PRs faster!","comments":4,"createdAt":"2018-07-19T05:29:28Z","updatedAt":"2018-07-22T13:11:58Z","closedAt":"2018-07-22T13:11:50Z","state":"merged","user":{"login":"anctartica","avatarUrl":"https://avatars0.githubusercontent.com/u/7020962?v=4"},"owner":{"login":"anctartica","avatarUrl":"https://avatars0.githubusercontent.com/u/7020962?v=4"},"labels":[{"name":"process/pending review","color":"bfe5bf"},{"name":"size/XS","color":"00DE0F"},{"name":"type/test","color":"207de5"}],"pullRequest":{"htmlUrl":"https://github.com/coala/coala-bears/pull/2620","comments":[]}}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1532369741000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/pull/2624","number":2624,"title":"Change name of 'range'","body":"Rename 'range' when looping over cindex.SourceRange objects. #2585","comments":26,"createdAt":"2018-07-19T17:57:20Z","updatedAt":"2018-07-23T18:15:41Z","closedAt":"2018-07-23T17:14:34Z","state":"closed","user":{"login":"MorTD","avatarUrl":"https://avatars2.githubusercontent.com/u/26660609?v=4"},"owner":{"login":"MorTD","avatarUrl":"https://avatars2.githubusercontent.com/u/26660609?v=4"},"assignee":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"area/tests","color":"c5def5"},{"name":"difficulty/low","color":"207de5"},{"name":"importance/critical","color":"e11d21"},{"name":"importance/low","color":"70e870"},{"name":"process/pending review","color":"bfe5bf"},{"name":"size/XS","color":"00DE0F"},{"name":"type/dependencies","color":"b60205"}],"pullRequest":{"htmlUrl":"https://github.com/coala/coala-bears/pull/2624","comments":[{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDEwOTA4NQ==","url":"https://github.com/coala/coala-bears/pull/2624#discussion_r204109085","bodyText":"It would be better to call the parameter as clang_range rather than srcrange.","diffHunk":"@@ -52,17 +52,17 @@ def diff_from_clang_fixit(fixit, file):\n     return Diff.from_string_arrays(file, new_file)\n \n \n-def sourcerange_from_clang_range(range):\n+def sourcerange_from_clang_range(srcrange):","author":{"login":"MacBox7","avatarUrl":"https://avatars0.githubusercontent.com/u/15063552?v=4","name":"Ankit Joshi"},"createdAt":"2018-07-20T17:04:15Z","lastEditedAt":null,"updatedAt":"2018-07-20T17:04:15Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDEwOTE0OA==","url":"https://github.com/coala/coala-bears/pull/2624#discussion_r204109148","bodyText":"Same here.","diffHunk":"@@ -99,8 +99,8 @@ def run(self, filename, file,\n                         2: RESULT_SEVERITY.NORMAL,\n                         3: RESULT_SEVERITY.MAJOR,\n                         4: RESULT_SEVERITY.MAJOR}.get(diag.severity)\n-            affected_code = tuple(sourcerange_from_clang_range(range)\n-                                  for range in diag.ranges)","author":{"login":"MacBox7","avatarUrl":"https://avatars0.githubusercontent.com/u/15063552?v=4","name":"Ankit Joshi"},"createdAt":"2018-07-20T17:04:31Z","lastEditedAt":null,"updatedAt":"2018-07-20T17:04:31Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDIzNDMwMw==","url":"https://github.com/coala/coala-bears/pull/2624#discussion_r204234303","bodyText":"done @MacBox7","diffHunk":"@@ -52,17 +52,17 @@ def diff_from_clang_fixit(fixit, file):\n     return Diff.from_string_arrays(file, new_file)\n \n \n-def sourcerange_from_clang_range(range):\n+def sourcerange_from_clang_range(srcrange):","author":{"login":"MorTD","avatarUrl":"https://avatars2.githubusercontent.com/u/26660609?v=4","name":"Mor Elmaliach"},"createdAt":"2018-07-22T09:52:36Z","lastEditedAt":null,"updatedAt":"2018-07-22T09:52:36Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDIzNDMxMA==","url":"https://github.com/coala/coala-bears/pull/2624#discussion_r204234310","bodyText":"As well as here","diffHunk":"@@ -99,8 +99,8 @@ def run(self, filename, file,\n                         2: RESULT_SEVERITY.NORMAL,\n                         3: RESULT_SEVERITY.MAJOR,\n                         4: RESULT_SEVERITY.MAJOR}.get(diag.severity)\n-            affected_code = tuple(sourcerange_from_clang_range(range)\n-                                  for range in diag.ranges)","author":{"login":"MorTD","avatarUrl":"https://avatars2.githubusercontent.com/u/26660609?v=4","name":"Mor Elmaliach"},"createdAt":"2018-07-22T09:52:48Z","lastEditedAt":null,"updatedAt":"2018-07-22T09:52:48Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDI2MjE2Ng==","url":"https://github.com/coala/coala-bears/pull/2624#discussion_r204262166","bodyText":"this extra blank line needs to be removed per PEP8 standard","diffHunk":"@@ -52,17 +52,18 @@ def diff_from_clang_fixit(fixit, file):\n     return Diff.from_string_arrays(file, new_file)\n \n \n-def sourcerange_from_clang_range(range):\n+","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-07-23T00:47:13Z","lastEditedAt":null,"updatedAt":"2018-07-23T00:47:13Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDQzMjMwNg==","url":"https://github.com/coala/coala-bears/pull/2624#discussion_r204432306","bodyText":"done","diffHunk":"@@ -52,17 +52,18 @@ def diff_from_clang_fixit(fixit, file):\n     return Diff.from_string_arrays(file, new_file)\n \n \n-def sourcerange_from_clang_range(range):\n+","author":{"login":"MorTD","avatarUrl":"https://avatars2.githubusercontent.com/u/26660609?v=4","name":"Mor Elmaliach"},"createdAt":"2018-07-23T14:54:33Z","lastEditedAt":null,"updatedAt":"2018-07-23T14:54:33Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDUwNDY4OQ==","url":"https://github.com/coala/coala-bears/pull/2624#discussion_r204504689","bodyText":"https://travis-ci.org/coala/coala-bears/jobs/407191026#L3565","diffHunk":"@@ -56,13 +56,13 @@ def sourcerange_from_clang_range(range):\n     \"\"\"\n     Creates a ``SourceRange`` from a clang ``SourceRange`` object.\n \n-    :param range: A ``cindex.SourceRange`` object.\n+    :param clang_range: A ``cindex.SourceRange`` object.\n     \"\"\"\n-    return SourceRange.from_values(range.start.file.name,\n-                                   range.start.line,\n-                                   range.start.column,\n-                                   range.end.line,\n-                                   range.end.column)\n+    return SourceRange.from_values(clang_range.start.file.name,","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-07-23T18:15:40Z","lastEditedAt":null,"updatedAt":"2018-07-23T18:15:40Z"}]}}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1533314274000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/pull/2625","number":2625,"title":"generate_bear_requirements.py: Generate cabal requirements","body":"Closes #2617","comments":7,"createdAt":"2018-07-19T17:57:56Z","updatedAt":"2018-08-03T16:37:54Z","closedAt":"2018-07-21T07:27:11Z","state":"merged","user":{"login":"anctartica","avatarUrl":"https://avatars0.githubusercontent.com/u/7020962?v=4"},"owner":{"login":"anctartica","avatarUrl":"https://avatars0.githubusercontent.com/u/7020962?v=4"},"assignee":{"login":"anctartica","avatarUrl":"https://avatars0.githubusercontent.com/u/7020962?v=4"},"labels":[{"name":"difficulty/low","color":"207de5"},{"name":"importance/low","color":"70e870"},{"name":"importance/medium","color":"fbca04"},{"name":"process/approved","color":"009800"},{"name":"size/S","color":"B1CF0A"}],"pullRequest":{"htmlUrl":"https://github.com/coala/coala-bears/pull/2625","comments":[{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzk1MzgxNw==","url":"https://github.com/coala/coala-bears/pull/2625#discussion_r203953817","bodyText":"there are more to come, so create a list, one line for each.","diffHunk":"@@ -189,7 +210,8 @@ def deep_diff(target, src):\n \n \n def sort_requirements(req_dict):\n-    for key in ['pip_requirements', 'npm_requirements', 'gem_requirements']:\n+    for key in ['pip_requirements', 'npm_requirements', 'gem_requirements',","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-20T07:02:00Z","lastEditedAt":null,"updatedAt":"2018-07-20T07:02:00Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzk1NDIzMg==","url":"https://github.com/coala/coala-bears/pull/2625#discussion_r203954232","bodyText":"as you are creating a new function, write a better algorithm ;-)","diffHunk":"@@ -94,28 +97,42 @@ def get_inherited_requirements():\n \n     return inherited_requirements\n \n+def helper(requirements, pip_requirements, npm_requirements,","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-20T07:04:48Z","lastEditedAt":null,"updatedAt":"2018-07-20T07:04:48Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzk1NDQ2Mg==","url":"https://github.com/coala/coala-bears/pull/2625#discussion_r203954462","bodyText":"no trailing blank line pls","diffHunk":"@@ -0,0 +1,16 @@\n+Name: coala-bears\n+Version: 0.10\n+cabal-version: >= 1.2\n+build-type: Simple\n+\n+-- safe 0.3.9 is needed to coexist with Cabal 1.16\n+-- safe 0.3.10 requires Cabal 1.18\n+\n+-- Note trusty apt package \"haskell-platform\" includes mtl-2.1.2\n+-- which is incompatible with ShellCheck 0.4.1 which needs mtl-2.2.1\n+\n+library\n+  build-depends: base, Cabal>=1.16, safe==0.3.9, cmdargs==0.10.14, hlint==1.9.27{%\n+  for package, data in cabal_requirements.items() | sort %}, {{ package }}{{ data.version }}{%\n+  endfor %}{# for package, data in cabal_requirements.items() | sort #}\n+","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-20T07:06:14Z","lastEditedAt":null,"updatedAt":"2018-07-20T07:06:14Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzk1NDUxNw==","url":"https://github.com/coala/coala-bears/pull/2625#discussion_r203954517","bodyText":"use variables","diffHunk":"@@ -0,0 +1,16 @@\n+Name: coala-bears","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-20T07:06:35Z","lastEditedAt":null,"updatedAt":"2018-07-20T07:06:35Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzk1NDUzNw==","url":"https://github.com/coala/coala-bears/pull/2625#discussion_r203954537","bodyText":"use variables","diffHunk":"@@ -0,0 +1,16 @@\n+Name: coala-bears\n+Version: 0.10","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-20T07:06:43Z","lastEditedAt":null,"updatedAt":"2018-07-20T07:06:43Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDA4MDAxOQ==","url":"https://github.com/coala/coala-bears/pull/2625#discussion_r204080019","bodyText":"{{ \",\" if not loop.last }}","diffHunk":"@@ -0,0 +1,20 @@\n+Name:               {{ name }}\n+Version:            0.12.0\n+cabal-version:      >= 1.2\n+build-type:         Simple\n+\n+-- safe 0.3.9 is needed to coexist with Cabal 1.16\n+-- safe 0.3.10 requires Cabal 1.18\n+\n+-- Note trusty apt package \"haskell-platform\" includes mtl-2.1.2\n+-- which is incompatible with ShellCheck 0.4.1 which needs mtl-2.2.1\n+\n+library\n+  build-depends:    base,\n+                    Cabal>=1.16,\n+                    safe==0.3.9,\n+                    cmdargs==0.10.14,\n+                    hlint==1.9.27\n+{% for package, data in cabal_requirements.items() | sort %}\n+                    {{ package }}{{ data.version }},","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-20T15:21:19Z","lastEditedAt":null,"updatedAt":"2018-07-20T15:21:19Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDA4MDkwNQ==","url":"https://github.com/coala/coala-bears/pull/2625#discussion_r204080905","bodyText":"ugh ... https://github.com/coala/coala-bears/pulls?q=is%3Apr+HaskellLintBear+is%3Aclosed\nAssigned to you #1358","diffHunk":"@@ -0,0 +1,20 @@\n+Name:               {{ name }}\n+Version:            0.12.0\n+cabal-version:      >= 1.2\n+build-type:         Simple\n+\n+-- safe 0.3.9 is needed to coexist with Cabal 1.16\n+-- safe 0.3.10 requires Cabal 1.18\n+\n+-- Note trusty apt package \"haskell-platform\" includes mtl-2.1.2\n+-- which is incompatible with ShellCheck 0.4.1 which needs mtl-2.2.1\n+\n+library\n+  build-depends:    base,\n+                    Cabal>=1.16,\n+                    safe==0.3.9,\n+                    cmdargs==0.10.14,\n+                    hlint==1.9.27","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-20T15:24:08Z","lastEditedAt":null,"updatedAt":"2018-07-20T15:24:08Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDA5OTA1Ng==","url":"https://github.com/coala/coala-bears/pull/2625#discussion_r204099056","bodyText":"Why haven't you added these requirements in bear-requirements.yaml?","diffHunk":"@@ -0,0 +1,18 @@\n+Name: {{ name }}\n+{# cabal cannot parse .dev version syntax #}\n+Version: {{ version[:-4] }}\n+cabal-version: >= 1.2\n+build-type: Simple\n+\n+-- safe 0.3.9 is needed to coexist with Cabal 1.16\n+-- safe 0.3.10 requires Cabal 1.18\n+\n+-- Note trusty apt package \"haskell-platform\" includes mtl-2.1.2\n+-- which is incompatible with ShellCheck 0.4.1 which needs mtl-2.2.1\n+\n+library\n+  build-depends: base, Cabal>=1.16, safe==0.3.9, cmdargs==0.10.14, hlint==1.9.27","author":{"login":"MacBox7","avatarUrl":"https://avatars0.githubusercontent.com/u/15063552?v=4","name":"Ankit Joshi"},"reactions":[],"createdAt":"2018-07-20T16:26:19Z","lastEditedAt":null,"updatedAt":"2018-07-20T16:26:19Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDEwMDUyMg==","url":"https://github.com/coala/coala-bears/pull/2625#discussion_r204100522","bodyText":"bear-requirements.yaml is generated from generate_bear_requirements.py. It will only have dependencies from the bears","diffHunk":"@@ -0,0 +1,18 @@\n+Name: {{ name }}\n+{# cabal cannot parse .dev version syntax #}\n+Version: {{ version[:-4] }}\n+cabal-version: >= 1.2\n+build-type: Simple\n+\n+-- safe 0.3.9 is needed to coexist with Cabal 1.16\n+-- safe 0.3.10 requires Cabal 1.18\n+\n+-- Note trusty apt package \"haskell-platform\" includes mtl-2.1.2\n+-- which is incompatible with ShellCheck 0.4.1 which needs mtl-2.2.1\n+\n+library\n+  build-depends: base, Cabal>=1.16, safe==0.3.9, cmdargs==0.10.14, hlint==1.9.27","author":{"login":"anctartica","avatarUrl":"https://avatars0.githubusercontent.com/u/7020962?v=4","name":""},"reactions":[],"createdAt":"2018-07-20T16:31:49Z","lastEditedAt":null,"updatedAt":"2018-07-20T16:31:49Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDEwMjU2Mw==","url":"https://github.com/coala/coala-bears/pull/2625#discussion_r204102563","bodyText":"cabal was not able to parse this list  😓 I am sticking with the single line","diffHunk":"@@ -0,0 +1,20 @@\n+Name:               {{ name }}\n+Version:            0.12.0\n+cabal-version:      >= 1.2\n+build-type:         Simple\n+\n+-- safe 0.3.9 is needed to coexist with Cabal 1.16\n+-- safe 0.3.10 requires Cabal 1.18\n+\n+-- Note trusty apt package \"haskell-platform\" includes mtl-2.1.2\n+-- which is incompatible with ShellCheck 0.4.1 which needs mtl-2.2.1\n+\n+library\n+  build-depends:    base,\n+                    Cabal>=1.16,\n+                    safe==0.3.9,\n+                    cmdargs==0.10.14,\n+                    hlint==1.9.27\n+{% for package, data in cabal_requirements.items() | sort %}\n+                    {{ package }}{{ data.version }},","author":{"login":"anctartica","avatarUrl":"https://avatars0.githubusercontent.com/u/7020962?v=4","name":""},"reactions":[],"createdAt":"2018-07-20T16:39:32Z","lastEditedAt":"2018-07-20T16:46:46Z","updatedAt":"2018-07-20T16:46:46Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDEyNTE1MA==","url":"https://github.com/coala/coala-bears/pull/2625#discussion_r204125150","bodyText":"move these to the next line indented, as we will want to add entries at the end, so also use a trailing comma with closing bracket on the following line.","diffHunk":"@@ -44,6 +47,10 @@\n \n PROJECT_BEAR_DIR = os.path.abspath(os.path.join(PROJECT_DIR, 'bears'))\n \n+SUPPORTED_INSTANCES = ('PipRequirement',","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-20T18:02:44Z","lastEditedAt":null,"updatedAt":"2018-07-20T18:02:44Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDEyNTU4Mw==","url":"https://github.com/coala/coala-bears/pull/2625#discussion_r204125583","bodyText":"80 cpl\nthis file isnt under CI yet, so check your changes manually with pyflakes, pycodestyle and pydocstyle.\nbut ... if you return instance_dict here, the sorting can happen outside of the function, and we avoid returning tuples which are inherently unsuitable here as the size of them increases as new requirement types are added.","diffHunk":"@@ -95,28 +102,26 @@ def get_inherited_requirements():\n     return inherited_requirements\n \n \n+def helper(requirements, instance_dict):\n+    for requirement in requirements:\n+        if isinstance(requirement, AnyOneOfRequirements):\n+            helper(requirement.requirements, instance_dict)\n+        elif any(type(requirement).__name__ == instance\n+                 for instance in SUPPORTED_INSTANCES):\n+            instance_dict[type(requirement).__name__].add(requirement)\n+\n+\n def get_all_requirements(bears):\n-    pip_requirements = []\n-    npm_requirements = []\n-    gem_requirements = []\n+    instance_dict ={}\n+\n+    for instance in SUPPORTED_INSTANCES:\n+        instance_dict[instance] = set()\n \n     for bear in bears:\n-        for requirement in bear.REQUIREMENTS:\n-            if isinstance(requirement, PipRequirement) and \\\n-               requirement not in pip_requirements:\n-                pip_requirements.append(requirement)\n-            elif isinstance(requirement, NpmRequirement) and \\\n-               requirement not in npm_requirements:\n-                npm_requirements.append(requirement)\n-            elif isinstance(requirement, GemRequirement) and \\\n-               requirement not in gem_requirements:\n-                gem_requirements.append(requirement)\n-\n-    return (\n-        sorted(pip_requirements, key=lambda requirement: requirement.package),\n-        sorted(npm_requirements, key=lambda requirement: requirement.package),\n-        sorted(gem_requirements, key=lambda requirement: requirement.package)\n-        )\n+        helper(bear.REQUIREMENTS, instance_dict)\n+\n+    return [sorted(instance_dict[instance], key=lambda requirement: requirement.package)","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-20T18:04:13Z","lastEditedAt":null,"updatedAt":"2018-07-20T18:04:13Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDEyNjIwNw==","url":"https://github.com/coala/coala-bears/pull/2625#discussion_r204126207","bodyText":"store this list in a global variable structured ready for the next entry to be added as a single line modification.","diffHunk":"@@ -189,7 +198,10 @@ def deep_diff(target, src):\n \n \n def sort_requirements(req_dict):\n-    for key in ['pip_requirements', 'npm_requirements', 'gem_requirements']:\n+    for key in ['pip_requirements',","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-20T18:06:28Z","lastEditedAt":null,"updatedAt":"2018-07-20T18:06:28Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDEyODk1OA==","url":"https://github.com/coala/coala-bears/pull/2625#discussion_r204128958","bodyText":"As mentioned above, we should avoid returning tuples.\nget_all_requirements could return something else...\nalternatively...\nall_reqs = get_all_requirements(get_all_bears(bear_dirs))\npip_reqs, npm_reqs, gem_reqs = all_reqs[0:2]\n....\nrequirements['cabal_requirements'] = get_gem_requirements(all_reqs[3])\nThen it is easy to add another one afterwards.","diffHunk":"@@ -202,7 +214,7 @@ def sort_requirements(req_dict):\n     if args.bear_dirs is not None:\n         bear_dirs.extend(args.bear_dirs)\n \n-    pip_reqs, npm_reqs, gem_reqs = (\n+    pip_reqs, npm_reqs, gem_reqs, cabal_reqs = (","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-20T18:16:47Z","lastEditedAt":null,"updatedAt":"2018-07-20T18:16:47Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDEyOTIwMw==","url":"https://github.com/coala/coala-bears/pull/2625#discussion_r204129203","bodyText":"split on . and use the first three","diffHunk":"@@ -0,0 +1,18 @@\n+Name: {{ name }}\n+{# cabal cannot parse .dev version syntax #}\n+Version: {{ version[:-4] }}","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNjc2ODE5NA==","createdAt":"2018-07-20T19:11:13Z","content":"LAUGH","user":{"login":"anctartica","name":""}},{"id":"MDg6UmVhY3Rpb24yNjc2ODIwNA==","createdAt":"2018-07-20T19:11:21Z","content":"HOORAY","user":{"login":"anctartica","name":""}}],"createdAt":"2018-07-20T18:17:41Z","lastEditedAt":null,"updatedAt":"2018-07-20T18:17:41Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDE0MjAzNg==","url":"https://github.com/coala/coala-bears/pull/2625#discussion_r204142036","bodyText":"done checking under coala","diffHunk":"@@ -95,28 +102,26 @@ def get_inherited_requirements():\n     return inherited_requirements\n \n \n+def helper(requirements, instance_dict):\n+    for requirement in requirements:\n+        if isinstance(requirement, AnyOneOfRequirements):\n+            helper(requirement.requirements, instance_dict)\n+        elif any(type(requirement).__name__ == instance\n+                 for instance in SUPPORTED_INSTANCES):\n+            instance_dict[type(requirement).__name__].add(requirement)\n+\n+\n def get_all_requirements(bears):\n-    pip_requirements = []\n-    npm_requirements = []\n-    gem_requirements = []\n+    instance_dict ={}\n+\n+    for instance in SUPPORTED_INSTANCES:\n+        instance_dict[instance] = set()\n \n     for bear in bears:\n-        for requirement in bear.REQUIREMENTS:\n-            if isinstance(requirement, PipRequirement) and \\\n-               requirement not in pip_requirements:\n-                pip_requirements.append(requirement)\n-            elif isinstance(requirement, NpmRequirement) and \\\n-               requirement not in npm_requirements:\n-                npm_requirements.append(requirement)\n-            elif isinstance(requirement, GemRequirement) and \\\n-               requirement not in gem_requirements:\n-                gem_requirements.append(requirement)\n-\n-    return (\n-        sorted(pip_requirements, key=lambda requirement: requirement.package),\n-        sorted(npm_requirements, key=lambda requirement: requirement.package),\n-        sorted(gem_requirements, key=lambda requirement: requirement.package)\n-        )\n+        helper(bear.REQUIREMENTS, instance_dict)\n+\n+    return [sorted(instance_dict[instance], key=lambda requirement: requirement.package)","author":{"login":"anctartica","avatarUrl":"https://avatars0.githubusercontent.com/u/7020962?v=4","name":""},"reactions":[],"createdAt":"2018-07-20T19:05:16Z","lastEditedAt":null,"updatedAt":"2018-07-20T19:05:16Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDE5ODAwMA==","url":"https://github.com/coala/coala-bears/pull/2625#discussion_r204198000","bodyText":"trailing comma","diffHunk":"@@ -44,6 +41,20 @@\n \n PROJECT_BEAR_DIR = os.path.abspath(os.path.join(PROJECT_DIR, 'bears'))\n \n+SUPPORTED_INSTANCES = (\n+    'PipRequirement',\n+    'NpmRequirement',\n+    'GemRequirement',\n+    'CabalRequirement',\n+)\n+\n+INSTANCE_NAMES = (\n+    'pip_requirements',\n+    'npm_requirements',\n+    'gem_requirements',\n+    'cabal_requirements'","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-21T01:33:33Z","lastEditedAt":null,"updatedAt":"2018-07-21T01:33:33Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDE5ODAyMw==","url":"https://github.com/coala/coala-bears/pull/2625#discussion_r204198023","bodyText":"this should have been a defaultdict(set)","diffHunk":"@@ -95,28 +106,25 @@ def get_inherited_requirements():\n     return inherited_requirements\n \n \n+def helper(requirements, instance_dict):\n+    for requirement in requirements:\n+        if isinstance(requirement, AnyOneOfRequirements):\n+            helper(requirement.requirements, instance_dict)\n+        elif any(type(requirement).__name__ == instance\n+                 for instance in SUPPORTED_INSTANCES):\n+            instance_dict[type(requirement).__name__].add(requirement)\n+\n+\n def get_all_requirements(bears):\n-    pip_requirements = []\n-    npm_requirements = []\n-    gem_requirements = []\n+    instance_dict = {}","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-21T01:34:14Z","lastEditedAt":null,"updatedAt":"2018-07-21T01:34:14Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDE5ODE5MA==","url":"https://github.com/coala/coala-bears/pull/2625#discussion_r204198190","bodyText":"oh its failing.\nprobably because ShellCheck needs to be last.\nManually reorder them in bear-requirements.yaml , and leave a note that the order is needed for cabal to work","diffHunk":"@@ -10,4 +10,4 @@ build-type: Simple\n -- which is incompatible with ShellCheck 0.4.1 which needs mtl-2.2.1\n \n library\n-  build-depends: base, Cabal>=1.16, safe==0.3.9, cmdargs==0.10.14, ghc-mod==5.6.0.0, hlint==1.9.27, ShellCheck==0.4.1\n+  build-depends: base, Cabal>=1.16, safe==0.3.9, cmdargs==0.10.14, ShellCheck==0.4.1, ghc-mod==5.6.0, hlint==1.9.27","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-21T01:39:10Z","lastEditedAt":null,"updatedAt":"2018-07-21T01:39:10Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDIwMzU0Mw==","url":"https://github.com/coala/coala-bears/pull/2625#discussion_r204203543","bodyText":"i tested this.. it still didn't work\nthe version for ghc-mod should be 5.6.0.0 rather than 5.6.0 as specified in the bear","diffHunk":"@@ -10,4 +10,4 @@ build-type: Simple\n -- which is incompatible with ShellCheck 0.4.1 which needs mtl-2.2.1\n \n library\n-  build-depends: base, Cabal>=1.16, safe==0.3.9, cmdargs==0.10.14, ghc-mod==5.6.0.0, hlint==1.9.27, ShellCheck==0.4.1\n+  build-depends: base, Cabal>=1.16, safe==0.3.9, cmdargs==0.10.14, ShellCheck==0.4.1, ghc-mod==5.6.0, hlint==1.9.27","author":{"login":"anctartica","avatarUrl":"https://avatars0.githubusercontent.com/u/7020962?v=4","name":""},"reactions":[],"createdAt":"2018-07-21T06:08:16Z","lastEditedAt":"2018-07-21T06:08:26Z","updatedAt":"2018-07-21T06:08:26Z"}]}}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1532276395000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/pull/2626","number":2626,"title":"PySafetyBear: Update PySafetyBear","body":"Update PySafetyBear so that it support the\nlatest safety version 1.8.2\nRelated to #2511\nRelated to #1684","comments":4,"createdAt":"2018-07-20T15:25:15Z","updatedAt":"2018-07-22T16:19:55Z","closedAt":"2018-07-22T16:19:27Z","state":"merged","user":{"login":"RaiVaibhav","avatarUrl":"https://avatars3.githubusercontent.com/u/22278438?v=4"},"owner":{"login":"RaiVaibhav","avatarUrl":"https://avatars3.githubusercontent.com/u/22278438?v=4"},"labels":[{"name":"size/S","color":"B1CF0A"}],"pullRequest":{"htmlUrl":"https://github.com/coala/coala-bears/pull/2626","comments":[{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDA4MTU3MQ==","url":"https://github.com/coala/coala-bears/pull/2626#discussion_r204081571","bodyText":"unrelated.  create a newcomer issue","diffHunk":"@@ -87,14 +87,14 @@ def run(self, filename, file):\n             yield Result(\n                 self,\n                 message_template.format(vuln=vulnerability),\n-                additional_info=vulnerability.data['advisory'],\n+                additional_info=vulnerability.advisory,\n                 affected_code=(source_range, ),\n             )\n \n     @staticmethod\n     def try_parse_requirements(lines: typed_list(str)):\n         \"\"\"\n-        Yields all package requirements parseable from the given lines.\n+        Yields all package requirements parsable from the given lines.","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-20T15:26:13Z","lastEditedAt":null,"updatedAt":"2018-07-20T15:26:13Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDA4MTk3MQ==","url":"https://github.com/coala/coala-bears/pull/2626#discussion_r204081971","bodyText":"why are you changing this?","diffHunk":"@@ -1,2 +1,2 @@\n-bottle==0.10.0\n+aiocouchdb==0.2","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-20T15:27:28Z","lastEditedAt":null,"updatedAt":"2018-07-20T15:27:28Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDA5MDk5MA==","url":"https://github.com/coala/coala-bears/pull/2626#discussion_r204090990","bodyText":"with the current safety version bottle==0.10.1 will give 2 result object for same package\nhttps://bpaste.net/show/496974b7c96f\nSo I changed the package which contains some smaller result object.","diffHunk":"@@ -1,2 +1,2 @@\n-bottle==0.10.0\n+aiocouchdb==0.2","author":{"login":"RaiVaibhav","avatarUrl":"https://avatars3.githubusercontent.com/u/22278438?v=4","name":"Vaibhav Rai"},"reactions":[],"createdAt":"2018-07-20T15:57:37Z","lastEditedAt":null,"updatedAt":"2018-07-20T15:57:37Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDA5MjY0OA==","url":"https://github.com/coala/coala-bears/pull/2626#discussion_r204092648","bodyText":"No.  Add both results.\nWe need to know that the old tests are not breaking .. more data is natural.","diffHunk":"@@ -1,2 +1,2 @@\n-bottle==0.10.0\n+aiocouchdb==0.2","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-20T16:03:08Z","lastEditedAt":null,"updatedAt":"2018-07-20T16:03:08Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDE5NTc2OQ==","url":"https://github.com/coala/coala-bears/pull/2626#discussion_r204195769","bodyText":"this doesnt belong in the checked in version","diffHunk":"@@ -24,6 +24,7 @@ class PySafetyBearTest(LocalBearTestHelper):\n \n     def setUp(self):\n         self.uut = PySafetyBear(Section('name'), Queue())\n+        self.maxDiff = None","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNjc4MDkzOQ==","createdAt":"2018-07-21T06:34:57Z","content":"THUMBS_UP","user":{"login":"RaiVaibhav","name":"Vaibhav Rai"}}],"createdAt":"2018-07-21T00:42:02Z","lastEditedAt":null,"updatedAt":"2018-07-21T00:42:02Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDE5NTgyMg==","url":"https://github.com/coala/coala-bears/pull/2626#discussion_r204195822","bodyText":"we do not store keys in .coafile which are checked into a repository.\nIf SAFETY_API_KEY works, that will have to be how it is provided to the bear, and core will need some enhancement in future to manage bear envvars.\nIf a key is mandatory, the bear needs to check that SAFETY_API_KEY or db_mirror is set in an earlier phase of the Bear configuration, so it doesnt run() multiple times and get the same error.","diffHunk":"@@ -40,14 +30,28 @@ class PySafetyBear(LocalBear):\n         'Python 3 Requirements',\n     }\n     AUTHORS = {'Bence Nagy'}\n-    REQUIREMENTS = {PipRequirement('safety', '0.5.1')}\n+    REQUIREMENTS = {PipRequirement('safety', '1.8.2')}\n     AUTHORS_EMAILS = {'bence@underyx.me'}\n     LICENSE = 'AGPL'\n     CAN_DETECT = {'Security'}\n \n-    def run(self, filename, file):\n+    def run(self, filename, file,\n+            key: str = '',\n+            db_mirror: str = '',\n+            cached: bool = False,\n+            ignore_ids: typed_list(str) = []):\n         \"\"\"\n         Checks for vulnerable package versions in requirements files.\n+\n+        :param key:           API Key for pyup.io's vulnerability database. Can","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-21T00:42:40Z","lastEditedAt":null,"updatedAt":"2018-07-21T00:42:40Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDE5NTg5NA==","url":"https://github.com/coala/coala-bears/pull/2626#discussion_r204195894","bodyText":"has the ability to fetch the CVE been removed entirely from safety?","diffHunk":"@@ -39,9 +40,9 @@ def test_with_cve_vulnerability(self):\n             self.uut,\n             file_contents,\n             [Result.from_values('PySafetyBear',\n-                                'bottle<0.12.10 is vulnerable '\n-                                'to CVE-2016-9964 and your project '","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-21T00:43:51Z","lastEditedAt":null,"updatedAt":"2018-07-21T00:43:51Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDIwMzk1OA==","url":"https://github.com/coala/coala-bears/pull/2626#discussion_r204203958","bodyText":"IMO db_mirror setting can be there ? or I remove that also?","diffHunk":"@@ -40,14 +30,28 @@ class PySafetyBear(LocalBear):\n         'Python 3 Requirements',\n     }\n     AUTHORS = {'Bence Nagy'}\n-    REQUIREMENTS = {PipRequirement('safety', '0.5.1')}\n+    REQUIREMENTS = {PipRequirement('safety', '1.8.2')}\n     AUTHORS_EMAILS = {'bence@underyx.me'}\n     LICENSE = 'AGPL'\n     CAN_DETECT = {'Security'}\n \n-    def run(self, filename, file):\n+    def run(self, filename, file,\n+            key: str = '',\n+            db_mirror: str = '',\n+            cached: bool = False,\n+            ignore_ids: typed_list(str) = []):\n         \"\"\"\n         Checks for vulnerable package versions in requirements files.\n+\n+        :param key:           API Key for pyup.io's vulnerability database. Can","author":{"login":"RaiVaibhav","avatarUrl":"https://avatars3.githubusercontent.com/u/22278438?v=4","name":"Vaibhav Rai"},"reactions":[],"createdAt":"2018-07-21T06:37:07Z","lastEditedAt":null,"updatedAt":"2018-07-21T06:37:07Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDIwNDExMQ==","url":"https://github.com/coala/coala-bears/pull/2626#discussion_r204204111","bodyText":"Currenlty safety return Vulnerability class i.e.,\nclass Vulnerability(namedtuple(\"Vulnerability\",\n                               [\"name\", \"spec\", \"version\", \"advisory\", \"vuln_id\"])):\n    pass\n\nWhich don't have cve_key , One case was I iterate the database one more time to get cve_key but seems like one problem here that safety also take care that if some user provided a path to database it will fetch from there and these are the logic created inside safety.check.","diffHunk":"@@ -39,9 +40,9 @@ def test_with_cve_vulnerability(self):\n             self.uut,\n             file_contents,\n             [Result.from_values('PySafetyBear',\n-                                'bottle<0.12.10 is vulnerable '\n-                                'to CVE-2016-9964 and your project '","author":{"login":"RaiVaibhav","avatarUrl":"https://avatars3.githubusercontent.com/u/22278438?v=4","name":"Vaibhav Rai"},"reactions":[],"createdAt":"2018-07-21T06:44:30Z","lastEditedAt":null,"updatedAt":"2018-07-21T06:44:30Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDIwNTYwNw==","url":"https://github.com/coala/coala-bears/pull/2626#discussion_r204205607","bodyText":"Lets leave db_mirror, but default None.\nAnd if not provided, use Bear.download_cached_file to fetch a copy of the database and store it in the coala bears cache\nhttps://github.com/coala/coala-bears/blob/master/bears/java/CheckstyleBear.py#L58\nor, add a dependency on https://pypi.org/project/safety-db/ , and use that dataset.\n(even if the data is old; we can fix that later)","diffHunk":"@@ -40,14 +30,28 @@ class PySafetyBear(LocalBear):\n         'Python 3 Requirements',\n     }\n     AUTHORS = {'Bence Nagy'}\n-    REQUIREMENTS = {PipRequirement('safety', '0.5.1')}\n+    REQUIREMENTS = {PipRequirement('safety', '1.8.2')}\n     AUTHORS_EMAILS = {'bence@underyx.me'}\n     LICENSE = 'AGPL'\n     CAN_DETECT = {'Security'}\n \n-    def run(self, filename, file):\n+    def run(self, filename, file,\n+            key: str = '',\n+            db_mirror: str = '',\n+            cached: bool = False,\n+            ignore_ids: typed_list(str) = []):\n         \"\"\"\n         Checks for vulnerable package versions in requirements files.\n+\n+        :param key:           API Key for pyup.io's vulnerability database. Can","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-21T08:13:38Z","lastEditedAt":null,"updatedAt":"2018-07-21T08:13:38Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDIwNjI2NA==","url":"https://github.com/coala/coala-bears/pull/2626#discussion_r204206264","bodyText":"Is advisory the same as cve ?","diffHunk":"@@ -39,9 +40,9 @@ def test_with_cve_vulnerability(self):\n             self.uut,\n             file_contents,\n             [Result.from_values('PySafetyBear',\n-                                'bottle<0.12.10 is vulnerable '\n-                                'to CVE-2016-9964 and your project '","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-21T08:50:02Z","lastEditedAt":null,"updatedAt":"2018-07-21T08:50:02Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDIwNjYzNQ==","url":"https://github.com/coala/coala-bears/pull/2626#discussion_r204206635","bodyText":"No , advisory is additional detail","diffHunk":"@@ -39,9 +40,9 @@ def test_with_cve_vulnerability(self):\n             self.uut,\n             file_contents,\n             [Result.from_values('PySafetyBear',\n-                                'bottle<0.12.10 is vulnerable '\n-                                'to CVE-2016-9964 and your project '","author":{"login":"RaiVaibhav","avatarUrl":"https://avatars3.githubusercontent.com/u/22278438?v=4","name":"Vaibhav Rai"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNjc4MzY2Ng==","createdAt":"2018-07-21T11:09:32Z","content":"THUMBS_UP","user":{"login":"jayvdb","name":"John Vandenberg"}}],"createdAt":"2018-07-21T09:09:10Z","lastEditedAt":null,"updatedAt":"2018-07-21T09:09:10Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDIwODQ1NQ==","url":"https://github.com/coala/coala-bears/pull/2626#discussion_r204208455","bodyText":"in run, this will happen for every file.\nplease read the docs for how to do Bear initialisation","diffHunk":"@@ -40,15 +43,42 @@ class PySafetyBear(LocalBear):\n         'Python 3 Requirements',\n     }\n     AUTHORS = {'Bence Nagy'}\n-    REQUIREMENTS = {PipRequirement('safety', '0.5.1')}\n+    REQUIREMENTS = {PipRequirement('safety', '1.8.2')}\n     AUTHORS_EMAILS = {'bence@underyx.me'}\n     LICENSE = 'AGPL'\n     CAN_DETECT = {'Security'}\n \n-    def run(self, filename, file):\n+    def setup_db(self, db_mirror):\n+        if db_mirror is None:\n+            insecure_full_json_url = ('https://raw.githubusercontent.com/'\n+                                      'pyupio/safety-db/master/data/'\n+                                      'insecure_full.json')\n+            insecure_josn_url = ('https://raw.githubusercontent.com/'\n+                                 'pyupio/safety-db/master/data/insecure.json')\n+            if db_mirror is None:\n+                self.download_cached_file(insecure_full_json_url,\n+                                          'insecure_full.json')\n+                my_file = self.download_cached_file(insecure_josn_url,\n+                                                    'insecure.json')\n+                db_mirror = os.path.dirname(my_file)\n+        return db_mirror\n+\n+    def run(self, filename, file,\n+            db_mirror: str = None,\n+            cached: bool = False,\n+            ignore_ids: typed_list(str) = []):\n         \"\"\"\n         Checks for vulnerable package versions in requirements files.\n+\n+        :param db_mirror:     Path to a local vulnerability database.\n+                              Default: None\n+        :param cached:        Cache requests to the vulnerability database\n+                              locally. Default: False\n+        :param ignore_ids:    Ignore one (or multiple) vulnerabilities by ID.\n+                              Default: empty\n         \"\"\"\n+        key = None\n+        db_mirror = self.setup_db(db_mirror)","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-21T11:06:55Z","lastEditedAt":null,"updatedAt":"2018-07-21T11:06:55Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDIwODQ5MA==","url":"https://github.com/coala/coala-bears/pull/2626#discussion_r204208490","bodyText":"please keep this and note that it was for old versions of safety.\nWe will be allowing those versions to work again soon.","diffHunk":"@@ -11,21 +12,23 @@\n from coalib.settings.Setting import typed_list\n \n \n-def cve_key_checker(vulnerability):","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-21T11:08:54Z","lastEditedAt":null,"updatedAt":"2018-07-21T11:08:54Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDIwODYwNg==","url":"https://github.com/coala/coala-bears/pull/2626#discussion_r204208606","bodyText":"setting names should be unambiguous.  These setting names would be hard to interpret in a section with multiple bears enabled.\nAnd if you are going to add settings like db_mirror or cached, you will need to do them correctly, like I have asked.\nOr, you can drop these new enhancements, and re-submit them in a separate PR after this one is merged.\nIt was your choice to add these.","diffHunk":"@@ -40,15 +43,42 @@ class PySafetyBear(LocalBear):\n         'Python 3 Requirements',\n     }\n     AUTHORS = {'Bence Nagy'}\n-    REQUIREMENTS = {PipRequirement('safety', '0.5.1')}\n+    REQUIREMENTS = {PipRequirement('safety', '1.8.2')}\n     AUTHORS_EMAILS = {'bence@underyx.me'}\n     LICENSE = 'AGPL'\n     CAN_DETECT = {'Security'}\n \n-    def run(self, filename, file):\n+    def setup_db(self, db_mirror):\n+        if db_mirror is None:\n+            insecure_full_json_url = ('https://raw.githubusercontent.com/'\n+                                      'pyupio/safety-db/master/data/'\n+                                      'insecure_full.json')\n+            insecure_josn_url = ('https://raw.githubusercontent.com/'\n+                                 'pyupio/safety-db/master/data/insecure.json')\n+            if db_mirror is None:\n+                self.download_cached_file(insecure_full_json_url,\n+                                          'insecure_full.json')\n+                my_file = self.download_cached_file(insecure_josn_url,\n+                                                    'insecure.json')\n+                db_mirror = os.path.dirname(my_file)\n+        return db_mirror\n+\n+    def run(self, filename, file,\n+            db_mirror: str = None,\n+            cached: bool = False,\n+            ignore_ids: typed_list(str) = []):\n         \"\"\"\n         Checks for vulnerable package versions in requirements files.\n+\n+        :param db_mirror:     Path to a local vulnerability database.","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-21T11:17:16Z","lastEditedAt":null,"updatedAt":"2018-07-21T11:17:16Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDIwODYzNA==","url":"https://github.com/coala/coala-bears/pull/2626#discussion_r204208634","bodyText":"key, --- something wrong there :P","diffHunk":"@@ -58,10 +88,11 @@ def run(self, filename, file):\n         if not packages:\n             return\n \n-        for vulnerability in safety.check(packages=packages):\n-            if cve_key_checker(vulnerability):\n+        for vulnerability in safety.check(packages, key, db_mirror, cached,","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-21T11:19:10Z","lastEditedAt":null,"updatedAt":"2018-07-21T11:19:10Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDIwODc5NQ==","url":"https://github.com/coala/coala-bears/pull/2626#discussion_r204208795","bodyText":"check this out https://github.com/pyupio/safety/blob/master/safety/safety.py#L123, if I remove the argument it will throw error and I can't pass keyword argument also","diffHunk":"@@ -58,10 +88,11 @@ def run(self, filename, file):\n         if not packages:\n             return\n \n-        for vulnerability in safety.check(packages=packages):\n-            if cve_key_checker(vulnerability):\n+        for vulnerability in safety.check(packages, key, db_mirror, cached,","author":{"login":"RaiVaibhav","avatarUrl":"https://avatars3.githubusercontent.com/u/22278438?v=4","name":"Vaibhav Rai"},"reactions":[],"createdAt":"2018-07-21T11:28:53Z","lastEditedAt":null,"updatedAt":"2018-07-21T11:28:53Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDIwODk0NQ==","url":"https://github.com/coala/coala-bears/pull/2626#discussion_r204208945","bodyText":"key=False, db=False, cached=False","diffHunk":"@@ -58,10 +88,11 @@ def run(self, filename, file):\n         if not packages:\n             return\n \n-        for vulnerability in safety.check(packages=packages):\n-            if cve_key_checker(vulnerability):\n+        for vulnerability in safety.check(packages, key, db_mirror, cached,","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-21T11:41:08Z","lastEditedAt":null,"updatedAt":"2018-07-21T11:41:08Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDIxMTgzNQ==","url":"https://github.com/coala/coala-bears/pull/2626#discussion_r204211835","bodyText":"Keep it as it was, uncommented. Sorry if i was confusing.\nUse pragma nocover for now.","diffHunk":"@@ -11,21 +12,34 @@\n from coalib.settings.Setting import typed_list\n \n \n-def cve_key_checker(vulnerability):\n-    if 'cve' in vulnerability.data:\n-        if vulnerability.data['cve'] is None:\n-            return None\n-        else:\n-            return True\n-    else:\n-        return None\n+# It was for old versions of safety and those versions will be allow in future.\n+# def cve_key_checker(vulnerability):","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNjc4NjQyOA==","createdAt":"2018-07-21T15:10:03Z","content":"THUMBS_UP","user":{"login":"RaiVaibhav","name":"Vaibhav Rai"}}],"createdAt":"2018-07-21T14:12:34Z","lastEditedAt":null,"updatedAt":"2018-07-21T14:12:34Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDIxMTk4Mw==","url":"https://github.com/coala/coala-bears/pull/2626#discussion_r204211983","bodyText":"See other bears (inc CheckstyleBear ) for the type to use for paths","diffHunk":"@@ -40,15 +54,36 @@ class PySafetyBear(LocalBear):\n         'Python 3 Requirements',\n     }\n     AUTHORS = {'Bence Nagy'}\n-    REQUIREMENTS = {PipRequirement('safety', '0.5.1')}\n+    REQUIREMENTS = {PipRequirement('safety', '1.8.2')}\n     AUTHORS_EMAILS = {'bence@underyx.me'}\n     LICENSE = 'AGPL'\n     CAN_DETECT = {'Security'}\n \n-    def run(self, filename, file):\n+    def setup_dependencies(self):\n+        insecure_full_json_url = ('https://raw.githubusercontent.com/'\n+                                  'pyupio/safety-db/master/data/'\n+                                  'insecure_full.json')\n+        insecure_josn_url = ('https://raw.githubusercontent.com/'\n+                             'pyupio/safety-db/master/data/insecure.json')\n+        self.download_cached_file(insecure_full_json_url,\n+                                  'insecure_full.json')\n+        my_file = self.download_cached_file(insecure_josn_url,\n+                                            'insecure.json')\n+        type(self).db_path = os.path.dirname(my_file)\n+\n+    def run(self, filename, file,\n+            db_path: str = None,","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNjc4NjQzMQ==","createdAt":"2018-07-21T15:10:08Z","content":"THUMBS_UP","user":{"login":"RaiVaibhav","name":"Vaibhav Rai"}}],"createdAt":"2018-07-21T14:19:08Z","lastEditedAt":null,"updatedAt":"2018-07-21T14:19:08Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDIxMjAxMg==","url":"https://github.com/coala/coala-bears/pull/2626#discussion_r204212012","bodyText":"Why False by default?\nWhy would someone ever want coala to not cache external resources?","diffHunk":"@@ -40,15 +54,36 @@ class PySafetyBear(LocalBear):\n         'Python 3 Requirements',\n     }\n     AUTHORS = {'Bence Nagy'}\n-    REQUIREMENTS = {PipRequirement('safety', '0.5.1')}\n+    REQUIREMENTS = {PipRequirement('safety', '1.8.2')}\n     AUTHORS_EMAILS = {'bence@underyx.me'}\n     LICENSE = 'AGPL'\n     CAN_DETECT = {'Security'}\n \n-    def run(self, filename, file):\n+    def setup_dependencies(self):\n+        insecure_full_json_url = ('https://raw.githubusercontent.com/'\n+                                  'pyupio/safety-db/master/data/'\n+                                  'insecure_full.json')\n+        insecure_josn_url = ('https://raw.githubusercontent.com/'\n+                             'pyupio/safety-db/master/data/insecure.json')\n+        self.download_cached_file(insecure_full_json_url,\n+                                  'insecure_full.json')\n+        my_file = self.download_cached_file(insecure_josn_url,\n+                                            'insecure.json')\n+        type(self).db_path = os.path.dirname(my_file)\n+\n+    def run(self, filename, file,\n+            db_path: str = None,\n+            cache_request: bool = False,","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-21T14:20:24Z","lastEditedAt":null,"updatedAt":"2018-07-21T14:20:24Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDIxMjIxNw==","url":"https://github.com/coala/coala-bears/pull/2626#discussion_r204212217","bodyText":"Default value is provided by safety, I am just framing it.","diffHunk":"@@ -40,15 +54,36 @@ class PySafetyBear(LocalBear):\n         'Python 3 Requirements',\n     }\n     AUTHORS = {'Bence Nagy'}\n-    REQUIREMENTS = {PipRequirement('safety', '0.5.1')}\n+    REQUIREMENTS = {PipRequirement('safety', '1.8.2')}\n     AUTHORS_EMAILS = {'bence@underyx.me'}\n     LICENSE = 'AGPL'\n     CAN_DETECT = {'Security'}\n \n-    def run(self, filename, file):\n+    def setup_dependencies(self):\n+        insecure_full_json_url = ('https://raw.githubusercontent.com/'\n+                                  'pyupio/safety-db/master/data/'\n+                                  'insecure_full.json')\n+        insecure_josn_url = ('https://raw.githubusercontent.com/'\n+                             'pyupio/safety-db/master/data/insecure.json')\n+        self.download_cached_file(insecure_full_json_url,\n+                                  'insecure_full.json')\n+        my_file = self.download_cached_file(insecure_josn_url,\n+                                            'insecure.json')\n+        type(self).db_path = os.path.dirname(my_file)\n+\n+    def run(self, filename, file,\n+            db_path: str = None,\n+            cache_request: bool = False,","author":{"login":"RaiVaibhav","avatarUrl":"https://avatars3.githubusercontent.com/u/22278438?v=4","name":"Vaibhav Rai"},"reactions":[],"createdAt":"2018-07-21T14:27:43Z","lastEditedAt":"2018-07-21T14:47:20Z","updatedAt":"2018-07-21T14:47:20Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDIxMjI1MQ==","url":"https://github.com/coala/coala-bears/pull/2626#discussion_r204212251","bodyText":"https://github.com/pyupio/safety#--cache","diffHunk":"@@ -40,15 +54,36 @@ class PySafetyBear(LocalBear):\n         'Python 3 Requirements',\n     }\n     AUTHORS = {'Bence Nagy'}\n-    REQUIREMENTS = {PipRequirement('safety', '0.5.1')}\n+    REQUIREMENTS = {PipRequirement('safety', '1.8.2')}\n     AUTHORS_EMAILS = {'bence@underyx.me'}\n     LICENSE = 'AGPL'\n     CAN_DETECT = {'Security'}\n \n-    def run(self, filename, file):\n+    def setup_dependencies(self):\n+        insecure_full_json_url = ('https://raw.githubusercontent.com/'\n+                                  'pyupio/safety-db/master/data/'\n+                                  'insecure_full.json')\n+        insecure_josn_url = ('https://raw.githubusercontent.com/'\n+                             'pyupio/safety-db/master/data/insecure.json')\n+        self.download_cached_file(insecure_full_json_url,\n+                                  'insecure_full.json')\n+        my_file = self.download_cached_file(insecure_josn_url,\n+                                            'insecure.json')\n+        type(self).db_path = os.path.dirname(my_file)\n+\n+    def run(self, filename, file,\n+            db_path: str = None,\n+            cache_request: bool = False,","author":{"login":"RaiVaibhav","avatarUrl":"https://avatars3.githubusercontent.com/u/22278438?v=4","name":"Vaibhav Rai"},"reactions":[],"createdAt":"2018-07-21T14:28:37Z","lastEditedAt":null,"updatedAt":"2018-07-21T14:28:37Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDIxMjQyNA==","url":"https://github.com/coala/coala-bears/pull/2626#discussion_r204212424","bodyText":"I don't get what exactly you are saying, when I initially make it to db_path: str = '' you said check if it is None so I make it to None.","diffHunk":"@@ -40,15 +54,36 @@ class PySafetyBear(LocalBear):\n         'Python 3 Requirements',\n     }\n     AUTHORS = {'Bence Nagy'}\n-    REQUIREMENTS = {PipRequirement('safety', '0.5.1')}\n+    REQUIREMENTS = {PipRequirement('safety', '1.8.2')}\n     AUTHORS_EMAILS = {'bence@underyx.me'}\n     LICENSE = 'AGPL'\n     CAN_DETECT = {'Security'}\n \n-    def run(self, filename, file):\n+    def setup_dependencies(self):\n+        insecure_full_json_url = ('https://raw.githubusercontent.com/'\n+                                  'pyupio/safety-db/master/data/'\n+                                  'insecure_full.json')\n+        insecure_josn_url = ('https://raw.githubusercontent.com/'\n+                             'pyupio/safety-db/master/data/insecure.json')\n+        self.download_cached_file(insecure_full_json_url,\n+                                  'insecure_full.json')\n+        my_file = self.download_cached_file(insecure_josn_url,\n+                                            'insecure.json')\n+        type(self).db_path = os.path.dirname(my_file)\n+\n+    def run(self, filename, file,\n+            db_path: str = None,","author":{"login":"RaiVaibhav","avatarUrl":"https://avatars3.githubusercontent.com/u/22278438?v=4","name":"Vaibhav Rai"},"reactions":[],"createdAt":"2018-07-21T14:37:03Z","lastEditedAt":"2018-07-21T14:46:56Z","updatedAt":"2018-07-21T14:46:56Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDIxMzA0OQ==","url":"https://github.com/coala/coala-bears/pull/2626#discussion_r204213049","bodyText":"got your point 👍  from coalib.settings.Setting import path","diffHunk":"@@ -40,15 +54,36 @@ class PySafetyBear(LocalBear):\n         'Python 3 Requirements',\n     }\n     AUTHORS = {'Bence Nagy'}\n-    REQUIREMENTS = {PipRequirement('safety', '0.5.1')}\n+    REQUIREMENTS = {PipRequirement('safety', '1.8.2')}\n     AUTHORS_EMAILS = {'bence@underyx.me'}\n     LICENSE = 'AGPL'\n     CAN_DETECT = {'Security'}\n \n-    def run(self, filename, file):\n+    def setup_dependencies(self):\n+        insecure_full_json_url = ('https://raw.githubusercontent.com/'\n+                                  'pyupio/safety-db/master/data/'\n+                                  'insecure_full.json')\n+        insecure_josn_url = ('https://raw.githubusercontent.com/'\n+                             'pyupio/safety-db/master/data/insecure.json')\n+        self.download_cached_file(insecure_full_json_url,\n+                                  'insecure_full.json')\n+        my_file = self.download_cached_file(insecure_josn_url,\n+                                            'insecure.json')\n+        type(self).db_path = os.path.dirname(my_file)\n+\n+    def run(self, filename, file,\n+            db_path: str = None,","author":{"login":"RaiVaibhav","avatarUrl":"https://avatars3.githubusercontent.com/u/22278438?v=4","name":"Vaibhav Rai"},"reactions":[],"createdAt":"2018-07-21T15:07:22Z","lastEditedAt":null,"updatedAt":"2018-07-21T15:07:22Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDIxMzc5MA==","url":"https://github.com/coala/coala-bears/pull/2626#discussion_r204213790","bodyText":"we make our own decisions, for own own users needs, which may be quite different than upstream.\nWe need to know what it does, especially wrt to a locally cached db.\nWe would look very silly if this option was meaningless when not using a key","diffHunk":"@@ -40,15 +54,36 @@ class PySafetyBear(LocalBear):\n         'Python 3 Requirements',\n     }\n     AUTHORS = {'Bence Nagy'}\n-    REQUIREMENTS = {PipRequirement('safety', '0.5.1')}\n+    REQUIREMENTS = {PipRequirement('safety', '1.8.2')}\n     AUTHORS_EMAILS = {'bence@underyx.me'}\n     LICENSE = 'AGPL'\n     CAN_DETECT = {'Security'}\n \n-    def run(self, filename, file):\n+    def setup_dependencies(self):\n+        insecure_full_json_url = ('https://raw.githubusercontent.com/'\n+                                  'pyupio/safety-db/master/data/'\n+                                  'insecure_full.json')\n+        insecure_josn_url = ('https://raw.githubusercontent.com/'\n+                             'pyupio/safety-db/master/data/insecure.json')\n+        self.download_cached_file(insecure_full_json_url,\n+                                  'insecure_full.json')\n+        my_file = self.download_cached_file(insecure_josn_url,\n+                                            'insecure.json')\n+        type(self).db_path = os.path.dirname(my_file)\n+\n+    def run(self, filename, file,\n+            db_path: str = None,\n+            cache_request: bool = False,","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-21T15:39:20Z","lastEditedAt":null,"updatedAt":"2018-07-21T15:39:20Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDIxMzk1Mw==","url":"https://github.com/coala/coala-bears/pull/2626#discussion_r204213953","bodyText":"Import order.\nNeeds rebase.\nAnd see reply re cache_request.","diffHunk":"@@ -1,17 +1,20 @@\n from collections import namedtuple\n import pkg_resources\n+import os","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-21T15:46:29Z","lastEditedAt":null,"updatedAt":"2018-07-21T15:46:29Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDIyNzM2Mw==","url":"https://github.com/coala/coala-bears/pull/2626#discussion_r204227363","bodyText":"josn","diffHunk":"@@ -40,15 +55,33 @@ class PySafetyBear(LocalBear):\n         'Python 3 Requirements',\n     }\n     AUTHORS = {'Bence Nagy'}\n-    REQUIREMENTS = {PipRequirement('safety', '0.5.1')}\n+    REQUIREMENTS = {PipRequirement('safety', '1.8.2')}\n     AUTHORS_EMAILS = {'bence@underyx.me'}\n     LICENSE = 'AGPL'\n     CAN_DETECT = {'Security'}\n \n-    def run(self, filename, file):\n+    def setup_dependencies(self):\n+        insecure_full_json_url = ('https://raw.githubusercontent.com/'\n+                                  'pyupio/safety-db/master/data/'\n+                                  'insecure_full.json')\n+        insecure_josn_url = ('https://raw.githubusercontent.com/'","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNjc5NDAzNg==","createdAt":"2018-07-22T04:29:01Z","content":"THUMBS_UP","user":{"login":"RaiVaibhav","name":"Vaibhav Rai"}}],"createdAt":"2018-07-22T04:06:15Z","lastEditedAt":null,"updatedAt":"2018-07-22T04:06:15Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDIyNzM2OA==","url":"https://github.com/coala/coala-bears/pull/2626#discussion_r204227368","bodyText":"my_ is not a variable name that belongs in anything except for a hacky POC","diffHunk":"@@ -40,15 +55,33 @@ class PySafetyBear(LocalBear):\n         'Python 3 Requirements',\n     }\n     AUTHORS = {'Bence Nagy'}\n-    REQUIREMENTS = {PipRequirement('safety', '0.5.1')}\n+    REQUIREMENTS = {PipRequirement('safety', '1.8.2')}\n     AUTHORS_EMAILS = {'bence@underyx.me'}\n     LICENSE = 'AGPL'\n     CAN_DETECT = {'Security'}\n \n-    def run(self, filename, file):\n+    def setup_dependencies(self):\n+        insecure_full_json_url = ('https://raw.githubusercontent.com/'\n+                                  'pyupio/safety-db/master/data/'\n+                                  'insecure_full.json')\n+        insecure_josn_url = ('https://raw.githubusercontent.com/'\n+                             'pyupio/safety-db/master/data/insecure.json')\n+        self.download_cached_file(insecure_full_json_url,\n+                                  'insecure_full.json')\n+        my_file = self.download_cached_file(insecure_josn_url,","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-22T04:06:57Z","lastEditedAt":null,"updatedAt":"2018-07-22T04:06:57Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDIyNzM4MQ==","url":"https://github.com/coala/coala-bears/pull/2626#discussion_r204227381","bodyText":"why are you downloading both, and then using the less useful one ?","diffHunk":"@@ -40,15 +55,33 @@ class PySafetyBear(LocalBear):\n         'Python 3 Requirements',\n     }\n     AUTHORS = {'Bence Nagy'}\n-    REQUIREMENTS = {PipRequirement('safety', '0.5.1')}\n+    REQUIREMENTS = {PipRequirement('safety', '1.8.2')}\n     AUTHORS_EMAILS = {'bence@underyx.me'}\n     LICENSE = 'AGPL'\n     CAN_DETECT = {'Security'}\n \n-    def run(self, filename, file):\n+    def setup_dependencies(self):\n+        insecure_full_json_url = ('https://raw.githubusercontent.com/'\n+                                  'pyupio/safety-db/master/data/'\n+                                  'insecure_full.json')\n+        insecure_josn_url = ('https://raw.githubusercontent.com/'\n+                             'pyupio/safety-db/master/data/insecure.json')\n+        self.download_cached_file(insecure_full_json_url,\n+                                  'insecure_full.json')\n+        my_file = self.download_cached_file(insecure_josn_url,\n+                                            'insecure.json')\n+        type(self).db_path = os.path.dirname(my_file)","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-22T04:07:38Z","lastEditedAt":null,"updatedAt":"2018-07-22T04:07:38Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDIyNzQwOA==","url":"https://github.com/coala/coala-bears/pull/2626#discussion_r204227408","bodyText":"put these in module level global _private variables so that people can access them easily if they need to.","diffHunk":"@@ -40,15 +55,33 @@ class PySafetyBear(LocalBear):\n         'Python 3 Requirements',\n     }\n     AUTHORS = {'Bence Nagy'}\n-    REQUIREMENTS = {PipRequirement('safety', '0.5.1')}\n+    REQUIREMENTS = {PipRequirement('safety', '1.8.2')}\n     AUTHORS_EMAILS = {'bence@underyx.me'}\n     LICENSE = 'AGPL'\n     CAN_DETECT = {'Security'}\n \n-    def run(self, filename, file):\n+    def setup_dependencies(self):\n+        insecure_full_json_url = ('https://raw.githubusercontent.com/'","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNjc5NDAzNQ==","createdAt":"2018-07-22T04:28:56Z","content":"THUMBS_UP","user":{"login":"RaiVaibhav","name":"Vaibhav Rai"}}],"createdAt":"2018-07-22T04:09:35Z","lastEditedAt":null,"updatedAt":"2018-07-22T04:09:35Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDIyNzUyOA==","url":"https://github.com/coala/coala-bears/pull/2626#discussion_r204227528","bodyText":"add the cve in a hack of get_database_file instead of a hack of get_vulnerabilities.\nYou are already doing a hack on their db loading mechanism, in setup_dependencies, so it is much safer and logical to modify their file loading mechanism than to duplicate&modify their function which has comparison logic.\nThe hack should be in setup_dependencies .\nAnd to help with future breakages, you should first do safety.get_database_file (EOL) , as that will make Python check that they have a function called safety.get_database_file.  If it doesnt, the exception will occur there.  Then you can replace it, knowing the safety code will call it.\nOtherwise they may change the name of that function and the bear error will be very confusing.","diffHunk":"@@ -26,6 +29,18 @@ def cve_key_checker(vulnerability):\n Package = namedtuple('Package', ('key', 'version'))\n \n \n+def _get_vulnerabilities(pkg, spec, db):\n+    for entry in db[pkg]:\n+        entry['cve'] = 'None' if entry['cve'] is None else entry['cve']\n+        entry['id'] = entry['cve']\n+        for entry_spec in entry['specs']:\n+            if entry_spec == spec:\n+                yield entry\n+\n+\n+safety.get_vulnerabilities = _get_vulnerabilities","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-22T04:19:23Z","lastEditedAt":null,"updatedAt":"2018-07-22T04:19:23Z"}]}}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1532158032000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/pull/2627","number":2627,"title":"HaskellLintBear: Use CabalRequirement","body":"Closes #1358\n\nFor short term contributors: we understand that getting your commits well\ndefined like we require is a hard task and takes some learning. If you\nlook to help without wanting to contribute long term there's no need\nfor you to learn this. Just drop us a message and we'll take care of brushing\nup your stuff for merge!\nChecklist\n\n I read the commit guidelines and I've followed\nthem.\n I ran coala over my code locally. (All commits have to pass\nindividually. It is not sufficient to have \"fixup commits\" on your PR,\nour bot will still report the issues for the previous commit.) You will\nlikely receive a lot of bot comments and build failures if coala does not\npass on every single commit!\n\nAfter you submit your pull request, DO NOT click the 'Update Branch' button.\nWhen asked for a rebase, consult coala.io/rebase\ninstead.\nPlease consider helping us by reviewing other peoples pull requests as well:\n\npick up any PR at https://coala.io/review\nreview it (check https://coala.io/reviewing for more info)\nif you are sure that it needs work, use corobo mark wip <URL> to get it out\nof the review queue.\n\nThe more you review, the more your score will grow at coala.io and we will\nreview your PRs faster!","comments":1,"createdAt":"2018-07-20T16:34:08Z","updatedAt":"2018-07-21T07:27:12Z","closedAt":"2018-07-21T07:27:12Z","state":"merged","user":{"login":"anctartica","avatarUrl":"https://avatars0.githubusercontent.com/u/7020962?v=4"},"owner":{"login":"anctartica","avatarUrl":"https://avatars0.githubusercontent.com/u/7020962?v=4"},"assignee":{"login":"anctartica","avatarUrl":"https://avatars0.githubusercontent.com/u/7020962?v=4"},"labels":[{"name":"difficulty/low","color":"207de5"},{"name":"importance/low","color":"70e870"},{"name":"process/pending review","color":"bfe5bf"},{"name":"size/XS","color":"00DE0F"}],"pullRequest":{"htmlUrl":"https://github.com/coala/coala-bears/pull/2627","comments":[]}}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1532311705000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/pull/2630","number":2630,"title":"PySafetyBear.py: Fix comment typo","body":"This fixes the typo and changes it from parseable --> parsable\nFixes #2629\n\nFor short term contributors: we understand that getting your commits well\ndefined like we require is a hard task and takes some learning. If you\nlook to help without wanting to contribute long term there's no need\nfor you to learn this. Just drop us a message and we'll take care of brushing\nup your stuff for merge!\nChecklist\n\n I read the commit guidelines and I've followed\nthem.\n I ran coala over my code locally. (All commits have to pass\nindividually. It is not sufficient to have \"fixup commits\" on your PR,\nour bot will still report the issues for the previous commit.) You will\nlikely receive a lot of bot comments and build failures if coala does not\npass on every single commit!\n\nAfter you submit your pull request, DO NOT click the 'Update Branch' button.\nWhen asked for a rebase, consult coala.io/rebase\ninstead.\nPlease consider helping us by reviewing other peoples pull requests as well:\n\npick up any PR at https://coala.io/review\nreview it (check https://coala.io/reviewing for more info)\nif you are sure that it needs work, use corobo mark wip <URL> to get it out\nof the review queue.\n\nThe more you review, the more your score will grow at coala.io and we will\nreview your PRs faster!","comments":12,"createdAt":"2018-07-21T10:14:57Z","updatedAt":"2018-07-23T02:08:25Z","closedAt":"2018-07-23T02:07:39Z","state":"merged","user":{"login":"Pranav1999","avatarUrl":"https://avatars0.githubusercontent.com/u/25407486?v=4"},"owner":{"login":"Pranav1999","avatarUrl":"https://avatars0.githubusercontent.com/u/25407486?v=4"},"assignee":{"login":"Pranav1999","avatarUrl":"https://avatars0.githubusercontent.com/u/25407486?v=4"},"labels":[{"name":"difficulty/newcomer","color":"65C8FF"},{"name":"size/XS","color":"00DE0F"},{"name":"type/spelling","color":"50b5f4"}],"pullRequest":{"htmlUrl":"https://github.com/coala/coala-bears/pull/2630","comments":[]}}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1532699586000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/pull/2631","number":2631,"title":".travis.yml: Remove version numbers from PATH line","body":"For short term contributors: we understand that getting your commits well\ndefined like we require is a hard task and takes some learning. If you\nlook to help without wanting to contribute long term there's no need\nfor you to learn this. Just drop us a message and we'll take care of brushing\nup your stuff for merge!\nChecklist\n\n I read the commit guidelines and I've followed\nthem.\n I ran coala over my code locally. (All commits have to pass\nindividually. It is not sufficient to have \"fixup commits\" on your PR,\nour bot will still report the issues for the previous commit.) You will\nlikely receive a lot of bot comments and build failures if coala does not\npass on every single commit!\n\nAfter you submit your pull request, DO NOT click the 'Update Branch' button.\nWhen asked for a rebase, consult coala.io/rebase\ninstead.\nPlease consider helping us by reviewing other peoples pull requests as well:\n\npick up any PR at https://coala.io/review\nreview it (check https://coala.io/reviewing for more info)\nif you are sure that it needs work, use corobo mark wip <URL> to get it out\nof the review queue.\n\nThe more you review, the more your score will grow at coala.io and we will\nreview your PRs faster!","comments":7,"createdAt":"2018-07-21T12:00:37Z","updatedAt":"2018-07-27T13:53:06Z","closedAt":"2018-07-26T04:26:44Z","state":"merged","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"process/approved","color":"009800"},{"name":"size/XS","color":"00DE0F"}],"pullRequest":{"htmlUrl":"https://github.com/coala/coala-bears/pull/2631","comments":[{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDM3OTUxOA==","url":"https://github.com/coala/coala-bears/pull/2631#discussion_r204379518","bodyText":"What I have thought at #2631 might look like this.\nwget \"http://downloads.sourceforge.net/project/fpgalibre/bakalint/$BAKALINT_VERSION/bakalint-$BAKALINT_VERSION.tar.gz\"  -O ~/bl.tar.gz","diffHunk":"@@ -19,19 +21,21 @@ bundle install --path=vendor/bundle --binstubs=vendor/bin --jobs=8 --retry=3\n if ! dartanalyzer -v &> /dev/null; then\n   wget -nc -O ~/dart-sdk.zip https://storage.googleapis.com/dart-archive/channels/stable/release/1.14.2/sdk/dartsdk-linux-x64-release.zip\n   unzip -n ~/dart-sdk.zip -d ~/\n+  cp -rp ~/dart-sdk/* ~/.local/\n fi\n \n # VHDL Bakalint Installation\n-if [ ! -e ~/bakalint-0.4.0/bakalint.pl ]; then\n+if [ ! -e ~/.local/bin/bakalint.pl ]; then\n+  BAKALINT_VERSION=0.4.0\n   wget \"http://downloads.sourceforge.net/project/fpgalibre/bakalint/0.4.0/bakalint-0.4.0.tar.gz?r=https%3A%2F%2Fsourceforge.net%2Fprojects%2Ffpgalibre%2Ffiles%2Fbakalint%2F0.4.0%2F&ts=1461844926&use_mirror=netcologne\" -O ~/bl.tar.gz","author":{"login":"giovanism","avatarUrl":"https://avatars1.githubusercontent.com/u/18410908?v=4","name":"Giovan Isa Musthofa"},"createdAt":"2018-07-23T12:19:10Z","lastEditedAt":null,"updatedAt":"2018-07-23T12:19:10Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDQxNjg4NQ==","url":"https://github.com/coala/coala-bears/pull/2631#discussion_r204416885","bodyText":"We dont need to change that line, so until we do, it can stay as it is.\ne.g. if they release a new version, the variable would change, and the download link would use the variable.","diffHunk":"@@ -19,19 +21,21 @@ bundle install --path=vendor/bundle --binstubs=vendor/bin --jobs=8 --retry=3\n if ! dartanalyzer -v &> /dev/null; then\n   wget -nc -O ~/dart-sdk.zip https://storage.googleapis.com/dart-archive/channels/stable/release/1.14.2/sdk/dartsdk-linux-x64-release.zip\n   unzip -n ~/dart-sdk.zip -d ~/\n+  cp -rp ~/dart-sdk/* ~/.local/\n fi\n \n # VHDL Bakalint Installation\n-if [ ! -e ~/bakalint-0.4.0/bakalint.pl ]; then\n+if [ ! -e ~/.local/bin/bakalint.pl ]; then\n+  BAKALINT_VERSION=0.4.0\n   wget \"http://downloads.sourceforge.net/project/fpgalibre/bakalint/0.4.0/bakalint-0.4.0.tar.gz?r=https%3A%2F%2Fsourceforge.net%2Fprojects%2Ffpgalibre%2Ffiles%2Fbakalint%2F0.4.0%2F&ts=1461844926&use_mirror=netcologne\" -O ~/bl.tar.gz","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-07-23T14:15:05Z","lastEditedAt":null,"updatedAt":"2018-07-23T14:15:05Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwNzAzNjcxNg==","url":"https://github.com/coala/coala-bears/pull/2631#issuecomment-407036716","bodyText":"I think the download links can also be changed to use the variables. And, Why there is no referenced issue?","diffHunk":null,"author":{"login":"giovanism","avatarUrl":"https://avatars1.githubusercontent.com/u/18410908?v=4","name":"Giovan Isa Musthofa"},"createdAt":"2018-07-23T12:11:47Z","lastEditedAt":null,"updatedAt":"2018-07-23T12:11:47Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwNzA3MzQzMA==","url":"https://github.com/coala/coala-bears/pull/2631#issuecomment-407073430","bodyText":"Regarding issue , there is no bug, nor anybody asking for this ;-)\nI am doing it because it make #1429 tidier.\nI'll add Related to https://github.com/coala/coala/issues/3701","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-07-23T14:16:36Z","lastEditedAt":null,"updatedAt":"2018-07-23T14:16:36Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwNzExNzI1Mw==","url":"https://github.com/coala/coala-bears/pull/2631#issuecomment-407117253","bodyText":"Looks good to me, then.","diffHunk":null,"author":{"login":"giovanism","avatarUrl":"https://avatars1.githubusercontent.com/u/18410908?v=4","name":"Giovan Isa Musthofa"},"createdAt":"2018-07-23T16:23:29Z","lastEditedAt":"2018-07-23T16:23:37Z","updatedAt":"2018-07-23T16:23:37Z"}]}}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1532276377000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/pull/2634","number":2634,"title":"coala-bears: Sync moban","body":"Fixes #2633\n\nFor short term contributors: we understand that getting your commits well\ndefined like we require is a hard task and takes some learning. If you\nlook to help without wanting to contribute long term there's no need\nfor you to learn this. Just drop us a message and we'll take care of brushing\nup your stuff for merge!\nChecklist\n\n I read the commit guidelines and I've followed\nthem.\n I ran coala over my code locally. (All commits have to pass\nindividually. It is not sufficient to have \"fixup commits\" on your PR,\nour bot will still report the issues for the previous commit.) You will\nlikely receive a lot of bot comments and build failures if coala does not\npass on every single commit!\n\nAfter you submit your pull request, DO NOT click the 'Update Branch' button.\nWhen asked for a rebase, consult coala.io/rebase\ninstead.\nPlease consider helping us by reviewing other peoples pull requests as well:\n\npick up any PR at https://coala.io/review\nreview it (check https://coala.io/reviewing for more info)\nif you are sure that it needs work, use corobo mark wip <URL> to get it out\nof the review queue.\n\nThe more you review, the more your score will grow at coala.io and we will\nreview your PRs faster!","comments":1,"createdAt":"2018-07-22T11:06:32Z","updatedAt":"2018-07-22T16:19:37Z","closedAt":"2018-07-22T16:19:37Z","state":"closed","user":{"login":"MacBox7","avatarUrl":"https://avatars0.githubusercontent.com/u/15063552?v=4"},"owner":{"login":"MacBox7","avatarUrl":"https://avatars0.githubusercontent.com/u/15063552?v=4"},"labels":[{"name":"process/pending review","color":"bfe5bf"},{"name":"size/XS","color":"00DE0F"},{"name":"type/bug","color":"e11d21"}],"pullRequest":{"htmlUrl":"https://github.com/coala/coala-bears/pull/2634","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQwNjg3ODgyNg==","url":"https://github.com/coala/coala-bears/pull/2634#issuecomment-406878826","bodyText":"Already done by someone else","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-07-22T16:19:37Z","lastEditedAt":null,"updatedAt":"2018-07-22T16:19:37Z"}]}}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1532849053000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/pull/2636","number":2636,"title":"generate_package.py: Removed unused import glob","body":"generate_package.py: Unused import was removed from package\nRemoves the unnecessary import from line 2\nThis eliminates the error of redefinition of unused glob\nFixes #2622\n\nFor short term contributors: we understand that getting your commits well\ndefined like we require is a hard task and takes some learning. If you\nlook to help without wanting to contribute long term there's no need\nfor you to learn this. Just drop us a message and we'll take care of brushing\nup your stuff for merge!\nChecklist\n\n I read the commit guidelines and I've followed\nthem.\n I ran coala over my code locally. (All commits have to pass\nindividually. It is not sufficient to have \"fixup commits\" on your PR,\nour bot will still report the issues for the previous commit.) You will\nlikely receive a lot of bot comments and build failures if coala does not\npass on every single commit!\n\nAfter you submit your pull request, DO NOT click the 'Update Branch' button.\nWhen asked for a rebase, consult coala.io/rebase\ninstead.\nPlease consider helping us by reviewing other peoples pull requests as well:\n\npick up any PR at https://coala.io/review\nreview it (check https://coala.io/reviewing for more info)\nif you are sure that it needs work, use corobo mark wip <URL> to get it out\nof the review queue.\n\nThe more you review, the more your score will grow at coala.io and we will\nreview your PRs faster!","comments":33,"createdAt":"2018-07-22T18:45:06Z","updatedAt":"2018-07-29T07:24:13Z","closedAt":"2018-07-29T07:24:13Z","state":"merged","user":{"login":"sladyn98","avatarUrl":"https://avatars1.githubusercontent.com/u/28837406?v=4"},"owner":{"login":"sladyn98","avatarUrl":"https://avatars1.githubusercontent.com/u/28837406?v=4"},"assignee":{"login":"sladyn98","avatarUrl":"https://avatars1.githubusercontent.com/u/28837406?v=4"},"labels":[{"name":"difficulty/newcomer","color":"65C8FF"},{"name":"size/XS","color":"00DE0F"},{"name":"type/style","color":"168fe0"}],"pullRequest":{"htmlUrl":"https://github.com/coala/coala-bears/pull/2636","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQwNjg4OTUwMQ==","url":"https://github.com/coala/coala-bears/pull/2636#issuecomment-406889501","bodyText":"edit the commit message according to out guidelines http://api.coala.io/en/latest/Developers/Writing_Good_Commits.html","diffHunk":null,"author":{"login":"palash25","avatarUrl":"https://avatars0.githubusercontent.com/u/21367710?v=4","name":"Palash Nigam"},"createdAt":"2018-07-22T19:11:26Z","lastEditedAt":null,"updatedAt":"2018-07-22T19:11:26Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwNzgzMDM3OQ==","url":"https://github.com/coala/coala-bears/pull/2636#issuecomment-407830379","bodyText":"@sladyn98 try to follow steps what @MacBox7 has suggested. I think you followed the procedure but you didn't change the commit head instead changed the content of commit's body. Try to repeat the procedure again.","diffHunk":null,"author":{"login":"gutsytechster","avatarUrl":"https://avatars3.githubusercontent.com/u/31796326?v=4","name":"Prashant Sharma"},"createdAt":"2018-07-25T17:18:22Z","lastEditedAt":null,"updatedAt":"2018-07-25T17:18:22Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwNzk3MjAzMw==","url":"https://github.com/coala/coala-bears/pull/2636#issuecomment-407972033","bodyText":"There are three ways your commit message violates the commit guideline.\nyou need to read https://api.coala.io/en/latest/Developers/Writing_Good_Commits.html much more carefully","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-07-26T04:22:35Z","lastEditedAt":null,"updatedAt":"2018-07-26T04:22:35Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwODEzNTg1NQ==","url":"https://github.com/coala/coala-bears/pull/2636#issuecomment-408135855","bodyText":"@sladyn98, do these steps:\n\nIn your commit message, give a space after colon(:) and remove the period(full stop) from the end.\nGive a new line after the commit header(shortlog) and after the commit body(or before the line which includes Fixes)","diffHunk":null,"author":{"login":"gutsytechster","avatarUrl":"https://avatars3.githubusercontent.com/u/31796326?v=4","name":"Prashant Sharma"},"createdAt":"2018-07-26T15:26:40Z","lastEditedAt":null,"updatedAt":"2018-07-26T15:26:40Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwODQ4NzkzMA==","url":"https://github.com/coala/coala-bears/pull/2636#issuecomment-408487930","bodyText":"@sladyn98, you indeed made some changes but yet forget to do some of them.\n\nYou didn't give space after colon(:), do give that.\nYou didn't give a blank line after shortlog(commit header), do give there also.\nWhy did you merged the content of commit's body in a single line? It is getting too long. So break the line just like earlier you had in this commit fdddef7","diffHunk":null,"author":{"login":"gutsytechster","avatarUrl":"https://avatars3.githubusercontent.com/u/31796326?v=4","name":"Prashant Sharma"},"createdAt":"2018-07-27T17:34:53Z","lastEditedAt":null,"updatedAt":"2018-07-27T17:34:53Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwODQ4OTgwOQ==","url":"https://github.com/coala/coala-bears/pull/2636#issuecomment-408489809","bodyText":"@gutsytechster I added a space after the colon and broke the commit message into two lines.Also I did give a new line after the short log,(commit header).","diffHunk":null,"author":{"login":"sladyn98","avatarUrl":"https://avatars1.githubusercontent.com/u/28837406?v=4","name":"Sladyn"},"createdAt":"2018-07-27T17:42:04Z","lastEditedAt":null,"updatedAt":"2018-07-27T17:42:04Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwODQ5MDA2Ng==","url":"https://github.com/coala/coala-bears/pull/2636#issuecomment-408490066","bodyText":"Nice @sladyn98, you are all set now. 👍","diffHunk":null,"author":{"login":"gutsytechster","avatarUrl":"https://avatars3.githubusercontent.com/u/31796326?v=4","name":"Prashant Sharma"},"createdAt":"2018-07-27T17:43:08Z","lastEditedAt":null,"updatedAt":"2018-07-27T17:43:08Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwODQ5MDQ5Mw==","url":"https://github.com/coala/coala-bears/pull/2636#issuecomment-408490493","bodyText":"@gutsytechster Cool , Do i send the review message on gitter again? Or just leave it","diffHunk":null,"author":{"login":"sladyn98","avatarUrl":"https://avatars1.githubusercontent.com/u/28837406?v=4","name":"Sladyn"},"createdAt":"2018-07-27T17:44:42Z","lastEditedAt":null,"updatedAt":"2018-07-27T17:44:42Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwODQ5MTMwMw==","url":"https://github.com/coala/coala-bears/pull/2636#issuecomment-408491303","bodyText":"I think, the message from earlier would be enough to tell a maintainer that a review has to be done. 🙂","diffHunk":null,"author":{"login":"gutsytechster","avatarUrl":"https://avatars3.githubusercontent.com/u/31796326?v=4","name":"Prashant Sharma"},"createdAt":"2018-07-27T17:47:44Z","lastEditedAt":null,"updatedAt":"2018-07-27T17:47:44Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwODYzMDg3Mg==","url":"https://github.com/coala/coala-bears/pull/2636#issuecomment-408630872","bodyText":"@sladyn98 good work. Now just use git commit --amend to change Fixes to Closes as stated by @ishanSrt . Hope you could do this soon so that it can be merged.","diffHunk":null,"author":{"login":"MacBox7","avatarUrl":"https://avatars0.githubusercontent.com/u/15063552?v=4","name":"Ankit Joshi"},"createdAt":"2018-07-28T19:47:14Z","lastEditedAt":null,"updatedAt":"2018-07-28T19:47:14Z"}]}}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1532366608000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/pull/2639","number":2639,"title":"bears/Constants.py : Adds VERSION to all","body":"The VERSION variable is added to all in bears/Constants.py\nCloses #2623\n\nFor short term contributors: we understand that getting your commits well\ndefined like we require is a hard task and takes some learning. If you\nlook to help without wanting to contribute long term there's no need\nfor you to learn this. Just drop us a message and we'll take care of brushing\nup your stuff for merge!\nChecklist\n\n I read the commit guidelines and I've followed\nthem.\n I ran coala over my code locally. (All commits have to pass\nindividually. It is not sufficient to have \"fixup commits\" on your PR,\nour bot will still report the issues for the previous commit.) You will\nlikely receive a lot of bot comments and build failures if coala does not\npass on every single commit!\n\nAfter you submit your pull request, DO NOT click the 'Update Branch' button.\nWhen asked for a rebase, consult coala.io/rebase\ninstead.\nPlease consider helping us by reviewing other peoples pull requests as well:\n\npick up any PR at https://coala.io/review\nreview it (check https://coala.io/reviewing for more info)\nif you are sure that it needs work, use corobo mark wip <URL> to get it out\nof the review queue.\n\nThe more you review, the more your score will grow at coala.io and we will\nreview your PRs faster!","comments":7,"createdAt":"2018-07-23T16:20:35Z","updatedAt":"2018-07-23T17:23:28Z","closedAt":"2018-07-23T17:23:28Z","state":"merged","user":{"login":"ShashwatNigam99","avatarUrl":"https://avatars3.githubusercontent.com/u/30972206?v=4"},"owner":{"login":"ShashwatNigam99","avatarUrl":"https://avatars3.githubusercontent.com/u/30972206?v=4"},"assignee":{"login":"ShashwatNigam99","avatarUrl":"https://avatars3.githubusercontent.com/u/30972206?v=4"},"labels":[{"name":"difficulty/newcomer","color":"65C8FF"},{"name":"size/XS","color":"00DE0F"}],"pullRequest":{"htmlUrl":"https://github.com/coala/coala-bears/pull/2639","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQwNzEzMDk3Mg==","url":"https://github.com/coala/coala-bears/pull/2639#issuecomment-407130972","bodyText":"You must make your own branch in local machine, Not directly to master , So make another commit with new branch","diffHunk":null,"author":{"login":"amit2020cs","avatarUrl":"https://avatars3.githubusercontent.com/u/31853896?v=4","name":"Amit Singh"},"createdAt":"2018-07-23T17:07:10Z","lastEditedAt":null,"updatedAt":"2018-07-23T17:07:10Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwNzEzMjY3MQ==","url":"https://github.com/coala/coala-bears/pull/2639#issuecomment-407132671","bodyText":"You must make your own branch in local machine, Not directly to master , So make another commit with new branch\n\nPlease do not recommend new branches.\nIt is too late to create a new branch after a PR is created.\nOnce the PR is created, the author must fix the PR on their master.","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-07-23T17:12:49Z","lastEditedAt":null,"updatedAt":"2018-07-23T17:12:49Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwNzEzNTQwMw==","url":"https://github.com/coala/coala-bears/pull/2639#issuecomment-407135403","bodyText":"@amit2020cs  I did make a branch on my local machine (named issue2623, branched from master of forked repo) . I didnt get what you are trying to say","diffHunk":null,"author":{"login":"ShashwatNigam99","avatarUrl":"https://avatars3.githubusercontent.com/u/30972206?v=4","name":"Meher Shashwat Nigam"},"createdAt":"2018-07-23T17:21:41Z","lastEditedAt":null,"updatedAt":"2018-07-23T17:21:41Z"}]}}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1533581461000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/pull/2641","number":2641,"title":"bear-requirements.txt: Bump pyflakes","body":"Upgrades pyflakes version to 2.0.0\nCloses #2621\n\nFor short term contributors: we understand that getting your commits well\ndefined like we require is a hard task and takes some learning. If you\nlook to help without wanting to contribute long term there's no need\nfor you to learn this. Just drop us a message and we'll take care of brushing\nup your stuff for merge!\nChecklist\n\n I read the commit guidelines and I've followed\nthem.\n I ran coala over my code locally. (All commits have to pass\nindividually. It is not sufficient to have \"fixup commits\" on your PR,\nour bot will still report the issues for the previous commit.) You will\nlikely receive a lot of bot comments and build failures if coala does not\npass on every single commit!\n\nAfter you submit your pull request, DO NOT click the 'Update Branch' button.\nWhen asked for a rebase, consult coala.io/rebase\ninstead.\nPlease consider helping us by reviewing other peoples pull requests as well:\n\npick up any PR at https://coala.io/review\nreview it (check https://coala.io/reviewing for more info)\nif you are sure that it needs work, use corobo mark wip <URL> to get it out\nof the review queue.\n\nThe more you review, the more your score will grow at coala.io and we will\nreview your PRs faster!","comments":10,"createdAt":"2018-07-24T14:58:46Z","updatedAt":"2018-08-06T18:51:01Z","closedAt":"2018-08-06T18:51:01Z","state":"merged","user":{"login":"MacBox7","avatarUrl":"https://avatars0.githubusercontent.com/u/15063552?v=4"},"owner":{"login":"MacBox7","avatarUrl":"https://avatars0.githubusercontent.com/u/15063552?v=4"},"assignee":{"login":"MacBox7","avatarUrl":"https://avatars0.githubusercontent.com/u/15063552?v=4"},"labels":[{"name":"size/XS","color":"00DE0F"},{"name":"status/blocked","color":"e11d21"}],"pullRequest":{"htmlUrl":"https://github.com/coala/coala-bears/pull/2641","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQwNzg5NzAzOA==","url":"https://github.com/coala/coala-bears/pull/2641#issuecomment-407897038","bodyText":"Based on https://gitlab.com/jayvdb/coala-pyflakes/-/jobs/84416570 , we need to ensure we have a test which has an error on line 1, to ensure that we have the right setting for 0 or 1 based line offsets.\nAlso the autoflake bear (PyUnusedCodeBear?).\nIf there is no test covering that, create an issue and fix pls.","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-07-25T21:10:50Z","lastEditedAt":null,"updatedAt":"2018-07-25T21:10:50Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwODkzNTI1Mw==","url":"https://github.com/coala/coala-bears/pull/2641#issuecomment-408935253","bodyText":"This was handled in here. Forgot to mention here. The problem was that python AST starts col_offset from 0 and I was feeding coalib the same. Now the results have been fixed in coala-pyflakes. A test case for the same has been added here. The error is made to occur at 0 offset.","diffHunk":null,"author":{"login":"MacBox7","avatarUrl":"https://avatars0.githubusercontent.com/u/15063552?v=4","name":"Ankit Joshi"},"createdAt":"2018-07-30T16:58:06Z","lastEditedAt":"2018-07-30T17:00:28Z","updatedAt":"2018-07-30T17:00:28Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwODkzOTEzMA==","url":"https://github.com/coala/coala-bears/pull/2641#issuecomment-408939130","bodyText":"@MacBox7 , ideally we have tests in this repo which verify that the line/col offsets of the bears are correct.\nAll bears should have an error on line 1, and verify that the error reported is against line 1 and not against line 0.  Likewise with columns.","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-07-30T17:10:49Z","lastEditedAt":null,"updatedAt":"2018-07-30T17:10:49Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwOTExMjY5Nw==","url":"https://github.com/coala/coala-bears/pull/2641#issuecomment-409112697","bodyText":"We can implement a method in LocalBearTestHelper that asserts for this.\ndef test_result_offset(self):\n        if getattr(self, 'initial_offset_file', False):\n            self.check_results(\n                self.uut,\n                self.initial_offset_file.splitlines(True),\n                [Result.from_values(self.uut.__class__.__name__,\n                                    self.initial_offset_message,\n                                    file='test',\n                                    line=1,\n                                    column=1)],\n                filename='test')\n\nWe can have 2 such methods rather than 1. One for testing lineno and other for column offset because every bear may not provide column offset.","diffHunk":null,"author":{"login":"MacBox7","avatarUrl":"https://avatars0.githubusercontent.com/u/15063552?v=4","name":"Ankit Joshi"},"createdAt":"2018-07-31T06:42:36Z","lastEditedAt":"2018-07-31T06:44:43Z","updatedAt":"2018-07-31T06:44:43Z"}]}}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1532967844000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/pull/2643","number":2643,"title":"CrystalLintBear.py: Add `ameba`","body":"This adds a local lint bear for Crystal language\nwrapping ameba.\nCloses #2332\n\nFor short term contributors: we understand that getting your commits well\ndefined like we require is a hard task and takes some learning. If you\nlook to help without wanting to contribute long term there's no need\nfor you to learn this. Just drop us a message and we'll take care of brushing\nup your stuff for merge!\nChecklist\n\n I read the commit guidelines and I've followed\nthem.\n I ran coala over my code locally. (All commits have to pass\nindividually. It is not sufficient to have \"fixup commits\" on your PR,\nour bot will still report the issues for the previous commit.) You will\nlikely receive a lot of bot comments and build failures if coala does not\npass on every single commit!\n\nAfter you submit your pull request, DO NOT click the 'Update Branch' button.\nWhen asked for a rebase, consult coala.io/rebase\ninstead.\nPlease consider helping us by reviewing other peoples pull requests as well:\n\npick up any PR at https://coala.io/review\nreview it (check https://coala.io/reviewing for more info)\nif you are sure that it needs work, use corobo mark wip <URL> to get it out\nof the review queue.\n\nThe more you review, the more your score will grow at coala.io and we will\nreview your PRs faster!","comments":2,"createdAt":"2018-07-26T09:42:32Z","updatedAt":"2018-07-30T16:24:04Z","closedAt":null,"state":"open","user":{"login":"sangamcse","avatarUrl":"https://avatars2.githubusercontent.com/u/26381717?v=4"},"owner":{"login":"sangamcse","avatarUrl":"https://avatars2.githubusercontent.com/u/26381717?v=4"},"assignee":{"login":"sangamcse","avatarUrl":"https://avatars2.githubusercontent.com/u/26381717?v=4"},"labels":[{"name":"bear proposal","color":"ADFF2F"},{"name":"difficulty/low","color":"207de5"},{"name":"size/S","color":"B1CF0A"},{"name":"status/blocked","color":"e11d21"}],"pullRequest":{"htmlUrl":"https://github.com/coala/coala-bears/pull/2643","comments":[{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTU0ODk5NA==","url":"https://github.com/coala/coala-bears/pull/2643#discussion_r205548994","bodyText":"@jayvdb, I am a bit confused here about the name, version, authors, etc. This version part is mandatory according to the shard, BTW.","diffHunk":"@@ -0,0 +1,10 @@\n+name: coala-bears\n+version: 0.12.0.dev99999999999999","author":{"login":"sangamcse","avatarUrl":"https://avatars2.githubusercontent.com/u/26381717?v=4","name":"Sangam Kumar"},"reactions":[],"createdAt":"2018-07-26T17:57:52Z","lastEditedAt":null,"updatedAt":"2018-07-26T17:57:52Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTU2NzA1MA==","url":"https://github.com/coala/coala-bears/pull/2643#discussion_r205567050","bodyText":"This file needs to be generated from a moban template like the others are, using Requirement classes.","diffHunk":"@@ -0,0 +1,10 @@\n+name: coala-bears\n+version: 0.12.0.dev99999999999999\n+\n+authors:\n+  - The coala developers <coala-devel@googlegroups.com>","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-26T18:56:04Z","lastEditedAt":null,"updatedAt":"2018-07-26T18:56:04Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTU2NzA4NA==","url":"https://github.com/coala/coala-bears/pull/2643#discussion_r205567084","bodyText":"Need to add a ShardsRequirement to package_manager.\nBut .. as you are using travis apt , and circle is disabled anyway, another option is to enhance DistributionRequirement to support custom repis.","diffHunk":"@@ -58,3 +58,10 @@ if [ ! -e ~/.local/bin/flawfinder ]; then\n   sed -i '1s/.*/#!\\/usr\\/bin\\/env python2/' ~/.local/bin/flawfinder\n   chmod +x ~/.local/bin/flawfinder\n fi\n+\n+# Shards commands\n+if [ ! -e ~/.local/bin/ameba ]; then\n+  shards install","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-26T18:56:11Z","lastEditedAt":null,"updatedAt":"2018-07-26T18:56:11Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTU2NzczNg==","url":"https://github.com/coala/coala-bears/pull/2643#discussion_r205567736","bodyText":"I think you have the right content for those. But they need to come from a template","diffHunk":"@@ -0,0 +1,10 @@\n+name: coala-bears\n+version: 0.12.0.dev99999999999999","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-26T18:58:22Z","lastEditedAt":null,"updatedAt":"2018-07-26T18:58:22Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTU3Mzg4MA==","url":"https://github.com/coala/coala-bears/pull/2643#discussion_r205573880","bodyText":"Enhancing DistributionRequirement is a better option as this is required for only one bear right now and I don't think shards will be required for any other bear in future also.","diffHunk":"@@ -58,3 +58,10 @@ if [ ! -e ~/.local/bin/flawfinder ]; then\n   sed -i '1s/.*/#!\\/usr\\/bin\\/env python2/' ~/.local/bin/flawfinder\n   chmod +x ~/.local/bin/flawfinder\n fi\n+\n+# Shards commands\n+if [ ! -e ~/.local/bin/ameba ]; then\n+  shards install","author":{"login":"sangamcse","avatarUrl":"https://avatars2.githubusercontent.com/u/26381717?v=4","name":"Sangam Kumar"},"reactions":[],"createdAt":"2018-07-26T19:21:03Z","lastEditedAt":null,"updatedAt":"2018-07-26T19:21:03Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTkzNTc1MQ==","url":"https://github.com/coala/coala-bears/pull/2643#discussion_r205935751","bodyText":"@jayvdb, Crystal and ameba both can be installed using brew.\nRef crystal-lang using brew, ameba using brew.\nNote: I have also written brew dependency in the bear.","diffHunk":"@@ -58,3 +58,10 @@ if [ ! -e ~/.local/bin/flawfinder ]; then\n   sed -i '1s/.*/#!\\/usr\\/bin\\/env python2/' ~/.local/bin/flawfinder\n   chmod +x ~/.local/bin/flawfinder\n fi\n+\n+# Shards commands\n+if [ ! -e ~/.local/bin/ameba ]; then\n+  shards install","author":{"login":"sangamcse","avatarUrl":"https://avatars2.githubusercontent.com/u/26381717?v=4","name":"Sangam Kumar"},"reactions":[],"createdAt":"2018-07-28T07:22:14Z","lastEditedAt":null,"updatedAt":"2018-07-28T07:22:14Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTkzNTc2Ng==","url":"https://github.com/coala/coala-bears/pull/2643#discussion_r205935766","bodyText":"#2643 (comment)","diffHunk":"@@ -0,0 +1,28 @@\n+from coalib.bearlib.abstractions.Linter import linter\n+from dependency_management.requirements.DistributionRequirement import (\n+    DistributionRequirement)\n+\n+\n+@linter(executable='ameba',\n+        output_format='regex',\n+        output_regex=r'.+:(?P<line>\\d+):(?P<column>\\d+)\\n'\n+                     r'.+31m(?P<origin>[A-Za-z]+): (?P<message>.*)')\n+class CrystalLintBear:\n+    \"\"\"\n+    Checks the code with ``ameba``.\n+\n+    It enforces a consistent Crystal code style\n+    <https://crystal-lang.org/docs/conventions/coding_style.html>, also catches\n+    code smells and wrong code constructions.\n+    \"\"\"\n+    LANGUAGE = {'Crystal'}\n+    REQUIREMENTS = {DistributionRequirement(brew='ameba')}","author":{"login":"sangamcse","avatarUrl":"https://avatars2.githubusercontent.com/u/26381717?v=4","name":"Sangam Kumar"},"reactions":[],"createdAt":"2018-07-28T07:23:13Z","lastEditedAt":null,"updatedAt":"2018-07-28T07:23:13Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk0NTg4MA==","url":"https://github.com/coala/coala-bears/pull/2643#discussion_r205945880","bodyText":"not done yet.\nAnd you will find, when you go to generate with moban, that .ci/generate_bear_requirements.py is going to need a ShardsRequirement.","diffHunk":"@@ -0,0 +1,10 @@\n+name: coala-bears\n+version: 0.12.0.dev99999999999999\n+\n+authors:\n+  - The coala developers <coala-devel@googlegroups.com>","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-28T15:24:34Z","lastEditedAt":null,"updatedAt":"2018-07-28T15:24:34Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk1OTE0OQ==","url":"https://github.com/coala/coala-bears/pull/2643#discussion_r205959149","bodyText":"31m is ansi stuff?\nwe have a cleaner for that : strip_ansi","diffHunk":"@@ -0,0 +1,28 @@\n+from coalib.bearlib.abstractions.Linter import linter\n+from dependency_management.requirements.ShardRequirement import (\n+    ShardRequirement)\n+\n+\n+@linter(executable='ameba',\n+        output_format='regex',\n+        output_regex=r'.+:(?P<line>\\d+):(?P<column>\\d+)\\n'\n+                     r'.+31m(?P<origin>[A-Za-z]+): (?P<message>.*)')","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-29T02:42:59Z","lastEditedAt":null,"updatedAt":"2018-07-29T02:42:59Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk1OTE1MQ==","url":"https://github.com/coala/coala-bears/pull/2643#discussion_r205959151","bodyText":"blocked by https://gitlab.com/coala/package_manager/issues/200","diffHunk":"@@ -0,0 +1,28 @@\n+from coalib.bearlib.abstractions.Linter import linter\n+from dependency_management.requirements.ShardRequirement import (","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-29T02:43:11Z","lastEditedAt":null,"updatedAt":"2018-07-29T02:43:11Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk2NDMwMA==","url":"https://github.com/coala/coala-bears/pull/2643#discussion_r205964300","bodyText":"Yes.\n\n31m is ansi stuff?\n\nOkay, I will look into it.\n\nwe have a cleaner for that : strip_ansi","diffHunk":"@@ -0,0 +1,28 @@\n+from coalib.bearlib.abstractions.Linter import linter\n+from dependency_management.requirements.ShardRequirement import (\n+    ShardRequirement)\n+\n+\n+@linter(executable='ameba',\n+        output_format='regex',\n+        output_regex=r'.+:(?P<line>\\d+):(?P<column>\\d+)\\n'\n+                     r'.+31m(?P<origin>[A-Za-z]+): (?P<message>.*)')","author":{"login":"sangamcse","avatarUrl":"https://avatars2.githubusercontent.com/u/26381717?v=4","name":"Sangam Kumar"},"reactions":[],"createdAt":"2018-07-29T07:52:42Z","lastEditedAt":null,"updatedAt":"2018-07-29T07:52:42Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwODA2Nzg2NQ==","url":"https://github.com/coala/coala-bears/pull/2643#issuecomment-408067865","bodyText":"@jayvdb, need help in setting up ameba for the Travis.","diffHunk":null,"author":{"login":"sangamcse","avatarUrl":"https://avatars2.githubusercontent.com/u/26381717?v=4","name":"Sangam Kumar"},"reactions":[],"createdAt":"2018-07-26T11:36:17Z","lastEditedAt":null,"updatedAt":"2018-07-26T11:36:17Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwODkyNDA0OQ==","url":"https://github.com/coala/coala-bears/pull/2643#issuecomment-408924049","bodyText":"This is blocked - please stop pushing.","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNzE3NzIzMA==","createdAt":"2018-07-30T16:26:35Z","content":"LAUGH","user":{"login":"sangamcse","name":"Sangam Kumar"}}],"createdAt":"2018-07-30T16:23:56Z","lastEditedAt":null,"updatedAt":"2018-07-30T16:23:56Z"}]}}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1532946909000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/pull/2645","number":2645,"title":".coafile: Ignore *.orig in all section","body":"This ignores .orig files whenever coala is run.\nPutting it under all section would make it default.\nFixes #2389\n\nFor short term contributors: we understand that getting your commits well\ndefined like we require is a hard task and takes some learning. If you\nlook to help without wanting to contribute long term there's no need\nfor you to learn this. Just drop us a message and we'll take care of brushing\nup your stuff for merge!\nChecklist\n\n I read the commit guidelines and I've followed\nthem.\n I ran coala over my code locally. (All commits have to pass\nindividually. It is not sufficient to have \"fixup commits\" on your PR,\nour bot will still report the issues for the previous commit.) You will\nlikely receive a lot of bot comments and build failures if coala does not\npass on every single commit!\n\nAfter you submit your pull request, DO NOT click the 'Update Branch' button.\nWhen asked for a rebase, consult coala.io/rebase\ninstead.\nPlease consider helping us by reviewing other peoples pull requests as well:\n\npick up any PR at https://coala.io/review\nreview it (check https://coala.io/reviewing for more info)\nif you are sure that it needs work, use corobo mark wip <URL> to get it out\nof the review queue.\n\nThe more you review, the more your score will grow at coala.io and we will\nreview your PRs faster!","comments":13,"createdAt":"2018-07-26T14:50:01Z","updatedAt":"2018-07-30T10:35:09Z","closedAt":null,"state":"open","user":{"login":"gutsytechster","avatarUrl":"https://avatars3.githubusercontent.com/u/31796326?v=4"},"owner":{"login":"gutsytechster","avatarUrl":"https://avatars3.githubusercontent.com/u/31796326?v=4"},"assignee":{"login":"gutsytechster","avatarUrl":"https://avatars3.githubusercontent.com/u/31796326?v=4"},"labels":[{"name":"difficulty/newcomer","color":"65C8FF"},{"name":"size/XS","color":"00DE0F"},{"name":"status/blocked","color":"e11d21"}],"pullRequest":{"htmlUrl":"https://github.com/coala/coala-bears/pull/2645","comments":[{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTc5MDQ3NQ==","url":"https://github.com/coala/coala-bears/pull/2645#discussion_r205790475","bodyText":"should be **.orig , otherwise you are ignoring files in the root directory","diffHunk":"@@ -1,7 +1,7 @@\n [all]\n files = *.py, bears/**/*.py, tests/**/*.py, bears/*.py.in\n ignore = tests/python/test_files/pylint_test.py, tests/python/bandit_test_files/*,\n-         tests/python/vulture_test_files/*\n+         tests/python/vulture_test_files/*, **/*.orig","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-27T14:21:31Z","lastEditedAt":null,"updatedAt":"2018-07-27T14:21:31Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTgwMTA5Mw==","url":"https://github.com/coala/coala-bears/pull/2645#discussion_r205801093","bodyText":"Interestingly, both **.orig and **/*.orig have same effect :\n(coala) viresh@viresh-PC:~/Desktop/Review$ coala --files='**.orig' --bears LineLengthBear -V --non-interactive\n[WARNING][20:20:01] Default coafile '.coafile' not found!\nHere's what you can do:\n* add `--save` to generate a config file with your current options\n* add `-I` to suppress any use of config files\n\n[DEBUG][20:20:01] Platform Linux -- Python 3.5.2, coalib 0.12.0.dev99999999999999\nExecuting section cli...\n[DEBUG][20:20:01] Files that will be checked:\n/home/viresh/Desktop/Review/subdirectory/sub.orig\n/home/viresh/Desktop/Review/base.orig\n[DEBUG][20:20:01] coala is run only on changed files, bears' log messages from previous runs may not appear. You may use the `--flush-cache` flag to see them.\n[DEBUG][20:20:02] Running bear LineLengthBear...\n[DEBUG][20:20:02] Running bear LineLengthBear...\nand for **/*.orig\n(coala) viresh@viresh-PC:~/Desktop/Review$ coala --files='**/*.orig' --bears LineLengthBear -V --non-interactive\n[WARNING][20:20:28] Default coafile '.coafile' not found!\nHere's what you can do:\n* add `--save` to generate a config file with your current options\n* add `-I` to suppress any use of config files\n\n[DEBUG][20:20:28] Platform Linux -- Python 3.5.2, coalib 0.12.0.dev99999999999999\n[DEBUG][20:20:28] Since the configuration settings have changed since the last run, the cache will be flushed and rebuilt.\n[DEBUG][20:20:28] The file cache was successfully flushed.\nExecuting section cli...\n[DEBUG][20:20:28] Files that will be checked:\n/home/viresh/Desktop/Review/base.orig\n/home/viresh/Desktop/Review/subdirectory/sub.orig\n[DEBUG][20:20:28] coala is run only on changed files, bears' log messages from previous runs may not appear. You may use the `--flush-cache` flag to see them.\n[DEBUG][20:20:28] Running bear LineLengthBear...\n[DEBUG][20:20:28] Running bear LineLengthBear...\n(assuming --ignore option also works on similar principle as --files)","diffHunk":"@@ -1,7 +1,7 @@\n [all]\n files = *.py, bears/**/*.py, tests/**/*.py, bears/*.py.in\n ignore = tests/python/test_files/pylint_test.py, tests/python/bandit_test_files/*,\n-         tests/python/vulture_test_files/*\n+         tests/python/vulture_test_files/*, **/*.orig","author":{"login":"virresh","avatarUrl":"https://avatars0.githubusercontent.com/u/10978108?v=4","name":"Viresh Gupta"},"reactions":[],"createdAt":"2018-07-27T14:52:24Z","lastEditedAt":"2018-07-27T14:53:07Z","updatedAt":"2018-07-27T14:53:07Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwODM5ODIzNQ==","url":"https://github.com/coala/coala-bears/pull/2645#issuecomment-408398235","bodyText":"So, as far as I can understand it should be **/*.orig. Am I correct?","diffHunk":null,"author":{"login":"gutsytechster","avatarUrl":"https://avatars3.githubusercontent.com/u/31796326?v=4","name":"Prashant Sharma"},"reactions":[],"createdAt":"2018-07-27T12:00:26Z","lastEditedAt":null,"updatedAt":"2018-07-27T12:00:26Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwODYxMTkzNQ==","url":"https://github.com/coala/coala-bears/pull/2645#issuecomment-408611935","bodyText":"Changes look good.  But we need to get CI to pass.\nThe jobs are halting on running autopep8.  That is unrelated to your change.\nWe'll need to investigate..","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-28T14:34:13Z","lastEditedAt":null,"updatedAt":"2018-07-28T14:34:13Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwODY4MDEyMw==","url":"https://github.com/coala/coala-bears/pull/2645#issuecomment-408680123","bodyText":"This may be failing due to a bug in coala.  We'll rebase it after something else is merged, and if it happens again we'll put this PR on ice to be investigated and let you go on with a low issue.","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-29T14:06:43Z","lastEditedAt":null,"updatedAt":"2018-07-29T14:06:43Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwODc3OTc4NA==","url":"https://github.com/coala/coala-bears/pull/2645#issuecomment-408779784","bodyText":"Should I wait until that happens or should I start looking for a difficulty/low issue?","diffHunk":null,"author":{"login":"gutsytechster","avatarUrl":"https://avatars3.githubusercontent.com/u/31796326?v=4","name":"Prashant Sharma"},"reactions":[],"createdAt":"2018-07-30T07:59:45Z","lastEditedAt":null,"updatedAt":"2018-07-30T07:59:45Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwODgxMTQzMg==","url":"https://github.com/coala/coala-bears/pull/2645#issuecomment-408811432","bodyText":"If the build halts while running coala-ci , let us know and we'll block this PR and you can choose a low to work on.","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-30T09:57:50Z","lastEditedAt":null,"updatedAt":"2018-07-30T09:57:50Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwODgyMDU2Nw==","url":"https://github.com/coala/coala-bears/pull/2645#issuecomment-408820567","bodyText":"It got stuck again, at\n$ coala --non-interactive\n[WARNING][10:30:45] Section `all.todos` contain invalid language setting: 'Language `python3` is not a valid language name or not recognized by coala.'\nExecuting section all...\n\nIm pretty sure we know why and have a fix coming for that.","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNzE1OTc2OA==","createdAt":"2018-07-30T11:22:18Z","content":"THUMBS_UP","user":{"login":"gutsytechster","name":"Prashant Sharma"}}],"createdAt":"2018-07-30T10:34:58Z","lastEditedAt":null,"updatedAt":"2018-07-30T10:34:58Z"}]}}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1532845269000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/pull/2646","number":2646,"title":".travis.yml: Remove unnecessary if UNSUPPORTED","body":"For short term contributors: we understand that getting your commits well\ndefined like we require is a hard task and takes some learning. If you\nlook to help without wanting to contribute long term there's no need\nfor you to learn this. Just drop us a message and we'll take care of brushing\nup your stuff for merge!\nChecklist\n\n I read the commit guidelines and I've followed\nthem.\n I ran coala over my code locally. (All commits have to pass\nindividually. It is not sufficient to have \"fixup commits\" on your PR,\nour bot will still report the issues for the previous commit.) You will\nlikely receive a lot of bot comments and build failures if coala does not\npass on every single commit!\n\nAfter you submit your pull request, DO NOT click the 'Update Branch' button.\nWhen asked for a rebase, consult coala.io/rebase\ninstead.\nPlease consider helping us by reviewing other peoples pull requests as well:\n\npick up any PR at https://coala.io/review\nreview it (check https://coala.io/reviewing for more info)\nif you are sure that it needs work, use corobo mark wip <URL> to get it out\nof the review queue.\n\nThe more you review, the more your score will grow at coala.io and we will\nreview your PRs faster!","comments":4,"createdAt":"2018-07-26T21:12:50Z","updatedAt":"2018-07-29T06:21:09Z","closedAt":"2018-07-29T06:21:07Z","state":"merged","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"process/pending review","color":"bfe5bf"},{"name":"size/XS","color":"00DE0F"}],"pullRequest":{"htmlUrl":"https://github.com/coala/coala-bears/pull/2646","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQwODY1NDg3NQ==","url":"https://github.com/coala/coala-bears/pull/2646#issuecomment-408654875","bodyText":"tests.sh uses env_variables.sh\nThose two files are due to be replaced ; see #2650","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-07-29T06:17:41Z","lastEditedAt":"2018-07-29T06:18:26Z","updatedAt":"2018-07-29T06:18:26Z"}]}}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1532860099000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/pull/2647","number":2647,"title":"Merge pull request #1 from coala/master","body":"Indentation Resolved (PEP8 Bear)\n\nFor short term contributors: we understand that getting your commits well\ndefined like we require is a hard task and takes some learning. If you\nlook to help without wanting to contribute long term there's no need\nfor you to learn this. Just drop us a message and we'll take care of brushing\nup your stuff for merge!\nChecklist\n\n I read the commit guidelines and I've followed\nthem.\n I ran coala over my code locally. (All commits have to pass\nindividually. It is not sufficient to have \"fixup commits\" on your PR,\nour bot will still report the issues for the previous commit.) You will\nlikely receive a lot of bot comments and build failures if coala does not\npass on every single commit!\n\nAfter you submit your pull request, DO NOT click the 'Update Branch' button.\nWhen asked for a rebase, consult coala.io/rebase\ninstead.\nPlease consider helping us by reviewing other peoples pull requests as well:\n\npick up any PR at https://coala.io/review\nreview it (check https://coala.io/reviewing for more info)\nif you are sure that it needs work, use corobo mark wip <URL> to get it out\nof the review queue.\n\nThe more you review, the more your score will grow at coala.io and we will\nreview your PRs faster!","comments":3,"createdAt":"2018-07-28T11:54:34Z","updatedAt":"2018-07-29T10:28:19Z","closedAt":"2018-07-29T10:28:04Z","state":"closed","user":{"login":"vaibhav9619","avatarUrl":"https://avatars1.githubusercontent.com/u/35555074?v=4"},"owner":{"login":"vaibhav9619","avatarUrl":"https://avatars1.githubusercontent.com/u/35555074?v=4"},"labels":[{"name":"process/pending review","color":"bfe5bf"},{"name":"size/XS","color":"00DE0F"}],"pullRequest":{"htmlUrl":"https://github.com/coala/coala-bears/pull/2647","comments":[]}}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1532855936000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/pull/2648","number":2648,"title":"generate_package.py: Remove from coala-bears","body":"Closes #1199","comments":1,"createdAt":"2018-07-28T18:18:17Z","updatedAt":"2018-07-29T09:18:56Z","closedAt":null,"state":"open","user":{"login":"anctartica","avatarUrl":"https://avatars0.githubusercontent.com/u/7020962?v=4"},"owner":{"login":"anctartica","avatarUrl":"https://avatars0.githubusercontent.com/u/7020962?v=4"},"assignee":{"login":"anctartica","avatarUrl":"https://avatars0.githubusercontent.com/u/7020962?v=4"},"labels":[{"name":"difficulty/medium","color":"0052cc"},{"name":"importance/medium","color":"fbca04"},{"name":"size/M","color":"CFB80A"},{"name":"status/blocked","color":"e11d21"}],"pullRequest":{"htmlUrl":"https://github.com/coala/coala-bears/pull/2648","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQwODY2MzM2OA==","url":"https://github.com/coala/coala-bears/pull/2648#issuecomment-408663368","bodyText":"anctartica/bear-packages#3\nI have added a positional argument to the script which takes the path to the coala-bears repository. Tested locally.","diffHunk":null,"author":{"login":"anctartica","avatarUrl":"https://avatars0.githubusercontent.com/u/7020962?v=4","name":""},"createdAt":"2018-07-29T09:18:56Z","lastEditedAt":null,"updatedAt":"2018-07-29T09:18:56Z"}]}}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1533303499000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/pull/2649","number":2649,"title":"MypyBear: Upgrade mypy","body":"This upgrades mypy to the latest release.\nCloses #2601\n\nFor short term contributors: we understand that getting your commits well\ndefined like we require is a hard task and takes some learning. If you\nlook to help without wanting to contribute long term there's no need\nfor you to learn this. Just drop us a message and we'll take care of brushing\nup your stuff for merge!\nChecklist\n\n I read the commit guidelines and I've followed\nthem.\n I ran coala over my code locally. (All commits have to pass\nindividually. It is not sufficient to have \"fixup commits\" on your PR,\nour bot will still report the issues for the previous commit.) You will\nlikely receive a lot of bot comments and build failures if coala does not\npass on every single commit!\n\nAfter you submit your pull request, DO NOT click the 'Update Branch' button.\nWhen asked for a rebase, consult coala.io/rebase\ninstead.\nPlease consider helping us by reviewing other peoples pull requests as well:\n\npick up any PR at https://coala.io/review\nreview it (check https://coala.io/reviewing for more info)\nif you are sure that it needs work, use corobo mark wip <URL> to get it out\nof the review queue.\n\nThe more you review, the more your score will grow at coala.io and we will\nreview your PRs faster!","comments":13,"createdAt":"2018-07-28T20:44:06Z","updatedAt":"2018-08-03T13:38:19Z","closedAt":"2018-07-29T15:14:39Z","state":"merged","user":{"login":"sinscary","avatarUrl":"https://avatars0.githubusercontent.com/u/13782355?v=4"},"owner":{"login":"sinscary","avatarUrl":"https://avatars0.githubusercontent.com/u/13782355?v=4"},"assignee":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"area/ci","color":"d93f0b"},{"name":"difficulty/low","color":"207de5"},{"name":"importance/high","color":"eb6420"},{"name":"process/approved","color":"009800"},{"name":"size/XS","color":"00DE0F"},{"name":"type/dependencies","color":"b60205"}],"pullRequest":{"htmlUrl":"https://github.com/coala/coala-bears/pull/2649","comments":[{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk3MTc2MQ==","url":"https://github.com/coala/coala-bears/pull/2649#discussion_r205971761","bodyText":"'==0.590' will work here","diffHunk":"@@ -96,7 +96,7 @@ class MypyBear:\n \n     LANGUAGES = {'Python', 'Python 2', 'Python 3'}\n     AUTHORS = {'Petr Viktorin'}\n-    REQUIREMENTS = {PipRequirement('mypy-lang', '0.4.6')}\n+    REQUIREMENTS = {PipRequirement('mypy', '0.590')}","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-07-29T12:25:52Z","lastEditedAt":null,"updatedAt":"2018-07-29T12:25:52Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwODY2OTk2MQ==","url":"https://github.com/coala/coala-bears/pull/2649#issuecomment-408669961","bodyText":"@jayvdb made the changes.","diffHunk":null,"author":{"login":"sinscary","avatarUrl":"https://avatars0.githubusercontent.com/u/13782355?v=4","name":"Nitesh Sharma"},"createdAt":"2018-07-29T11:28:39Z","lastEditedAt":null,"updatedAt":"2018-07-29T11:28:39Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwODY4MDY2MQ==","url":"https://github.com/coala/coala-bears/pull/2649#issuecomment-408680661","bodyText":"oops; wrong command","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-07-29T14:14:42Z","lastEditedAt":null,"updatedAt":"2018-07-29T14:14:42Z"}]}}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1533659021000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/pull/2652","number":2652,"title":"GitRevertInspectBear.py: New bear","body":"Bear to inspect git revert commits\n\nFor short term contributors: we understand that getting your commits well\ndefined like we require is a hard task and takes some learning. If you\nlook to help without wanting to contribute long term there's no need\nfor you to learn this. Just drop us a message and we'll take care of brushing\nup your stuff for merge!\nChecklist\n\n I read the commit guidelines and I've followed\nthem.\n I ran coala over my code locally. (All commits have to pass\nindividually. It is not sufficient to have \"fixup commits\" on your PR,\nour bot will still report the issues for the previous commit.) You will\nlikely receive a lot of bot comments and build failures if coala does not\npass on every single commit!\n\nAfter you submit your pull request, DO NOT click the 'Update Branch' button.\nWhen asked for a rebase, consult coala.io/rebase\ninstead.\nPlease consider helping us by reviewing other peoples pull requests as well:\n\npick up any PR at https://coala.io/review\nreview it (check https://coala.io/reviewing for more info)\nif you are sure that it needs work, use corobo mark wip <URL> to get it out\nof the review queue.\n\nThe more you review, the more your score will grow at coala.io and we will\nreview your PRs faster!","comments":0,"createdAt":"2018-08-02T09:50:36Z","updatedAt":"2018-08-07T16:23:41Z","closedAt":null,"state":"open","user":{"login":"kriti21","avatarUrl":"https://avatars3.githubusercontent.com/u/19872082?v=4"},"owner":{"login":"kriti21","avatarUrl":"https://avatars3.githubusercontent.com/u/19872082?v=4"},"labels":[{"name":"process/wip","color":"fbca04"},{"name":"size/M","color":"CFB80A"}],"pullRequest":{"htmlUrl":"https://github.com/coala/coala-bears/pull/2652","comments":[{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzIwNTgzMg==","url":"https://github.com/coala/coala-bears/pull/2652#discussion_r207205832","bodyText":"We shouldn't place this logic here, this logic should be done after the bear is sure that the commit is a revert commit. Place this after line 38","diffHunk":"@@ -0,0 +1,105 @@\n+import re\n+\n+from difflib import SequenceMatcher\n+\n+from bears.vcs.git.GitCommitMetadataBear import GitCommitMetadataBear\n+from coalib.bears.GlobalBear import GlobalBear\n+from coalib.misc.Shell import run_shell_command\n+from coalib.results.Result import Result\n+\n+\n+class GitRevertInspectBear(GlobalBear):\n+    LANGUAGES = {'Git'}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+\n+    BEAR_DEPS = {GitCommitMetadataBear}\n+\n+    def run(self, dependency_results,\n+            allow_git_revert_commit: bool = True,\n+            **kwargs):\n+        \"\"\"\n+        Inspect the HEAD commit to check if it is a\n+        git revert commit and return result accordingly.\n+\n+        :param allow_git_revert_commit: Whether revert commit\n+                                        is allowed or not.\n+        \"\"\"\n+        if not allow_git_revert_commit:","author":{"login":"refeed","avatarUrl":"https://avatars1.githubusercontent.com/u/20320125?v=4","name":"Rafid Aslam"},"createdAt":"2018-08-02T12:24:08Z","lastEditedAt":null,"updatedAt":"2018-08-02T12:24:08Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzIwOTQyMw==","url":"https://github.com/coala/coala-bears/pull/2652#discussion_r207209423","bodyText":"Remove this","diffHunk":"@@ -0,0 +1,105 @@\n+import re\n+\n+from difflib import SequenceMatcher\n+\n+from bears.vcs.git.GitCommitMetadataBear import GitCommitMetadataBear\n+from coalib.bears.GlobalBear import GlobalBear\n+from coalib.misc.Shell import run_shell_command\n+from coalib.results.Result import Result\n+\n+\n+class GitRevertInspectBear(GlobalBear):\n+    LANGUAGES = {'Git'}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+\n+    BEAR_DEPS = {GitCommitMetadataBear}\n+\n+    def run(self, dependency_results,\n+            allow_git_revert_commit: bool = True,\n+            **kwargs):\n+        \"\"\"\n+        Inspect the HEAD commit to check if it is a\n+        git revert commit and return result accordingly.\n+\n+        :param allow_git_revert_commit: Whether revert commit\n+                                        is allowed or not.\n+        \"\"\"\n+        if not allow_git_revert_commit:\n+            yield Result(self, 'Revert commit is not allowed.')\n+            return\n+\n+        for result in dependency_results[GitCommitMetadataBear.name]:\n+\n+            if not re.search(\n+                r'Revert\\s\\\".+\\\"\\n\\nThis\\sreverts\\scommit\\s[0-9a-f]{40}\\.',\n+                    result.raw_commit_message):\n+                return\n+\n+            parent_commit_sha = result.parent_commits[0].strip('\\n')\n+            command = ('git log -n 1 ' + str(parent_commit_sha) +\n+                       ' --pretty=%B')\n+            run_shell_command(command)[0]","author":{"login":"refeed","avatarUrl":"https://avatars1.githubusercontent.com/u/20320125?v=4","name":"Rafid Aslam"},"createdAt":"2018-08-02T12:37:10Z","lastEditedAt":null,"updatedAt":"2018-08-02T12:37:10Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzIwOTg3NA==","url":"https://github.com/coala/coala-bears/pull/2652#discussion_r207209874","bodyText":"I think you might want to rename it to get_files_command, or place directly the command string into the run_shell_command's argument","diffHunk":"@@ -0,0 +1,105 @@\n+import re\n+\n+from difflib import SequenceMatcher\n+\n+from bears.vcs.git.GitCommitMetadataBear import GitCommitMetadataBear\n+from coalib.bears.GlobalBear import GlobalBear\n+from coalib.misc.Shell import run_shell_command\n+from coalib.results.Result import Result\n+\n+\n+class GitRevertInspectBear(GlobalBear):\n+    LANGUAGES = {'Git'}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+\n+    BEAR_DEPS = {GitCommitMetadataBear}\n+\n+    def run(self, dependency_results,\n+            allow_git_revert_commit: bool = True,\n+            **kwargs):\n+        \"\"\"\n+        Inspect the HEAD commit to check if it is a\n+        git revert commit and return result accordingly.\n+\n+        :param allow_git_revert_commit: Whether revert commit\n+                                        is allowed or not.\n+        \"\"\"\n+        if not allow_git_revert_commit:\n+            yield Result(self, 'Revert commit is not allowed.')\n+            return\n+\n+        for result in dependency_results[GitCommitMetadataBear.name]:\n+\n+            if not re.search(\n+                r'Revert\\s\\\".+\\\"\\n\\nThis\\sreverts\\scommit\\s[0-9a-f]{40}\\.',\n+                    result.raw_commit_message):\n+                return\n+\n+            parent_commit_sha = result.parent_commits[0].strip('\\n')\n+            command = ('git log -n 1 ' + str(parent_commit_sha) +\n+                       ' --pretty=%B')\n+            run_shell_command(command)[0]\n+\n+            get_files = ('git show --pretty=\"\" --name-status %s' %","author":{"login":"refeed","avatarUrl":"https://avatars1.githubusercontent.com/u/20320125?v=4","name":"Rafid Aslam"},"createdAt":"2018-08-02T12:38:48Z","lastEditedAt":null,"updatedAt":"2018-08-02T12:38:48Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzIxMTczOQ==","url":"https://github.com/coala/coala-bears/pull/2652#discussion_r207211739","bodyText":"Change this into reverted_commit_sha, and also in most cases, the distance between reverted_commit and revert_commit varies from 1 commit, even 100 commits between them, and it's rare to find a reverted commit and revert commit placed consecutively.\nGet the reverted_commit_sha from the commit message string, you can use regex group to do that.","diffHunk":"@@ -0,0 +1,105 @@\n+import re\n+\n+from difflib import SequenceMatcher\n+\n+from bears.vcs.git.GitCommitMetadataBear import GitCommitMetadataBear\n+from coalib.bears.GlobalBear import GlobalBear\n+from coalib.misc.Shell import run_shell_command\n+from coalib.results.Result import Result\n+\n+\n+class GitRevertInspectBear(GlobalBear):\n+    LANGUAGES = {'Git'}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+\n+    BEAR_DEPS = {GitCommitMetadataBear}\n+\n+    def run(self, dependency_results,\n+            allow_git_revert_commit: bool = True,\n+            **kwargs):\n+        \"\"\"\n+        Inspect the HEAD commit to check if it is a\n+        git revert commit and return result accordingly.\n+\n+        :param allow_git_revert_commit: Whether revert commit\n+                                        is allowed or not.\n+        \"\"\"\n+        if not allow_git_revert_commit:\n+            yield Result(self, 'Revert commit is not allowed.')\n+            return\n+\n+        for result in dependency_results[GitCommitMetadataBear.name]:\n+\n+            if not re.search(\n+                r'Revert\\s\\\".+\\\"\\n\\nThis\\sreverts\\scommit\\s[0-9a-f]{40}\\.',\n+                    result.raw_commit_message):\n+                return\n+\n+            parent_commit_sha = result.parent_commits[0].strip('\\n')","author":{"login":"refeed","avatarUrl":"https://avatars1.githubusercontent.com/u/20320125?v=4","name":"Rafid Aslam"},"createdAt":"2018-08-02T12:45:52Z","lastEditedAt":null,"updatedAt":"2018-08-02T12:45:52Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzIxNDA4MA==","url":"https://github.com/coala/coala-bears/pull/2652#discussion_r207214080","bodyText":"Change this to get_reverted_commit_diff_command","diffHunk":"@@ -0,0 +1,105 @@\n+import re\n+\n+from difflib import SequenceMatcher\n+\n+from bears.vcs.git.GitCommitMetadataBear import GitCommitMetadataBear\n+from coalib.bears.GlobalBear import GlobalBear\n+from coalib.misc.Shell import run_shell_command\n+from coalib.results.Result import Result\n+\n+\n+class GitRevertInspectBear(GlobalBear):\n+    LANGUAGES = {'Git'}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+\n+    BEAR_DEPS = {GitCommitMetadataBear}\n+\n+    def run(self, dependency_results,\n+            allow_git_revert_commit: bool = True,\n+            **kwargs):\n+        \"\"\"\n+        Inspect the HEAD commit to check if it is a\n+        git revert commit and return result accordingly.\n+\n+        :param allow_git_revert_commit: Whether revert commit\n+                                        is allowed or not.\n+        \"\"\"\n+        if not allow_git_revert_commit:\n+            yield Result(self, 'Revert commit is not allowed.')\n+            return\n+\n+        for result in dependency_results[GitCommitMetadataBear.name]:\n+\n+            if not re.search(\n+                r'Revert\\s\\\".+\\\"\\n\\nThis\\sreverts\\scommit\\s[0-9a-f]{40}\\.',\n+                    result.raw_commit_message):\n+                return\n+\n+            parent_commit_sha = result.parent_commits[0].strip('\\n')\n+            command = ('git log -n 1 ' + str(parent_commit_sha) +\n+                       ' --pretty=%B')\n+            run_shell_command(command)[0]\n+\n+            get_files = ('git show --pretty=\"\" --name-status %s' %\n+                         (parent_commit_sha))\n+\n+            all_files = run_shell_command(get_files)[0]\n+            files_modified_by_reverted_commit = all_files.split('\\n')\n+\n+            reverted_commit_modified_files_list = []\n+            reverted_commit_added_files_list = []\n+            reverted_commit_deleted_files_list = []\n+\n+            for line in files_modified_by_reverted_commit:\n+                pos = line.find('\\t')\n+                change = line[:pos]\n+                if change == 'M':\n+                    reverted_commit_modified_files_list.append(line[pos+1:])\n+                elif change == 'A':\n+                    reverted_commit_added_files_list.append(line[pos+1:])\n+                elif change == 'D':\n+                    reverted_commit_deleted_files_list.append(line[pos+1:])\n+\n+            for file_name in result.added_files:\n+                if file_name not in reverted_commit_deleted_files_list:\n+                    yield Result(self, 'Revert commit has an added '\n+                                       'file %s that is not in reverted '\n+                                       'commit.' % (file_name))\n+\n+            for file_name in result.deleted_files:\n+                if file_name not in reverted_commit_added_files_list:\n+                    yield Result(self, 'Revert commit has a deleted '\n+                                       'file %s that is not in reverted '\n+                                       'commit.' % (file_name))\n+\n+            for file_name in result.modified_files:\n+                if file_name not in reverted_commit_modified_files_list:\n+                    yield Result(self, 'Revert commit has a modified '\n+                                       'file %s that is not in reverted '\n+                                       'commit.' % (file_name))\n+                    return\n+\n+                head_commit_branch = run_shell_command(\n+                    'git rev-parse --abbrev-ref HEAD')[0].strip('\\n')\n+\n+                get_parent_commit_diff = 'git diff HEAD ' + parent_commit_sha","author":{"login":"refeed","avatarUrl":"https://avatars1.githubusercontent.com/u/20320125?v=4","name":"Rafid Aslam"},"createdAt":"2018-08-02T12:53:55Z","lastEditedAt":null,"updatedAt":"2018-08-02T12:53:55Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzIxNTUzOA==","url":"https://github.com/coala/coala-bears/pull/2652#discussion_r207215538","bodyText":"👍 for this. I just know that we can negate the diff by just flipping the argument","diffHunk":"@@ -0,0 +1,105 @@\n+import re\n+\n+from difflib import SequenceMatcher\n+\n+from bears.vcs.git.GitCommitMetadataBear import GitCommitMetadataBear\n+from coalib.bears.GlobalBear import GlobalBear\n+from coalib.misc.Shell import run_shell_command\n+from coalib.results.Result import Result\n+\n+\n+class GitRevertInspectBear(GlobalBear):\n+    LANGUAGES = {'Git'}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+\n+    BEAR_DEPS = {GitCommitMetadataBear}\n+\n+    def run(self, dependency_results,\n+            allow_git_revert_commit: bool = True,\n+            **kwargs):\n+        \"\"\"\n+        Inspect the HEAD commit to check if it is a\n+        git revert commit and return result accordingly.\n+\n+        :param allow_git_revert_commit: Whether revert commit\n+                                        is allowed or not.\n+        \"\"\"\n+        if not allow_git_revert_commit:\n+            yield Result(self, 'Revert commit is not allowed.')\n+            return\n+\n+        for result in dependency_results[GitCommitMetadataBear.name]:\n+\n+            if not re.search(\n+                r'Revert\\s\\\".+\\\"\\n\\nThis\\sreverts\\scommit\\s[0-9a-f]{40}\\.',\n+                    result.raw_commit_message):\n+                return\n+\n+            parent_commit_sha = result.parent_commits[0].strip('\\n')\n+            command = ('git log -n 1 ' + str(parent_commit_sha) +\n+                       ' --pretty=%B')\n+            run_shell_command(command)[0]\n+\n+            get_files = ('git show --pretty=\"\" --name-status %s' %\n+                         (parent_commit_sha))\n+\n+            all_files = run_shell_command(get_files)[0]\n+            files_modified_by_reverted_commit = all_files.split('\\n')\n+\n+            reverted_commit_modified_files_list = []\n+            reverted_commit_added_files_list = []\n+            reverted_commit_deleted_files_list = []\n+\n+            for line in files_modified_by_reverted_commit:\n+                pos = line.find('\\t')\n+                change = line[:pos]\n+                if change == 'M':\n+                    reverted_commit_modified_files_list.append(line[pos+1:])\n+                elif change == 'A':\n+                    reverted_commit_added_files_list.append(line[pos+1:])\n+                elif change == 'D':\n+                    reverted_commit_deleted_files_list.append(line[pos+1:])\n+\n+            for file_name in result.added_files:\n+                if file_name not in reverted_commit_deleted_files_list:\n+                    yield Result(self, 'Revert commit has an added '\n+                                       'file %s that is not in reverted '\n+                                       'commit.' % (file_name))\n+\n+            for file_name in result.deleted_files:\n+                if file_name not in reverted_commit_added_files_list:\n+                    yield Result(self, 'Revert commit has a deleted '\n+                                       'file %s that is not in reverted '\n+                                       'commit.' % (file_name))\n+\n+            for file_name in result.modified_files:\n+                if file_name not in reverted_commit_modified_files_list:\n+                    yield Result(self, 'Revert commit has a modified '\n+                                       'file %s that is not in reverted '\n+                                       'commit.' % (file_name))\n+                    return\n+\n+                head_commit_branch = run_shell_command(\n+                    'git rev-parse --abbrev-ref HEAD')[0].strip('\\n')\n+\n+                get_parent_commit_diff = 'git diff HEAD ' + parent_commit_sha","author":{"login":"refeed","avatarUrl":"https://avatars1.githubusercontent.com/u/20320125?v=4","name":"Rafid Aslam"},"createdAt":"2018-08-02T12:58:38Z","lastEditedAt":null,"updatedAt":"2018-08-02T12:58:38Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzIxNjQxMw==","url":"https://github.com/coala/coala-bears/pull/2652#discussion_r207216413","bodyText":"Make the minimum ratio as a setting, like minimum_similarity_ratio, so user of this bear can configure it","diffHunk":"@@ -0,0 +1,105 @@\n+import re\n+\n+from difflib import SequenceMatcher\n+\n+from bears.vcs.git.GitCommitMetadataBear import GitCommitMetadataBear\n+from coalib.bears.GlobalBear import GlobalBear\n+from coalib.misc.Shell import run_shell_command\n+from coalib.results.Result import Result\n+\n+\n+class GitRevertInspectBear(GlobalBear):\n+    LANGUAGES = {'Git'}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+\n+    BEAR_DEPS = {GitCommitMetadataBear}\n+\n+    def run(self, dependency_results,\n+            allow_git_revert_commit: bool = True,\n+            **kwargs):\n+        \"\"\"\n+        Inspect the HEAD commit to check if it is a\n+        git revert commit and return result accordingly.\n+\n+        :param allow_git_revert_commit: Whether revert commit\n+                                        is allowed or not.\n+        \"\"\"\n+        if not allow_git_revert_commit:\n+            yield Result(self, 'Revert commit is not allowed.')\n+            return\n+\n+        for result in dependency_results[GitCommitMetadataBear.name]:\n+\n+            if not re.search(\n+                r'Revert\\s\\\".+\\\"\\n\\nThis\\sreverts\\scommit\\s[0-9a-f]{40}\\.',\n+                    result.raw_commit_message):\n+                return\n+\n+            parent_commit_sha = result.parent_commits[0].strip('\\n')\n+            command = ('git log -n 1 ' + str(parent_commit_sha) +\n+                       ' --pretty=%B')\n+            run_shell_command(command)[0]\n+\n+            get_files = ('git show --pretty=\"\" --name-status %s' %\n+                         (parent_commit_sha))\n+\n+            all_files = run_shell_command(get_files)[0]\n+            files_modified_by_reverted_commit = all_files.split('\\n')\n+\n+            reverted_commit_modified_files_list = []\n+            reverted_commit_added_files_list = []\n+            reverted_commit_deleted_files_list = []\n+\n+            for line in files_modified_by_reverted_commit:\n+                pos = line.find('\\t')\n+                change = line[:pos]\n+                if change == 'M':\n+                    reverted_commit_modified_files_list.append(line[pos+1:])\n+                elif change == 'A':\n+                    reverted_commit_added_files_list.append(line[pos+1:])\n+                elif change == 'D':\n+                    reverted_commit_deleted_files_list.append(line[pos+1:])\n+\n+            for file_name in result.added_files:\n+                if file_name not in reverted_commit_deleted_files_list:\n+                    yield Result(self, 'Revert commit has an added '\n+                                       'file %s that is not in reverted '\n+                                       'commit.' % (file_name))\n+\n+            for file_name in result.deleted_files:\n+                if file_name not in reverted_commit_added_files_list:\n+                    yield Result(self, 'Revert commit has a deleted '\n+                                       'file %s that is not in reverted '\n+                                       'commit.' % (file_name))\n+\n+            for file_name in result.modified_files:\n+                if file_name not in reverted_commit_modified_files_list:\n+                    yield Result(self, 'Revert commit has a modified '\n+                                       'file %s that is not in reverted '\n+                                       'commit.' % (file_name))\n+                    return\n+\n+                head_commit_branch = run_shell_command(\n+                    'git rev-parse --abbrev-ref HEAD')[0].strip('\\n')\n+\n+                get_parent_commit_diff = 'git diff HEAD ' + parent_commit_sha\n+                parent_commit_diff = run_shell_command(\n+                    get_parent_commit_diff)[0]\n+\n+                run_shell_command('git checkout -b inspectrevertbranch master')\n+                rebase_command = 'git rebase ' + head_commit_branch\n+                run_shell_command(rebase_command)\n+                run_shell_command('git revert HEAD --no-edit')\n+                expected_parent_commit_diff = run_shell_command(\n+                    'git diff HEAD^ HEAD')[0]\n+\n+                matcher = SequenceMatcher(\n+                    None, parent_commit_diff, expected_parent_commit_diff)\n+                if matcher.real_quick_ratio() < 0.7:","author":{"login":"refeed","avatarUrl":"https://avatars1.githubusercontent.com/u/20320125?v=4","name":"Rafid Aslam"},"createdAt":"2018-08-02T13:01:35Z","lastEditedAt":null,"updatedAt":"2018-08-02T13:01:35Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzIxNzY2Mg==","url":"https://github.com/coala/coala-bears/pull/2652#discussion_r207217662","bodyText":"... But in here we need to get the reverted commit diff, to do that we can do git diff <reverted_commit_sha>^ <reverted_commit_sha>","diffHunk":"@@ -0,0 +1,105 @@\n+import re\n+\n+from difflib import SequenceMatcher\n+\n+from bears.vcs.git.GitCommitMetadataBear import GitCommitMetadataBear\n+from coalib.bears.GlobalBear import GlobalBear\n+from coalib.misc.Shell import run_shell_command\n+from coalib.results.Result import Result\n+\n+\n+class GitRevertInspectBear(GlobalBear):\n+    LANGUAGES = {'Git'}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+\n+    BEAR_DEPS = {GitCommitMetadataBear}\n+\n+    def run(self, dependency_results,\n+            allow_git_revert_commit: bool = True,\n+            **kwargs):\n+        \"\"\"\n+        Inspect the HEAD commit to check if it is a\n+        git revert commit and return result accordingly.\n+\n+        :param allow_git_revert_commit: Whether revert commit\n+                                        is allowed or not.\n+        \"\"\"\n+        if not allow_git_revert_commit:\n+            yield Result(self, 'Revert commit is not allowed.')\n+            return\n+\n+        for result in dependency_results[GitCommitMetadataBear.name]:\n+\n+            if not re.search(\n+                r'Revert\\s\\\".+\\\"\\n\\nThis\\sreverts\\scommit\\s[0-9a-f]{40}\\.',\n+                    result.raw_commit_message):\n+                return\n+\n+            parent_commit_sha = result.parent_commits[0].strip('\\n')\n+            command = ('git log -n 1 ' + str(parent_commit_sha) +\n+                       ' --pretty=%B')\n+            run_shell_command(command)[0]\n+\n+            get_files = ('git show --pretty=\"\" --name-status %s' %\n+                         (parent_commit_sha))\n+\n+            all_files = run_shell_command(get_files)[0]\n+            files_modified_by_reverted_commit = all_files.split('\\n')\n+\n+            reverted_commit_modified_files_list = []\n+            reverted_commit_added_files_list = []\n+            reverted_commit_deleted_files_list = []\n+\n+            for line in files_modified_by_reverted_commit:\n+                pos = line.find('\\t')\n+                change = line[:pos]\n+                if change == 'M':\n+                    reverted_commit_modified_files_list.append(line[pos+1:])\n+                elif change == 'A':\n+                    reverted_commit_added_files_list.append(line[pos+1:])\n+                elif change == 'D':\n+                    reverted_commit_deleted_files_list.append(line[pos+1:])\n+\n+            for file_name in result.added_files:\n+                if file_name not in reverted_commit_deleted_files_list:\n+                    yield Result(self, 'Revert commit has an added '\n+                                       'file %s that is not in reverted '\n+                                       'commit.' % (file_name))\n+\n+            for file_name in result.deleted_files:\n+                if file_name not in reverted_commit_added_files_list:\n+                    yield Result(self, 'Revert commit has a deleted '\n+                                       'file %s that is not in reverted '\n+                                       'commit.' % (file_name))\n+\n+            for file_name in result.modified_files:\n+                if file_name not in reverted_commit_modified_files_list:\n+                    yield Result(self, 'Revert commit has a modified '\n+                                       'file %s that is not in reverted '\n+                                       'commit.' % (file_name))\n+                    return\n+\n+                head_commit_branch = run_shell_command(\n+                    'git rev-parse --abbrev-ref HEAD')[0].strip('\\n')\n+\n+                get_parent_commit_diff = 'git diff HEAD ' + parent_commit_sha","author":{"login":"refeed","avatarUrl":"https://avatars1.githubusercontent.com/u/20320125?v=4","name":"Rafid Aslam"},"createdAt":"2018-08-02T13:05:39Z","lastEditedAt":null,"updatedAt":"2018-08-02T13:05:39Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzIxODg0OA==","url":"https://github.com/coala/coala-bears/pull/2652#discussion_r207218848","bodyText":"Place head_commit_branch^ (one previous commit from the head_commit_branch) as a base here instead of master, since we want to get rid of the revert commit that's already on the head_commit_branch and creating the \"expected revert commit\"","diffHunk":"@@ -0,0 +1,105 @@\n+import re\n+\n+from difflib import SequenceMatcher\n+\n+from bears.vcs.git.GitCommitMetadataBear import GitCommitMetadataBear\n+from coalib.bears.GlobalBear import GlobalBear\n+from coalib.misc.Shell import run_shell_command\n+from coalib.results.Result import Result\n+\n+\n+class GitRevertInspectBear(GlobalBear):\n+    LANGUAGES = {'Git'}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+\n+    BEAR_DEPS = {GitCommitMetadataBear}\n+\n+    def run(self, dependency_results,\n+            allow_git_revert_commit: bool = True,\n+            **kwargs):\n+        \"\"\"\n+        Inspect the HEAD commit to check if it is a\n+        git revert commit and return result accordingly.\n+\n+        :param allow_git_revert_commit: Whether revert commit\n+                                        is allowed or not.\n+        \"\"\"\n+        if not allow_git_revert_commit:\n+            yield Result(self, 'Revert commit is not allowed.')\n+            return\n+\n+        for result in dependency_results[GitCommitMetadataBear.name]:\n+\n+            if not re.search(\n+                r'Revert\\s\\\".+\\\"\\n\\nThis\\sreverts\\scommit\\s[0-9a-f]{40}\\.',\n+                    result.raw_commit_message):\n+                return\n+\n+            parent_commit_sha = result.parent_commits[0].strip('\\n')\n+            command = ('git log -n 1 ' + str(parent_commit_sha) +\n+                       ' --pretty=%B')\n+            run_shell_command(command)[0]\n+\n+            get_files = ('git show --pretty=\"\" --name-status %s' %\n+                         (parent_commit_sha))\n+\n+            all_files = run_shell_command(get_files)[0]\n+            files_modified_by_reverted_commit = all_files.split('\\n')\n+\n+            reverted_commit_modified_files_list = []\n+            reverted_commit_added_files_list = []\n+            reverted_commit_deleted_files_list = []\n+\n+            for line in files_modified_by_reverted_commit:\n+                pos = line.find('\\t')\n+                change = line[:pos]\n+                if change == 'M':\n+                    reverted_commit_modified_files_list.append(line[pos+1:])\n+                elif change == 'A':\n+                    reverted_commit_added_files_list.append(line[pos+1:])\n+                elif change == 'D':\n+                    reverted_commit_deleted_files_list.append(line[pos+1:])\n+\n+            for file_name in result.added_files:\n+                if file_name not in reverted_commit_deleted_files_list:\n+                    yield Result(self, 'Revert commit has an added '\n+                                       'file %s that is not in reverted '\n+                                       'commit.' % (file_name))\n+\n+            for file_name in result.deleted_files:\n+                if file_name not in reverted_commit_added_files_list:\n+                    yield Result(self, 'Revert commit has a deleted '\n+                                       'file %s that is not in reverted '\n+                                       'commit.' % (file_name))\n+\n+            for file_name in result.modified_files:\n+                if file_name not in reverted_commit_modified_files_list:\n+                    yield Result(self, 'Revert commit has a modified '\n+                                       'file %s that is not in reverted '\n+                                       'commit.' % (file_name))\n+                    return\n+\n+                head_commit_branch = run_shell_command(\n+                    'git rev-parse --abbrev-ref HEAD')[0].strip('\\n')\n+\n+                get_parent_commit_diff = 'git diff HEAD ' + parent_commit_sha\n+                parent_commit_diff = run_shell_command(\n+                    get_parent_commit_diff)[0]\n+\n+                run_shell_command('git checkout -b inspectrevertbranch master')","author":{"login":"refeed","avatarUrl":"https://avatars1.githubusercontent.com/u/20320125?v=4","name":"Rafid Aslam"},"createdAt":"2018-08-02T13:09:48Z","lastEditedAt":null,"updatedAt":"2018-08-02T13:09:48Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzIxOTA0Mg==","url":"https://github.com/coala/coala-bears/pull/2652#discussion_r207219042","bodyText":"I think we don't need to rebase the branch","diffHunk":"@@ -0,0 +1,105 @@\n+import re\n+\n+from difflib import SequenceMatcher\n+\n+from bears.vcs.git.GitCommitMetadataBear import GitCommitMetadataBear\n+from coalib.bears.GlobalBear import GlobalBear\n+from coalib.misc.Shell import run_shell_command\n+from coalib.results.Result import Result\n+\n+\n+class GitRevertInspectBear(GlobalBear):\n+    LANGUAGES = {'Git'}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+\n+    BEAR_DEPS = {GitCommitMetadataBear}\n+\n+    def run(self, dependency_results,\n+            allow_git_revert_commit: bool = True,\n+            **kwargs):\n+        \"\"\"\n+        Inspect the HEAD commit to check if it is a\n+        git revert commit and return result accordingly.\n+\n+        :param allow_git_revert_commit: Whether revert commit\n+                                        is allowed or not.\n+        \"\"\"\n+        if not allow_git_revert_commit:\n+            yield Result(self, 'Revert commit is not allowed.')\n+            return\n+\n+        for result in dependency_results[GitCommitMetadataBear.name]:\n+\n+            if not re.search(\n+                r'Revert\\s\\\".+\\\"\\n\\nThis\\sreverts\\scommit\\s[0-9a-f]{40}\\.',\n+                    result.raw_commit_message):\n+                return\n+\n+            parent_commit_sha = result.parent_commits[0].strip('\\n')\n+            command = ('git log -n 1 ' + str(parent_commit_sha) +\n+                       ' --pretty=%B')\n+            run_shell_command(command)[0]\n+\n+            get_files = ('git show --pretty=\"\" --name-status %s' %\n+                         (parent_commit_sha))\n+\n+            all_files = run_shell_command(get_files)[0]\n+            files_modified_by_reverted_commit = all_files.split('\\n')\n+\n+            reverted_commit_modified_files_list = []\n+            reverted_commit_added_files_list = []\n+            reverted_commit_deleted_files_list = []\n+\n+            for line in files_modified_by_reverted_commit:\n+                pos = line.find('\\t')\n+                change = line[:pos]\n+                if change == 'M':\n+                    reverted_commit_modified_files_list.append(line[pos+1:])\n+                elif change == 'A':\n+                    reverted_commit_added_files_list.append(line[pos+1:])\n+                elif change == 'D':\n+                    reverted_commit_deleted_files_list.append(line[pos+1:])\n+\n+            for file_name in result.added_files:\n+                if file_name not in reverted_commit_deleted_files_list:\n+                    yield Result(self, 'Revert commit has an added '\n+                                       'file %s that is not in reverted '\n+                                       'commit.' % (file_name))\n+\n+            for file_name in result.deleted_files:\n+                if file_name not in reverted_commit_added_files_list:\n+                    yield Result(self, 'Revert commit has a deleted '\n+                                       'file %s that is not in reverted '\n+                                       'commit.' % (file_name))\n+\n+            for file_name in result.modified_files:\n+                if file_name not in reverted_commit_modified_files_list:\n+                    yield Result(self, 'Revert commit has a modified '\n+                                       'file %s that is not in reverted '\n+                                       'commit.' % (file_name))\n+                    return\n+\n+                head_commit_branch = run_shell_command(\n+                    'git rev-parse --abbrev-ref HEAD')[0].strip('\\n')\n+\n+                get_parent_commit_diff = 'git diff HEAD ' + parent_commit_sha\n+                parent_commit_diff = run_shell_command(\n+                    get_parent_commit_diff)[0]\n+\n+                run_shell_command('git checkout -b inspectrevertbranch master')\n+                rebase_command = 'git rebase ' + head_commit_branch","author":{"login":"refeed","avatarUrl":"https://avatars1.githubusercontent.com/u/20320125?v=4","name":"Rafid Aslam"},"createdAt":"2018-08-02T13:10:23Z","lastEditedAt":null,"updatedAt":"2018-08-02T13:10:23Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzIxOTMxNw==","url":"https://github.com/coala/coala-bears/pull/2652#discussion_r207219317","bodyText":"Revert the reverted_commit_sha","diffHunk":"@@ -0,0 +1,105 @@\n+import re\n+\n+from difflib import SequenceMatcher\n+\n+from bears.vcs.git.GitCommitMetadataBear import GitCommitMetadataBear\n+from coalib.bears.GlobalBear import GlobalBear\n+from coalib.misc.Shell import run_shell_command\n+from coalib.results.Result import Result\n+\n+\n+class GitRevertInspectBear(GlobalBear):\n+    LANGUAGES = {'Git'}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+\n+    BEAR_DEPS = {GitCommitMetadataBear}\n+\n+    def run(self, dependency_results,\n+            allow_git_revert_commit: bool = True,\n+            **kwargs):\n+        \"\"\"\n+        Inspect the HEAD commit to check if it is a\n+        git revert commit and return result accordingly.\n+\n+        :param allow_git_revert_commit: Whether revert commit\n+                                        is allowed or not.\n+        \"\"\"\n+        if not allow_git_revert_commit:\n+            yield Result(self, 'Revert commit is not allowed.')\n+            return\n+\n+        for result in dependency_results[GitCommitMetadataBear.name]:\n+\n+            if not re.search(\n+                r'Revert\\s\\\".+\\\"\\n\\nThis\\sreverts\\scommit\\s[0-9a-f]{40}\\.',\n+                    result.raw_commit_message):\n+                return\n+\n+            parent_commit_sha = result.parent_commits[0].strip('\\n')\n+            command = ('git log -n 1 ' + str(parent_commit_sha) +\n+                       ' --pretty=%B')\n+            run_shell_command(command)[0]\n+\n+            get_files = ('git show --pretty=\"\" --name-status %s' %\n+                         (parent_commit_sha))\n+\n+            all_files = run_shell_command(get_files)[0]\n+            files_modified_by_reverted_commit = all_files.split('\\n')\n+\n+            reverted_commit_modified_files_list = []\n+            reverted_commit_added_files_list = []\n+            reverted_commit_deleted_files_list = []\n+\n+            for line in files_modified_by_reverted_commit:\n+                pos = line.find('\\t')\n+                change = line[:pos]\n+                if change == 'M':\n+                    reverted_commit_modified_files_list.append(line[pos+1:])\n+                elif change == 'A':\n+                    reverted_commit_added_files_list.append(line[pos+1:])\n+                elif change == 'D':\n+                    reverted_commit_deleted_files_list.append(line[pos+1:])\n+\n+            for file_name in result.added_files:\n+                if file_name not in reverted_commit_deleted_files_list:\n+                    yield Result(self, 'Revert commit has an added '\n+                                       'file %s that is not in reverted '\n+                                       'commit.' % (file_name))\n+\n+            for file_name in result.deleted_files:\n+                if file_name not in reverted_commit_added_files_list:\n+                    yield Result(self, 'Revert commit has a deleted '\n+                                       'file %s that is not in reverted '\n+                                       'commit.' % (file_name))\n+\n+            for file_name in result.modified_files:\n+                if file_name not in reverted_commit_modified_files_list:\n+                    yield Result(self, 'Revert commit has a modified '\n+                                       'file %s that is not in reverted '\n+                                       'commit.' % (file_name))\n+                    return\n+\n+                head_commit_branch = run_shell_command(\n+                    'git rev-parse --abbrev-ref HEAD')[0].strip('\\n')\n+\n+                get_parent_commit_diff = 'git diff HEAD ' + parent_commit_sha\n+                parent_commit_diff = run_shell_command(\n+                    get_parent_commit_diff)[0]\n+\n+                run_shell_command('git checkout -b inspectrevertbranch master')\n+                rebase_command = 'git rebase ' + head_commit_branch\n+                run_shell_command(rebase_command)\n+                run_shell_command('git revert HEAD --no-edit')","author":{"login":"refeed","avatarUrl":"https://avatars1.githubusercontent.com/u/20320125?v=4","name":"Rafid Aslam"},"createdAt":"2018-08-02T13:11:25Z","lastEditedAt":null,"updatedAt":"2018-08-02T13:11:25Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzIxOTQxNA==","url":"https://github.com/coala/coala-bears/pull/2652#discussion_r207219414","bodyText":"expected_revert_commit_diff","diffHunk":"@@ -0,0 +1,105 @@\n+import re\n+\n+from difflib import SequenceMatcher\n+\n+from bears.vcs.git.GitCommitMetadataBear import GitCommitMetadataBear\n+from coalib.bears.GlobalBear import GlobalBear\n+from coalib.misc.Shell import run_shell_command\n+from coalib.results.Result import Result\n+\n+\n+class GitRevertInspectBear(GlobalBear):\n+    LANGUAGES = {'Git'}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+\n+    BEAR_DEPS = {GitCommitMetadataBear}\n+\n+    def run(self, dependency_results,\n+            allow_git_revert_commit: bool = True,\n+            **kwargs):\n+        \"\"\"\n+        Inspect the HEAD commit to check if it is a\n+        git revert commit and return result accordingly.\n+\n+        :param allow_git_revert_commit: Whether revert commit\n+                                        is allowed or not.\n+        \"\"\"\n+        if not allow_git_revert_commit:\n+            yield Result(self, 'Revert commit is not allowed.')\n+            return\n+\n+        for result in dependency_results[GitCommitMetadataBear.name]:\n+\n+            if not re.search(\n+                r'Revert\\s\\\".+\\\"\\n\\nThis\\sreverts\\scommit\\s[0-9a-f]{40}\\.',\n+                    result.raw_commit_message):\n+                return\n+\n+            parent_commit_sha = result.parent_commits[0].strip('\\n')\n+            command = ('git log -n 1 ' + str(parent_commit_sha) +\n+                       ' --pretty=%B')\n+            run_shell_command(command)[0]\n+\n+            get_files = ('git show --pretty=\"\" --name-status %s' %\n+                         (parent_commit_sha))\n+\n+            all_files = run_shell_command(get_files)[0]\n+            files_modified_by_reverted_commit = all_files.split('\\n')\n+\n+            reverted_commit_modified_files_list = []\n+            reverted_commit_added_files_list = []\n+            reverted_commit_deleted_files_list = []\n+\n+            for line in files_modified_by_reverted_commit:\n+                pos = line.find('\\t')\n+                change = line[:pos]\n+                if change == 'M':\n+                    reverted_commit_modified_files_list.append(line[pos+1:])\n+                elif change == 'A':\n+                    reverted_commit_added_files_list.append(line[pos+1:])\n+                elif change == 'D':\n+                    reverted_commit_deleted_files_list.append(line[pos+1:])\n+\n+            for file_name in result.added_files:\n+                if file_name not in reverted_commit_deleted_files_list:\n+                    yield Result(self, 'Revert commit has an added '\n+                                       'file %s that is not in reverted '\n+                                       'commit.' % (file_name))\n+\n+            for file_name in result.deleted_files:\n+                if file_name not in reverted_commit_added_files_list:\n+                    yield Result(self, 'Revert commit has a deleted '\n+                                       'file %s that is not in reverted '\n+                                       'commit.' % (file_name))\n+\n+            for file_name in result.modified_files:\n+                if file_name not in reverted_commit_modified_files_list:\n+                    yield Result(self, 'Revert commit has a modified '\n+                                       'file %s that is not in reverted '\n+                                       'commit.' % (file_name))\n+                    return\n+\n+                head_commit_branch = run_shell_command(\n+                    'git rev-parse --abbrev-ref HEAD')[0].strip('\\n')\n+\n+                get_parent_commit_diff = 'git diff HEAD ' + parent_commit_sha\n+                parent_commit_diff = run_shell_command(\n+                    get_parent_commit_diff)[0]\n+\n+                run_shell_command('git checkout -b inspectrevertbranch master')\n+                rebase_command = 'git rebase ' + head_commit_branch\n+                run_shell_command(rebase_command)\n+                run_shell_command('git revert HEAD --no-edit')\n+                expected_parent_commit_diff = run_shell_command(","author":{"login":"refeed","avatarUrl":"https://avatars1.githubusercontent.com/u/20320125?v=4","name":"Rafid Aslam"},"createdAt":"2018-08-02T13:11:43Z","lastEditedAt":null,"updatedAt":"2018-08-02T13:11:43Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzIzODI4Nw==","url":"https://github.com/coala/coala-bears/pull/2652#discussion_r207238287","bodyText":"Switch to the head_commit_branch again and delete inspectrevertbranch","diffHunk":"@@ -0,0 +1,105 @@\n+import re\n+\n+from difflib import SequenceMatcher\n+\n+from bears.vcs.git.GitCommitMetadataBear import GitCommitMetadataBear\n+from coalib.bears.GlobalBear import GlobalBear\n+from coalib.misc.Shell import run_shell_command\n+from coalib.results.Result import Result\n+\n+\n+class GitRevertInspectBear(GlobalBear):\n+    LANGUAGES = {'Git'}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+\n+    BEAR_DEPS = {GitCommitMetadataBear}\n+\n+    def run(self, dependency_results,\n+            allow_git_revert_commit: bool = True,\n+            **kwargs):\n+        \"\"\"\n+        Inspect the HEAD commit to check if it is a\n+        git revert commit and return result accordingly.\n+\n+        :param allow_git_revert_commit: Whether revert commit\n+                                        is allowed or not.\n+        \"\"\"\n+        if not allow_git_revert_commit:\n+            yield Result(self, 'Revert commit is not allowed.')\n+            return\n+\n+        for result in dependency_results[GitCommitMetadataBear.name]:\n+\n+            if not re.search(\n+                r'Revert\\s\\\".+\\\"\\n\\nThis\\sreverts\\scommit\\s[0-9a-f]{40}\\.',\n+                    result.raw_commit_message):\n+                return\n+\n+            parent_commit_sha = result.parent_commits[0].strip('\\n')\n+            command = ('git log -n 1 ' + str(parent_commit_sha) +\n+                       ' --pretty=%B')\n+            run_shell_command(command)[0]\n+\n+            get_files = ('git show --pretty=\"\" --name-status %s' %\n+                         (parent_commit_sha))\n+\n+            all_files = run_shell_command(get_files)[0]\n+            files_modified_by_reverted_commit = all_files.split('\\n')\n+\n+            reverted_commit_modified_files_list = []\n+            reverted_commit_added_files_list = []\n+            reverted_commit_deleted_files_list = []\n+\n+            for line in files_modified_by_reverted_commit:\n+                pos = line.find('\\t')\n+                change = line[:pos]\n+                if change == 'M':\n+                    reverted_commit_modified_files_list.append(line[pos+1:])\n+                elif change == 'A':\n+                    reverted_commit_added_files_list.append(line[pos+1:])\n+                elif change == 'D':\n+                    reverted_commit_deleted_files_list.append(line[pos+1:])\n+\n+            for file_name in result.added_files:\n+                if file_name not in reverted_commit_deleted_files_list:\n+                    yield Result(self, 'Revert commit has an added '\n+                                       'file %s that is not in reverted '\n+                                       'commit.' % (file_name))\n+\n+            for file_name in result.deleted_files:\n+                if file_name not in reverted_commit_added_files_list:\n+                    yield Result(self, 'Revert commit has a deleted '\n+                                       'file %s that is not in reverted '\n+                                       'commit.' % (file_name))\n+\n+            for file_name in result.modified_files:\n+                if file_name not in reverted_commit_modified_files_list:\n+                    yield Result(self, 'Revert commit has a modified '\n+                                       'file %s that is not in reverted '\n+                                       'commit.' % (file_name))\n+                    return\n+\n+                head_commit_branch = run_shell_command(\n+                    'git rev-parse --abbrev-ref HEAD')[0].strip('\\n')\n+\n+                get_parent_commit_diff = 'git diff HEAD ' + parent_commit_sha\n+                parent_commit_diff = run_shell_command(\n+                    get_parent_commit_diff)[0]\n+\n+                run_shell_command('git checkout -b inspectrevertbranch master')\n+                rebase_command = 'git rebase ' + head_commit_branch\n+                run_shell_command(rebase_command)\n+                run_shell_command('git revert HEAD --no-edit')\n+                expected_parent_commit_diff = run_shell_command(\n+                    'git diff HEAD^ HEAD')[0]\n+\n+                matcher = SequenceMatcher(\n+                    None, parent_commit_diff, expected_parent_commit_diff)\n+                if matcher.real_quick_ratio() < 0.7:\n+                    yield Result(self, 'Changes in modified file %s of revert'\n+                                       'commit is not exactly revert of '\n+                                       'changes in reverted commit.' %\n+                                 file_name)\n+                run_shell_command('git branch -D inspectrevertbranch')","author":{"login":"refeed","avatarUrl":"https://avatars1.githubusercontent.com/u/20320125?v=4","name":"Rafid Aslam"},"createdAt":"2018-08-02T14:05:02Z","lastEditedAt":null,"updatedAt":"2018-08-02T14:05:02Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzcyNjEyMA==","url":"https://github.com/coala/coala-bears/pull/2652#discussion_r207726120","bodyText":":param minimum_similarity_ratio:","diffHunk":"@@ -0,0 +1,121 @@\n+import re\n+\n+from difflib import SequenceMatcher\n+\n+from bears.vcs.git.GitCommitMetadataBear import GitCommitMetadataBear\n+from coalib.bears.GlobalBear import GlobalBear\n+from coalib.misc.Shell import run_shell_command\n+from coalib.results.Result import Result\n+\n+\n+class GitRevertInspectBear(GlobalBear):\n+    LANGUAGES = {'Git'}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+\n+    BEAR_DEPS = {GitCommitMetadataBear}\n+\n+    def run(self, dependency_results,\n+            allow_git_revert_commit: bool = True,\n+            minimum_similarity_ratio: float = 0.8,\n+            **kwargs):\n+        \"\"\"\n+        Inspect the HEAD commit to check if it is a\n+        git revert commit and return result accordingly.\n+\n+        :param allow_git_revert_commit: Whether revert commit\n+                                        is allowed or not.\n+\n+        :minimum_similarity_ratio:      Minimum similarity ratio","author":{"login":"refeed","avatarUrl":"https://avatars1.githubusercontent.com/u/20320125?v=4","name":"Rafid Aslam"},"createdAt":"2018-08-05T06:01:04Z","lastEditedAt":null,"updatedAt":"2018-08-05T06:01:04Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzcyNjEyNg==","url":"https://github.com/coala/coala-bears/pull/2652#discussion_r207726126","bodyText":"Remove this blank line","diffHunk":"@@ -0,0 +1,121 @@\n+import re\n+\n+from difflib import SequenceMatcher\n+\n+from bears.vcs.git.GitCommitMetadataBear import GitCommitMetadataBear\n+from coalib.bears.GlobalBear import GlobalBear\n+from coalib.misc.Shell import run_shell_command\n+from coalib.results.Result import Result\n+\n+\n+class GitRevertInspectBear(GlobalBear):\n+    LANGUAGES = {'Git'}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+\n+    BEAR_DEPS = {GitCommitMetadataBear}\n+\n+    def run(self, dependency_results,\n+            allow_git_revert_commit: bool = True,\n+            minimum_similarity_ratio: float = 0.8,\n+            **kwargs):\n+        \"\"\"\n+        Inspect the HEAD commit to check if it is a\n+        git revert commit and return result accordingly.\n+\n+        :param allow_git_revert_commit: Whether revert commit\n+                                        is allowed or not.\n+","author":{"login":"refeed","avatarUrl":"https://avatars1.githubusercontent.com/u/20320125?v=4","name":"Rafid Aslam"},"createdAt":"2018-08-05T06:01:17Z","lastEditedAt":null,"updatedAt":"2018-08-05T06:01:17Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzcyNjE5Mg==","url":"https://github.com/coala/coala-bears/pull/2652#discussion_r207726192","bodyText":"Make this regex as this Bear's constant variable, something like GIT_REVERT_COMMIT_RE","diffHunk":"@@ -0,0 +1,121 @@\n+import re\n+\n+from difflib import SequenceMatcher\n+\n+from bears.vcs.git.GitCommitMetadataBear import GitCommitMetadataBear\n+from coalib.bears.GlobalBear import GlobalBear\n+from coalib.misc.Shell import run_shell_command\n+from coalib.results.Result import Result\n+\n+\n+class GitRevertInspectBear(GlobalBear):\n+    LANGUAGES = {'Git'}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+\n+    BEAR_DEPS = {GitCommitMetadataBear}\n+\n+    def run(self, dependency_results,\n+            allow_git_revert_commit: bool = True,\n+            minimum_similarity_ratio: float = 0.8,\n+            **kwargs):\n+        \"\"\"\n+        Inspect the HEAD commit to check if it is a\n+        git revert commit and return result accordingly.\n+\n+        :param allow_git_revert_commit: Whether revert commit\n+                                        is allowed or not.\n+\n+        :minimum_similarity_ratio:      Minimum similarity ratio\n+                                        required by files in revert\n+                                        commit.\n+        \"\"\"\n+        for result in dependency_results[GitCommitMetadataBear.name]:\n+\n+            if not re.search(\n+                r'Revert\\s\\\".+\\\"\\n\\nThis\\sreverts\\scommit\\s[0-9a-f]{40}\\.',","author":{"login":"refeed","avatarUrl":"https://avatars1.githubusercontent.com/u/20320125?v=4","name":"Rafid Aslam"},"createdAt":"2018-08-05T06:05:05Z","lastEditedAt":null,"updatedAt":"2018-08-05T06:05:05Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzcyNjI1NA==","url":"https://github.com/coala/coala-bears/pull/2652#discussion_r207726254","bodyText":"See my comment on line 37.\nUse the regex group from GIT_REVERT_COMMIT_RE to capture the reverted_commit_sha","diffHunk":"@@ -0,0 +1,121 @@\n+import re\n+\n+from difflib import SequenceMatcher\n+\n+from bears.vcs.git.GitCommitMetadataBear import GitCommitMetadataBear\n+from coalib.bears.GlobalBear import GlobalBear\n+from coalib.misc.Shell import run_shell_command\n+from coalib.results.Result import Result\n+\n+\n+class GitRevertInspectBear(GlobalBear):\n+    LANGUAGES = {'Git'}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+\n+    BEAR_DEPS = {GitCommitMetadataBear}\n+\n+    def run(self, dependency_results,\n+            allow_git_revert_commit: bool = True,\n+            minimum_similarity_ratio: float = 0.8,\n+            **kwargs):\n+        \"\"\"\n+        Inspect the HEAD commit to check if it is a\n+        git revert commit and return result accordingly.\n+\n+        :param allow_git_revert_commit: Whether revert commit\n+                                        is allowed or not.\n+\n+        :minimum_similarity_ratio:      Minimum similarity ratio\n+                                        required by files in revert\n+                                        commit.\n+        \"\"\"\n+        for result in dependency_results[GitCommitMetadataBear.name]:\n+\n+            if not re.search(\n+                r'Revert\\s\\\".+\\\"\\n\\nThis\\sreverts\\scommit\\s[0-9a-f]{40}\\.',\n+                    result.raw_commit_message):\n+                return\n+\n+            if not allow_git_revert_commit:\n+                yield Result(self, 'Revert commit is not allowed.')\n+                return\n+\n+            sha_regex = re.compile(r'([0-9a-f]{40})')","author":{"login":"refeed","avatarUrl":"https://avatars1.githubusercontent.com/u/20320125?v=4","name":"Rafid Aslam"},"createdAt":"2018-08-05T06:07:39Z","lastEditedAt":null,"updatedAt":"2018-08-05T06:07:39Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzcyNjQyMQ==","url":"https://github.com/coala/coala-bears/pull/2652#discussion_r207726421","bodyText":"And add a regex group for the reverted commit sha, so the regex would be like this:\nr'Revert\\s\\\".+\\\"\\n\\nThis\\sreverts\\scommit\\s([0-9a-f]{40})\\.'\nThen you can capture the regex group to get the reverted commit sha","diffHunk":"@@ -0,0 +1,121 @@\n+import re\n+\n+from difflib import SequenceMatcher\n+\n+from bears.vcs.git.GitCommitMetadataBear import GitCommitMetadataBear\n+from coalib.bears.GlobalBear import GlobalBear\n+from coalib.misc.Shell import run_shell_command\n+from coalib.results.Result import Result\n+\n+\n+class GitRevertInspectBear(GlobalBear):\n+    LANGUAGES = {'Git'}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+\n+    BEAR_DEPS = {GitCommitMetadataBear}\n+\n+    def run(self, dependency_results,\n+            allow_git_revert_commit: bool = True,\n+            minimum_similarity_ratio: float = 0.8,\n+            **kwargs):\n+        \"\"\"\n+        Inspect the HEAD commit to check if it is a\n+        git revert commit and return result accordingly.\n+\n+        :param allow_git_revert_commit: Whether revert commit\n+                                        is allowed or not.\n+\n+        :minimum_similarity_ratio:      Minimum similarity ratio\n+                                        required by files in revert\n+                                        commit.\n+        \"\"\"\n+        for result in dependency_results[GitCommitMetadataBear.name]:\n+\n+            if not re.search(\n+                r'Revert\\s\\\".+\\\"\\n\\nThis\\sreverts\\scommit\\s[0-9a-f]{40}\\.',","author":{"login":"refeed","avatarUrl":"https://avatars1.githubusercontent.com/u/20320125?v=4","name":"Rafid Aslam"},"createdAt":"2018-08-05T06:16:25Z","lastEditedAt":null,"updatedAt":"2018-08-05T06:16:25Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzcyNjgwMg==","url":"https://github.com/coala/coala-bears/pull/2652#discussion_r207726802","bodyText":"What we wanna compare is the current revert commit (which is on the HEAD) and the \"expected revert commit\".\nWe don't wanna compare the reverted commit with the \"expected revert commit\", because they're might be very different (but in some cases, the difference are just + and - sign, but still they're different)\nAnd also we want to get the diff for just one file (because this is a loop, and we compare them one by one), so the command would be changed to git diff HEAD^ HEAD file_name","diffHunk":"@@ -0,0 +1,121 @@\n+import re\n+\n+from difflib import SequenceMatcher\n+\n+from bears.vcs.git.GitCommitMetadataBear import GitCommitMetadataBear\n+from coalib.bears.GlobalBear import GlobalBear\n+from coalib.misc.Shell import run_shell_command\n+from coalib.results.Result import Result\n+\n+\n+class GitRevertInspectBear(GlobalBear):\n+    LANGUAGES = {'Git'}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+\n+    BEAR_DEPS = {GitCommitMetadataBear}\n+\n+    def run(self, dependency_results,\n+            allow_git_revert_commit: bool = True,\n+            minimum_similarity_ratio: float = 0.8,\n+            **kwargs):\n+        \"\"\"\n+        Inspect the HEAD commit to check if it is a\n+        git revert commit and return result accordingly.\n+\n+        :param allow_git_revert_commit: Whether revert commit\n+                                        is allowed or not.\n+\n+        :minimum_similarity_ratio:      Minimum similarity ratio\n+                                        required by files in revert\n+                                        commit.\n+        \"\"\"\n+        for result in dependency_results[GitCommitMetadataBear.name]:\n+\n+            if not re.search(\n+                r'Revert\\s\\\".+\\\"\\n\\nThis\\sreverts\\scommit\\s[0-9a-f]{40}\\.',\n+                    result.raw_commit_message):\n+                return\n+\n+            if not allow_git_revert_commit:\n+                yield Result(self, 'Revert commit is not allowed.')\n+                return\n+\n+            sha_regex = re.compile(r'([0-9a-f]{40})')\n+            reverted_commit_sha = re.findall(\n+                sha_regex, result.raw_commit_message)[0]\n+\n+            get_files_command = ('git show --pretty=\"\" --name-status %s' %\n+                                 (reverted_commit_sha))\n+\n+            all_files = run_shell_command(get_files_command)[0]\n+            files_modified_by_reverted_commit = all_files.split('\\n')\n+\n+            reverted_commit_modified_files_list = []\n+            reverted_commit_added_files_list = []\n+            reverted_commit_deleted_files_list = []\n+\n+            for line in files_modified_by_reverted_commit:\n+                pos = line.find('\\t')\n+                change = line[:pos]\n+                if change == 'M':\n+                    reverted_commit_modified_files_list.append(line[pos+1:])\n+                elif change == 'A':\n+                    reverted_commit_added_files_list.append(line[pos+1:])\n+                elif change == 'D':\n+                    reverted_commit_deleted_files_list.append(line[pos+1:])\n+\n+            for file_name in result.added_files:\n+                if file_name not in reverted_commit_deleted_files_list:\n+                    yield Result(self, 'Revert commit has an added '\n+                                       'file %s that is not in reverted '\n+                                       'commit.' % (file_name))\n+\n+            for file_name in result.deleted_files:\n+                if file_name not in reverted_commit_added_files_list:\n+                    yield Result(self, 'Revert commit has a deleted '\n+                                       'file %s that is not in reverted '\n+                                       'commit.' % (file_name))\n+\n+            for file_name in result.modified_files:\n+                if file_name not in reverted_commit_modified_files_list:\n+                    yield Result(self, 'Revert commit has a modified '\n+                                       'file %s that is not in reverted '\n+                                       'commit.' % (file_name))\n+                    return\n+\n+                head_commit_branch = run_shell_command(\n+                    'git rev-parse --abbrev-ref HEAD')[0].strip('\\n')\n+\n+                get_reverted_commit_diff_command = ('git diff ' +\n+                                                    reverted_commit_sha +","author":{"login":"refeed","avatarUrl":"https://avatars1.githubusercontent.com/u/20320125?v=4","name":"Rafid Aslam"},"createdAt":"2018-08-05T06:37:38Z","lastEditedAt":"2018-08-05T08:21:09Z","updatedAt":"2018-08-05T08:21:09Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzcyNjg4NA==","url":"https://github.com/coala/coala-bears/pull/2652#discussion_r207726884","bodyText":"You forgot your inspectrevertbranch in the command","diffHunk":"@@ -0,0 +1,121 @@\n+import re\n+\n+from difflib import SequenceMatcher\n+\n+from bears.vcs.git.GitCommitMetadataBear import GitCommitMetadataBear\n+from coalib.bears.GlobalBear import GlobalBear\n+from coalib.misc.Shell import run_shell_command\n+from coalib.results.Result import Result\n+\n+\n+class GitRevertInspectBear(GlobalBear):\n+    LANGUAGES = {'Git'}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+\n+    BEAR_DEPS = {GitCommitMetadataBear}\n+\n+    def run(self, dependency_results,\n+            allow_git_revert_commit: bool = True,\n+            minimum_similarity_ratio: float = 0.8,\n+            **kwargs):\n+        \"\"\"\n+        Inspect the HEAD commit to check if it is a\n+        git revert commit and return result accordingly.\n+\n+        :param allow_git_revert_commit: Whether revert commit\n+                                        is allowed or not.\n+\n+        :minimum_similarity_ratio:      Minimum similarity ratio\n+                                        required by files in revert\n+                                        commit.\n+        \"\"\"\n+        for result in dependency_results[GitCommitMetadataBear.name]:\n+\n+            if not re.search(\n+                r'Revert\\s\\\".+\\\"\\n\\nThis\\sreverts\\scommit\\s[0-9a-f]{40}\\.',\n+                    result.raw_commit_message):\n+                return\n+\n+            if not allow_git_revert_commit:\n+                yield Result(self, 'Revert commit is not allowed.')\n+                return\n+\n+            sha_regex = re.compile(r'([0-9a-f]{40})')\n+            reverted_commit_sha = re.findall(\n+                sha_regex, result.raw_commit_message)[0]\n+\n+            get_files_command = ('git show --pretty=\"\" --name-status %s' %\n+                                 (reverted_commit_sha))\n+\n+            all_files = run_shell_command(get_files_command)[0]\n+            files_modified_by_reverted_commit = all_files.split('\\n')\n+\n+            reverted_commit_modified_files_list = []\n+            reverted_commit_added_files_list = []\n+            reverted_commit_deleted_files_list = []\n+\n+            for line in files_modified_by_reverted_commit:\n+                pos = line.find('\\t')\n+                change = line[:pos]\n+                if change == 'M':\n+                    reverted_commit_modified_files_list.append(line[pos+1:])\n+                elif change == 'A':\n+                    reverted_commit_added_files_list.append(line[pos+1:])\n+                elif change == 'D':\n+                    reverted_commit_deleted_files_list.append(line[pos+1:])\n+\n+            for file_name in result.added_files:\n+                if file_name not in reverted_commit_deleted_files_list:\n+                    yield Result(self, 'Revert commit has an added '\n+                                       'file %s that is not in reverted '\n+                                       'commit.' % (file_name))\n+\n+            for file_name in result.deleted_files:\n+                if file_name not in reverted_commit_added_files_list:\n+                    yield Result(self, 'Revert commit has a deleted '\n+                                       'file %s that is not in reverted '\n+                                       'commit.' % (file_name))\n+\n+            for file_name in result.modified_files:\n+                if file_name not in reverted_commit_modified_files_list:\n+                    yield Result(self, 'Revert commit has a modified '\n+                                       'file %s that is not in reverted '\n+                                       'commit.' % (file_name))\n+                    return\n+\n+                head_commit_branch = run_shell_command(\n+                    'git rev-parse --abbrev-ref HEAD')[0].strip('\\n')\n+\n+                get_reverted_commit_diff_command = ('git diff ' +\n+                                                    reverted_commit_sha +\n+                                                    '^ ' + reverted_commit_sha)\n+                reverted_commit_diff = run_shell_command(\n+                    get_reverted_commit_diff_command)\n+\n+                create_new_branch_command = ('git checkout -b %s^' %\n+                                             head_commit_branch)","author":{"login":"refeed","avatarUrl":"https://avatars1.githubusercontent.com/u/20320125?v=4","name":"Rafid Aslam"},"createdAt":"2018-08-05T06:41:22Z","lastEditedAt":"2018-08-05T07:11:18Z","updatedAt":"2018-08-05T07:11:18Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzcyNzAyNg==","url":"https://github.com/coala/coala-bears/pull/2652#discussion_r207727026","bodyText":"Catch the err (move err definition from line 105 to here)","diffHunk":"@@ -0,0 +1,121 @@\n+import re\n+\n+from difflib import SequenceMatcher\n+\n+from bears.vcs.git.GitCommitMetadataBear import GitCommitMetadataBear\n+from coalib.bears.GlobalBear import GlobalBear\n+from coalib.misc.Shell import run_shell_command\n+from coalib.results.Result import Result\n+\n+\n+class GitRevertInspectBear(GlobalBear):\n+    LANGUAGES = {'Git'}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+\n+    BEAR_DEPS = {GitCommitMetadataBear}\n+\n+    def run(self, dependency_results,\n+            allow_git_revert_commit: bool = True,\n+            minimum_similarity_ratio: float = 0.8,\n+            **kwargs):\n+        \"\"\"\n+        Inspect the HEAD commit to check if it is a\n+        git revert commit and return result accordingly.\n+\n+        :param allow_git_revert_commit: Whether revert commit\n+                                        is allowed or not.\n+\n+        :minimum_similarity_ratio:      Minimum similarity ratio\n+                                        required by files in revert\n+                                        commit.\n+        \"\"\"\n+        for result in dependency_results[GitCommitMetadataBear.name]:\n+\n+            if not re.search(\n+                r'Revert\\s\\\".+\\\"\\n\\nThis\\sreverts\\scommit\\s[0-9a-f]{40}\\.',\n+                    result.raw_commit_message):\n+                return\n+\n+            if not allow_git_revert_commit:\n+                yield Result(self, 'Revert commit is not allowed.')\n+                return\n+\n+            sha_regex = re.compile(r'([0-9a-f]{40})')\n+            reverted_commit_sha = re.findall(\n+                sha_regex, result.raw_commit_message)[0]\n+\n+            get_files_command = ('git show --pretty=\"\" --name-status %s' %\n+                                 (reverted_commit_sha))\n+\n+            all_files = run_shell_command(get_files_command)[0]\n+            files_modified_by_reverted_commit = all_files.split('\\n')\n+\n+            reverted_commit_modified_files_list = []\n+            reverted_commit_added_files_list = []\n+            reverted_commit_deleted_files_list = []\n+\n+            for line in files_modified_by_reverted_commit:\n+                pos = line.find('\\t')\n+                change = line[:pos]\n+                if change == 'M':\n+                    reverted_commit_modified_files_list.append(line[pos+1:])\n+                elif change == 'A':\n+                    reverted_commit_added_files_list.append(line[pos+1:])\n+                elif change == 'D':\n+                    reverted_commit_deleted_files_list.append(line[pos+1:])\n+\n+            for file_name in result.added_files:\n+                if file_name not in reverted_commit_deleted_files_list:\n+                    yield Result(self, 'Revert commit has an added '\n+                                       'file %s that is not in reverted '\n+                                       'commit.' % (file_name))\n+\n+            for file_name in result.deleted_files:\n+                if file_name not in reverted_commit_added_files_list:\n+                    yield Result(self, 'Revert commit has a deleted '\n+                                       'file %s that is not in reverted '\n+                                       'commit.' % (file_name))\n+\n+            for file_name in result.modified_files:\n+                if file_name not in reverted_commit_modified_files_list:\n+                    yield Result(self, 'Revert commit has a modified '\n+                                       'file %s that is not in reverted '\n+                                       'commit.' % (file_name))\n+                    return\n+\n+                head_commit_branch = run_shell_command(\n+                    'git rev-parse --abbrev-ref HEAD')[0].strip('\\n')\n+\n+                get_reverted_commit_diff_command = ('git diff ' +\n+                                                    reverted_commit_sha +\n+                                                    '^ ' + reverted_commit_sha)\n+                reverted_commit_diff = run_shell_command(\n+                    get_reverted_commit_diff_command)\n+\n+                create_new_branch_command = ('git checkout -b %s^' %\n+                                             head_commit_branch)\n+                run_shell_command(create_new_branch_command)\n+\n+                create_expected_revert_commit = ('git revert %s --no-edit' %\n+                                                 reverted_commit_sha)\n+                run_shell_command(create_expected_revert_commit)","author":{"login":"refeed","avatarUrl":"https://avatars1.githubusercontent.com/u/20320125?v=4","name":"Rafid Aslam"},"createdAt":"2018-08-05T06:49:01Z","lastEditedAt":"2018-08-05T07:11:07Z","updatedAt":"2018-08-05T07:11:07Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzcyNzA0Mw==","url":"https://github.com/coala/coala-bears/pull/2652#discussion_r207727043","bodyText":"After the self.warn do git revert --abort to make sure that we can checkout to the master","diffHunk":"@@ -0,0 +1,121 @@\n+import re\n+\n+from difflib import SequenceMatcher\n+\n+from bears.vcs.git.GitCommitMetadataBear import GitCommitMetadataBear\n+from coalib.bears.GlobalBear import GlobalBear\n+from coalib.misc.Shell import run_shell_command\n+from coalib.results.Result import Result\n+\n+\n+class GitRevertInspectBear(GlobalBear):\n+    LANGUAGES = {'Git'}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+\n+    BEAR_DEPS = {GitCommitMetadataBear}\n+\n+    def run(self, dependency_results,\n+            allow_git_revert_commit: bool = True,\n+            minimum_similarity_ratio: float = 0.8,\n+            **kwargs):\n+        \"\"\"\n+        Inspect the HEAD commit to check if it is a\n+        git revert commit and return result accordingly.\n+\n+        :param allow_git_revert_commit: Whether revert commit\n+                                        is allowed or not.\n+\n+        :minimum_similarity_ratio:      Minimum similarity ratio\n+                                        required by files in revert\n+                                        commit.\n+        \"\"\"\n+        for result in dependency_results[GitCommitMetadataBear.name]:\n+\n+            if not re.search(\n+                r'Revert\\s\\\".+\\\"\\n\\nThis\\sreverts\\scommit\\s[0-9a-f]{40}\\.',\n+                    result.raw_commit_message):\n+                return\n+\n+            if not allow_git_revert_commit:\n+                yield Result(self, 'Revert commit is not allowed.')\n+                return\n+\n+            sha_regex = re.compile(r'([0-9a-f]{40})')\n+            reverted_commit_sha = re.findall(\n+                sha_regex, result.raw_commit_message)[0]\n+\n+            get_files_command = ('git show --pretty=\"\" --name-status %s' %\n+                                 (reverted_commit_sha))\n+\n+            all_files = run_shell_command(get_files_command)[0]\n+            files_modified_by_reverted_commit = all_files.split('\\n')\n+\n+            reverted_commit_modified_files_list = []\n+            reverted_commit_added_files_list = []\n+            reverted_commit_deleted_files_list = []\n+\n+            for line in files_modified_by_reverted_commit:\n+                pos = line.find('\\t')\n+                change = line[:pos]\n+                if change == 'M':\n+                    reverted_commit_modified_files_list.append(line[pos+1:])\n+                elif change == 'A':\n+                    reverted_commit_added_files_list.append(line[pos+1:])\n+                elif change == 'D':\n+                    reverted_commit_deleted_files_list.append(line[pos+1:])\n+\n+            for file_name in result.added_files:\n+                if file_name not in reverted_commit_deleted_files_list:\n+                    yield Result(self, 'Revert commit has an added '\n+                                       'file %s that is not in reverted '\n+                                       'commit.' % (file_name))\n+\n+            for file_name in result.deleted_files:\n+                if file_name not in reverted_commit_added_files_list:\n+                    yield Result(self, 'Revert commit has a deleted '\n+                                       'file %s that is not in reverted '\n+                                       'commit.' % (file_name))\n+\n+            for file_name in result.modified_files:\n+                if file_name not in reverted_commit_modified_files_list:\n+                    yield Result(self, 'Revert commit has a modified '\n+                                       'file %s that is not in reverted '\n+                                       'commit.' % (file_name))\n+                    return\n+\n+                head_commit_branch = run_shell_command(\n+                    'git rev-parse --abbrev-ref HEAD')[0].strip('\\n')\n+\n+                get_reverted_commit_diff_command = ('git diff ' +\n+                                                    reverted_commit_sha +\n+                                                    '^ ' + reverted_commit_sha)\n+                reverted_commit_diff = run_shell_command(\n+                    get_reverted_commit_diff_command)\n+\n+                create_new_branch_command = ('git checkout -b %s^' %\n+                                             head_commit_branch)\n+                run_shell_command(create_new_branch_command)\n+\n+                create_expected_revert_commit = ('git revert %s --no-edit' %\n+                                                 reverted_commit_sha)\n+                run_shell_command(create_expected_revert_commit)\n+\n+                expected_revert_commit_diff, err = run_shell_command(\n+                    'git diff HEAD^ HEAD')\n+                if err:\n+                    self.warn('Cannot compare the modified files.')","author":{"login":"refeed","avatarUrl":"https://avatars1.githubusercontent.com/u/20320125?v=4","name":"Rafid Aslam"},"createdAt":"2018-08-05T06:49:51Z","lastEditedAt":null,"updatedAt":"2018-08-05T06:49:51Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzcyNzA2Mg==","url":"https://github.com/coala/coala-bears/pull/2652#discussion_r207727062","bodyText":"Change the reverted_commit_diff with revert_commit_diff","diffHunk":"@@ -0,0 +1,121 @@\n+import re\n+\n+from difflib import SequenceMatcher\n+\n+from bears.vcs.git.GitCommitMetadataBear import GitCommitMetadataBear\n+from coalib.bears.GlobalBear import GlobalBear\n+from coalib.misc.Shell import run_shell_command\n+from coalib.results.Result import Result\n+\n+\n+class GitRevertInspectBear(GlobalBear):\n+    LANGUAGES = {'Git'}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+\n+    BEAR_DEPS = {GitCommitMetadataBear}\n+\n+    def run(self, dependency_results,\n+            allow_git_revert_commit: bool = True,\n+            minimum_similarity_ratio: float = 0.8,\n+            **kwargs):\n+        \"\"\"\n+        Inspect the HEAD commit to check if it is a\n+        git revert commit and return result accordingly.\n+\n+        :param allow_git_revert_commit: Whether revert commit\n+                                        is allowed or not.\n+\n+        :minimum_similarity_ratio:      Minimum similarity ratio\n+                                        required by files in revert\n+                                        commit.\n+        \"\"\"\n+        for result in dependency_results[GitCommitMetadataBear.name]:\n+\n+            if not re.search(\n+                r'Revert\\s\\\".+\\\"\\n\\nThis\\sreverts\\scommit\\s[0-9a-f]{40}\\.',\n+                    result.raw_commit_message):\n+                return\n+\n+            if not allow_git_revert_commit:\n+                yield Result(self, 'Revert commit is not allowed.')\n+                return\n+\n+            sha_regex = re.compile(r'([0-9a-f]{40})')\n+            reverted_commit_sha = re.findall(\n+                sha_regex, result.raw_commit_message)[0]\n+\n+            get_files_command = ('git show --pretty=\"\" --name-status %s' %\n+                                 (reverted_commit_sha))\n+\n+            all_files = run_shell_command(get_files_command)[0]\n+            files_modified_by_reverted_commit = all_files.split('\\n')\n+\n+            reverted_commit_modified_files_list = []\n+            reverted_commit_added_files_list = []\n+            reverted_commit_deleted_files_list = []\n+\n+            for line in files_modified_by_reverted_commit:\n+                pos = line.find('\\t')\n+                change = line[:pos]\n+                if change == 'M':\n+                    reverted_commit_modified_files_list.append(line[pos+1:])\n+                elif change == 'A':\n+                    reverted_commit_added_files_list.append(line[pos+1:])\n+                elif change == 'D':\n+                    reverted_commit_deleted_files_list.append(line[pos+1:])\n+\n+            for file_name in result.added_files:\n+                if file_name not in reverted_commit_deleted_files_list:\n+                    yield Result(self, 'Revert commit has an added '\n+                                       'file %s that is not in reverted '\n+                                       'commit.' % (file_name))\n+\n+            for file_name in result.deleted_files:\n+                if file_name not in reverted_commit_added_files_list:\n+                    yield Result(self, 'Revert commit has a deleted '\n+                                       'file %s that is not in reverted '\n+                                       'commit.' % (file_name))\n+\n+            for file_name in result.modified_files:\n+                if file_name not in reverted_commit_modified_files_list:\n+                    yield Result(self, 'Revert commit has a modified '\n+                                       'file %s that is not in reverted '\n+                                       'commit.' % (file_name))\n+                    return\n+\n+                head_commit_branch = run_shell_command(\n+                    'git rev-parse --abbrev-ref HEAD')[0].strip('\\n')\n+\n+                get_reverted_commit_diff_command = ('git diff ' +\n+                                                    reverted_commit_sha +\n+                                                    '^ ' + reverted_commit_sha)\n+                reverted_commit_diff = run_shell_command(\n+                    get_reverted_commit_diff_command)\n+\n+                create_new_branch_command = ('git checkout -b %s^' %\n+                                             head_commit_branch)\n+                run_shell_command(create_new_branch_command)\n+\n+                create_expected_revert_commit = ('git revert %s --no-edit' %\n+                                                 reverted_commit_sha)\n+                run_shell_command(create_expected_revert_commit)\n+\n+                expected_revert_commit_diff, err = run_shell_command(\n+                    'git diff HEAD^ HEAD')\n+                if err:\n+                    self.warn('Cannot compare the modified files.')\n+                    return\n+\n+                matcher = SequenceMatcher(\n+                    None, reverted_commit_diff, expected_revert_commit_diff)","author":{"login":"refeed","avatarUrl":"https://avatars1.githubusercontent.com/u/20320125?v=4","name":"Rafid Aslam"},"createdAt":"2018-08-05T06:50:54Z","lastEditedAt":null,"updatedAt":"2018-08-05T06:50:54Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzcyNzI1NQ==","url":"https://github.com/coala/coala-bears/pull/2652#discussion_r207727255","bodyText":"This shouldn't appear","diffHunk":"@@ -0,0 +1,184 @@\n+import os\n+import platform\n+import shutil\n+import stat\n+import unittest\n+import unittest.mock\n+from pathlib import Path\n+from queue import Queue\n+from tempfile import mkdtemp\n+\n+from bears.vcs.git.GitCommitMetadataBear import GitCommitMetadataBear\n+from bears.vcs.git.GitRevertInspectBear import GitRevertInspectBear\n+from coalib.misc.Shell import run_shell_command\n+from coalib.settings.Section import Section\n+from coalib.testing.BearTestHelper import generate_skip_decorator\n+from .GitCommitBearTest import GitCommitBearTest\n+\n+\n+@generate_skip_decorator(GitRevertInspectBear)\n+class GitRevertInspectBearTest(unittest.TestCase):\n+\n+    def run_uut(self, *args, **kwargs):\n+        \"\"\"\n+        Runs the unit-under-test (via `self.uut.run()`) and collects the\n+        messages of the yielded results as a list.\n+\n+        :param args:   Positional arguments to forward to the run function.\n+        :param kwargs: Keyword arguments to forward to the run function.\n+        :return:       A list of the message strings.\n+        \"\"\"\n+        dep_bear = GitCommitMetadataBear(None, self.section, Queue())\n+        deps_results = dict(GitCommitMetadataBear=list(dep_bear.run()))\n+        return list(result.message for result in self.uut.run(\n+            deps_results, *args, **kwargs))\n+\n+    def setUp(self):\n+        self.msg_queue = Queue()\n+        self.section = Section('')\n+        self.uut = GitRevertInspectBear(None, self.section, self.msg_queue)\n+\n+        self._old_cwd = os.getcwd()\n+        self.gitdir = mkdtemp()\n+        os.chdir(self.gitdir)\n+        GitCommitBearTest.run_git_command('init')\n+        GitCommitBearTest.run_git_command(\n+            'config', 'user.email coala@coala.io')\n+        GitCommitBearTest.run_git_command('config', 'user.name coala')\n+\n+    @staticmethod\n+    def _windows_rmtree_remove_readonly(func, path, excinfo):\n+        os.chmod(path, stat.S_IWRITE)\n+        func(path)\n+\n+    def tearDown(self):\n+        os.chdir(self._old_cwd)\n+        if platform.system() == 'Windows':\n+            onerror = self._windows_rmtree_remove_readonly\n+        else:\n+            onerror = None\n+        shutil.rmtree(self.gitdir, onerror=onerror)\n+\n+    def test_check_simple_git_commit(self):\n+        Path('testfile1.txt').touch()\n+        run_shell_command('git add testfile1.txt')\n+        run_shell_command('git commit -m \"Add testfile1\"')\n+        self.assertEqual(self.run_uut(), [])\n+\n+    def test_check_revert_commit_not_allowed(self):\n+        Path('testfile1.txt').touch()\n+        run_shell_command('git add testfile1.txt')\n+        run_shell_command('git commit -m \"Add testfile1\"')\n+        run_shell_command('git revert HEAD --no-edit')\n+        self.assertEqual(self.run_uut(\n+            allow_git_revert_commit=False),\n+            ['Revert commit is not allowed.'])\n+\n+    def test_check_git_revert_commit_with_extra_added_file(self):\n+        Path('testfile1.txt').touch()\n+        with open('testfile1.txt', 'w') as f:\n+            f.write('Some text')\n+\n+        run_shell_command('git add testfile1.txt')\n+        run_shell_command('git commit -m \"intial commit\"')\n+\n+        with open('testfile1.txt', 'w') as f:\n+            f.write('Modify text')\n+        Path('testfile2.txt').touch()\n+        run_shell_command('git add testfile1.txt')\n+        run_shell_command('git add testfile2.txt')\n+        run_shell_command('git commit -m \"reverted commit\"')\n+\n+        run_shell_command('git revert HEAD --no-edit')\n+        Path('testfile3.txt').touch()\n+        run_shell_command('git add testfile3.txt')\n+        run_shell_command('git commit --amend --allow-empty --no-edit')\n+\n+        self.assertEqual(self.run_uut(),\n+                         ['Revert commit has an added file testfile3.txt that '\n+                          'is not in reverted commit.',\n+                          'Changes in modified file testfile1.txt of '","author":{"login":"refeed","avatarUrl":"https://avatars1.githubusercontent.com/u/20320125?v=4","name":"Rafid Aslam"},"createdAt":"2018-08-05T07:00:18Z","lastEditedAt":null,"updatedAt":"2018-08-05T07:00:18Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzcyNzQ1Nw==","url":"https://github.com/coala/coala-bears/pull/2652#discussion_r207727457","bodyText":"The name of this test is the same with the previous test, change it","diffHunk":"@@ -0,0 +1,184 @@\n+import os\n+import platform\n+import shutil\n+import stat\n+import unittest\n+import unittest.mock\n+from pathlib import Path\n+from queue import Queue\n+from tempfile import mkdtemp\n+\n+from bears.vcs.git.GitCommitMetadataBear import GitCommitMetadataBear\n+from bears.vcs.git.GitRevertInspectBear import GitRevertInspectBear\n+from coalib.misc.Shell import run_shell_command\n+from coalib.settings.Section import Section\n+from coalib.testing.BearTestHelper import generate_skip_decorator\n+from .GitCommitBearTest import GitCommitBearTest\n+\n+\n+@generate_skip_decorator(GitRevertInspectBear)\n+class GitRevertInspectBearTest(unittest.TestCase):\n+\n+    def run_uut(self, *args, **kwargs):\n+        \"\"\"\n+        Runs the unit-under-test (via `self.uut.run()`) and collects the\n+        messages of the yielded results as a list.\n+\n+        :param args:   Positional arguments to forward to the run function.\n+        :param kwargs: Keyword arguments to forward to the run function.\n+        :return:       A list of the message strings.\n+        \"\"\"\n+        dep_bear = GitCommitMetadataBear(None, self.section, Queue())\n+        deps_results = dict(GitCommitMetadataBear=list(dep_bear.run()))\n+        return list(result.message for result in self.uut.run(\n+            deps_results, *args, **kwargs))\n+\n+    def setUp(self):\n+        self.msg_queue = Queue()\n+        self.section = Section('')\n+        self.uut = GitRevertInspectBear(None, self.section, self.msg_queue)\n+\n+        self._old_cwd = os.getcwd()\n+        self.gitdir = mkdtemp()\n+        os.chdir(self.gitdir)\n+        GitCommitBearTest.run_git_command('init')\n+        GitCommitBearTest.run_git_command(\n+            'config', 'user.email coala@coala.io')\n+        GitCommitBearTest.run_git_command('config', 'user.name coala')\n+\n+    @staticmethod\n+    def _windows_rmtree_remove_readonly(func, path, excinfo):\n+        os.chmod(path, stat.S_IWRITE)\n+        func(path)\n+\n+    def tearDown(self):\n+        os.chdir(self._old_cwd)\n+        if platform.system() == 'Windows':\n+            onerror = self._windows_rmtree_remove_readonly\n+        else:\n+            onerror = None\n+        shutil.rmtree(self.gitdir, onerror=onerror)\n+\n+    def test_check_simple_git_commit(self):\n+        Path('testfile1.txt').touch()\n+        run_shell_command('git add testfile1.txt')\n+        run_shell_command('git commit -m \"Add testfile1\"')\n+        self.assertEqual(self.run_uut(), [])\n+\n+    def test_check_revert_commit_not_allowed(self):\n+        Path('testfile1.txt').touch()\n+        run_shell_command('git add testfile1.txt')\n+        run_shell_command('git commit -m \"Add testfile1\"')\n+        run_shell_command('git revert HEAD --no-edit')\n+        self.assertEqual(self.run_uut(\n+            allow_git_revert_commit=False),\n+            ['Revert commit is not allowed.'])\n+\n+    def test_check_git_revert_commit_with_extra_added_file(self):\n+        Path('testfile1.txt').touch()\n+        with open('testfile1.txt', 'w') as f:\n+            f.write('Some text')\n+\n+        run_shell_command('git add testfile1.txt')\n+        run_shell_command('git commit -m \"intial commit\"')\n+\n+        with open('testfile1.txt', 'w') as f:\n+            f.write('Modify text')\n+        Path('testfile2.txt').touch()\n+        run_shell_command('git add testfile1.txt')\n+        run_shell_command('git add testfile2.txt')\n+        run_shell_command('git commit -m \"reverted commit\"')\n+\n+        run_shell_command('git revert HEAD --no-edit')\n+        Path('testfile3.txt').touch()\n+        run_shell_command('git add testfile3.txt')\n+        run_shell_command('git commit --amend --allow-empty --no-edit')\n+\n+        self.assertEqual(self.run_uut(),\n+                         ['Revert commit has an added file testfile3.txt that '\n+                          'is not in reverted commit.',\n+                          'Changes in modified file testfile1.txt of '\n+                          'revert commit are not exactly revert of changes in '\n+                          'reverted commit.'])\n+\n+    def test_check_git_revert_commit_with_extra_deleted_file(self):\n+        Path('testfile1.txt').touch()\n+        with open('testfile1.txt', 'w') as f:\n+            f.write('Some text')\n+\n+        Path('testfile2.txt').touch()\n+        with open('testfile2.txt', 'w') as f:\n+            f.write('Some more text')\n+\n+        run_shell_command('git add testfile1.txt')\n+        run_shell_command('git add testfile2.txt')\n+        run_shell_command('git commit -m \"intial commit\"')\n+\n+        run_shell_command('rm testfile1.txt')\n+        run_shell_command('git rm testfile1.txt')\n+        run_shell_command('git commit -m \"delete file\"')\n+\n+        run_shell_command('git revert HEAD --no-edit')\n+        run_shell_command('rm testfile2.txt')\n+        run_shell_command('git rm testfile2.txt')\n+        run_shell_command('git commit --amend --allow-empty --no-edit')\n+\n+        self.assertEqual(self.run_uut(),\n+                         ['Revert commit has a deleted file testfile2.txt '\n+                          'that is not in reverted commit.'])\n+\n+    def test_check_git_revert_commit_with_invalid_modified_files(self):\n+        Path('testfile1.txt').touch()\n+        with open('testfile1.txt', 'w') as f:\n+            f.write('Some text')\n+\n+        Path('testfile2.txt').touch()\n+        with open('testfile2.txt', 'w') as f:\n+            f.write('Some more text')\n+\n+        run_shell_command('git add testfile1.txt')\n+        run_shell_command('git add testfile2.txt')\n+        run_shell_command('git commit -m \"intial commit\"')\n+\n+        Path('testfile1.txt').touch()\n+        with open('testfile1.txt', 'w') as f:\n+            f.write('Changed text')\n+        run_shell_command('git add testfile1.txt')\n+        run_shell_command('git commit -m \"modified file\"')\n+\n+        run_shell_command('git revert HEAD --no-edit')\n+        with open('testfile2.txt', 'w') as f:\n+            f.write('Some more changed text')\n+        run_shell_command('git add testfile2.txt')\n+        run_shell_command('git commit --amend --allow-empty --no-edit')\n+\n+        self.assertEqual(self.run_uut(),\n+                         ['Revert commit has a modified file testfile2.txt '\n+                          'that is not in reverted commit.',\n+                          'Changes in modified file testfile1.txt of '\n+                          'revert commit are not exactly revert of '\n+                          'changes in reverted commit.'])\n+\n+    def test_check_git_revert_commit_with_invalid_modified_files(self):","author":{"login":"refeed","avatarUrl":"https://avatars1.githubusercontent.com/u/20320125?v=4","name":"Rafid Aslam"},"createdAt":"2018-08-05T07:09:17Z","lastEditedAt":null,"updatedAt":"2018-08-05T07:09:17Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzcyNzQ3NQ==","url":"https://github.com/coala/coala-bears/pull/2652#discussion_r207727475","bodyText":"I think we don't need this","diffHunk":"@@ -0,0 +1,184 @@\n+import os\n+import platform\n+import shutil\n+import stat\n+import unittest\n+import unittest.mock\n+from pathlib import Path\n+from queue import Queue\n+from tempfile import mkdtemp\n+\n+from bears.vcs.git.GitCommitMetadataBear import GitCommitMetadataBear\n+from bears.vcs.git.GitRevertInspectBear import GitRevertInspectBear\n+from coalib.misc.Shell import run_shell_command\n+from coalib.settings.Section import Section\n+from coalib.testing.BearTestHelper import generate_skip_decorator\n+from .GitCommitBearTest import GitCommitBearTest\n+\n+\n+@generate_skip_decorator(GitRevertInspectBear)\n+class GitRevertInspectBearTest(unittest.TestCase):\n+\n+    def run_uut(self, *args, **kwargs):\n+        \"\"\"\n+        Runs the unit-under-test (via `self.uut.run()`) and collects the\n+        messages of the yielded results as a list.\n+\n+        :param args:   Positional arguments to forward to the run function.\n+        :param kwargs: Keyword arguments to forward to the run function.\n+        :return:       A list of the message strings.\n+        \"\"\"\n+        dep_bear = GitCommitMetadataBear(None, self.section, Queue())\n+        deps_results = dict(GitCommitMetadataBear=list(dep_bear.run()))\n+        return list(result.message for result in self.uut.run(\n+            deps_results, *args, **kwargs))\n+\n+    def setUp(self):\n+        self.msg_queue = Queue()\n+        self.section = Section('')\n+        self.uut = GitRevertInspectBear(None, self.section, self.msg_queue)\n+\n+        self._old_cwd = os.getcwd()\n+        self.gitdir = mkdtemp()\n+        os.chdir(self.gitdir)\n+        GitCommitBearTest.run_git_command('init')\n+        GitCommitBearTest.run_git_command(\n+            'config', 'user.email coala@coala.io')\n+        GitCommitBearTest.run_git_command('config', 'user.name coala')\n+\n+    @staticmethod\n+    def _windows_rmtree_remove_readonly(func, path, excinfo):\n+        os.chmod(path, stat.S_IWRITE)\n+        func(path)\n+\n+    def tearDown(self):\n+        os.chdir(self._old_cwd)\n+        if platform.system() == 'Windows':\n+            onerror = self._windows_rmtree_remove_readonly\n+        else:\n+            onerror = None\n+        shutil.rmtree(self.gitdir, onerror=onerror)\n+\n+    def test_check_simple_git_commit(self):\n+        Path('testfile1.txt').touch()\n+        run_shell_command('git add testfile1.txt')\n+        run_shell_command('git commit -m \"Add testfile1\"')\n+        self.assertEqual(self.run_uut(), [])\n+\n+    def test_check_revert_commit_not_allowed(self):\n+        Path('testfile1.txt').touch()\n+        run_shell_command('git add testfile1.txt')\n+        run_shell_command('git commit -m \"Add testfile1\"')\n+        run_shell_command('git revert HEAD --no-edit')\n+        self.assertEqual(self.run_uut(\n+            allow_git_revert_commit=False),\n+            ['Revert commit is not allowed.'])\n+\n+    def test_check_git_revert_commit_with_extra_added_file(self):\n+        Path('testfile1.txt').touch()\n+        with open('testfile1.txt', 'w') as f:\n+            f.write('Some text')\n+\n+        run_shell_command('git add testfile1.txt')\n+        run_shell_command('git commit -m \"intial commit\"')\n+\n+        with open('testfile1.txt', 'w') as f:\n+            f.write('Modify text')\n+        Path('testfile2.txt').touch()\n+        run_shell_command('git add testfile1.txt')\n+        run_shell_command('git add testfile2.txt')\n+        run_shell_command('git commit -m \"reverted commit\"')\n+\n+        run_shell_command('git revert HEAD --no-edit')\n+        Path('testfile3.txt').touch()\n+        run_shell_command('git add testfile3.txt')\n+        run_shell_command('git commit --amend --allow-empty --no-edit')\n+\n+        self.assertEqual(self.run_uut(),\n+                         ['Revert commit has an added file testfile3.txt that '\n+                          'is not in reverted commit.',\n+                          'Changes in modified file testfile1.txt of '\n+                          'revert commit are not exactly revert of changes in '\n+                          'reverted commit.'])\n+\n+    def test_check_git_revert_commit_with_extra_deleted_file(self):\n+        Path('testfile1.txt').touch()\n+        with open('testfile1.txt', 'w') as f:\n+            f.write('Some text')\n+\n+        Path('testfile2.txt').touch()\n+        with open('testfile2.txt', 'w') as f:\n+            f.write('Some more text')\n+\n+        run_shell_command('git add testfile1.txt')\n+        run_shell_command('git add testfile2.txt')\n+        run_shell_command('git commit -m \"intial commit\"')\n+\n+        run_shell_command('rm testfile1.txt')\n+        run_shell_command('git rm testfile1.txt')\n+        run_shell_command('git commit -m \"delete file\"')\n+\n+        run_shell_command('git revert HEAD --no-edit')\n+        run_shell_command('rm testfile2.txt')\n+        run_shell_command('git rm testfile2.txt')\n+        run_shell_command('git commit --amend --allow-empty --no-edit')\n+\n+        self.assertEqual(self.run_uut(),\n+                         ['Revert commit has a deleted file testfile2.txt '\n+                          'that is not in reverted commit.'])\n+\n+    def test_check_git_revert_commit_with_invalid_modified_files(self):\n+        Path('testfile1.txt').touch()\n+        with open('testfile1.txt', 'w') as f:\n+            f.write('Some text')\n+\n+        Path('testfile2.txt').touch()\n+        with open('testfile2.txt', 'w') as f:\n+            f.write('Some more text')\n+\n+        run_shell_command('git add testfile1.txt')\n+        run_shell_command('git add testfile2.txt')\n+        run_shell_command('git commit -m \"intial commit\"')\n+\n+        Path('testfile1.txt').touch()\n+        with open('testfile1.txt', 'w') as f:\n+            f.write('Changed text')\n+        run_shell_command('git add testfile1.txt')\n+        run_shell_command('git commit -m \"modified file\"')\n+\n+        run_shell_command('git revert HEAD --no-edit')\n+        with open('testfile2.txt', 'w') as f:\n+            f.write('Some more changed text')\n+        run_shell_command('git add testfile2.txt')\n+        run_shell_command('git commit --amend --allow-empty --no-edit')\n+\n+        self.assertEqual(self.run_uut(),\n+                         ['Revert commit has a modified file testfile2.txt '\n+                          'that is not in reverted commit.',\n+                          'Changes in modified file testfile1.txt of '\n+                          'revert commit are not exactly revert of '\n+                          'changes in reverted commit.'])\n+\n+    def test_check_git_revert_commit_with_invalid_modified_files(self):\n+        run_shell_command('git checkout master')","author":{"login":"refeed","avatarUrl":"https://avatars1.githubusercontent.com/u/20320125?v=4","name":"Rafid Aslam"},"createdAt":"2018-08-05T07:09:42Z","lastEditedAt":null,"updatedAt":"2018-08-05T07:09:42Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODIzMjQ2Mg==","url":"https://github.com/coala/coala-bears/pull/2652#discussion_r208232462","bodyText":"Also do (like you did in line 120-121)\n                    run_shell_command(switch_branch_command)\n                    run_shell_command('git branch -D inspectrevertbranch')\n\nhere","diffHunk":"@@ -0,0 +1,126 @@\n+import re\n+\n+from difflib import SequenceMatcher\n+\n+from bears.vcs.git.GitCommitMetadataBear import GitCommitMetadataBear\n+from coalib.bears.GlobalBear import GlobalBear\n+from coalib.misc.Shell import run_shell_command\n+from coalib.results.Result import Result\n+\n+\n+class GitRevertInspectBear(GlobalBear):\n+    LANGUAGES = {'Git'}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+\n+    BEAR_DEPS = {GitCommitMetadataBear}\n+\n+    GIT_REVERT_COMMIT_RE = re.compile(\n+        r'Revert\\s\\\".+\\\"\\n\\nThis\\sreverts\\scommit\\s([0-9a-f]{40})\\.')\n+\n+    def run(self, dependency_results,\n+            allow_git_revert_commit: bool = True,\n+            minimum_similarity_ratio: float = 0.8,\n+            **kwargs):\n+        \"\"\"\n+        Inspect the HEAD commit to check if it is a\n+        git revert commit and return result accordingly.\n+\n+        :param allow_git_revert_commit:     Whether revert commit\n+                                            is allowed or not.\n+        :param minimum_similarity_ratio:    Minimum similarity ratio\n+                                            required by files in revert\n+                                            commit.\n+        \"\"\"\n+        for result in dependency_results[GitCommitMetadataBear.name]:\n+\n+            m = self.GIT_REVERT_COMMIT_RE.match(result.raw_commit_message)\n+            if not m:\n+                return\n+\n+            if not allow_git_revert_commit:\n+                yield Result(self, 'Revert commit is not allowed.')\n+                return\n+\n+            reverted_commit_sha = m.group(1)\n+            get_files_command = ('git show --pretty=\"\" --name-status %s' %\n+                                 (reverted_commit_sha))\n+\n+            all_files = run_shell_command(get_files_command)[0]\n+            files_modified_by_reverted_commit = all_files.split('\\n')\n+\n+            reverted_commit_modified_files_list = []\n+            reverted_commit_added_files_list = []\n+            reverted_commit_deleted_files_list = []\n+\n+            for line in files_modified_by_reverted_commit:\n+                pos = line.find('\\t')\n+                change = line[:pos]\n+                if change == 'M':\n+                    reverted_commit_modified_files_list.append(line[pos+1:])\n+                elif change == 'A':\n+                    reverted_commit_added_files_list.append(line[pos+1:])\n+                elif change == 'D':\n+                    reverted_commit_deleted_files_list.append(line[pos+1:])\n+\n+            for file_name in result.added_files:\n+                if file_name not in reverted_commit_deleted_files_list:\n+                    yield Result(self, 'Revert commit has an added '\n+                                       'file %s that is not in reverted '\n+                                       'commit.' % (file_name))\n+\n+            for file_name in result.deleted_files:\n+                if file_name not in reverted_commit_added_files_list:\n+                    yield Result(self, 'Revert commit has a deleted '\n+                                       'file %s that is not in reverted '\n+                                       'commit.' % (file_name))\n+\n+            for file_name in result.modified_files:\n+                if file_name in reverted_commit_modified_files_list:\n+                    head_commit_branch = run_shell_command(\n+                        'git rev-parse --abbrev-ref HEAD')[0].strip('\\n')\n+\n+                    get_revert_commit_diff_command = ('git diff HEAD^ HEAD ' +\n+                                                      file_name)\n+\n+                    revert_commit_diff = run_shell_command(\n+                        get_revert_commit_diff_command)[0]\n+\n+                    create_new_branch_command = ('git checkout -b ' +\n+                                                 'inspectrevertbranch')\n+                    run_shell_command(create_new_branch_command)\n+\n+                    create_expected_revert_commit = ('git revert %s --no-'\n+                                                     'edit' %\n+                                                     reverted_commit_sha)\n+                    expected_revert_commit, err = run_shell_command(\n+                        create_expected_revert_commit)\n+                    if err:\n+                        self.warn('Cannot compare the modified files.')\n+                        run_shell_command('git revert --abort')","author":{"login":"refeed","avatarUrl":"https://avatars1.githubusercontent.com/u/20320125?v=4","name":"Rafid Aslam"},"createdAt":"2018-08-07T13:37:26Z","lastEditedAt":null,"updatedAt":"2018-08-07T13:37:26Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODIzMjc4NA==","url":"https://github.com/coala/coala-bears/pull/2652#discussion_r208232784","bodyText":"Don't forget the base commit (HEAD^)","diffHunk":"@@ -0,0 +1,126 @@\n+import re\n+\n+from difflib import SequenceMatcher\n+\n+from bears.vcs.git.GitCommitMetadataBear import GitCommitMetadataBear\n+from coalib.bears.GlobalBear import GlobalBear\n+from coalib.misc.Shell import run_shell_command\n+from coalib.results.Result import Result\n+\n+\n+class GitRevertInspectBear(GlobalBear):\n+    LANGUAGES = {'Git'}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+\n+    BEAR_DEPS = {GitCommitMetadataBear}\n+\n+    GIT_REVERT_COMMIT_RE = re.compile(\n+        r'Revert\\s\\\".+\\\"\\n\\nThis\\sreverts\\scommit\\s([0-9a-f]{40})\\.')\n+\n+    def run(self, dependency_results,\n+            allow_git_revert_commit: bool = True,\n+            minimum_similarity_ratio: float = 0.8,\n+            **kwargs):\n+        \"\"\"\n+        Inspect the HEAD commit to check if it is a\n+        git revert commit and return result accordingly.\n+\n+        :param allow_git_revert_commit:     Whether revert commit\n+                                            is allowed or not.\n+        :param minimum_similarity_ratio:    Minimum similarity ratio\n+                                            required by files in revert\n+                                            commit.\n+        \"\"\"\n+        for result in dependency_results[GitCommitMetadataBear.name]:\n+\n+            m = self.GIT_REVERT_COMMIT_RE.match(result.raw_commit_message)\n+            if not m:\n+                return\n+\n+            if not allow_git_revert_commit:\n+                yield Result(self, 'Revert commit is not allowed.')\n+                return\n+\n+            reverted_commit_sha = m.group(1)\n+            get_files_command = ('git show --pretty=\"\" --name-status %s' %\n+                                 (reverted_commit_sha))\n+\n+            all_files = run_shell_command(get_files_command)[0]\n+            files_modified_by_reverted_commit = all_files.split('\\n')\n+\n+            reverted_commit_modified_files_list = []\n+            reverted_commit_added_files_list = []\n+            reverted_commit_deleted_files_list = []\n+\n+            for line in files_modified_by_reverted_commit:\n+                pos = line.find('\\t')\n+                change = line[:pos]\n+                if change == 'M':\n+                    reverted_commit_modified_files_list.append(line[pos+1:])\n+                elif change == 'A':\n+                    reverted_commit_added_files_list.append(line[pos+1:])\n+                elif change == 'D':\n+                    reverted_commit_deleted_files_list.append(line[pos+1:])\n+\n+            for file_name in result.added_files:\n+                if file_name not in reverted_commit_deleted_files_list:\n+                    yield Result(self, 'Revert commit has an added '\n+                                       'file %s that is not in reverted '\n+                                       'commit.' % (file_name))\n+\n+            for file_name in result.deleted_files:\n+                if file_name not in reverted_commit_added_files_list:\n+                    yield Result(self, 'Revert commit has a deleted '\n+                                       'file %s that is not in reverted '\n+                                       'commit.' % (file_name))\n+\n+            for file_name in result.modified_files:\n+                if file_name in reverted_commit_modified_files_list:\n+                    head_commit_branch = run_shell_command(\n+                        'git rev-parse --abbrev-ref HEAD')[0].strip('\\n')\n+\n+                    get_revert_commit_diff_command = ('git diff HEAD^ HEAD ' +\n+                                                      file_name)\n+\n+                    revert_commit_diff = run_shell_command(\n+                        get_revert_commit_diff_command)[0]\n+\n+                    create_new_branch_command = ('git checkout -b ' +\n+                                                 'inspectrevertbranch')","author":{"login":"refeed","avatarUrl":"https://avatars1.githubusercontent.com/u/20320125?v=4","name":"Rafid Aslam"},"createdAt":"2018-08-07T13:38:15Z","lastEditedAt":null,"updatedAt":"2018-08-07T13:38:15Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODIzMzU1Nw==","url":"https://github.com/coala/coala-bears/pull/2652#discussion_r208233557","bodyText":"Unused variable expected_revert_commit","diffHunk":"@@ -0,0 +1,126 @@\n+import re\n+\n+from difflib import SequenceMatcher\n+\n+from bears.vcs.git.GitCommitMetadataBear import GitCommitMetadataBear\n+from coalib.bears.GlobalBear import GlobalBear\n+from coalib.misc.Shell import run_shell_command\n+from coalib.results.Result import Result\n+\n+\n+class GitRevertInspectBear(GlobalBear):\n+    LANGUAGES = {'Git'}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+\n+    BEAR_DEPS = {GitCommitMetadataBear}\n+\n+    GIT_REVERT_COMMIT_RE = re.compile(\n+        r'Revert\\s\\\".+\\\"\\n\\nThis\\sreverts\\scommit\\s([0-9a-f]{40})\\.')\n+\n+    def run(self, dependency_results,\n+            allow_git_revert_commit: bool = True,\n+            minimum_similarity_ratio: float = 0.8,\n+            **kwargs):\n+        \"\"\"\n+        Inspect the HEAD commit to check if it is a\n+        git revert commit and return result accordingly.\n+\n+        :param allow_git_revert_commit:     Whether revert commit\n+                                            is allowed or not.\n+        :param minimum_similarity_ratio:    Minimum similarity ratio\n+                                            required by files in revert\n+                                            commit.\n+        \"\"\"\n+        for result in dependency_results[GitCommitMetadataBear.name]:\n+\n+            m = self.GIT_REVERT_COMMIT_RE.match(result.raw_commit_message)\n+            if not m:\n+                return\n+\n+            if not allow_git_revert_commit:\n+                yield Result(self, 'Revert commit is not allowed.')\n+                return\n+\n+            reverted_commit_sha = m.group(1)\n+            get_files_command = ('git show --pretty=\"\" --name-status %s' %\n+                                 (reverted_commit_sha))\n+\n+            all_files = run_shell_command(get_files_command)[0]\n+            files_modified_by_reverted_commit = all_files.split('\\n')\n+\n+            reverted_commit_modified_files_list = []\n+            reverted_commit_added_files_list = []\n+            reverted_commit_deleted_files_list = []\n+\n+            for line in files_modified_by_reverted_commit:\n+                pos = line.find('\\t')\n+                change = line[:pos]\n+                if change == 'M':\n+                    reverted_commit_modified_files_list.append(line[pos+1:])\n+                elif change == 'A':\n+                    reverted_commit_added_files_list.append(line[pos+1:])\n+                elif change == 'D':\n+                    reverted_commit_deleted_files_list.append(line[pos+1:])\n+\n+            for file_name in result.added_files:\n+                if file_name not in reverted_commit_deleted_files_list:\n+                    yield Result(self, 'Revert commit has an added '\n+                                       'file %s that is not in reverted '\n+                                       'commit.' % (file_name))\n+\n+            for file_name in result.deleted_files:\n+                if file_name not in reverted_commit_added_files_list:\n+                    yield Result(self, 'Revert commit has a deleted '\n+                                       'file %s that is not in reverted '\n+                                       'commit.' % (file_name))\n+\n+            for file_name in result.modified_files:\n+                if file_name in reverted_commit_modified_files_list:\n+                    head_commit_branch = run_shell_command(\n+                        'git rev-parse --abbrev-ref HEAD')[0].strip('\\n')\n+\n+                    get_revert_commit_diff_command = ('git diff HEAD^ HEAD ' +\n+                                                      file_name)\n+\n+                    revert_commit_diff = run_shell_command(\n+                        get_revert_commit_diff_command)[0]\n+\n+                    create_new_branch_command = ('git checkout -b ' +\n+                                                 'inspectrevertbranch')\n+                    run_shell_command(create_new_branch_command)\n+\n+                    create_expected_revert_commit = ('git revert %s --no-'\n+                                                     'edit' %\n+                                                     reverted_commit_sha)\n+                    expected_revert_commit, err = run_shell_command(","author":{"login":"refeed","avatarUrl":"https://avatars1.githubusercontent.com/u/20320125?v=4","name":"Rafid Aslam"},"createdAt":"2018-08-07T13:40:04Z","lastEditedAt":"2018-08-07T13:51:42Z","updatedAt":"2018-08-07T13:51:42Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODIzNDM4Mg==","url":"https://github.com/coala/coala-bears/pull/2652#discussion_r208234382","bodyText":"I think we also want to use isjunk parameter here (see the documentation of difflib.SequenceMatcher).\nWe want to mark the line that are not starting with + and - sign as junk, since we just care about the changes\nisjunk function takes sequence of chars not sequence of lines","diffHunk":"@@ -0,0 +1,126 @@\n+import re\n+\n+from difflib import SequenceMatcher\n+\n+from bears.vcs.git.GitCommitMetadataBear import GitCommitMetadataBear\n+from coalib.bears.GlobalBear import GlobalBear\n+from coalib.misc.Shell import run_shell_command\n+from coalib.results.Result import Result\n+\n+\n+class GitRevertInspectBear(GlobalBear):\n+    LANGUAGES = {'Git'}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+\n+    BEAR_DEPS = {GitCommitMetadataBear}\n+\n+    GIT_REVERT_COMMIT_RE = re.compile(\n+        r'Revert\\s\\\".+\\\"\\n\\nThis\\sreverts\\scommit\\s([0-9a-f]{40})\\.')\n+\n+    def run(self, dependency_results,\n+            allow_git_revert_commit: bool = True,\n+            minimum_similarity_ratio: float = 0.8,\n+            **kwargs):\n+        \"\"\"\n+        Inspect the HEAD commit to check if it is a\n+        git revert commit and return result accordingly.\n+\n+        :param allow_git_revert_commit:     Whether revert commit\n+                                            is allowed or not.\n+        :param minimum_similarity_ratio:    Minimum similarity ratio\n+                                            required by files in revert\n+                                            commit.\n+        \"\"\"\n+        for result in dependency_results[GitCommitMetadataBear.name]:\n+\n+            m = self.GIT_REVERT_COMMIT_RE.match(result.raw_commit_message)\n+            if not m:\n+                return\n+\n+            if not allow_git_revert_commit:\n+                yield Result(self, 'Revert commit is not allowed.')\n+                return\n+\n+            reverted_commit_sha = m.group(1)\n+            get_files_command = ('git show --pretty=\"\" --name-status %s' %\n+                                 (reverted_commit_sha))\n+\n+            all_files = run_shell_command(get_files_command)[0]\n+            files_modified_by_reverted_commit = all_files.split('\\n')\n+\n+            reverted_commit_modified_files_list = []\n+            reverted_commit_added_files_list = []\n+            reverted_commit_deleted_files_list = []\n+\n+            for line in files_modified_by_reverted_commit:\n+                pos = line.find('\\t')\n+                change = line[:pos]\n+                if change == 'M':\n+                    reverted_commit_modified_files_list.append(line[pos+1:])\n+                elif change == 'A':\n+                    reverted_commit_added_files_list.append(line[pos+1:])\n+                elif change == 'D':\n+                    reverted_commit_deleted_files_list.append(line[pos+1:])\n+\n+            for file_name in result.added_files:\n+                if file_name not in reverted_commit_deleted_files_list:\n+                    yield Result(self, 'Revert commit has an added '\n+                                       'file %s that is not in reverted '\n+                                       'commit.' % (file_name))\n+\n+            for file_name in result.deleted_files:\n+                if file_name not in reverted_commit_added_files_list:\n+                    yield Result(self, 'Revert commit has a deleted '\n+                                       'file %s that is not in reverted '\n+                                       'commit.' % (file_name))\n+\n+            for file_name in result.modified_files:\n+                if file_name in reverted_commit_modified_files_list:\n+                    head_commit_branch = run_shell_command(\n+                        'git rev-parse --abbrev-ref HEAD')[0].strip('\\n')\n+\n+                    get_revert_commit_diff_command = ('git diff HEAD^ HEAD ' +\n+                                                      file_name)\n+\n+                    revert_commit_diff = run_shell_command(\n+                        get_revert_commit_diff_command)[0]\n+\n+                    create_new_branch_command = ('git checkout -b ' +\n+                                                 'inspectrevertbranch')\n+                    run_shell_command(create_new_branch_command)\n+\n+                    create_expected_revert_commit = ('git revert %s --no-'\n+                                                     'edit' %\n+                                                     reverted_commit_sha)\n+                    expected_revert_commit, err = run_shell_command(\n+                        create_expected_revert_commit)\n+                    if err:\n+                        self.warn('Cannot compare the modified files.')\n+                        run_shell_command('git revert --abort')\n+                        return\n+\n+                    get_expected_commit_diff_command = ('git diff HEAD^ '\n+                                                        'HEAD ' + file_name)\n+                    expected_revert_commit_diff = run_shell_command(\n+                        get_expected_commit_diff_command)[0]\n+\n+                    matcher = SequenceMatcher(\n+                        None, revert_commit_diff, expected_revert_commit_diff)","author":{"login":"refeed","avatarUrl":"https://avatars1.githubusercontent.com/u/20320125?v=4","name":"Rafid Aslam"},"createdAt":"2018-08-07T13:42:12Z","lastEditedAt":"2018-08-07T14:04:33Z","updatedAt":"2018-08-07T14:04:33Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODIzNTA4MQ==","url":"https://github.com/coala/coala-bears/pull/2652#discussion_r208235081","bodyText":"I think this function is growing too big because of this check, move this check into a new function (the modified file similarity check)","diffHunk":"@@ -0,0 +1,126 @@\n+import re\n+\n+from difflib import SequenceMatcher\n+\n+from bears.vcs.git.GitCommitMetadataBear import GitCommitMetadataBear\n+from coalib.bears.GlobalBear import GlobalBear\n+from coalib.misc.Shell import run_shell_command\n+from coalib.results.Result import Result\n+\n+\n+class GitRevertInspectBear(GlobalBear):\n+    LANGUAGES = {'Git'}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+\n+    BEAR_DEPS = {GitCommitMetadataBear}\n+\n+    GIT_REVERT_COMMIT_RE = re.compile(\n+        r'Revert\\s\\\".+\\\"\\n\\nThis\\sreverts\\scommit\\s([0-9a-f]{40})\\.')\n+\n+    def run(self, dependency_results,\n+            allow_git_revert_commit: bool = True,\n+            minimum_similarity_ratio: float = 0.8,\n+            **kwargs):\n+        \"\"\"\n+        Inspect the HEAD commit to check if it is a\n+        git revert commit and return result accordingly.\n+\n+        :param allow_git_revert_commit:     Whether revert commit\n+                                            is allowed or not.\n+        :param minimum_similarity_ratio:    Minimum similarity ratio\n+                                            required by files in revert\n+                                            commit.\n+        \"\"\"\n+        for result in dependency_results[GitCommitMetadataBear.name]:\n+\n+            m = self.GIT_REVERT_COMMIT_RE.match(result.raw_commit_message)\n+            if not m:\n+                return\n+\n+            if not allow_git_revert_commit:\n+                yield Result(self, 'Revert commit is not allowed.')\n+                return\n+\n+            reverted_commit_sha = m.group(1)\n+            get_files_command = ('git show --pretty=\"\" --name-status %s' %\n+                                 (reverted_commit_sha))\n+\n+            all_files = run_shell_command(get_files_command)[0]\n+            files_modified_by_reverted_commit = all_files.split('\\n')\n+\n+            reverted_commit_modified_files_list = []\n+            reverted_commit_added_files_list = []\n+            reverted_commit_deleted_files_list = []\n+\n+            for line in files_modified_by_reverted_commit:\n+                pos = line.find('\\t')\n+                change = line[:pos]\n+                if change == 'M':\n+                    reverted_commit_modified_files_list.append(line[pos+1:])\n+                elif change == 'A':\n+                    reverted_commit_added_files_list.append(line[pos+1:])\n+                elif change == 'D':\n+                    reverted_commit_deleted_files_list.append(line[pos+1:])\n+\n+            for file_name in result.added_files:\n+                if file_name not in reverted_commit_deleted_files_list:\n+                    yield Result(self, 'Revert commit has an added '\n+                                       'file %s that is not in reverted '\n+                                       'commit.' % (file_name))\n+\n+            for file_name in result.deleted_files:\n+                if file_name not in reverted_commit_added_files_list:\n+                    yield Result(self, 'Revert commit has a deleted '\n+                                       'file %s that is not in reverted '\n+                                       'commit.' % (file_name))\n+\n+            for file_name in result.modified_files:\n+                if file_name in reverted_commit_modified_files_list:\n+                    head_commit_branch = run_shell_command(","author":{"login":"refeed","avatarUrl":"https://avatars1.githubusercontent.com/u/20320125?v=4","name":"Rafid Aslam"},"createdAt":"2018-08-07T13:44:04Z","lastEditedAt":null,"updatedAt":"2018-08-07T13:44:04Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODI1NzE2NQ==","url":"https://github.com/coala/coala-bears/pull/2652#discussion_r208257165","bodyText":"run_shell_command won't raise an exception if there's  a content in stderr, use _, err = run_shell_command(... instead","diffHunk":"@@ -0,0 +1,136 @@\n+import re\n+\n+from difflib import SequenceMatcher\n+\n+from bears.vcs.git.GitCommitMetadataBear import GitCommitMetadataBear\n+from coalib.bears.GlobalBear import GlobalBear\n+from coalib.misc.Shell import run_shell_command\n+from coalib.results.Result import Result\n+\n+\n+class GitRevertInspectBear(GlobalBear):\n+    LANGUAGES = {'Git'}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+\n+    BEAR_DEPS = {GitCommitMetadataBear}\n+\n+    GIT_REVERT_COMMIT_RE = re.compile(\n+        r'Revert\\s\\\".+\\\"\\n\\nThis\\sreverts\\scommit\\s([0-9a-f]{40})\\.')\n+\n+    def check_modified_file_similarity(self, file_name, reverted_commit_sha):\n+        head_commit_branch = run_shell_command(\n+            'git rev-parse --abbrev-ref HEAD')[0].strip('\\n')\n+\n+        switch_branch_command = ('git checkout ' +\n+                                 head_commit_branch)\n+\n+        get_revert_commit_diff_command = ('git diff HEAD^ HEAD ' +\n+                                          file_name)\n+\n+        revert_commit_diff = run_shell_command(\n+            get_revert_commit_diff_command)[0]\n+\n+        create_new_branch_command = (\n+            'git checkout -b inspectrevertbranch HEAD^')\n+        run_shell_command(create_new_branch_command)\n+\n+        create_expected_revert_commit = ('git revert %s --no-'\n+                                         'edit' %\n+                                         reverted_commit_sha)\n+        try:\n+            run_shell_command(create_expected_revert_commit)","author":{"login":"refeed","avatarUrl":"https://avatars1.githubusercontent.com/u/20320125?v=4","name":"Rafid Aslam"},"createdAt":"2018-08-07T14:37:57Z","lastEditedAt":null,"updatedAt":"2018-08-07T14:37:57Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODI5NjA0Mg==","url":"https://github.com/coala/coala-bears/pull/2652#discussion_r208296042","bodyText":"Add a docstring that explains about what this function does and the arguments","diffHunk":"@@ -0,0 +1,135 @@\n+import re\n+\n+from difflib import SequenceMatcher\n+\n+from bears.vcs.git.GitCommitMetadataBear import GitCommitMetadataBear\n+from coalib.bears.GlobalBear import GlobalBear\n+from coalib.misc.Shell import run_shell_command\n+from coalib.results.Result import Result\n+\n+\n+class GitRevertInspectBear(GlobalBear):\n+    LANGUAGES = {'Git'}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+\n+    BEAR_DEPS = {GitCommitMetadataBear}\n+\n+    GIT_REVERT_COMMIT_RE = re.compile(\n+        r'Revert\\s\\\".+\\\"\\n\\nThis\\sreverts\\scommit\\s([0-9a-f]{40})\\.')\n+\n+    def check_modified_file_similarity(self, file_name, reverted_commit_sha):","author":{"login":"refeed","avatarUrl":"https://avatars1.githubusercontent.com/u/20320125?v=4","name":"Rafid Aslam"},"createdAt":"2018-08-07T16:18:24Z","lastEditedAt":null,"updatedAt":"2018-08-07T16:18:24Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODI5NzQ5Mg==","url":"https://github.com/coala/coala-bears/pull/2652#discussion_r208297492","bodyText":"I think we might also want to rename this function name to get_modified_file_revert_commit_similarity","diffHunk":"@@ -0,0 +1,135 @@\n+import re\n+\n+from difflib import SequenceMatcher\n+\n+from bears.vcs.git.GitCommitMetadataBear import GitCommitMetadataBear\n+from coalib.bears.GlobalBear import GlobalBear\n+from coalib.misc.Shell import run_shell_command\n+from coalib.results.Result import Result\n+\n+\n+class GitRevertInspectBear(GlobalBear):\n+    LANGUAGES = {'Git'}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+\n+    BEAR_DEPS = {GitCommitMetadataBear}\n+\n+    GIT_REVERT_COMMIT_RE = re.compile(\n+        r'Revert\\s\\\".+\\\"\\n\\nThis\\sreverts\\scommit\\s([0-9a-f]{40})\\.')\n+\n+    def check_modified_file_similarity(self, file_name, reverted_commit_sha):","author":{"login":"refeed","avatarUrl":"https://avatars1.githubusercontent.com/u/20320125?v=4","name":"Rafid Aslam"},"createdAt":"2018-08-07T16:22:54Z","lastEditedAt":null,"updatedAt":"2018-08-07T16:22:54Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODI5NzYxMw==","url":"https://github.com/coala/coala-bears/pull/2652#discussion_r208297613","bodyText":"if similarity_ratio is None: return","diffHunk":"@@ -0,0 +1,135 @@\n+import re\n+\n+from difflib import SequenceMatcher\n+\n+from bears.vcs.git.GitCommitMetadataBear import GitCommitMetadataBear\n+from coalib.bears.GlobalBear import GlobalBear\n+from coalib.misc.Shell import run_shell_command\n+from coalib.results.Result import Result\n+\n+\n+class GitRevertInspectBear(GlobalBear):\n+    LANGUAGES = {'Git'}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+\n+    BEAR_DEPS = {GitCommitMetadataBear}\n+\n+    GIT_REVERT_COMMIT_RE = re.compile(\n+        r'Revert\\s\\\".+\\\"\\n\\nThis\\sreverts\\scommit\\s([0-9a-f]{40})\\.')\n+\n+    def check_modified_file_similarity(self, file_name, reverted_commit_sha):\n+        head_commit_branch = run_shell_command(\n+            'git rev-parse --abbrev-ref HEAD')[0].strip('\\n')\n+\n+        switch_branch_command = ('git checkout ' +\n+                                 head_commit_branch)\n+\n+        get_revert_commit_diff_command = ('git diff HEAD^ HEAD ' +\n+                                          file_name)\n+\n+        revert_commit_diff = run_shell_command(\n+            get_revert_commit_diff_command)[0]\n+\n+        create_new_branch_command = (\n+            'git checkout -b inspectrevertbranch HEAD^')\n+        run_shell_command(create_new_branch_command)\n+\n+        create_expected_revert_commit = ('git revert %s --no-'\n+                                         'edit' %\n+                                         reverted_commit_sha)\n+        _, err = run_shell_command(create_expected_revert_commit)\n+        if err:\n+            self.warn('Cannot compare the modified files.')\n+            run_shell_command('git revert --abort')\n+            run_shell_command(switch_branch_command)\n+            run_shell_command('git branch -D inspectrevertbranch')\n+            return\n+\n+        get_expected_commit_diff_command = ('git diff HEAD^ '\n+                                            'HEAD ' + file_name)\n+        expected_revert_commit_diff = run_shell_command(\n+            get_expected_commit_diff_command)[0]\n+\n+        matcher = SequenceMatcher(\n+            None, revert_commit_diff, expected_revert_commit_diff)\n+        similarity_ratio = matcher.real_quick_ratio()\n+\n+        run_shell_command(switch_branch_command)\n+        run_shell_command('git branch -D inspectrevertbranch')\n+\n+        return similarity_ratio\n+\n+    def run(self, dependency_results,\n+            allow_git_revert_commit: bool = True,\n+            minimum_similarity_ratio: float = 0.8,\n+            **kwargs):\n+        \"\"\"\n+        Inspect the HEAD commit to check if it is a\n+        git revert commit and return result accordingly.\n+\n+        :param allow_git_revert_commit:     Whether revert commit\n+                                            is allowed or not.\n+        :param minimum_similarity_ratio:    Minimum similarity ratio\n+                                            required by files in revert\n+                                            commit.\n+        \"\"\"\n+        for result in dependency_results[GitCommitMetadataBear.name]:\n+\n+            m = self.GIT_REVERT_COMMIT_RE.match(result.raw_commit_message)\n+            if not m:\n+                return\n+\n+            if not allow_git_revert_commit:\n+                yield Result(self, 'Revert commit is not allowed.')\n+                return\n+\n+            reverted_commit_sha = m.group(1)\n+            get_files_command = ('git show --pretty=\"\" --name-status %s' %\n+                                 (reverted_commit_sha))\n+\n+            all_files = run_shell_command(get_files_command)[0]\n+            files_modified_by_reverted_commit = all_files.split('\\n')\n+\n+            reverted_commit_modified_files_list = []\n+            reverted_commit_added_files_list = []\n+            reverted_commit_deleted_files_list = []\n+\n+            for line in files_modified_by_reverted_commit:\n+                pos = line.find('\\t')\n+                change = line[:pos]\n+                if change == 'M':\n+                    reverted_commit_modified_files_list.append(line[pos+1:])\n+                elif change == 'A':\n+                    reverted_commit_added_files_list.append(line[pos+1:])\n+                elif change == 'D':\n+                    reverted_commit_deleted_files_list.append(line[pos+1:])\n+\n+            for file_name in result.added_files:\n+                if file_name not in reverted_commit_deleted_files_list:\n+                    yield Result(self, 'Revert commit has an added '\n+                                       'file %s that is not in reverted '\n+                                       'commit.' % (file_name))\n+\n+            for file_name in result.deleted_files:\n+                if file_name not in reverted_commit_added_files_list:\n+                    yield Result(self, 'Revert commit has a deleted '\n+                                       'file %s that is not in reverted '\n+                                       'commit.' % (file_name))\n+\n+            for file_name in result.modified_files:\n+                if file_name in reverted_commit_modified_files_list:\n+                    similarity_ratio = self.check_modified_file_similarity(\n+                        file_name, reverted_commit_sha)","author":{"login":"refeed","avatarUrl":"https://avatars1.githubusercontent.com/u/20320125?v=4","name":"Rafid Aslam"},"createdAt":"2018-08-07T16:23:17Z","lastEditedAt":null,"updatedAt":"2018-08-07T16:23:17Z"}]}}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1533469450000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/pull/2654","number":2654,"title":"PEP8Bear: Migrate bear to aspects","body":"This migrates PEP8Bear to its respective\naspects and tastes.\nCloses #2653\n\nFor short term contributors: we understand that getting your commits well\ndefined like we require is a hard task and takes some learning. If you\nlook to help without wanting to contribute long term there's no need\nfor you to learn this. Just drop us a message and we'll take care of brushing\nup your stuff for merge!\nChecklist\n\n I read the commit guidelines and I've followed\nthem.\n I ran coala over my code locally. (All commits have to pass\nindividually. It is not sufficient to have \"fixup commits\" on your PR,\nour bot will still report the issues for the previous commit.) You will\nlikely receive a lot of bot comments and build failures if coala does not\npass on every single commit!\n\nAfter you submit your pull request, DO NOT click the 'Update Branch' button.\nWhen asked for a rebase, consult coala.io/rebase\ninstead.\nPlease consider helping us by reviewing other peoples pull requests as well:\n\npick up any PR at https://coala.io/review\nreview it (check https://coala.io/reviewing for more info)\nif you are sure that it needs work, use corobo mark wip <URL> to get it out\nof the review queue.\n\nThe more you review, the more your score will grow at coala.io and we will\nreview your PRs faster!","comments":1,"createdAt":"2018-08-05T05:34:25Z","updatedAt":"2018-08-05T11:44:10Z","closedAt":null,"state":"open","user":{"login":"pareksha","avatarUrl":"https://avatars1.githubusercontent.com/u/32385407?v=4"},"owner":{"login":"pareksha","avatarUrl":"https://avatars1.githubusercontent.com/u/32385407?v=4"},"labels":[{"name":"area/aspects","color":"000000"},{"name":"size/XS","color":"00DE0F"},{"name":"status/blocked","color":"e11d21"}],"pullRequest":{"htmlUrl":"https://github.com/coala/coala-bears/pull/2654","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQxMDUxNDYxNA==","url":"https://github.com/coala/coala-bears/pull/2654#issuecomment-410514614","bodyText":"Blocked by #2461","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-08-05T11:44:10Z","lastEditedAt":null,"updatedAt":"2018-08-05T11:44:10Z"}]}}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1533565405000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/pull/2655","number":2655,"title":"ClangBear.py: Rename variable range","body":"Variable name range renamed to clang_range.\nFixes #2585\n\nFor short term contributors: we understand that getting your commits well\ndefined like we require is a hard task and takes some learning. If you\nlook to help without wanting to contribute long term there's no need\nfor you to learn this. Just drop us a message and we'll take care of brushing\nup your stuff for merge!\nChecklist\n\n I read the commit guidelines and I've followed\nthem.\n I ran coala over my code locally. (All commits have to pass\nindividually. It is not sufficient to have \"fixup commits\" on your PR,\nour bot will still report the issues for the previous commit.) You will\nlikely receive a lot of bot comments and build failures if coala does not\npass on every single commit!\n\nAfter you submit your pull request, DO NOT click the 'Update Branch' button.\nWhen asked for a rebase, consult coala.io/rebase\ninstead.\nPlease consider helping us by reviewing other peoples pull requests as well:\n\npick up any PR at https://coala.io/review\nreview it (check https://coala.io/reviewing for more info)\nif you are sure that it needs work, use corobo mark wip <URL> to get it out\nof the review queue.\n\nThe more you review, the more your score will grow at coala.io and we will\nreview your PRs faster!","comments":9,"createdAt":"2018-08-05T06:08:37Z","updatedAt":"2018-08-06T14:23:25Z","closedAt":"2018-08-05T12:50:01Z","state":"merged","user":{"login":"Karna98","avatarUrl":"https://avatars2.githubusercontent.com/u/32186983?v=4"},"owner":{"login":"Karna98","avatarUrl":"https://avatars2.githubusercontent.com/u/32186983?v=4"},"assignee":{"login":"Karna98","avatarUrl":"https://avatars2.githubusercontent.com/u/32186983?v=4"},"labels":[{"name":"difficulty/newcomer","color":"65C8FF"},{"name":"needs rebase","color":"f4cd69"},{"name":"process/approved","color":"009800"},{"name":"size/XS","color":"00DE0F"},{"name":"type/codestyle","color":"bfd4f2"}],"pullRequest":{"htmlUrl":"https://github.com/coala/coala-bears/pull/2655","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQxMDUwNzQ3Mg==","url":"https://github.com/coala/coala-bears/pull/2655#issuecomment-410507472","bodyText":"Needs rebase","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-08-05T09:30:05Z","lastEditedAt":null,"updatedAt":"2018-08-05T09:30:05Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQxMDUxMjk3OQ==","url":"https://github.com/coala/coala-bears/pull/2655#issuecomment-410512979","bodyText":"reack a2be308","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-08-05T11:11:19Z","lastEditedAt":null,"updatedAt":"2018-08-05T11:11:19Z"}]}}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1533646619000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/pull/2657","number":2657,"title":"PycodestyleBear: Migrate bear to aspects","body":"This migrates PycodestyleBear to its respective\naspects and tastes.\nCloses #2656\n\nFor short term contributors: we understand that getting your commits well\ndefined like we require is a hard task and takes some learning. If you\nlook to help without wanting to contribute long term there's no need\nfor you to learn this. Just drop us a message and we'll take care of brushing\nup your stuff for merge!\nChecklist\n\n I read the commit guidelines and I've followed\nthem.\n I ran coala over my code locally. (All commits have to pass\nindividually. It is not sufficient to have \"fixup commits\" on your PR,\nour bot will still report the issues for the previous commit.) You will\nlikely receive a lot of bot comments and build failures if coala does not\npass on every single commit!\n\nAfter you submit your pull request, DO NOT click the 'Update Branch' button.\nWhen asked for a rebase, consult coala.io/rebase\ninstead.\nPlease consider helping us by reviewing other peoples pull requests as well:\n\npick up any PR at https://coala.io/review\nreview it (check https://coala.io/reviewing for more info)\nif you are sure that it needs work, use corobo mark wip <URL> to get it out\nof the review queue.\n\nThe more you review, the more your score will grow at coala.io and we will\nreview your PRs faster!","comments":4,"createdAt":"2018-08-05T18:20:55Z","updatedAt":"2018-08-07T12:56:59Z","closedAt":"2018-08-07T12:56:59Z","state":"merged","user":{"login":"pareksha","avatarUrl":"https://avatars1.githubusercontent.com/u/32385407?v=4"},"owner":{"login":"pareksha","avatarUrl":"https://avatars1.githubusercontent.com/u/32385407?v=4"},"assignee":{"login":"pareksha","avatarUrl":"https://avatars1.githubusercontent.com/u/32385407?v=4"},"labels":[{"name":"area/aspects","color":"000000"},{"name":"size/XS","color":"00DE0F"}],"pullRequest":{"htmlUrl":"https://github.com/coala/coala-bears/pull/2657","comments":[{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzc2MDE2NQ==","url":"https://github.com/coala/coala-bears/pull/2657#discussion_r207760165","bodyText":"great. removing this is necessary, because the decorator uses self.section.aspects , and so self is needed.","diffHunk":"@@ -21,9 +23,14 @@ class PycodestyleBear:\n     LICENSE = 'AGPL-3.0'\n     CAN_DETECT = {'Formatting'}\n \n-    @staticmethod","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNzQ4MTAyMw==","createdAt":"2018-08-06T06:12:38Z","content":"THUMBS_UP","user":{"login":"pareksha","name":"Pareksha Manchanda"}}],"createdAt":"2018-08-06T02:03:24Z","lastEditedAt":null,"updatedAt":"2018-08-06T02:03:24Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzc2MDU2Mg==","url":"https://github.com/coala/coala-bears/pull/2657#discussion_r207760562","bodyText":"We need to verify that the Result object returned uses the aspect.\n(I suspect that it doesnt.)\nIf it doesnt, create a bug against @linter because its default run needs to use aspects for the Result, and map_setting_to_aspect may also need to be improved in the process.\nAnd we may just merge this as-is if the bug is in Linter.\nIf the Result objects correctly use aspects, then this test class needs to be a more detailed test class ... which checks that the Result object reports the correct aspect.","diffHunk":"@@ -63,3 +69,22 @@ def hello():\n     valid_files=(file_with_very_long_line,),\n     invalid_files=(),\n     settings={'max_line_length': 0})\n+\n+PycodestyleBearAspectsTest = verify_local_bear(","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-08-06T02:09:06Z","lastEditedAt":null,"updatedAt":"2018-08-06T02:09:06Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzc5MTYwOQ==","url":"https://github.com/coala/coala-bears/pull/2657#discussion_r207791609","bodyText":"Yes, it doesn't use the aspect.\nWe need to modify @linter to use the aspect just as the Result module does.\nI have created an issue coala/coala#5694","diffHunk":"@@ -63,3 +69,22 @@ def hello():\n     valid_files=(file_with_very_long_line,),\n     invalid_files=(),\n     settings={'max_line_length': 0})\n+\n+PycodestyleBearAspectsTest = verify_local_bear(","author":{"login":"pareksha","avatarUrl":"https://avatars1.githubusercontent.com/u/32385407?v=4","name":"Pareksha Manchanda"},"reactions":[],"createdAt":"2018-08-06T07:08:33Z","lastEditedAt":"2018-08-06T07:45:50Z","updatedAt":"2018-08-06T07:45:50Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzgwMDQxNw==","url":"https://github.com/coala/coala-bears/pull/2657#discussion_r207800417","bodyText":"Ya, I expected so.  Thanks.\nWhat you could try is add a run method to this bear, and it would do\nfor result in super().run(*args, **kwargs):\n   if (max_line_length is from aspect) and (result is line length problem):\n        result.aspect = LineLength('Python').max_line_length","diffHunk":"@@ -63,3 +69,22 @@ def hello():\n     valid_files=(file_with_very_long_line,),\n     invalid_files=(),\n     settings={'max_line_length': 0})\n+\n+PycodestyleBearAspectsTest = verify_local_bear(","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-08-06T07:49:45Z","lastEditedAt":null,"updatedAt":"2018-08-06T07:49:45Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzg2Mzk1Ng==","url":"https://github.com/coala/coala-bears/pull/2657#discussion_r207863956","bodyText":"is it possible / sensible to set this to the taste for LineLenght , if the aspect was used to determine the max line length?","diffHunk":"@@ -61,3 +70,24 @@ def create_arguments(\n         arguments.append(filename)\n \n         return arguments\n+\n+    def process_output(\n+            self,\n+            output,\n+            filename,\n+            file,\n+            ):\n+        output_regex = (r'(?P<line>\\d+) (?P<column>\\d+) '\n+                        r'(?P<message>(?P<origin>\\S+).*)')\n+        result = re.match(output_regex, output)\n+        if not result:\n+            return\n+        line, column, message, origin = result.groups()\n+        yield Result.from_values(\n+            origin=self,\n+            message=message,\n+            file=filename,\n+            line=int(line),\n+            column=int(column),\n+            aspect=Formatting('py'),","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-08-06T11:51:05Z","lastEditedAt":null,"updatedAt":"2018-08-06T11:51:05Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzg4MjE2Nw==","url":"https://github.com/coala/coala-bears/pull/2657#discussion_r207882167","bodyText":"See the docstring for Result.aspect.\n\nAn aspectclass instance which this result is associated to.\nNote that this should be a leaf of the aspect tree!\n\nFormatting('py') is not the leaf of the aspect tree.","diffHunk":"@@ -61,3 +70,24 @@ def create_arguments(\n         arguments.append(filename)\n \n         return arguments\n+\n+    def process_output(\n+            self,\n+            output,\n+            filename,\n+            file,\n+            ):\n+        output_regex = (r'(?P<line>\\d+) (?P<column>\\d+) '\n+                        r'(?P<message>(?P<origin>\\S+).*)')\n+        result = re.match(output_regex, output)\n+        if not result:\n+            return\n+        line, column, message, origin = result.groups()\n+        yield Result.from_values(\n+            origin=self,\n+            message=message,\n+            file=filename,\n+            line=int(line),\n+            column=int(column),\n+            aspect=Formatting('py'),","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-08-06T13:00:02Z","lastEditedAt":null,"updatedAt":"2018-08-06T13:00:02Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzg4Mjc4OQ==","url":"https://github.com/coala/coala-bears/pull/2657#discussion_r207882789","bodyText":"Oh, didn't see that one, I'll update it to LineLength","diffHunk":"@@ -61,3 +70,24 @@ def create_arguments(\n         arguments.append(filename)\n \n         return arguments\n+\n+    def process_output(\n+            self,\n+            output,\n+            filename,\n+            file,\n+            ):\n+        output_regex = (r'(?P<line>\\d+) (?P<column>\\d+) '\n+                        r'(?P<message>(?P<origin>\\S+).*)')\n+        result = re.match(output_regex, output)\n+        if not result:\n+            return\n+        line, column, message, origin = result.groups()\n+        yield Result.from_values(\n+            origin=self,\n+            message=message,\n+            file=filename,\n+            line=int(line),\n+            column=int(column),\n+            aspect=Formatting('py'),","author":{"login":"pareksha","avatarUrl":"https://avatars1.githubusercontent.com/u/32385407?v=4","name":"Pareksha Manchanda"},"reactions":[],"createdAt":"2018-08-06T13:02:19Z","lastEditedAt":null,"updatedAt":"2018-08-06T13:02:19Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzkyMDM2OQ==","url":"https://github.com/coala/coala-bears/pull/2657#discussion_r207920369","bodyText":"not all pycodestyle errors are LineLength('py').\nPlease decode the pycodestyle errors and use appropriate aspects","diffHunk":"@@ -61,3 +67,24 @@ def create_arguments(\n         arguments.append(filename)\n \n         return arguments\n+\n+    def process_output(\n+            self,\n+            output,\n+            filename,\n+            file,\n+            ):\n+        output_regex = (r'(?P<line>\\d+) (?P<column>\\d+) '\n+                        r'(?P<message>(?P<origin>\\S+).*)')\n+        result = re.match(output_regex, output)\n+        if not result:\n+            return\n+        line, column, message, origin = result.groups()\n+        yield Result.from_values(\n+            origin=self,\n+            message=message,\n+            file=filename,\n+            line=int(line),\n+            column=int(column),\n+            aspect=LineLength('py'),","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNzUxMTg4NA==","createdAt":"2018-08-06T16:36:47Z","content":"THUMBS_UP","user":{"login":"pareksha","name":"Pareksha Manchanda"}}],"createdAt":"2018-08-06T14:52:47Z","lastEditedAt":null,"updatedAt":"2018-08-06T14:52:47Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODAzODY3Nw==","url":"https://github.com/coala/coala-bears/pull/2657#discussion_r208038677","bodyText":"a trailing comma is useless if followed by a bracket.","diffHunk":"@@ -1,15 +1,16 @@\n import sys\n+import re\n \n from coalib.bearlib.abstractions.Linter import linter\n from coalib.settings.Setting import typed_list\n+from coalib.results.Result import Result\n+from coalib.bearlib.aspects import map_setting_to_aspect\n+from coalib.bearlib.aspects.Formatting import LineLength\n \n from dependency_management.requirements.PipRequirement import PipRequirement\n \n \n-@linter(executable='pycodestyle',\n-        output_format='regex',\n-        output_regex=r'(?P<line>\\d+) (?P<column>\\d+) '\n-                     r'(?P<message>(?P<origin>\\S+).*)')\n+@linter(executable='pycodestyle',)","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-08-06T21:43:10Z","lastEditedAt":null,"updatedAt":"2018-08-06T21:43:10Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODAzODg1Mg==","url":"https://github.com/coala/coala-bears/pull/2657#discussion_r208038852","bodyText":"keep the output_regex here as a module level variable.\nthe diff will then show that the regex hasnt changed.","diffHunk":"@@ -1,15 +1,16 @@\n import sys\n+import re\n \n from coalib.bearlib.abstractions.Linter import linter\n from coalib.settings.Setting import typed_list\n+from coalib.results.Result import Result\n+from coalib.bearlib.aspects import map_setting_to_aspect\n+from coalib.bearlib.aspects.Formatting import LineLength\n \n from dependency_management.requirements.PipRequirement import PipRequirement\n \n \n-@linter(executable='pycodestyle',\n-        output_format='regex',\n-        output_regex=r'(?P<line>\\d+) (?P<column>\\d+) '","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-08-06T21:43:57Z","lastEditedAt":null,"updatedAt":"2018-08-06T21:43:57Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODAzOTExNQ==","url":"https://github.com/coala/coala-bears/pull/2657#discussion_r208039115","bodyText":"Now we need a test class which verifies that the aspect is used when the line length is exceeded.","diffHunk":"@@ -63,3 +69,22 @@ def hello():\n     valid_files=(file_with_very_long_line,),\n     invalid_files=(),\n     settings={'max_line_length': 0})\n+\n+PycodestyleBearAspectsTest = verify_local_bear(","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNzUzODY0OA==","createdAt":"2018-08-07T04:59:38Z","content":"THUMBS_UP","user":{"login":"pareksha","name":"Pareksha Manchanda"}}],"createdAt":"2018-08-06T21:45:07Z","lastEditedAt":null,"updatedAt":"2018-08-06T21:45:07Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODExNzkyNw==","url":"https://github.com/coala/coala-bears/pull/2657#discussion_r208117927","bodyText":"this is a regression.\nPreviously the origin was the error code.\nyou are discarding that","diffHunk":"@@ -61,3 +72,26 @@ def create_arguments(\n         arguments.append(filename)\n \n         return arguments\n+\n+    def process_output(\n+            self,\n+            output,\n+            filename,\n+            file,\n+            ):\n+        result = re.match(OUTPUT_REGEX, output)\n+        if not result:\n+            return\n+        line, column, message, origin = result.groups()\n+        if origin == 'E501':\n+            aspect = LineLength('py')\n+        else:\n+            aspect = None\n+        yield Result.from_values(\n+            origin=self,","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-08-07T06:58:27Z","lastEditedAt":null,"updatedAt":"2018-08-07T06:58:27Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODEzMzc3OA==","url":"https://github.com/coala/coala-bears/pull/2657#discussion_r208133778","bodyText":"origin is to be kept PycodestyleBear only as that when we want to ignore PycodestyleBear, we have to do # Ignore Pycodestyle and not # Ignore E501(or any other rule).\nI have changed it to rule and kept the origin self only, so that there's no confusion","diffHunk":"@@ -61,3 +72,26 @@ def create_arguments(\n         arguments.append(filename)\n \n         return arguments\n+\n+    def process_output(\n+            self,\n+            output,\n+            filename,\n+            file,\n+            ):\n+        result = re.match(OUTPUT_REGEX, output)\n+        if not result:\n+            return\n+        line, column, message, origin = result.groups()\n+        if origin == 'E501':\n+            aspect = LineLength('py')\n+        else:\n+            aspect = None\n+        yield Result.from_values(\n+            origin=self,","author":{"login":"pareksha","avatarUrl":"https://avatars1.githubusercontent.com/u/32385407?v=4","name":"Pareksha Manchanda"},"reactions":[],"createdAt":"2018-08-07T08:03:20Z","lastEditedAt":"2018-08-07T08:05:29Z","updatedAt":"2018-08-07T08:05:29Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODEzNjAzNA==","url":"https://github.com/coala/coala-bears/pull/2657#discussion_r208136034","bodyText":"it was previously origin ... was it being ignored previously?\nif the Result objects were previously setting origin to PycodestyleBear, then why was the regex capturing origin .. what was happening with it previously?\nwrt # Ignore ... if the bear was previously using origin of E501, then users must be using # Ignore E501 currently, and if you change it then their CI will break.\nSo we need to be careful.\nWe can still change it, but we need to ensure that change isnt hidden in an 'aspectification' commit.  It needs to be a separate issue which is classified as a bug, and properly analysed.","diffHunk":"@@ -61,3 +72,26 @@ def create_arguments(\n         arguments.append(filename)\n \n         return arguments\n+\n+    def process_output(\n+            self,\n+            output,\n+            filename,\n+            file,\n+            ):\n+        result = re.match(OUTPUT_REGEX, output)\n+        if not result:\n+            return\n+        line, column, message, origin = result.groups()\n+        if origin == 'E501':\n+            aspect = LineLength('py')\n+        else:\n+            aspect = None\n+        yield Result.from_values(\n+            origin=self,","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-08-07T08:11:39Z","lastEditedAt":null,"updatedAt":"2018-08-07T08:11:39Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODE0NDI5OA==","url":"https://github.com/coala/coala-bears/pull/2657#discussion_r208144298","bodyText":"Currently, it uses # Ignore Pycodestyle or # Ignore Pycodestyle (E501) (an example is \n  \n    \n      coala-bears/tests/js/PrettierLintBearTest.py\n    \n    \n         Line 11\n      in\n      e46d352\n    \n    \n    \n    \n\n        \n          \n           # Start ignoring PycodestyleBear, LineLengthBear \n        \n    \n  \n\n).\nI see what @linter was doing previously, see https://github.com/coala/coala/blob/d936d1624a8d37b4be96d023079c39f244a351c3/coalib/bearlib/abstractions/Linter.py#L320\nI am changing this to what was being done previously in the linter.","diffHunk":"@@ -61,3 +72,26 @@ def create_arguments(\n         arguments.append(filename)\n \n         return arguments\n+\n+    def process_output(\n+            self,\n+            output,\n+            filename,\n+            file,\n+            ):\n+        result = re.match(OUTPUT_REGEX, output)\n+        if not result:\n+            return\n+        line, column, message, origin = result.groups()\n+        if origin == 'E501':\n+            aspect = LineLength('py')\n+        else:\n+            aspect = None\n+        yield Result.from_values(\n+            origin=self,","author":{"login":"pareksha","avatarUrl":"https://avatars1.githubusercontent.com/u/32385407?v=4","name":"Pareksha Manchanda"},"reactions":[],"createdAt":"2018-08-07T08:38:57Z","lastEditedAt":"2018-08-07T08:43:22Z","updatedAt":"2018-08-07T08:43:22Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODE0ODY4MA==","url":"https://github.com/coala/coala-bears/pull/2657#discussion_r208148680","bodyText":"Thank you -- that is better.","diffHunk":"@@ -61,3 +72,26 @@ def create_arguments(\n         arguments.append(filename)\n \n         return arguments\n+\n+    def process_output(\n+            self,\n+            output,\n+            filename,\n+            file,\n+            ):\n+        result = re.match(OUTPUT_REGEX, output)\n+        if not result:\n+            return\n+        line, column, message, origin = result.groups()\n+        if origin == 'E501':\n+            aspect = LineLength('py')\n+        else:\n+            aspect = None\n+        yield Result.from_values(\n+            origin=self,","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-08-07T08:53:19Z","lastEditedAt":null,"updatedAt":"2018-08-07T08:53:19Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODE0OTAzOA==","url":"https://github.com/coala/coala-bears/pull/2657#discussion_r208149038","bodyText":"this line does not need to change.\nyou only need to add a line above with self,","diffHunk":"@@ -21,9 +27,14 @@ class PycodestyleBear:\n     LICENSE = 'AGPL-3.0'\n     CAN_DETECT = {'Formatting'}\n \n-    @staticmethod\n+    @map_setting_to_aspect(\n+        max_line_length=LineLength.max_line_length,\n+    )\n     def create_arguments(\n-            filename, file, config_file,","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-08-07T08:54:32Z","lastEditedAt":null,"updatedAt":"2018-08-07T08:54:32Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODE0OTM5OA==","url":"https://github.com/coala/coala-bears/pull/2657#discussion_r208149398","bodyText":"all args fit on one line, and should be on one line.  The signature of this method does not change.","diffHunk":"@@ -61,3 +72,26 @@ def create_arguments(\n         arguments.append(filename)\n \n         return arguments\n+\n+    def process_output(","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-08-07T08:55:46Z","lastEditedAt":null,"updatedAt":"2018-08-07T08:55:46Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODE0OTY0MA==","url":"https://github.com/coala/coala-bears/pull/2657#discussion_r208149640","bodyText":"please restore this to 'origin'","diffHunk":"@@ -1,15 +1,21 @@\n import sys\n+import re\n \n from coalib.bearlib.abstractions.Linter import linter\n from coalib.settings.Setting import typed_list\n+from coalib.results.Result import Result\n+from coalib.bearlib.aspects import map_setting_to_aspect\n+from coalib.bearlib.aspects.Formatting import LineLength\n \n from dependency_management.requirements.PipRequirement import PipRequirement\n \n \n+OUTPUT_REGEX = (r'(?P<line>\\d+) (?P<column>\\d+) '\n+                r'(?P<message>(?P<rule>\\S+).*)')","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-08-07T08:56:33Z","lastEditedAt":null,"updatedAt":"2018-08-07T08:56:33Z"}]}}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1533555073000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/pull/2658","number":2658,"title":"WIP: setup.cfg: Use template","body":"need to redo the commits","comments":0,"createdAt":"2018-08-06T11:30:43Z","updatedAt":"2018-08-06T11:31:13Z","closedAt":null,"state":"open","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"process/pending review","color":"bfe5bf"},{"name":"size/S","color":"B1CF0A"}],"pullRequest":{"htmlUrl":"https://github.com/coala/coala-bears/pull/2658","comments":[]}}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1531137769000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/pull/2372","number":2372,"title":"Add MlintBear","body":"Perform lint check on Matlab code.\nCloses #2352\n\nFor short term contributors: we understand that getting your commits well\ndefined like we require is a hard task and takes some learning. If you\nlook to help without wanting to contribute long term there's no need\nfor you to learn this. Just drop us a message and we'll take care of brushing\nup your stuff for merge!\nChecklist\n\n I read the commit guidelines and I've followed\nthem.\n I ran coala over my code locally. (All commits have to pass\nindividually. It is not sufficient to have \"fixup commits\" on your PR,\nour bot will still report the issues for the previous commit.) You will\nlikely receive a lot of bot comments and build failures if coala does not\npass on every single commit!\n\nAfter you submit your pull request, DO NOT click the 'Update Branch' button.\nWhen asked for a rebase, consult coala.io/rebase\ninstead.\nPlease consider helping us by reviewing other peoples pull requests as well:\n\npick up any PR at https://coala.io/review\nreview it (check https://coala.io/reviewing for more info)\nif you are sure that it needs work, use corobo mark wip <URL> to get it out\nof the review queue.\n\nThe more you review, the more your score will grow at coala.io and we will\nreview your PRs faster!","comments":5,"createdAt":"2018-03-22T21:37:14Z","updatedAt":"2018-07-09T12:02:49Z","closedAt":"2018-07-09T12:02:49Z","state":"closed","user":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4"},"owner":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4"},"assignee":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4"},"labels":[{"name":"area/lintbears","color":"fbca04"},{"name":"bear proposal","color":"ADFF2F"},{"name":"difficulty/low","color":"207de5"},{"name":"size/M","color":"CFB80A"},{"name":"status/blocked","color":"e11d21"},{"name":"status/non-free","color":"8f0dbf"},{"name":"status/wontfix/not happening","color":"000000"}],"pullRequest":{"htmlUrl":"https://github.com/coala/coala-bears/pull/2372","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM3NTQ2NzY4Mg==","url":"https://github.com/coala/coala-bears/pull/2372#issuecomment-375467682","bodyText":"I have some concerns here:\n\n\nUsers need to add mlint executable to PATH. For example, on a Mac with MATLAB_R2017a installed:\n\nexport PATH=\"/Applications/MATLAB_R2017a.app/bin/maci64:$PATH\"\n\nI wonder where I should put this instruction?\n\n\nI used lengthofline.m and lengthofline2.m as test files. They are copied from Matlab sample code (See MathWorks copyright on both files) .  Would it be a copyright issue?","diffHunk":null,"author":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4","name":"Boxuan Li"},"reactions":[],"createdAt":"2018-03-22T21:44:10Z","lastEditedAt":null,"updatedAt":"2018-03-22T21:44:10Z"},{"id":"MDEyOklzc3VlQ29tbWVudDM3NTc2MTg0NA==","url":"https://github.com/coala/coala-bears/pull/2372#issuecomment-375761844","bodyText":"@li-boxuan adding the executable to the environment path is a basic requirement for many linters, if one wishes to execute them using CLI. This could happen with most of the linters. The error message submitted by coala would simply be executable not installed. Modifying it just for this special case IMO is not necessary.\nAs for the copyright issue is it necessary to use MathWord code? Can't you come up with some test cases of your own?","diffHunk":null,"author":{"login":"MacBox7","avatarUrl":"https://avatars0.githubusercontent.com/u/15063552?v=4","name":"Ankit Joshi"},"reactions":[{"id":"MDg6UmVhY3Rpb24yMTM1OTgwMQ==","createdAt":"2018-03-26T05:01:49Z","content":"THUMBS_UP","user":{"login":"li-boxuan","name":"Boxuan Li"}}],"createdAt":"2018-03-23T18:37:12Z","lastEditedAt":null,"updatedAt":"2018-03-23T18:37:12Z"},{"id":"MDEyOklzc3VlQ29tbWVudDM3NTc3MjM5OA==","url":"https://github.com/coala/coala-bears/pull/2372#issuecomment-375772398","bodyText":"@MacBox7 Thanks for comments!\n\nadding the executable to the environment path is a basic requirement for many linters\n\nThis case is special to me because it is not trivial to find the mlint executable. It is not documented on Matlab website (They don't even tell users that there is such an executable; they only say mlint is a function call in Matlab). I didn't know the existence of mlint executable until I saw https://github.com/Gimly/vscode-matlab/blob/master/README.md.\n\nCan't you come up with some test cases of your own?\n\nYes, sure. The reason I used official examples is that I found them pretty nice and this would be consistent with the example on https://www.mathworks.com/help/matlab/ref/mlint.html. I would write my own test cases if it's necessary (but may not be as good as official ones).","diffHunk":null,"author":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4","name":"Boxuan Li"},"reactions":[{"id":"MDg6UmVhY3Rpb24yMTMxNjM0Mg==","createdAt":"2018-03-23T20:52:07Z","content":"THUMBS_UP","user":{"login":"MacBox7","name":"Ankit Joshi"}}],"createdAt":"2018-03-23T19:19:23Z","lastEditedAt":null,"updatedAt":"2018-03-23T19:19:23Z"},{"id":"MDEyOklzc3VlQ29tbWVudDM3OTQ3NzExNg==","url":"https://github.com/coala/coala-bears/pull/2372#issuecomment-379477116","bodyText":"I've closed the issue.\nWe can leave this PR open for a while, until you've migrated the bear to the new repo.","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-04-07T15:22:30Z","lastEditedAt":null,"updatedAt":"2018-04-07T15:22:30Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwMzQ1NTc4NA==","url":"https://github.com/coala/coala-bears/pull/2372#issuecomment-403455784","bodyText":"Looks like this wont be migrated until after GSoC.  Closing","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-09T12:02:49Z","lastEditedAt":null,"updatedAt":"2018-07-09T12:02:49Z"}]}}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1531140984000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/pull/2413","number":2413,"title":"Fix several bears which violate 1-based line/column convention","body":"Fix several bears which violate 1-based line/column convention\nFixes #2563, #2574, #2573, #2572, #2562, #2393\n\nFor short term contributors: we understand that getting your commits well\ndefined like we require is a hard task and takes some learning. If you\nlook to help without wanting to contribute long term there's no need\nfor you to learn this. Just drop us a message and we'll take care of brushing\nup your stuff for merge!\nChecklist\n\n I read the commit guidelines and I've followed\nthem.\n I ran coala over my code locally. (All commits have to pass\nindividually. It is not sufficient to have \"fixup commits\" on your PR,\nour bot will still report the issues for the previous commit.) You will\nlikely receive a lot of bot comments and build failures if coala does not\npass on every single commit!\n\nAfter you submit your pull request, DO NOT click the 'Update Branch' button.\nWhen asked for a rebase, consult coala.io/rebase\ninstead.\nPlease consider helping us by reviewing other peoples pull requests as well:\n\npick up any PR at https://coala.io/review\nreview it (check https://coala.io/reviewing for more info)\nif you are sure that it needs work, use corobo mark wip <URL> to get it out\nof the review queue.\n\nThe more you review, the more your score will grow at coala.io and we will\nreview your PRs faster!","comments":17,"createdAt":"2018-04-08T04:49:17Z","updatedAt":"2018-07-09T12:56:24Z","closedAt":"2018-07-09T10:22:03Z","state":"merged","user":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4"},"owner":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4"},"assignee":{"login":"mr-karan","avatarUrl":"https://avatars3.githubusercontent.com/u/5689132?v=4"},"labels":[{"name":"difficulty/low","color":"207de5"},{"name":"importance/critical","color":"e11d21"},{"name":"process/pending review","color":"bfe5bf"},{"name":"size/S","color":"B1CF0A"},{"name":"status/blocked","color":"e11d21"},{"name":"type/bug","color":"e11d21"}],"pullRequest":{"htmlUrl":"https://github.com/coala/coala-bears/pull/2413","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM3OTUzMTczMg==","url":"https://github.com/coala/coala-bears/pull/2413#issuecomment-379531732","bodyText":"Interesting error on Appveyor.  maybe different version of pylint there?","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[{"id":"MDg6UmVhY3Rpb24yMTk2MTUzMw==","createdAt":"2018-04-08T14:21:29Z","content":"THUMBS_UP","user":{"login":"li-boxuan","name":"Boxuan Li"}}],"createdAt":"2018-04-08T08:35:41Z","lastEditedAt":null,"updatedAt":"2018-04-08T08:35:41Z"},{"id":"MDEyOklzc3VlQ29tbWVudDM3OTU1NDQ1NQ==","url":"https://github.com/coala/coala-bears/pull/2413#issuecomment-379554455","bodyText":"Agree. I doubt there is some issue with pylint version. I would try different versions on my laptop.","diffHunk":null,"author":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4","name":"Boxuan Li"},"reactions":[],"createdAt":"2018-04-08T14:24:53Z","lastEditedAt":null,"updatedAt":"2018-04-08T14:24:53Z"},{"id":"MDEyOklzc3VlQ29tbWVudDM3OTU2NzAxMg==","url":"https://github.com/coala/coala-bears/pull/2413#issuecomment-379567012","bodyText":"@jayvdb  So there is some inconsistency with pylint 1.8.4.\nOn Unix, running pylint test.py --disable '' would return output as if there is no --disableflag\nHowever, on windows, pylint test.py --disable '' would return error pylint: error: -d option requires 1 argument\nJust as the error message says, this option requires 1 argument. The old test case should be deleted.","diffHunk":null,"author":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4","name":"Boxuan Li"},"reactions":[],"createdAt":"2018-04-08T17:27:06Z","lastEditedAt":null,"updatedAt":"2018-04-08T17:27:06Z"},{"id":"MDEyOklzc3VlQ29tbWVudDM3OTgxMTY3NQ==","url":"https://github.com/coala/coala-bears/pull/2413#issuecomment-379811675","bodyText":"This is blocked by coala/coala#5350","diffHunk":null,"author":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4","name":"Boxuan Li"},"reactions":[],"createdAt":"2018-04-09T16:26:37Z","lastEditedAt":null,"updatedAt":"2018-04-09T16:26:37Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwMjIyMTk1Nw==","url":"https://github.com/coala/coala-bears/pull/2413#issuecomment-402221957","bodyText":"@li-boxuan Please rebase , and ideally include commits fixing #2562 and #2563 if they are straight forward fixes with normalize_column_numbers.  If they are not fixed by that, we need to work rather quickly to look for an alternative solution.","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-03T16:47:27Z","lastEditedAt":null,"updatedAt":"2018-07-03T16:47:27Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwMjM1ODE1Ng==","url":"https://github.com/coala/coala-bears/pull/2413#issuecomment-402358156","bodyText":"I've done testing on all of the bears failing for this reason, and they can all be fixed this way.\nc.f. https://travis-ci.org/jayvdb/coala-bears/jobs/399852497\nPlease include them all in this patch.\nThere are a few other breakages, and given how critical this is I am tempted to merge with them broken which will cause all other PRs to be broken again until those other tests are fixed.","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-04T04:15:24Z","lastEditedAt":null,"updatedAt":"2018-07-04T04:15:24Z"}]}}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1531659421000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/pull/2446","number":2446,"title":".ci/generate_bear_requirements: Changes","body":"TODO: break into commits.\nThis commits updates the script to use ruamel.yaml\nwhich is better fork of PyYaml.\nAdd Update and Check mode for diffing and updating\nBear-Requirments yaml.\nCloses #2444\n\nFor short term contributors: we understand that getting your commits well\ndefined like we require is a hard task and takes some learning. If you\nlook to help without wanting to contribute long term there's no need\nfor you to learn this. Just drop us a message and we'll take care of brushing\nup your stuff for merge!\nChecklist\n\n I read the commit guidelines and I've followed\nthem.\n I ran coala over my code locally. (All commits have to pass\nindividually. It is not sufficient to have \"fixup commits\" on your PR,\nour bot will still report the issues for the previous commit.) You will\nlikely receive a lot of bot comments and build failures if coala does not\npass on every single commit!\n\nAfter you submit your pull request, DO NOT click the 'Update Branch' button.\nWhen asked for a rebase, consult coala.io/rebase\ninstead.\nPlease consider helping us by reviewing other peoples pull requests as well:\n\npick up any PR at https://coala.io/review\nreview it (check https://coala.io/reviewing for more info)\nif you are sure that it needs work, use corobo mark wip <URL> to get it out\nof the review queue.\n\nThe more you review, the more your score will grow at coala.io and we will\nreview your PRs faster!","comments":15,"createdAt":"2018-04-19T17:27:38Z","updatedAt":"2018-07-15T12:57:01Z","closedAt":"2018-07-13T12:10:33Z","state":"merged","user":{"login":"nemaniarjun","avatarUrl":"https://avatars0.githubusercontent.com/u/15715894?v=4"},"owner":{"login":"nemaniarjun","avatarUrl":"https://avatars0.githubusercontent.com/u/15715894?v=4"},"assignee":{"login":"nemaniarjun","avatarUrl":"https://avatars0.githubusercontent.com/u/15715894?v=4"},"labels":[{"name":"area/ci","color":"d93f0b"},{"name":"difficulty/medium","color":"0052cc"},{"name":"importance/medium","color":"fbca04"},{"name":"size/S","color":"B1CF0A"}],"pullRequest":{"htmlUrl":"https://github.com/coala/coala-bears/pull/2446","comments":[{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MzIyMjc0Mw==","url":"https://github.com/coala/coala-bears/pull/2446#discussion_r183222743","bodyText":"can you modify the generator so this doesnt move in the yaml.\nIt is easier to verify the code is correct than verify the moved yaml is identical","diffHunk":"@@ -1,3 +1,84 @@\n+# This is a comment!\n+overrides: coala-build.yaml\n+pip_requirements:","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-04-22T00:41:00Z","lastEditedAt":null,"updatedAt":"2018-04-22T00:41:00Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MzIyMjc0NA==","url":"https://github.com/coala/coala-bears/pull/2446#discussion_r183222744","bodyText":"obviously not wanted after WIP","diffHunk":"@@ -1,3 +1,84 @@\n+# This is a comment!","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-04-22T00:41:13Z","lastEditedAt":null,"updatedAt":"2018-04-22T00:41:13Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MzIyMjc0OQ==","url":"https://github.com/coala/coala-bears/pull/2446#discussion_r183222749","bodyText":"instaead\nand 80cpl","diffHunk":"@@ -54,6 +58,10 @@ def get_args():\n     parser.add_argument('--bear-dirs', '-d', nargs='+', metavar='DIR',\n                         help='additional directories which may contain bears')\n \n+    parser.add_argument('--check', '-c', action='store_true',\n+                        help='performs a dry run, and reports differences.')\n+    parser.add_argument('--update', '-u',action='store_true',\n+                        help='updates \"bear-requirements.yaml\" instaead of overwriting')","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-04-22T00:42:29Z","lastEditedAt":null,"updatedAt":"2018-04-22T00:42:29Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MzIyMjkyMw==","url":"https://github.com/coala/coala-bears/pull/2446#discussion_r183222923","bodyText":"What do you mean? The pip_requirements part? or the overrides part?","diffHunk":"@@ -1,3 +1,84 @@\n+# This is a comment!\n+overrides: coala-build.yaml\n+pip_requirements:","author":{"login":"nemaniarjun","avatarUrl":"https://avatars0.githubusercontent.com/u/15715894?v=4","name":"Arjun Nemani"},"createdAt":"2018-04-22T01:00:57Z","lastEditedAt":null,"updatedAt":"2018-04-22T01:00:57Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTgwOTY0OQ==","url":"https://github.com/coala/coala-bears/pull/2446#discussion_r195809649","bodyText":"This should be --check --update in the same invocation to speed up the build.","diffHunk":"@@ -115,7 +115,8 @@ script:\n   - pip install $(ls ./dist/*.whl)\"[alldeps]\"\n   - bash .ci/tests.sh\n   # Ensure bear requirements are in sync with the bear PipRequirement\n-  - .ci/generate_bear_requirements.py\n+  - .ci/generate_bear_requirements.py --check","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-06-15T17:17:06Z","lastEditedAt":null,"updatedAt":"2018-06-15T17:17:06Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTgwOTkzOQ==","url":"https://github.com/coala/coala-bears/pull/2446#discussion_r195809939","bodyText":"keep the order : pip ; npm ; gem\nthen these lines wont appear as moved.","diffHunk":"@@ -179,18 +228,31 @@ def get_pip_requirements(requirements):\n     pip_reqs, npm_reqs, gem_reqs = (\n         get_all_requirements(get_all_bears(bear_dirs)))\n \n-    requirements = {}\n-    requirements['overrides'] = 'coala-build.yaml'\n-    requirements['pip_requirements'] = get_pip_requirements(pip_reqs)\n-    requirements['npm_requirements'] = get_npm_requirements(npm_reqs)\n+    requirements = CommentedMap({})\n+\n     requirements['gem_requirements'] = get_gem_requirements(gem_reqs)\n+    requirements['npm_requirements'] = get_npm_requirements(npm_reqs)\n+    requirements['pip_requirements'] = get_pip_requirements(pip_reqs)","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-06-15T17:18:23Z","lastEditedAt":null,"updatedAt":"2018-06-15T17:18:23Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTgxMDAzMA==","url":"https://github.com/coala/coala-bears/pull/2446#discussion_r195810030","bodyText":"pep8 variable names please","diffHunk":"@@ -179,18 +228,31 @@ def get_pip_requirements(requirements):\n     pip_reqs, npm_reqs, gem_reqs = (\n         get_all_requirements(get_all_bears(bear_dirs)))\n \n-    requirements = {}\n-    requirements['overrides'] = 'coala-build.yaml'\n-    requirements['pip_requirements'] = get_pip_requirements(pip_reqs)\n-    requirements['npm_requirements'] = get_npm_requirements(npm_reqs)\n+    requirements = CommentedMap({})\n+\n     requirements['gem_requirements'] = get_gem_requirements(gem_reqs)\n+    requirements['npm_requirements'] = get_npm_requirements(npm_reqs)\n+    requirements['pip_requirements'] = get_pip_requirements(pip_reqs)\n+\n+    if args.update or args.check:\n+        inputFile = open(os.path.join(PROJECT_DIR, BEAR_REQUIREMENTS_YAML),'r')","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-06-15T17:18:45Z","lastEditedAt":null,"updatedAt":"2018-06-15T17:18:45Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTgxMDA3Ng==","url":"https://github.com/coala/coala-bears/pull/2446#discussion_r195810076","bodyText":"deep_diff","diffHunk":"@@ -167,6 +176,46 @@ def get_pip_requirements(requirements):\n \n     return pip_requirements\n \n+def deepupdate(target, src):\n+    for key, value in src.items():\n+        if isinstance(value, list):\n+            if not key in target:\n+                target[key] = copy.deepcopy(value)\n+            else:\n+                target[key].extend(value)\n+        elif isinstance(value, dict):\n+            if not key in target:\n+                target[key] = copy.deepcopy(value)\n+            else:\n+                deepupdate(target[key], value)\n+        elif isinstance(value, set):\n+            if not key in target:\n+                target[key] = value.copy()\n+            else:\n+                target[key].update(value.copy())\n+        else:\n+            target[key] = copy.copy(value)\n+\n+\n+def deepdiff(target, src):","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-06-15T17:18:57Z","lastEditedAt":null,"updatedAt":"2018-06-15T17:18:57Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTgxMDE0Ng==","url":"https://github.com/coala/coala-bears/pull/2446#discussion_r195810146","bodyText":"bad indentation; single quote.","diffHunk":"@@ -167,6 +176,46 @@ def get_pip_requirements(requirements):\n \n     return pip_requirements\n \n+def deepupdate(target, src):\n+    for key, value in src.items():\n+        if isinstance(value, list):\n+            if not key in target:\n+                target[key] = copy.deepcopy(value)\n+            else:\n+                target[key].extend(value)\n+        elif isinstance(value, dict):\n+            if not key in target:\n+                target[key] = copy.deepcopy(value)\n+            else:\n+                deepupdate(target[key], value)\n+        elif isinstance(value, set):\n+            if not key in target:\n+                target[key] = value.copy()\n+            else:\n+                target[key].update(value.copy())\n+        else:\n+            target[key] = copy.copy(value)\n+\n+\n+def deepdiff(target, src):\n+    errors = []\n+    for key, value in src.items():\n+        if not key in target:\n+                errors.append((key, \"Missing\"))","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-06-15T17:19:17Z","lastEditedAt":null,"updatedAt":"2018-06-15T17:19:17Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTgxMDM4Nw==","url":"https://github.com/coala/coala-bears/pull/2446#discussion_r195810387","bodyText":"deep_update","diffHunk":"@@ -167,6 +176,46 @@ def get_pip_requirements(requirements):\n \n     return pip_requirements\n \n+def deepupdate(target, src):","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-06-15T17:20:24Z","lastEditedAt":null,"updatedAt":"2018-06-15T17:20:24Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTgxMDc2Ng==","url":"https://github.com/coala/coala-bears/pull/2446#discussion_r195810766","bodyText":"single quotes is our preferred style now","diffHunk":"@@ -30,6 +31,9 @@\n from dependency_management.requirements.NpmRequirement import NpmRequirement\n from dependency_management.requirements.PipRequirement import PipRequirement\n \n+yaml = YAML(typ=\"rt\")","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-06-15T17:21:55Z","lastEditedAt":null,"updatedAt":"2018-06-15T17:21:55Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTgxMDgwOQ==","url":"https://github.com/coala/coala-bears/pull/2446#discussion_r195810809","bodyText":"alpha order","diffHunk":"@@ -18,9 +18,10 @@\n import json\n import os\n import sys\n-from collections import OrderedDict\n+import copy","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-06-15T17:22:03Z","lastEditedAt":null,"updatedAt":"2018-06-15T17:22:03Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTgxMTY5MA==","url":"https://github.com/coala/coala-bears/pull/2446#discussion_r195811690","bodyText":"It is simpler if you always do this, irrespective of the type\nif not key in target:\n    target[key] = copy.deepcopy(value)\n\nThen in the else you can do the different update mechanisms.\nThat makes it more clear that this is like a deepcopy for any new keys, but behaves differently for other keys, and raise an exception if there is an update required for an unknown type as we will need to add support for it whenever that happens.","diffHunk":"@@ -167,6 +176,46 @@ def get_pip_requirements(requirements):\n \n     return pip_requirements\n \n+def deepupdate(target, src):\n+    for key, value in src.items():\n+        if isinstance(value, list):\n+            if not key in target:\n+                target[key] = copy.deepcopy(value)","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-06-15T17:25:19Z","lastEditedAt":null,"updatedAt":"2018-06-15T17:25:19Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTgxMjI4OQ==","url":"https://github.com/coala/coala-bears/pull/2446#discussion_r195812289","bodyText":"ruamel.yaml~=0.15.38","diffHunk":"@@ -9,3 +9,4 @@ pytest-timeout~=1.2\n pytest-xdist~=1.15\n requests_mock~=0.7.0\n wheel~=0.29\n+ruamel.yaml==0.15.37","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-06-15T17:27:40Z","lastEditedAt":null,"updatedAt":"2018-06-15T17:27:40Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NjYzOTA5MA==","url":"https://github.com/coala/coala-bears/pull/2446#discussion_r196639090","bodyText":"these three lines were moved to a separate job","diffHunk":"@@ -150,7 +150,10 @@ script:\n   - pip install $(ls ./dist/*.whl)\"[alldeps]\"\n   - bash .ci/tests.sh\n   # Ensure bear requirements are in sync with the bear PipRequirement\n-  - .ci/generate_bear_requirements.py\n+  - .ci/generate_bear_requirements.py --check --update\n+  - git clone https://github.com/moremoban/setupmobans ../setupmobans","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-06-20T03:30:49Z","lastEditedAt":null,"updatedAt":"2018-06-20T03:30:49Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5Njk2MjU0NQ==","url":"https://github.com/coala/coala-bears/pull/2446#discussion_r196962545","bodyText":"Fixed!","diffHunk":"@@ -150,7 +150,10 @@ script:\n   - pip install $(ls ./dist/*.whl)\"[alldeps]\"\n   - bash .ci/tests.sh\n   # Ensure bear requirements are in sync with the bear PipRequirement\n-  - .ci/generate_bear_requirements.py\n+  - .ci/generate_bear_requirements.py --check --update\n+  - git clone https://github.com/moremoban/setupmobans ../setupmobans","author":{"login":"nemaniarjun","avatarUrl":"https://avatars0.githubusercontent.com/u/15715894?v=4","name":"Arjun Nemani"},"createdAt":"2018-06-20T22:30:36Z","lastEditedAt":null,"updatedAt":"2018-06-20T22:30:36Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTQzMTAyOQ==","url":"https://github.com/coala/coala-bears/pull/2446#discussion_r199431029","bodyText":"Use ~= as requested at #2446 (comment)","diffHunk":"@@ -17,3 +17,4 @@ pytest-xdist~=1.15\n requests-mock~=1.2\n pip!=9.0.2, !=10.0.*\n wheel~=0.29\n+ruamel.yaml==0.15.38","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-07-02T09:12:27Z","lastEditedAt":null,"updatedAt":"2018-07-02T09:12:27Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTQzMTU0Mw==","url":"https://github.com/coala/coala-bears/pull/2446#discussion_r199431543","bodyText":"this isnt a change related to your problem, and ... it will be rewritten anyway in #2561","diffHunk":"@@ -135,14 +144,14 @@ def get_gem_requirements(requirements):\n \n \n def get_npm_requirements(requirements):\n-    npm_dependencies = {}\n+    npm_dependencies = CommentedMap({})\n \n     for requirement in requirements:\n         package_name = requirement.package\n         req_version = requirement.version\n         if req_version:\n             if req_version[0] not in ('<', '>', '~', '='):\n-                req_version = \"~\" + req_version\n+                req_version = '~' + req_version","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-07-02T09:14:25Z","lastEditedAt":null,"updatedAt":"2018-07-02T09:14:25Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTQzMjEyNw==","url":"https://github.com/coala/coala-bears/pull/2446#discussion_r199432127","bodyText":"Can you add a comment to the top of this?  Just note that it is a generated file and should not be edited by hand.\nI am a bit worried because of the explicit use of CommentedMap for the three blocks within the file?\nIf we cant (easily) have comments at the top level, that is ok.","diffHunk":"@@ -1,3 +1,4 @@\n+overrides: coala-build.yaml","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-07-02T09:16:30Z","lastEditedAt":null,"updatedAt":"2018-07-02T09:16:30Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTQzMjQ5MQ==","url":"https://github.com/coala/coala-bears/pull/2446#discussion_r199432491","bodyText":"Oh, and since we've locked down test-requirements, you will need to add a new wrapper template like coala/coala#5583","diffHunk":"@@ -17,3 +17,4 @@ pytest-xdist~=1.15\n requests-mock~=1.2\n pip!=9.0.2, !=10.0.*\n wheel~=0.29\n+ruamel.yaml==0.15.38","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-07-02T09:17:47Z","lastEditedAt":null,"updatedAt":"2018-07-02T09:17:47Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDA0NjkwNQ==","url":"https://github.com/coala/coala-bears/pull/2446#discussion_r200046905","bodyText":"I did not get you, can you explain this a bit more?","diffHunk":"@@ -17,3 +17,4 @@ pytest-xdist~=1.15\n requests-mock~=1.2\n pip!=9.0.2, !=10.0.*\n wheel~=0.29\n+ruamel.yaml==0.15.38","author":{"login":"nemaniarjun","avatarUrl":"https://avatars0.githubusercontent.com/u/15715894?v=4","name":"Arjun Nemani"},"createdAt":"2018-07-04T08:28:46Z","lastEditedAt":null,"updatedAt":"2018-07-04T08:28:46Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDA2NDgyMg==","url":"https://github.com/coala/coala-bears/pull/2446#discussion_r200064822","bodyText":"We can add comments (by hand) anywhere in the file, the yaml reader just ignores those comments completely.","diffHunk":"@@ -1,3 +1,4 @@\n+overrides: coala-build.yaml","author":{"login":"nemaniarjun","avatarUrl":"https://avatars0.githubusercontent.com/u/15715894?v=4","name":"Arjun Nemani"},"createdAt":"2018-07-04T09:30:56Z","lastEditedAt":"2018-07-04T10:51:04Z","updatedAt":"2018-07-04T10:51:04Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDA3MTExOA==","url":"https://github.com/coala/coala-bears/pull/2446#discussion_r200071118","bodyText":"Okay 👍","diffHunk":"@@ -135,14 +144,14 @@ def get_gem_requirements(requirements):\n \n \n def get_npm_requirements(requirements):\n-    npm_dependencies = {}\n+    npm_dependencies = CommentedMap({})\n \n     for requirement in requirements:\n         package_name = requirement.package\n         req_version = requirement.version\n         if req_version:\n             if req_version[0] not in ('<', '>', '~', '='):\n-                req_version = \"~\" + req_version\n+                req_version = '~' + req_version","author":{"login":"nemaniarjun","avatarUrl":"https://avatars0.githubusercontent.com/u/15715894?v=4","name":"Arjun Nemani"},"createdAt":"2018-07-04T09:50:31Z","lastEditedAt":"2018-07-04T09:50:40Z","updatedAt":"2018-07-04T09:50:40Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDA4MjM0MQ==","url":"https://github.com/coala/coala-bears/pull/2446#discussion_r200082341","bodyText":"We can also add comments programmatically as described here: http://yaml.readthedocs.io/en/latest/example.html.\nAlso we can add comments at the top like this following:\nIn [15]: a = CommentedMap({})\nIn [16]: a.yaml_set_start_comment(\"This is a comment\")\nIn [17]: ruamel.yaml.YAML().dump(a, sys.stdout)\n# This is a comment\n{}","diffHunk":"@@ -1,3 +1,4 @@\n+overrides: coala-build.yaml","author":{"login":"nemaniarjun","avatarUrl":"https://avatars0.githubusercontent.com/u/15715894?v=4","name":"Arjun Nemani"},"createdAt":"2018-07-04T10:31:42Z","lastEditedAt":"2018-07-04T10:45:03Z","updatedAt":"2018-07-04T10:45:03Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDEzNjk3NQ==","url":"https://github.com/coala/coala-bears/pull/2446#discussion_r200136975","bodyText":"No. See the PR i linked. It shows you what to do.","diffHunk":"@@ -17,3 +17,4 @@ pytest-xdist~=1.15\n requests-mock~=1.2\n pip!=9.0.2, !=10.0.*\n wheel~=0.29\n+ruamel.yaml==0.15.38","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-07-04T14:03:17Z","lastEditedAt":null,"updatedAt":"2018-07-04T14:03:17Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDE0MTM5MQ==","url":"https://github.com/coala/coala-bears/pull/2446#discussion_r200141391","bodyText":"removing this in subsequent push, waiting for review on the rest and the tests to complete.","diffHunk":"@@ -96,7 +106,7 @@ def get_all_requirements(bears):\n                requirement not in pip_requirements:\n                 pip_requirements.append(requirement)\n             elif isinstance(requirement, NpmRequirement) and \\\n-               requirement not in npm_requirements:\n+                requirement not in npm_requirements:","author":{"login":"nemaniarjun","avatarUrl":"https://avatars0.githubusercontent.com/u/15715894?v=4","name":"Arjun Nemani"},"createdAt":"2018-07-04T14:19:01Z","lastEditedAt":null,"updatedAt":"2018-07-04T14:19:01Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDE0MTc5NA==","url":"https://github.com/coala/coala-bears/pull/2446#discussion_r200141794","bodyText":"@jayvdb This was something that I missed earlier. Now the generated file will always have reqs in sorted order. Even if it was created using --update","diffHunk":"@@ -144,6 +154,49 @@ def get_pip_requirements(requirements):\n     return _get_requirements(requirements, '~=', inherited_requirements)\n \n \n+def deep_update(target, src):\n+    for key, value in src.items():\n+        if not key in target:\n+            target[key] = copy.deepcopy(value)\n+        else:\n+            if isinstance(value, list):\n+                target[key].extend(value)\n+            elif isinstance(value, dict):\n+                deep_update(target[key], value)\n+            elif isinstance(value, set):\n+                target[key].update(value.copy())\n+            else:\n+                target[key] = copy.copy(value)\n+\n+\n+def deep_diff(target, src):\n+    errors = []\n+    for key, value in src.items():\n+        if not key in target:\n+                errors.append((key, 'Missing'))\n+        elif target[key] != value:\n+            if isinstance(value, list):\n+                if [x for x in value if x not in target[key]]:\n+                    errors.append(key)\n+            elif isinstance(value, dict):\n+                if target[key] != value:\n+                    e = deep_diff(target[key], value)\n+                    errors.append((key, e))\n+            elif isinstance(value, set):\n+                if set(target[key]).symmetric_difference(value):\n+                    errors.append(key)\n+            else:\n+                errors.append((key, target[key]))\n+    return errors\n+\n+\n+def sort_requirements(req_dict):","author":{"login":"nemaniarjun","avatarUrl":"https://avatars0.githubusercontent.com/u/15715894?v=4","name":"Arjun Nemani"},"createdAt":"2018-07-04T14:20:25Z","lastEditedAt":"2018-07-04T14:20:50Z","updatedAt":"2018-07-04T14:20:50Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDE0NDA2Nw==","url":"https://github.com/coala/coala-bears/pull/2446#discussion_r200144067","bodyText":"incorrect indentation (pep8)","diffHunk":"@@ -144,6 +154,49 @@ def get_pip_requirements(requirements):\n     return _get_requirements(requirements, '~=', inherited_requirements)\n \n \n+def deep_update(target, src):\n+    for key, value in src.items():\n+        if not key in target:\n+            target[key] = copy.deepcopy(value)\n+        else:\n+            if isinstance(value, list):\n+                target[key].extend(value)\n+            elif isinstance(value, dict):\n+                deep_update(target[key], value)\n+            elif isinstance(value, set):\n+                target[key].update(value.copy())\n+            else:\n+                target[key] = copy.copy(value)\n+\n+\n+def deep_diff(target, src):\n+    errors = []\n+    for key, value in src.items():\n+        if not key in target:\n+                errors.append((key, 'Missing'))\n+        elif target[key] != value:\n+            if isinstance(value, list):\n+                if [x for x in value if x not in target[key]]:\n+                    errors.append(key)\n+            elif isinstance(value, dict):\n+                if target[key] != value:\n+                    e = deep_diff(target[key], value)\n+                    errors.append((key, e))\n+            elif isinstance(value, set):\n+                if set(target[key]).symmetric_difference(value):\n+                    errors.append(key)\n+            else:\n+                errors.append((key, target[key]))\n+    return errors\n+\n+\n+def sort_requirements(req_dict):\n+    for reqs in ['pip_requirements', 'npm_requirements', 'gem_requirements']:\n+        req_dict[reqs] = CommentedMap(\n+                            sorted(req_dict[reqs].items(),key=lambda t: t[0])\n+                        )","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-07-04T14:28:16Z","lastEditedAt":null,"updatedAt":"2018-07-04T14:28:16Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDE0NDE4OQ==","url":"https://github.com/coala/coala-bears/pull/2446#discussion_r200144189","bodyText":"dont use single character variable names (pep8)","diffHunk":"@@ -155,18 +208,32 @@ def get_pip_requirements(requirements):\n     pip_reqs, npm_reqs, gem_reqs = (\n         get_all_requirements(get_all_bears(bear_dirs)))\n \n-    requirements = {}\n-    requirements['overrides'] = 'coala-build.yaml'\n-    requirements['pip_requirements'] = get_pip_requirements(pip_reqs)\n-    requirements['npm_requirements'] = get_npm_requirements(npm_reqs)\n+    requirements = CommentedMap()\n     requirements['gem_requirements'] = get_gem_requirements(gem_reqs)\n+    requirements['npm_requirements'] = get_npm_requirements(npm_reqs)\n+    requirements['pip_requirements'] = get_pip_requirements(pip_reqs)\n+\n+    if args.update or args.check:\n+        input_file = open(os.path.join(PROJECT_DIR, BEAR_REQUIREMENTS_YAML),'r')\n+        input_requirments = yaml.load(input_file)\n+\n+        new_requirments = copy.deepcopy(input_requirments)\n+        deep_update(new_requirments, requirements)\n+        sort_requirements(new_requirments)\n+\n+        if args.update:\n+            requirements = new_requirments\n \n-    output = None\n+        if args.check:\n+            y = deep_diff(input_requirments, new_requirments)","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-07-04T14:28:45Z","lastEditedAt":null,"updatedAt":"2018-07-04T14:28:45Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDE0NDI1MQ==","url":"https://github.com/coala/coala-bears/pull/2446#discussion_r200144251","bodyText":"no EOL at EOF\nand if you look in .moban.dt/ you will see that the filename prefix core- is inappropriate.","diffHunk":"@@ -0,0 +1,2 @@\n+{% include 'test-requirements.txt.jj2' %}\n+ruamel.yaml~=0.15.42","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-07-04T14:28:59Z","lastEditedAt":null,"updatedAt":"2018-07-04T14:28:59Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDE0NzYzMg==","url":"https://github.com/coala/coala-bears/pull/2446#discussion_r200147632","bodyText":"single character variable name again.\n(but note that your x above is usually considered to be ok because its scope is very limited, and t below in the lambda is also ok because it is so short and obvious and the scope very small)","diffHunk":"@@ -144,6 +154,49 @@ def get_pip_requirements(requirements):\n     return _get_requirements(requirements, '~=', inherited_requirements)\n \n \n+def deep_update(target, src):\n+    for key, value in src.items():\n+        if not key in target:\n+            target[key] = copy.deepcopy(value)\n+        else:\n+            if isinstance(value, list):\n+                target[key].extend(value)\n+            elif isinstance(value, dict):\n+                deep_update(target[key], value)\n+            elif isinstance(value, set):\n+                target[key].update(value.copy())\n+            else:\n+                target[key] = copy.copy(value)\n+\n+\n+def deep_diff(target, src):\n+    errors = []\n+    for key, value in src.items():\n+        if not key in target:\n+                errors.append((key, 'Missing'))\n+        elif target[key] != value:\n+            if isinstance(value, list):\n+                if [x for x in value if x not in target[key]]:\n+                    errors.append(key)\n+            elif isinstance(value, dict):\n+                if target[key] != value:\n+                    e = deep_diff(target[key], value)","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-07-04T14:41:24Z","lastEditedAt":null,"updatedAt":"2018-07-04T14:41:24Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDE0ODUwNw==","url":"https://github.com/coala/coala-bears/pull/2446#discussion_r200148507","bodyText":"still core- here ... you didnt test this locally before pushing for review.","diffHunk":"@@ -26,7 +26,7 @@ configuration:\n targets:\n   - setup.py: bears-setup.py.jj2\n   - requirements.txt: requirements.txt.jj2\n-  - test-requirements.txt: test-requirements.txt.jj2\n+  - test-requirements.txt: core-test-requirements.txt.jj2","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-07-04T14:44:29Z","lastEditedAt":null,"updatedAt":"2018-07-04T14:44:29Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDE0OTE3MA==","url":"https://github.com/coala/coala-bears/pull/2446#discussion_r200149170","bodyText":"Sorry.","diffHunk":"@@ -26,7 +26,7 @@ configuration:\n targets:\n   - setup.py: bears-setup.py.jj2\n   - requirements.txt: requirements.txt.jj2\n-  - test-requirements.txt: test-requirements.txt.jj2\n+  - test-requirements.txt: core-test-requirements.txt.jj2","author":{"login":"nemaniarjun","avatarUrl":"https://avatars0.githubusercontent.com/u/15715894?v=4","name":"Arjun Nemani"},"createdAt":"2018-07-04T14:47:01Z","lastEditedAt":null,"updatedAt":"2018-07-04T14:47:01Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDE1NTAxOA==","url":"https://github.com/coala/coala-bears/pull/2446#discussion_r200155018","bodyText":"why remove this?\nIf the file is being regenerated from scratch, without any existing file, this needs to be there.","diffHunk":"@@ -155,18 +206,32 @@ def get_pip_requirements(requirements):\n     pip_reqs, npm_reqs, gem_reqs = (\n         get_all_requirements(get_all_bears(bear_dirs)))\n \n-    requirements = {}\n-    requirements['overrides'] = 'coala-build.yaml'","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-07-04T15:09:08Z","lastEditedAt":null,"updatedAt":"2018-07-04T15:09:08Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDE1NTA4NQ==","url":"https://github.com/coala/coala-bears/pull/2446#discussion_r200155085","bodyText":"why re-order these lines?","diffHunk":"@@ -155,18 +206,32 @@ def get_pip_requirements(requirements):\n     pip_reqs, npm_reqs, gem_reqs = (\n         get_all_requirements(get_all_bears(bear_dirs)))\n \n-    requirements = {}\n-    requirements['overrides'] = 'coala-build.yaml'\n-    requirements['pip_requirements'] = get_pip_requirements(pip_reqs)\n-    requirements['npm_requirements'] = get_npm_requirements(npm_reqs)\n+    requirements = CommentedMap()\n     requirements['gem_requirements'] = get_gem_requirements(gem_reqs)\n+    requirements['npm_requirements'] = get_npm_requirements(npm_reqs)","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-07-04T15:09:23Z","lastEditedAt":null,"updatedAt":"2018-07-04T15:09:23Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDE1NTI5Mg==","url":"https://github.com/coala/coala-bears/pull/2446#discussion_r200155292","bodyText":"if the file doesnt exist, we dont want a backtrace.\nalso you have a pycodestyle error here.","diffHunk":"@@ -155,18 +206,32 @@ def get_pip_requirements(requirements):\n     pip_reqs, npm_reqs, gem_reqs = (\n         get_all_requirements(get_all_bears(bear_dirs)))\n \n-    requirements = {}\n-    requirements['overrides'] = 'coala-build.yaml'\n-    requirements['pip_requirements'] = get_pip_requirements(pip_reqs)\n-    requirements['npm_requirements'] = get_npm_requirements(npm_reqs)\n+    requirements = CommentedMap()\n     requirements['gem_requirements'] = get_gem_requirements(gem_reqs)\n+    requirements['npm_requirements'] = get_npm_requirements(npm_reqs)\n+    requirements['pip_requirements'] = get_pip_requirements(pip_reqs)\n+\n+    if args.update or args.check:\n+        input_file = open(os.path.join(PROJECT_DIR, BEAR_REQUIREMENTS_YAML),'r')","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-07-04T15:10:17Z","lastEditedAt":null,"updatedAt":"2018-07-04T15:10:17Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDE1NTg0MQ==","url":"https://github.com/coala/coala-bears/pull/2446#discussion_r200155841","bodyText":"if you are adding the CommentedMap in sort_requirements, I think you dont need it here. (not 100% sure as I havent tested this PR yet)","diffHunk":"@@ -124,7 +134,7 @@ def _to_entry(requirement, default_operator):\n \n \n def _get_requirements(requirements, default_operator, exclude=[]):\n-    return dict(\n+    return CommentedMap(","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-07-04T15:12:14Z","lastEditedAt":null,"updatedAt":"2018-07-04T15:12:14Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDE1NjM1MA==","url":"https://github.com/coala/coala-bears/pull/2446#discussion_r200156350","bodyText":"cant this be done in the iterator of _get_requirements ?","diffHunk":"@@ -144,6 +154,49 @@ def get_pip_requirements(requirements):\n     return _get_requirements(requirements, '~=', inherited_requirements)\n \n \n+def deep_update(target, src):\n+    for key, value in src.items():\n+        if not key in target:\n+            target[key] = copy.deepcopy(value)\n+        else:\n+            if isinstance(value, list):\n+                target[key].extend(value)\n+            elif isinstance(value, dict):\n+                deep_update(target[key], value)\n+            elif isinstance(value, set):\n+                target[key].update(value.copy())\n+            else:\n+                target[key] = copy.copy(value)\n+\n+\n+def deep_diff(target, src):\n+    errors = []\n+    for key, value in src.items():\n+        if not key in target:\n+                errors.append((key, 'Missing'))\n+        elif target[key] != value:\n+            if isinstance(value, list):\n+                if [x for x in value if x not in target[key]]:\n+                    errors.append(key)\n+            elif isinstance(value, dict):\n+                if target[key] != value:\n+                    e = deep_diff(target[key], value)\n+                    errors.append((key, e))\n+            elif isinstance(value, set):\n+                if set(target[key]).symmetric_difference(value):\n+                    errors.append(key)\n+            else:\n+                errors.append((key, target[key]))\n+    return errors\n+\n+\n+def sort_requirements(req_dict):","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-07-04T15:14:21Z","lastEditedAt":null,"updatedAt":"2018-07-04T15:14:21Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDE1NjczMg==","url":"https://github.com/coala/coala-bears/pull/2446#discussion_r200156732","bodyText":"... in req_dict.keys():\nand reqs is plural, which is inappropriate for a string.\nplural should be used for variables which hold containers of multiple items.","diffHunk":"@@ -144,6 +154,47 @@ def get_pip_requirements(requirements):\n     return _get_requirements(requirements, '~=', inherited_requirements)\n \n \n+def deep_update(target, src):\n+    for key, value in src.items():\n+        if not key in target:\n+            target[key] = copy.deepcopy(value)\n+        else:\n+            if isinstance(value, list):\n+                target[key].extend(value)\n+            elif isinstance(value, dict):\n+                deep_update(target[key], value)\n+            elif isinstance(value, set):\n+                target[key].update(value.copy())\n+            else:\n+                target[key] = copy.copy(value)\n+\n+\n+def deep_diff(target, src):\n+    errors = []\n+    for key, value in src.items():\n+        if not key in target:\n+                errors.append((key, 'Missing'))\n+        elif target[key] != value:\n+            if isinstance(value, list):\n+                if [x for x in value if x not in target[key]]:\n+                    errors.append(key)\n+            elif isinstance(value, dict):\n+                if target[key] != value:\n+                    errors.append((key, deep_diff(target[key], value)))\n+            elif isinstance(value, set):\n+                if set(target[key]).symmetric_difference(value):\n+                    errors.append(key)\n+            else:\n+                errors.append((key, target[key]))\n+    return errors\n+\n+\n+def sort_requirements(req_dict):\n+    for reqs in ['pip_requirements', 'npm_requirements', 'gem_requirements']:","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-07-04T15:15:53Z","lastEditedAt":null,"updatedAt":"2018-07-04T15:15:53Z"},{"id":"MDEyOklzc3VlQ29tbWVudDM4MjgxNzA5MQ==","url":"https://github.com/coala/coala-bears/pull/2446#issuecomment-382817091","bodyText":"@jayvdb this should be it. :))","diffHunk":null,"author":{"login":"nemaniarjun","avatarUrl":"https://avatars0.githubusercontent.com/u/15715894?v=4","name":"Arjun Nemani"},"createdAt":"2018-04-19T17:28:28Z","lastEditedAt":null,"updatedAt":"2018-04-19T17:28:28Z"},{"id":"MDEyOklzc3VlQ29tbWVudDM4MzM0MzcyOQ==","url":"https://github.com/coala/coala-bears/pull/2446#issuecomment-383343729","bodyText":"@jayvdb Can you drop this a small review? I have exams this week, and wont get much time to refine the PR. But all necessary functionality is working IMO.","diffHunk":null,"author":{"login":"nemaniarjun","avatarUrl":"https://avatars0.githubusercontent.com/u/15715894?v=4","name":"Arjun Nemani"},"createdAt":"2018-04-22T00:27:00Z","lastEditedAt":null,"updatedAt":"2018-04-22T00:27:00Z"},{"id":"MDEyOklzc3VlQ29tbWVudDM4MzM0NDc5MA==","url":"https://github.com/coala/coala-bears/pull/2446#issuecomment-383344790","bodyText":"Nice work so far, showing the principle idea will work.\nLeave it now, until after the exams.","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-04-22T00:44:18Z","lastEditedAt":null,"updatedAt":"2018-04-22T00:44:18Z"},{"id":"MDEyOklzc3VlQ29tbWVudDM5OTMzMjc1NQ==","url":"https://github.com/coala/coala-bears/pull/2446#issuecomment-399332755","bodyText":"Need to rebase on top of #2542 to get into the queue (current 3 in the queue waiting to be merged)","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-06-22T06:17:48Z","lastEditedAt":null,"updatedAt":"2018-06-22T06:17:48Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwMjY0MTA2MQ==","url":"https://github.com/coala/coala-bears/pull/2446#issuecomment-402641061","bodyText":"And rebase your PR before uploading!","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-07-05T08:10:58Z","lastEditedAt":null,"updatedAt":"2018-07-05T08:10:58Z"}]}}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1532311733000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/pull/2509","number":2509,"title":".ci/appveyor.yml: Add Python 3.6 jobs","body":"For short term contributors: we understand that getting your commits well\ndefined like we require is a hard task and takes some learning. If you\nlook to help without wanting to contribute long term there's no need\nfor you to learn this. Just drop us a message and we'll take care of brushing\nup your stuff for merge!\nChecklist\n\n I read the commit guidelines and I've followed\nthem.\n I ran coala over my code locally. (All commits have to pass\nindividually. It is not sufficient to have \"fixup commits\" on your PR,\nour bot will still report the issues for the previous commit.) You will\nlikely receive a lot of bot comments and build failures if coala does not\npass on every single commit!\n\nAfter you submit your pull request, DO NOT click the 'Update Branch' button.\nWhen asked for a rebase, consult coala.io/rebase\ninstead.\nPlease consider helping us by reviewing other peoples pull requests as well:\n\npick up any PR at https://coala.io/review\nreview it (check https://coala.io/reviewing for more info)\nif you are sure that it needs work, use corobo mark wip <URL> to get it out\nof the review queue.\n\nThe more you review, the more your score will grow at coala.io and we will\nreview your PRs faster!","comments":1,"createdAt":"2018-05-26T14:09:06Z","updatedAt":"2018-07-23T02:08:53Z","closedAt":null,"state":"open","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"process/pending review","color":"bfe5bf"},{"name":"size/XS","color":"00DE0F"},{"name":"status/blocked","color":"e11d21"}],"pullRequest":{"htmlUrl":"https://github.com/coala/coala-bears/pull/2509","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM5Nzg1NTA4Mw==","url":"https://github.com/coala/coala-bears/pull/2509#issuecomment-397855083","bodyText":"Blocked by #2511","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-06-17T05:06:03Z","lastEditedAt":null,"updatedAt":"2018-06-17T05:06:03Z"}]}}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1532309809000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/pull/2513","number":2513,"title":"PySafetyBear.py Fixed typo in docstring","body":"Fixes #2299","comments":3,"createdAt":"2018-05-27T09:17:51Z","updatedAt":"2018-07-23T01:36:49Z","closedAt":"2018-07-23T01:36:49Z","state":"closed","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"assignee":{"login":"wate123","avatarUrl":"https://avatars2.githubusercontent.com/u/19579704?v=4"},"labels":[{"name":"area/documentation","color":"c5def5"},{"name":"difficulty/newcomer","color":"65C8FF"},{"name":"process/wip","color":"fbca04"},{"name":"size/XS","color":"00DE0F"}],"pullRequest":{"htmlUrl":"https://github.com/coala/coala-bears/pull/2513","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM5NzUwMDgzOA==","url":"https://github.com/coala/coala-bears/pull/2513#issuecomment-397500838","bodyText":"@wate123 , this is failing because of the commit message.  Can you amend the commit in your branch?","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-06-15T03:12:41Z","lastEditedAt":null,"updatedAt":"2018-06-15T03:12:41Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwNjkxNTEzNg==","url":"https://github.com/coala/coala-bears/pull/2513#issuecomment-406915136","bodyText":"Someone else did it in #2630","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-07-23T01:36:45Z","lastEditedAt":null,"updatedAt":"2018-07-23T01:36:45Z"}]}}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1533705103000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/pull/2523","number":2523,"title":"CISkipInspectBear.py: Bear to inspect commits that disable CI builds","body":"This bear inspects git commits that\ndisable CI build.\nCloses #1976\n\nFor short term contributors: we understand that getting your commits well\ndefined like we require is a hard task and takes some learning. If you\nlook to help without wanting to contribute long term there's no need\nfor you to learn this. Just drop us a message and we'll take care of brushing\nup your stuff for merge!\nChecklist\n\n I read the commit guidelines and I've followed\nthem.\n I ran coala over my code locally. (All commits have to pass\nindividually. It is not sufficient to have \"fixup commits\" on your PR,\nour bot will still report the issues for the previous commit.) You will\nlikely receive a lot of bot comments and build failures if coala does not\npass on every single commit!\n\nAfter you submit your pull request, DO NOT click the 'Update Branch' button.\nWhen asked for a rebase, consult coala.io/rebase\ninstead.\nPlease consider helping us by reviewing other peoples pull requests as well:\n\npick up any PR at https://coala.io/review\nreview it (check https://coala.io/reviewing for more info)\nif you are sure that it needs work, use corobo mark wip <URL> to get it out\nof the review queue.\n\nThe more you review, the more your score will grow at coala.io and we will\nreview your PRs faster!","comments":0,"createdAt":"2018-06-06T12:57:42Z","updatedAt":"2018-08-08T05:11:43Z","closedAt":null,"state":"open","user":{"login":"kriti21","avatarUrl":"https://avatars3.githubusercontent.com/u/19872082?v=4"},"owner":{"login":"kriti21","avatarUrl":"https://avatars3.githubusercontent.com/u/19872082?v=4"},"labels":[{"name":"bear proposal","color":"ADFF2F"},{"name":"difficulty/medium","color":"0052cc"},{"name":"process/wip","color":"fbca04"},{"name":"size/S","color":"B1CF0A"}],"pullRequest":{"htmlUrl":"https://github.com/coala/coala-bears/pull/2523","comments":[{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MzcyODI1NA==","url":"https://github.com/coala/coala-bears/pull/2523#discussion_r193728254","bodyText":"this regex is completely wrong.","diffHunk":"@@ -0,0 +1,44 @@\n+\n+from coalib.misc.Shell import run_shell_command\n+from bears.vcs.CommitBear import _CommitBear\n+\n+\n+class SkipCIBear(_CommitBear):\n+    CI_PROVIDERS_METADATA = {\n+        'circleci': r'.*[ci skip][skip ci].*',","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-06-07T12:31:24Z","lastEditedAt":null,"updatedAt":"2018-06-07T12:31:24Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MzczMzcyNA==","url":"https://github.com/coala/coala-bears/pull/2523#discussion_r193733724","bodyText":"an extra level is needed in the abstraction, which needs to be a separate PR before this.\nthis isnt creating a meta bear.\nA meta bear is like URLBear, which only yields HiddenResult.  See URLHeadBear and InvalidLinkBear for how they all link together.\nWe need a VCSCommitBear which only yields a CommitResult(HiddenResult).  SkipCIBear would then receive those CommitResult and only yield the CommitResult if the commit was a CI skip.\n(and while trying to understand this, it is better to simply ignore GitCommitBear and HgCommitBear -- those will need to be glued back in after the redesign.)","diffHunk":"@@ -0,0 +1,44 @@\n+\n+from coalib.misc.Shell import run_shell_command\n+from bears.vcs.CommitBear import _CommitBear\n+\n+\n+class SkipCIBear(_CommitBear):","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNDgzNTYyMg==","createdAt":"2018-06-08T18:36:00Z","content":"THUMBS_UP","user":{"login":"damngamerz","name":"Saurav Singh"}}],"createdAt":"2018-06-07T12:50:20Z","lastEditedAt":null,"updatedAt":"2018-06-07T12:50:20Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MzczNDI3MA==","url":"https://github.com/coala/coala-bears/pull/2523#discussion_r193734270","bodyText":"this type of design is exactly what we dont want.  this bear has way too much logic in it already.","diffHunk":"@@ -150,6 +157,11 @@ def run(self,\n                 yield Result(self, 'HEAD commit has no message.')\n             return\n \n+        result_message = self.check_skip_ci_build(","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-06-07T12:52:11Z","lastEditedAt":null,"updatedAt":"2018-06-07T12:52:11Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5Mzk4NzQ1OA==","url":"https://github.com/coala/coala-bears/pull/2523#discussion_r193987458","bodyText":"Let me see if I am getting this straight.\nI have to make a bear that would return information about the HEAD commit (as HiddenResult) such as whether it is a special commit and possibly a list of modified files. Perhaps an output like:\n[<CommitResult object(id=0x111dae7389c04f699a0ccc9e4520fccf, \norigin='VCSCommitBear', \nmessage='HEAD commit information', \ncontents=\n\t({\n\t  \t'commit_type': ['revert_commit', 'ci_skip_commit', ''], \n\t  \t'modified_files': ['bears/general/InvalidLinkBear.py', ''], \n\t  \t'commit_sha': 'd83ddce283a58326074b57810dc3aec84e30e8e8'\n\t },\n\t)) \nat 0x7f6f3894dba8>\n]\n\nAnd this information can then be used by SkipCIBear, CheckMergeCommitBear and CheckRevertCommitBear respectivey.","diffHunk":"@@ -0,0 +1,44 @@\n+\n+from coalib.misc.Shell import run_shell_command\n+from bears.vcs.CommitBear import _CommitBear\n+\n+\n+class SkipCIBear(_CommitBear):","author":{"login":"kriti21","avatarUrl":"https://avatars3.githubusercontent.com/u/19872082?v=4","name":"Kriti Rohilla"},"reactions":[],"createdAt":"2018-06-08T08:31:35Z","lastEditedAt":null,"updatedAt":"2018-06-08T08:31:35Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5Mzk4Nzc1OA==","url":"https://github.com/coala/coala-bears/pull/2523#discussion_r193987758","bodyText":"Also all these bears would be independent of _CommitBear so they will be mentioned in the commit section of .coafile separately.","diffHunk":"@@ -0,0 +1,44 @@\n+\n+from coalib.misc.Shell import run_shell_command\n+from bears.vcs.CommitBear import _CommitBear\n+\n+\n+class SkipCIBear(_CommitBear):","author":{"login":"kriti21","avatarUrl":"https://avatars3.githubusercontent.com/u/19872082?v=4","name":"Kriti Rohilla"},"reactions":[],"createdAt":"2018-06-08T08:32:44Z","lastEditedAt":null,"updatedAt":"2018-06-08T08:32:44Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDE1MDE1Nw==","url":"https://github.com/coala/coala-bears/pull/2523#discussion_r194150157","bodyText":"Hey @kriti21 I think what john says makes a lot of sense here. Abstraction is much better and then we can play around with other bear's using it.","diffHunk":"@@ -0,0 +1,44 @@\n+\n+from coalib.misc.Shell import run_shell_command\n+from bears.vcs.CommitBear import _CommitBear\n+\n+\n+class SkipCIBear(_CommitBear):","author":{"login":"damngamerz","avatarUrl":"https://avatars2.githubusercontent.com/u/13048113?v=4","name":"Saurav Singh"},"reactions":[],"createdAt":"2018-06-08T18:49:09Z","lastEditedAt":null,"updatedAt":"2018-06-08T18:49:09Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTkyODQ2NA==","url":"https://github.com/coala/coala-bears/pull/2523#discussion_r201928464","bodyText":"Uppercase 'W'","diffHunk":"@@ -0,0 +1,80 @@\n+import re\n+\n+from bears.vcs.git.GitCommitBear import GitCommitBear\n+from coalib.bears.GlobalBear import GlobalBear\n+from coalib.results.Result import Result\n+\n+\n+class CISkipInspectBear(GlobalBear):\n+    LANGUAGES = {'Git'}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+\n+    CI_PROVIDERS_METADATA = {\n+          'CircleCI': r'\\[ci skip\\]|\\[skip ci\\]',\n+          'TravisCI': r'\\[ci skip\\]|\\[skip ci\\]',\n+          'AppveyorCI': r'\\[skip ci\\]|\\[ci skip\\]|\\[skip appveyor\\]',\n+          }\n+\n+    BEAR_DEPS = {GitCommitBear}\n+\n+    def run(self, dependency_results,\n+            ci_engines_used: list = [],\n+            allow_ciskip_commit: bool = True,\n+            **kwargs):\n+        \"\"\"\n+        Inspect the HEAD commit to check if it disables\n+        CI build.\n+\n+        :param allow_ciskip_commit: whether disaling CI","author":{"login":"refeed","avatarUrl":"https://avatars1.githubusercontent.com/u/20320125?v=4","name":"Rafid Aslam"},"reactions":[],"createdAt":"2018-07-12T07:04:24Z","lastEditedAt":null,"updatedAt":"2018-07-12T07:04:24Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTkyODU2Mw==","url":"https://github.com/coala/coala-bears/pull/2523#discussion_r201928563","bodyText":"Keep the arguments order consistent","diffHunk":"@@ -0,0 +1,80 @@\n+import re\n+\n+from bears.vcs.git.GitCommitBear import GitCommitBear\n+from coalib.bears.GlobalBear import GlobalBear\n+from coalib.results.Result import Result\n+\n+\n+class CISkipInspectBear(GlobalBear):\n+    LANGUAGES = {'Git'}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+\n+    CI_PROVIDERS_METADATA = {\n+          'CircleCI': r'\\[ci skip\\]|\\[skip ci\\]',\n+          'TravisCI': r'\\[ci skip\\]|\\[skip ci\\]',\n+          'AppveyorCI': r'\\[skip ci\\]|\\[ci skip\\]|\\[skip appveyor\\]',\n+          }\n+\n+    BEAR_DEPS = {GitCommitBear}\n+\n+    def run(self, dependency_results,\n+            ci_engines_used: list = [],\n+            allow_ciskip_commit: bool = True,\n+            **kwargs):\n+        \"\"\"\n+        Inspect the HEAD commit to check if it disables\n+        CI build.\n+\n+        :param allow_ciskip_commit: whether disaling CI\n+                                    build is allowed or\n+                                    not.\n+        :param ci_engines_used:     CI engines used in","author":{"login":"refeed","avatarUrl":"https://avatars1.githubusercontent.com/u/20320125?v=4","name":"Rafid Aslam"},"reactions":[],"createdAt":"2018-07-12T07:04:54Z","lastEditedAt":null,"updatedAt":"2018-07-12T07:04:54Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTkyODc0NQ==","url":"https://github.com/coala/coala-bears/pull/2523#discussion_r201928745","bodyText":"Raise a RuntimeError instead of Result","diffHunk":"@@ -0,0 +1,80 @@\n+import re\n+\n+from bears.vcs.git.GitCommitBear import GitCommitBear\n+from coalib.bears.GlobalBear import GlobalBear\n+from coalib.results.Result import Result\n+\n+\n+class CISkipInspectBear(GlobalBear):\n+    LANGUAGES = {'Git'}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+\n+    CI_PROVIDERS_METADATA = {\n+          'CircleCI': r'\\[ci skip\\]|\\[skip ci\\]',\n+          'TravisCI': r'\\[ci skip\\]|\\[skip ci\\]',\n+          'AppveyorCI': r'\\[skip ci\\]|\\[ci skip\\]|\\[skip appveyor\\]',\n+          }\n+\n+    BEAR_DEPS = {GitCommitBear}\n+\n+    def run(self, dependency_results,\n+            ci_engines_used: list = [],\n+            allow_ciskip_commit: bool = True,\n+            **kwargs):\n+        \"\"\"\n+        Inspect the HEAD commit to check if it disables\n+        CI build.\n+\n+        :param allow_ciskip_commit: whether disaling CI\n+                                    build is allowed or\n+                                    not.\n+        :param ci_engines_used:     CI engines used in\n+                                    the project.\n+        \"\"\"\n+        for result in dependency_results[GitCommitBear.name]:\n+\n+            if not allow_ciskip_commit:\n+                yield Result(self, 'Skipping CI build is not allowed.')\n+                return\n+\n+            for ci_engine in ci_engines_used:\n+\n+                if ci_engine not in self.CI_PROVIDERS_METADATA:\n+                    yield Result(self,","author":{"login":"refeed","avatarUrl":"https://avatars1.githubusercontent.com/u/20320125?v=4","name":"Rafid Aslam"},"reactions":[],"createdAt":"2018-07-12T07:06:00Z","lastEditedAt":null,"updatedAt":"2018-07-12T07:06:00Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk2NDE5MA==","url":"https://github.com/coala/coala-bears/pull/2523#discussion_r205964190","bodyText":"Why would someone enable this bear and allow_ciskip_commit ?\nThat would cause the bear to do useless work?","diffHunk":"@@ -0,0 +1,78 @@\n+import re\n+\n+from bears.vcs.git.GitCommitMetadataBear import GitCommitMetadataBear\n+from coalib.bears.GlobalBear import GlobalBear\n+from coalib.results.Result import Result\n+\n+\n+class CISkipInspectBear(GlobalBear):\n+    LANGUAGES = {'Git'}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+\n+    CI_PROVIDERS_METADATA = {\n+          'CircleCI': r'\\[ci skip\\]|\\[skip ci\\]',\n+          'TravisCI': r'\\[ci skip\\]|\\[skip ci\\]',\n+          'AppveyorCI': r'\\[skip ci\\]|\\[ci skip\\]|\\[skip appveyor\\]',\n+          }\n+\n+    BEAR_DEPS = {GitCommitMetadataBear}\n+\n+    def run(self, dependency_results,\n+            ci_engines_used: list = [],\n+            allow_ciskip_commit: bool = True,\n+            **kwargs):\n+        \"\"\"\n+        Inspect the HEAD commit to check if it disables\n+        CI build.\n+\n+        :param ci_engines_used:     CI engines used in\n+                                    the project.\n+        :param allow_ciskip_commit: Whether disaling CI","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-29T07:49:30Z","lastEditedAt":null,"updatedAt":"2018-07-29T07:49:30Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk2NDI0OQ==","url":"https://github.com/coala/coala-bears/pull/2523#discussion_r205964249","bodyText":"These filename globs should be settings that a project can configure","diffHunk":"@@ -0,0 +1,78 @@\n+import re\n+\n+from bears.vcs.git.GitCommitMetadataBear import GitCommitMetadataBear\n+from coalib.bears.GlobalBear import GlobalBear\n+from coalib.results.Result import Result\n+\n+\n+class CISkipInspectBear(GlobalBear):\n+    LANGUAGES = {'Git'}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+\n+    CI_PROVIDERS_METADATA = {\n+          'CircleCI': r'\\[ci skip\\]|\\[skip ci\\]',\n+          'TravisCI': r'\\[ci skip\\]|\\[skip ci\\]',\n+          'AppveyorCI': r'\\[skip ci\\]|\\[ci skip\\]|\\[skip appveyor\\]',\n+          }\n+\n+    BEAR_DEPS = {GitCommitMetadataBear}\n+\n+    def run(self, dependency_results,\n+            ci_engines_used: list = [],\n+            allow_ciskip_commit: bool = True,\n+            **kwargs):\n+        \"\"\"\n+        Inspect the HEAD commit to check if it disables\n+        CI build.\n+\n+        :param ci_engines_used:     CI engines used in\n+                                    the project.\n+        :param allow_ciskip_commit: Whether disaling CI\n+                                    build is allowed or\n+                                    not.\n+        \"\"\"\n+        for result in dependency_results[GitCommitMetadataBear.name]:\n+\n+            if not allow_ciskip_commit:\n+                yield Result(self, 'Skipping CI build is not allowed.')\n+                return\n+\n+            for ci_engine in ci_engines_used:\n+\n+                if ci_engine not in self.CI_PROVIDERS_METADATA:\n+                    raise RuntimeError('%s is not supported by '\n+                                       'CISkipInspectBear.' % (ci_engine))\n+\n+                supported_regex = self.CI_PROVIDERS_METADATA[ci_engine]\n+\n+                # AppVeyor allows to skip build by commit if the\n+                # supported sequence is present in the title of the\n+                # commit only. All other CI tools allow these sequences\n+                # to be present anywhere in the commit message.\n+                if ci_engine == 'AppveyorCI':\n+                    pos = result.raw_commit_message.find('\\n')\n+                    commit_title = result.raw_commit_message[:pos] if (\n+                        pos != -1) else result.raw_commit_message\n+\n+                    match = re.search(supported_regex, commit_title)\n+\n+                else:\n+                    match = re.search(\n+                        supported_regex, result.raw_commit_message)\n+\n+                if match:\n+\n+                    all_files = (result.modified_files +\n+                                 result.added_files + result.deleted_files)\n+\n+                    for file in all_files:\n+                        if (file.endswith('Test.py') or","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-29T07:51:36Z","lastEditedAt":null,"updatedAt":"2018-07-29T07:51:36Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk3MTM1NQ==","url":"https://github.com/coala/coala-bears/pull/2523#discussion_r205971355","bodyText":"this parameter isnt named very well.\nindentation of the descriptions is wrong.","diffHunk":"@@ -0,0 +1,74 @@\n+import re\n+\n+from bears.vcs.git.GitCommitMetadataBear import GitCommitMetadataBear\n+from coalib.bears.GlobalBear import GlobalBear\n+from coalib.results.Result import Result\n+\n+\n+class CISkipInspectBear(GlobalBear):\n+    LANGUAGES = {'Git'}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+\n+    CI_PROVIDERS_METADATA = {\n+          'CircleCI': r'\\[ci skip\\]|\\[skip ci\\]',\n+          'TravisCI': r'\\[ci skip\\]|\\[skip ci\\]',\n+          'AppveyorCI': r'\\[skip ci\\]|\\[ci skip\\]|\\[skip appveyor\\]',\n+          }\n+\n+    BEAR_DEPS = {GitCommitMetadataBear}\n+\n+    def run(self, dependency_results,\n+            ci_engines_used: list = [],\n+            filename_globs: list = [],\n+            **kwargs):\n+        \"\"\"\n+        Inspect the HEAD commit to check if it disables\n+        CI build.\n+\n+        :param ci_engines_used:     CI engines used in\n+                                    the project.\n+        :param filename_globs:      To identify files","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-29T12:12:47Z","lastEditedAt":null,"updatedAt":"2018-07-29T12:12:47Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk3MTQyNQ==","url":"https://github.com/coala/coala-bears/pull/2523#discussion_r205971425","bodyText":"Is this bear just inspecting, or does it also perform checks?\nDescribe it accurately","diffHunk":"@@ -0,0 +1,74 @@\n+import re\n+\n+from bears.vcs.git.GitCommitMetadataBear import GitCommitMetadataBear\n+from coalib.bears.GlobalBear import GlobalBear\n+from coalib.results.Result import Result\n+\n+\n+class CISkipInspectBear(GlobalBear):\n+    LANGUAGES = {'Git'}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+\n+    CI_PROVIDERS_METADATA = {\n+          'CircleCI': r'\\[ci skip\\]|\\[skip ci\\]',\n+          'TravisCI': r'\\[ci skip\\]|\\[skip ci\\]',\n+          'AppveyorCI': r'\\[skip ci\\]|\\[ci skip\\]|\\[skip appveyor\\]',\n+          }\n+\n+    BEAR_DEPS = {GitCommitMetadataBear}\n+\n+    def run(self, dependency_results,\n+            ci_engines_used: list = [],\n+            filename_globs: list = [],\n+            **kwargs):\n+        \"\"\"\n+        Inspect the HEAD commit to check if it disables","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-29T12:15:12Z","lastEditedAt":null,"updatedAt":"2018-07-29T12:15:12Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk3MTQ3MQ==","url":"https://github.com/coala/coala-bears/pull/2523#discussion_r205971471","bodyText":"if the user doesnt supply a value for ci_engines_used, this will do nothing.\na bear which does checks shouldnt do nothing when running without any explicit setting overrides in .coafile.","diffHunk":"@@ -0,0 +1,74 @@\n+import re\n+\n+from bears.vcs.git.GitCommitMetadataBear import GitCommitMetadataBear\n+from coalib.bears.GlobalBear import GlobalBear\n+from coalib.results.Result import Result\n+\n+\n+class CISkipInspectBear(GlobalBear):\n+    LANGUAGES = {'Git'}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+\n+    CI_PROVIDERS_METADATA = {\n+          'CircleCI': r'\\[ci skip\\]|\\[skip ci\\]',\n+          'TravisCI': r'\\[ci skip\\]|\\[skip ci\\]',\n+          'AppveyorCI': r'\\[skip ci\\]|\\[ci skip\\]|\\[skip appveyor\\]',\n+          }\n+\n+    BEAR_DEPS = {GitCommitMetadataBear}\n+\n+    def run(self, dependency_results,\n+            ci_engines_used: list = [],\n+            filename_globs: list = [],\n+            **kwargs):\n+        \"\"\"\n+        Inspect the HEAD commit to check if it disables\n+        CI build.\n+\n+        :param ci_engines_used:     CI engines used in\n+                                    the project.\n+        :param filename_globs:      To identify files\n+                                    that should not skip\n+                                    CI builds.\n+        \"\"\"\n+        for result in dependency_results[GitCommitMetadataBear.name]:\n+\n+            for ci_engine in ci_engines_used:","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-29T12:16:43Z","lastEditedAt":null,"updatedAt":"2018-07-29T12:16:43Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk3MTUwNA==","url":"https://github.com/coala/coala-bears/pull/2523#discussion_r205971504","bodyText":"if there are no globs, this will do nothing, and report no errors.\nUse RuntimeError or something if the user hasnt supplied necessary settings.","diffHunk":"@@ -0,0 +1,74 @@\n+import re\n+\n+from bears.vcs.git.GitCommitMetadataBear import GitCommitMetadataBear\n+from coalib.bears.GlobalBear import GlobalBear\n+from coalib.results.Result import Result\n+\n+\n+class CISkipInspectBear(GlobalBear):\n+    LANGUAGES = {'Git'}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+\n+    CI_PROVIDERS_METADATA = {\n+          'CircleCI': r'\\[ci skip\\]|\\[skip ci\\]',\n+          'TravisCI': r'\\[ci skip\\]|\\[skip ci\\]',\n+          'AppveyorCI': r'\\[skip ci\\]|\\[ci skip\\]|\\[skip appveyor\\]',\n+          }\n+\n+    BEAR_DEPS = {GitCommitMetadataBear}\n+\n+    def run(self, dependency_results,\n+            ci_engines_used: list = [],\n+            filename_globs: list = [],\n+            **kwargs):\n+        \"\"\"\n+        Inspect the HEAD commit to check if it disables\n+        CI build.\n+\n+        :param ci_engines_used:     CI engines used in\n+                                    the project.\n+        :param filename_globs:      To identify files\n+                                    that should not skip\n+                                    CI builds.\n+        \"\"\"\n+        for result in dependency_results[GitCommitMetadataBear.name]:\n+\n+            for ci_engine in ci_engines_used:\n+\n+                if ci_engine not in self.CI_PROVIDERS_METADATA:\n+                    raise RuntimeError('%s is not supported by '\n+                                       'CISkipInspectBear.' % (ci_engine))\n+\n+                supported_regex = self.CI_PROVIDERS_METADATA[ci_engine]\n+\n+                # AppVeyor allows to skip build by commit if the\n+                # supported sequence is present in the title of the\n+                # commit only. All other CI tools allow these sequences\n+                # to be present anywhere in the commit message.\n+                if ci_engine == 'AppveyorCI':\n+                    pos = result.raw_commit_message.find('\\n')\n+                    commit_title = result.raw_commit_message[:pos] if (\n+                        pos != -1) else result.raw_commit_message\n+\n+                    match = re.search(supported_regex, commit_title)\n+\n+                else:\n+                    match = re.search(\n+                        supported_regex, result.raw_commit_message)\n+\n+                if match:\n+\n+                    all_files = (result.modified_files +\n+                                 result.added_files + result.deleted_files)\n+\n+                    for file in all_files:\n+                        for glob in filename_globs:","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-29T12:18:11Z","lastEditedAt":null,"updatedAt":"2018-07-29T12:18:11Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk3MTUyOA==","url":"https://github.com/coala/coala-bears/pull/2523#discussion_r205971528","bodyText":"something called \"glob\" should be processed using the glob module.","diffHunk":"@@ -0,0 +1,74 @@\n+import re\n+\n+from bears.vcs.git.GitCommitMetadataBear import GitCommitMetadataBear\n+from coalib.bears.GlobalBear import GlobalBear\n+from coalib.results.Result import Result\n+\n+\n+class CISkipInspectBear(GlobalBear):\n+    LANGUAGES = {'Git'}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+\n+    CI_PROVIDERS_METADATA = {\n+          'CircleCI': r'\\[ci skip\\]|\\[skip ci\\]',\n+          'TravisCI': r'\\[ci skip\\]|\\[skip ci\\]',\n+          'AppveyorCI': r'\\[skip ci\\]|\\[ci skip\\]|\\[skip appveyor\\]',\n+          }\n+\n+    BEAR_DEPS = {GitCommitMetadataBear}\n+\n+    def run(self, dependency_results,\n+            ci_engines_used: list = [],\n+            filename_globs: list = [],\n+            **kwargs):\n+        \"\"\"\n+        Inspect the HEAD commit to check if it disables\n+        CI build.\n+\n+        :param ci_engines_used:     CI engines used in\n+                                    the project.\n+        :param filename_globs:      To identify files\n+                                    that should not skip\n+                                    CI builds.\n+        \"\"\"\n+        for result in dependency_results[GitCommitMetadataBear.name]:\n+\n+            for ci_engine in ci_engines_used:\n+\n+                if ci_engine not in self.CI_PROVIDERS_METADATA:\n+                    raise RuntimeError('%s is not supported by '\n+                                       'CISkipInspectBear.' % (ci_engine))\n+\n+                supported_regex = self.CI_PROVIDERS_METADATA[ci_engine]\n+\n+                # AppVeyor allows to skip build by commit if the\n+                # supported sequence is present in the title of the\n+                # commit only. All other CI tools allow these sequences\n+                # to be present anywhere in the commit message.\n+                if ci_engine == 'AppveyorCI':\n+                    pos = result.raw_commit_message.find('\\n')\n+                    commit_title = result.raw_commit_message[:pos] if (\n+                        pos != -1) else result.raw_commit_message\n+\n+                    match = re.search(supported_regex, commit_title)\n+\n+                else:\n+                    match = re.search(\n+                        supported_regex, result.raw_commit_message)\n+\n+                if match:\n+\n+                    all_files = (result.modified_files +\n+                                 result.added_files + result.deleted_files)\n+\n+                    for file in all_files:\n+                        for glob in filename_globs:\n+                            if file.endswith(glob):","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-29T12:18:47Z","lastEditedAt":null,"updatedAt":"2018-07-29T12:18:47Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjIzNDUzMA==","url":"https://github.com/coala/coala-bears/pull/2523#discussion_r206234530","bodyText":"why are you doing the same check multiple times inside a for loop?","diffHunk":"@@ -0,0 +1,80 @@\n+import re\n+\n+from bears.vcs.git.GitCommitMetadataBear import GitCommitMetadataBear\n+from coalib.bears.GlobalBear import GlobalBear\n+from coalib.results.Result import Result\n+\n+\n+class CISkipInspectBear(GlobalBear):\n+    LANGUAGES = {'Git'}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+\n+    CI_PROVIDERS_METADATA = {\n+          'CircleCI': r'\\[ci skip\\]|\\[skip ci\\]',\n+          'TravisCI': r'\\[ci skip\\]|\\[skip ci\\]',\n+          'AppveyorCI': r'\\[skip ci\\]|\\[ci skip\\]|\\[skip appveyor\\]',\n+          }\n+\n+    BEAR_DEPS = {GitCommitMetadataBear}\n+\n+    def run(self, dependency_results,\n+            ci_engines_used: list = [],\n+            filename_patterns: list = [],\n+            **kwargs):\n+        \"\"\"\n+        Check the HEAD commit to see if it disables CI build and\n+        return result accordingly.\n+\n+        :param ci_engines_used:     CI engines used in the project.\n+        :param filename_patterns:   To identify files that should not\n+                                    skip CI builds.\n+        \"\"\"\n+        for result in dependency_results[GitCommitMetadataBear.name]:\n+\n+            if not ci_engines_used:","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-30T16:18:45Z","lastEditedAt":null,"updatedAt":"2018-07-30T16:18:45Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjczNjA2Mg==","url":"https://github.com/coala/coala-bears/pull/2523#discussion_r206736062","bodyText":"Remove the default value from ci_engines_used and filename_patterns. coala will automatically raise an exception and warn the user that an option is missing if the user didn't fill the option.","diffHunk":"@@ -0,0 +1,80 @@\n+import re\n+\n+from bears.vcs.git.GitCommitMetadataBear import GitCommitMetadataBear\n+from coalib.bears.GlobalBear import GlobalBear\n+from coalib.results.Result import Result\n+\n+\n+class CISkipInspectBear(GlobalBear):\n+    LANGUAGES = {'Git'}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+\n+    CI_PROVIDERS_METADATA = {\n+          'CircleCI': r'\\[ci skip\\]|\\[skip ci\\]',\n+          'TravisCI': r'\\[ci skip\\]|\\[skip ci\\]',\n+          'AppveyorCI': r'\\[skip ci\\]|\\[ci skip\\]|\\[skip appveyor\\]',\n+          }\n+\n+    BEAR_DEPS = {GitCommitMetadataBear}\n+\n+    def run(self, dependency_results,\n+            ci_engines_used: list = [],","author":{"login":"refeed","avatarUrl":"https://avatars1.githubusercontent.com/u/20320125?v=4","name":"Rafid Aslam"},"reactions":[],"createdAt":"2018-08-01T02:11:23Z","lastEditedAt":null,"updatedAt":"2018-08-01T02:11:23Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjczNjE1Mw==","url":"https://github.com/coala/coala-bears/pull/2523#discussion_r206736153","bodyText":"Remove this if, see my comment above about removing default value from the parameters","diffHunk":"@@ -0,0 +1,80 @@\n+import re\n+\n+from bears.vcs.git.GitCommitMetadataBear import GitCommitMetadataBear\n+from coalib.bears.GlobalBear import GlobalBear\n+from coalib.results.Result import Result\n+\n+\n+class CISkipInspectBear(GlobalBear):\n+    LANGUAGES = {'Git'}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+\n+    CI_PROVIDERS_METADATA = {\n+          'CircleCI': r'\\[ci skip\\]|\\[skip ci\\]',\n+          'TravisCI': r'\\[ci skip\\]|\\[skip ci\\]',\n+          'AppveyorCI': r'\\[skip ci\\]|\\[ci skip\\]|\\[skip appveyor\\]',\n+          }\n+\n+    BEAR_DEPS = {GitCommitMetadataBear}\n+\n+    def run(self, dependency_results,\n+            ci_engines_used: list = [],\n+            filename_patterns: list = [],\n+            **kwargs):\n+        \"\"\"\n+        Check the HEAD commit to see if it disables CI build and\n+        return result accordingly.\n+\n+        :param ci_engines_used:     CI engines used in the project.\n+        :param filename_patterns:   To identify files that should not\n+                                    skip CI builds.\n+        \"\"\"\n+        if not ci_engines_used:","author":{"login":"refeed","avatarUrl":"https://avatars1.githubusercontent.com/u/20320125?v=4","name":"Rafid Aslam"},"reactions":[],"createdAt":"2018-08-01T02:12:10Z","lastEditedAt":null,"updatedAt":"2018-08-01T02:12:10Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjczNjI1OA==","url":"https://github.com/coala/coala-bears/pull/2523#discussion_r206736258","bodyText":"Remove this if","diffHunk":"@@ -0,0 +1,80 @@\n+import re\n+\n+from bears.vcs.git.GitCommitMetadataBear import GitCommitMetadataBear\n+from coalib.bears.GlobalBear import GlobalBear\n+from coalib.results.Result import Result\n+\n+\n+class CISkipInspectBear(GlobalBear):\n+    LANGUAGES = {'Git'}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+\n+    CI_PROVIDERS_METADATA = {\n+          'CircleCI': r'\\[ci skip\\]|\\[skip ci\\]',\n+          'TravisCI': r'\\[ci skip\\]|\\[skip ci\\]',\n+          'AppveyorCI': r'\\[skip ci\\]|\\[ci skip\\]|\\[skip appveyor\\]',\n+          }\n+\n+    BEAR_DEPS = {GitCommitMetadataBear}\n+\n+    def run(self, dependency_results,\n+            ci_engines_used: list = [],\n+            filename_patterns: list = [],\n+            **kwargs):\n+        \"\"\"\n+        Check the HEAD commit to see if it disables CI build and\n+        return result accordingly.\n+\n+        :param ci_engines_used:     CI engines used in the project.\n+        :param filename_patterns:   To identify files that should not\n+                                    skip CI builds.\n+        \"\"\"\n+        if not ci_engines_used:\n+            raise RuntimeError('CI engines used by the project '\n+                               'not given.')\n+\n+        if not filename_patterns:","author":{"login":"refeed","avatarUrl":"https://avatars1.githubusercontent.com/u/20320125?v=4","name":"Rafid Aslam"},"reactions":[],"createdAt":"2018-08-01T02:12:28Z","lastEditedAt":null,"updatedAt":"2018-08-01T02:12:28Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjczNjc2OA==","url":"https://github.com/coala/coala-bears/pull/2523#discussion_r206736768","bodyText":"Do self.err(msg) before raising the RuntimeError","diffHunk":"@@ -0,0 +1,80 @@\n+import re\n+\n+from bears.vcs.git.GitCommitMetadataBear import GitCommitMetadataBear\n+from coalib.bears.GlobalBear import GlobalBear\n+from coalib.results.Result import Result\n+\n+\n+class CISkipInspectBear(GlobalBear):\n+    LANGUAGES = {'Git'}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+\n+    CI_PROVIDERS_METADATA = {\n+          'CircleCI': r'\\[ci skip\\]|\\[skip ci\\]',\n+          'TravisCI': r'\\[ci skip\\]|\\[skip ci\\]',\n+          'AppveyorCI': r'\\[skip ci\\]|\\[ci skip\\]|\\[skip appveyor\\]',\n+          }\n+\n+    BEAR_DEPS = {GitCommitMetadataBear}\n+\n+    def run(self, dependency_results,\n+            ci_engines_used: list = [],\n+            filename_patterns: list = [],\n+            **kwargs):\n+        \"\"\"\n+        Check the HEAD commit to see if it disables CI build and\n+        return result accordingly.\n+\n+        :param ci_engines_used:     CI engines used in the project.\n+        :param filename_patterns:   To identify files that should not\n+                                    skip CI builds.\n+        \"\"\"\n+        if not ci_engines_used:\n+            raise RuntimeError('CI engines used by the project '\n+                               'not given.')\n+\n+        if not filename_patterns:\n+            raise RuntimeError('Patterns of filenames which cannot '\n+                               'escape CI builds not given.')\n+\n+        for result in dependency_results[GitCommitMetadataBear.name]:\n+\n+            for ci_engine in ci_engines_used:\n+\n+                if ci_engine not in self.CI_PROVIDERS_METADATA:\n+                    raise RuntimeError('%s is not supported by '","author":{"login":"refeed","avatarUrl":"https://avatars1.githubusercontent.com/u/20320125?v=4","name":"Rafid Aslam"},"reactions":[],"createdAt":"2018-08-01T02:16:37Z","lastEditedAt":null,"updatedAt":"2018-08-01T02:16:37Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjczNzMwOQ==","url":"https://github.com/coala/coala-bears/pull/2523#discussion_r206737309","bodyText":"The pattern isn't matching coafile nor test files anymore, please change the message","diffHunk":"@@ -0,0 +1,80 @@\n+import re\n+\n+from bears.vcs.git.GitCommitMetadataBear import GitCommitMetadataBear\n+from coalib.bears.GlobalBear import GlobalBear\n+from coalib.results.Result import Result\n+\n+\n+class CISkipInspectBear(GlobalBear):\n+    LANGUAGES = {'Git'}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+\n+    CI_PROVIDERS_METADATA = {\n+          'CircleCI': r'\\[ci skip\\]|\\[skip ci\\]',\n+          'TravisCI': r'\\[ci skip\\]|\\[skip ci\\]',\n+          'AppveyorCI': r'\\[skip ci\\]|\\[ci skip\\]|\\[skip appveyor\\]',\n+          }\n+\n+    BEAR_DEPS = {GitCommitMetadataBear}\n+\n+    def run(self, dependency_results,\n+            ci_engines_used: list = [],\n+            filename_patterns: list = [],\n+            **kwargs):\n+        \"\"\"\n+        Check the HEAD commit to see if it disables CI build and\n+        return result accordingly.\n+\n+        :param ci_engines_used:     CI engines used in the project.\n+        :param filename_patterns:   To identify files that should not\n+                                    skip CI builds.\n+        \"\"\"\n+        if not ci_engines_used:\n+            raise RuntimeError('CI engines used by the project '\n+                               'not given.')\n+\n+        if not filename_patterns:\n+            raise RuntimeError('Patterns of filenames which cannot '\n+                               'escape CI builds not given.')\n+\n+        for result in dependency_results[GitCommitMetadataBear.name]:\n+\n+            for ci_engine in ci_engines_used:\n+\n+                if ci_engine not in self.CI_PROVIDERS_METADATA:\n+                    raise RuntimeError('%s is not supported by '\n+                                       'CISkipInspectBear.' % (ci_engine))\n+\n+                supported_regex = self.CI_PROVIDERS_METADATA[ci_engine]\n+\n+                # AppVeyor allows to skip build by commit if the\n+                # supported sequence is present in the title of the\n+                # commit only. All other CI tools allow these sequences\n+                # to be present anywhere in the commit message.\n+                if ci_engine == 'AppveyorCI':\n+                    pos = result.raw_commit_message.find('\\n')\n+                    commit_title = result.raw_commit_message[:pos] if (\n+                        pos != -1) else result.raw_commit_message\n+\n+                    match = re.search(supported_regex, commit_title)\n+\n+                else:\n+                    match = re.search(\n+                        supported_regex, result.raw_commit_message)\n+\n+                if match:\n+\n+                    all_files = (result.modified_files +\n+                                 result.added_files + result.deleted_files)\n+\n+                    for file in all_files:\n+                        for pattern in filename_patterns:\n+                            if file.endswith(pattern):\n+                                yield Result(\n+                                    self,\n+                                    'This commit modifies test files or '","author":{"login":"refeed","avatarUrl":"https://avatars1.githubusercontent.com/u/20320125?v=4","name":"Rafid Aslam"},"reactions":[],"createdAt":"2018-08-01T02:21:34Z","lastEditedAt":null,"updatedAt":"2018-08-01T02:21:34Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjc0NDc4MQ==","url":"https://github.com/coala/coala-bears/pull/2523#discussion_r206744781","bodyText":"I think we might wanna use regex instead","diffHunk":"@@ -0,0 +1,80 @@\n+import re\n+\n+from bears.vcs.git.GitCommitMetadataBear import GitCommitMetadataBear\n+from coalib.bears.GlobalBear import GlobalBear\n+from coalib.results.Result import Result\n+\n+\n+class CISkipInspectBear(GlobalBear):\n+    LANGUAGES = {'Git'}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+\n+    CI_PROVIDERS_METADATA = {\n+          'CircleCI': r'\\[ci skip\\]|\\[skip ci\\]',\n+          'TravisCI': r'\\[ci skip\\]|\\[skip ci\\]',\n+          'AppveyorCI': r'\\[skip ci\\]|\\[ci skip\\]|\\[skip appveyor\\]',\n+          }\n+\n+    BEAR_DEPS = {GitCommitMetadataBear}\n+\n+    def run(self, dependency_results,\n+            ci_engines_used: list = [],\n+            filename_patterns: list = [],\n+            **kwargs):\n+        \"\"\"\n+        Check the HEAD commit to see if it disables CI build and\n+        return result accordingly.\n+\n+        :param ci_engines_used:     CI engines used in the project.\n+        :param filename_patterns:   To identify files that should not\n+                                    skip CI builds.\n+        \"\"\"\n+        if not ci_engines_used:\n+            raise RuntimeError('CI engines used by the project '\n+                               'not given.')\n+\n+        if not filename_patterns:\n+            raise RuntimeError('Patterns of filenames which cannot '\n+                               'escape CI builds not given.')\n+\n+        for result in dependency_results[GitCommitMetadataBear.name]:\n+\n+            for ci_engine in ci_engines_used:\n+\n+                if ci_engine not in self.CI_PROVIDERS_METADATA:\n+                    raise RuntimeError('%s is not supported by '\n+                                       'CISkipInspectBear.' % (ci_engine))\n+\n+                supported_regex = self.CI_PROVIDERS_METADATA[ci_engine]\n+\n+                # AppVeyor allows to skip build by commit if the\n+                # supported sequence is present in the title of the\n+                # commit only. All other CI tools allow these sequences\n+                # to be present anywhere in the commit message.\n+                if ci_engine == 'AppveyorCI':\n+                    pos = result.raw_commit_message.find('\\n')\n+                    commit_title = result.raw_commit_message[:pos] if (\n+                        pos != -1) else result.raw_commit_message\n+\n+                    match = re.search(supported_regex, commit_title)\n+\n+                else:\n+                    match = re.search(\n+                        supported_regex, result.raw_commit_message)\n+\n+                if match:\n+\n+                    all_files = (result.modified_files +\n+                                 result.added_files + result.deleted_files)\n+\n+                    for file in all_files:\n+                        for pattern in filename_patterns:\n+                            if file.endswith(pattern):","author":{"login":"refeed","avatarUrl":"https://avatars1.githubusercontent.com/u/20320125?v=4","name":"Rafid Aslam"},"reactions":[],"createdAt":"2018-08-01T03:16:51Z","lastEditedAt":null,"updatedAt":"2018-08-01T03:16:51Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzAyMjU4NA==","url":"https://github.com/coala/coala-bears/pull/2523#discussion_r207022584","bodyText":"move self.run_uut( to the next line, indented, then you wont have horrible identation below","diffHunk":"@@ -0,0 +1,139 @@\n+import os\n+import platform\n+import shutil\n+import stat\n+import unittest\n+import unittest.mock\n+from pathlib import Path\n+from queue import Queue\n+from tempfile import mkdtemp\n+\n+from bears.vcs.git.GitCommitMetadataBear import GitCommitMetadataBear\n+from bears.vcs.git.CISkipInspectBear import CISkipInspectBear\n+from coalib.misc.Shell import run_shell_command\n+from coalib.settings.Section import Section\n+from coalib.testing.BearTestHelper import generate_skip_decorator\n+from .GitCommitBearTest import GitCommitBearTest\n+\n+\n+@generate_skip_decorator(CISkipInspectBear)\n+class CISkipInspectBearTest(unittest.TestCase):\n+\n+    def run_uut(self, *args, **kwargs):\n+        \"\"\"\n+        Runs the unit-under-test (via `self.uut.run()`) and collects the\n+        messages of the yielded results as a list.\n+\n+        :param args:   Positional arguments to forward to the run function.\n+        :param kwargs: Keyword arguments to forward to the run function.\n+        :return:       A list of the message strings.\n+        \"\"\"\n+        dep_bear = GitCommitMetadataBear(None, self.section, Queue())\n+        deps_results = dict(GitCommitMetadataBear=list(dep_bear.run()))\n+        return list(result.message for result in self.uut.run(\n+            deps_results, *args, **kwargs))\n+\n+    def setUp(self):\n+        self.msg_queue = Queue()\n+        self.section = Section('')\n+        self.uut = CISkipInspectBear(None, self.section, self.msg_queue)\n+\n+        self._old_cwd = os.getcwd()\n+        self.gitdir = mkdtemp()\n+        os.chdir(self.gitdir)\n+        GitCommitBearTest.run_git_command('init')\n+        GitCommitBearTest.run_git_command(\n+            'config', 'user.email coala@coala.io')\n+        GitCommitBearTest.run_git_command('config', 'user.name coala')\n+\n+    @staticmethod\n+    def _windows_rmtree_remove_readonly(func, path, excinfo):\n+        os.chmod(path, stat.S_IWRITE)\n+        func(path)\n+\n+    def tearDown(self):\n+        os.chdir(self._old_cwd)\n+        if platform.system() == 'Windows':\n+            onerror = self._windows_rmtree_remove_readonly\n+        else:\n+            onerror = None\n+        shutil.rmtree(self.gitdir, onerror=onerror)\n+\n+    def test_skipci_build_commit(self):\n+        Path('file1.txt').touch()\n+        run_shell_command('git add file1.txt')\n+        run_shell_command('git commit -m \"Add file1\"')\n+        self.assertEqual(self.run_uut(\n+            ci_engines_used=['AppveyorCI', 'CircleCI', 'TravisCI'],\n+            filename_patterns=['Test.py', 'coafile']), [])\n+\n+        Path('file2.txt').touch()\n+        run_shell_command('git add file2.txt')\n+        run_shell_command('git commit -m \"Add file2\"')\n+        exception_msg = r'GitLabCI is not supported by CISkipInspectBear.'\n+        with self.assertRaisesRegex(RuntimeError, exception_msg):\n+            self.run_uut(ci_engines_used=['GitLabCI', 'TravisCI'],\n+                         filename_patterns=['Test.py', 'coafile'])\n+\n+        Path('file4.txt').touch()\n+        run_shell_command('git add file4.txt')\n+        run_shell_command('git commit -m \"Add file4  [ci skip]\"')\n+        self.assertEqual(self.run_uut(\n+            ci_engines_used=['CircleCI', 'TravisCI', 'AppveyorCI'],\n+            filename_patterns=['Test.py', 'coafile']), [])\n+\n+        Path('file5.txt').touch()\n+        run_shell_command('git add file5.txt')\n+        run_shell_command('git commit -m \"Add file5  [ci skip]\"')\n+        self.assertEqual(self.run_uut(\n+            ci_engines_used=['CircleCI', 'TravisCI', 'AppveyorCI'],\n+            filename_patterns=['Test.py', 'coafile']), [])\n+\n+        Path('AbcBearTest.py').touch()\n+        run_shell_command('git add AbcBearTest.py')\n+        run_shell_command(\n+            'git commit -m \"AbcBearTest.py: Add first commit\\n\\n[ci skip]\"')\n+        self.assertEqual(self.run_uut(","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-08-01T20:35:54Z","lastEditedAt":null,"updatedAt":"2018-08-01T20:35:54Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzAyMzI3Ng==","url":"https://github.com/coala/coala-bears/pull/2523#discussion_r207023276","bodyText":"the brackets around (pattern) is unnecessary I believe","diffHunk":"@@ -0,0 +1,72 @@\n+import re\n+\n+from bears.vcs.git.GitCommitMetadataBear import GitCommitMetadataBear\n+from coalib.bears.GlobalBear import GlobalBear\n+from coalib.results.Result import Result\n+\n+\n+class CISkipInspectBear(GlobalBear):\n+    LANGUAGES = {'Git'}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+\n+    CI_PROVIDERS_METADATA = {\n+          'CircleCI': r'\\[ci skip\\]|\\[skip ci\\]',\n+          'TravisCI': r'\\[ci skip\\]|\\[skip ci\\]',\n+          'AppveyorCI': r'\\[skip ci\\]|\\[ci skip\\]|\\[skip appveyor\\]',\n+          }\n+\n+    BEAR_DEPS = {GitCommitMetadataBear}\n+\n+    def run(self, dependency_results, ci_engines_used,\n+            filename_patterns, **kwargs):\n+        \"\"\"\n+        Check the HEAD commit to see if it disables CI build and\n+        return result accordingly.\n+\n+        :param ci_engines_used:     CI engines used in the project.\n+        :param filename_patterns:   To identify files that should not\n+                                    skip CI builds.\n+        \"\"\"\n+        for result in dependency_results[GitCommitMetadataBear.name]:\n+\n+            for ci_engine in ci_engines_used:\n+\n+                if ci_engine not in self.CI_PROVIDERS_METADATA:\n+                    msg = ('%s is not supported by CISkipInspectBear.' %\n+                           (ci_engine))\n+                    self.err(msg)\n+                    raise RuntimeError(msg)\n+\n+                supported_regex = self.CI_PROVIDERS_METADATA[ci_engine]\n+\n+                # AppVeyor allows to skip build by commit if the\n+                # supported sequence is present in the title of the\n+                # commit only. All other CI tools allow these sequences\n+                # to be present anywhere in the commit message.\n+                if ci_engine == 'AppveyorCI':\n+                    pos = result.raw_commit_message.find('\\n')\n+                    commit_title = result.raw_commit_message[:pos] if (\n+                        pos != -1) else result.raw_commit_message\n+\n+                    match = re.search(supported_regex, commit_title)\n+\n+                else:\n+                    match = re.search(\n+                        supported_regex, result.raw_commit_message)\n+\n+                if match:\n+\n+                    all_files = (result.modified_files +\n+                                 result.added_files + result.deleted_files)\n+\n+                    for file in all_files:\n+                        for pattern in filename_patterns:\n+                            if re.search(pattern, file):\n+                                yield Result(\n+                                    self,\n+                                    'This commit modifies files of type '\n+                                    '\\\"%s\\\" and cannot disable CI build.' %\n+                                    (pattern))","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-08-01T20:38:26Z","lastEditedAt":null,"updatedAt":"2018-08-01T20:38:26Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzAyMzQ1Mw==","url":"https://github.com/coala/coala-bears/pull/2523#discussion_r207023453","bodyText":"sorry https://docs.gitlab.com/ee/ci/yaml/#skipping-jobs ?\nwe need to support GitLab CI.  We use it a lot.\nwe also need Semaphore CI support.\nAnd there is a long list of other CI engines at https://github.com/srz-zumix/ci-skip","diffHunk":"@@ -0,0 +1,139 @@\n+import os\n+import platform\n+import shutil\n+import stat\n+import unittest\n+import unittest.mock\n+from pathlib import Path\n+from queue import Queue\n+from tempfile import mkdtemp\n+\n+from bears.vcs.git.GitCommitMetadataBear import GitCommitMetadataBear\n+from bears.vcs.git.CISkipInspectBear import CISkipInspectBear\n+from coalib.misc.Shell import run_shell_command\n+from coalib.settings.Section import Section\n+from coalib.testing.BearTestHelper import generate_skip_decorator\n+from .GitCommitBearTest import GitCommitBearTest\n+\n+\n+@generate_skip_decorator(CISkipInspectBear)\n+class CISkipInspectBearTest(unittest.TestCase):\n+\n+    def run_uut(self, *args, **kwargs):\n+        \"\"\"\n+        Runs the unit-under-test (via `self.uut.run()`) and collects the\n+        messages of the yielded results as a list.\n+\n+        :param args:   Positional arguments to forward to the run function.\n+        :param kwargs: Keyword arguments to forward to the run function.\n+        :return:       A list of the message strings.\n+        \"\"\"\n+        dep_bear = GitCommitMetadataBear(None, self.section, Queue())\n+        deps_results = dict(GitCommitMetadataBear=list(dep_bear.run()))\n+        return list(result.message for result in self.uut.run(\n+            deps_results, *args, **kwargs))\n+\n+    def setUp(self):\n+        self.msg_queue = Queue()\n+        self.section = Section('')\n+        self.uut = CISkipInspectBear(None, self.section, self.msg_queue)\n+\n+        self._old_cwd = os.getcwd()\n+        self.gitdir = mkdtemp()\n+        os.chdir(self.gitdir)\n+        GitCommitBearTest.run_git_command('init')\n+        GitCommitBearTest.run_git_command(\n+            'config', 'user.email coala@coala.io')\n+        GitCommitBearTest.run_git_command('config', 'user.name coala')\n+\n+    @staticmethod\n+    def _windows_rmtree_remove_readonly(func, path, excinfo):\n+        os.chmod(path, stat.S_IWRITE)\n+        func(path)\n+\n+    def tearDown(self):\n+        os.chdir(self._old_cwd)\n+        if platform.system() == 'Windows':\n+            onerror = self._windows_rmtree_remove_readonly\n+        else:\n+            onerror = None\n+        shutil.rmtree(self.gitdir, onerror=onerror)\n+\n+    def test_skipci_build_commit(self):\n+        Path('file1.txt').touch()\n+        run_shell_command('git add file1.txt')\n+        run_shell_command('git commit -m \"Add file1\"')\n+        self.assertEqual(self.run_uut(\n+            ci_engines_used=['AppveyorCI', 'CircleCI', 'TravisCI'],\n+            filename_patterns=['Test.py', 'coafile']), [])\n+\n+        Path('file2.txt').touch()\n+        run_shell_command('git add file2.txt')\n+        run_shell_command('git commit -m \"Add file2\"')\n+        exception_msg = r'GitLabCI is not supported by CISkipInspectBear.'","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-08-01T20:39:02Z","lastEditedAt":null,"updatedAt":"2018-08-01T20:39:02Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzAyNDczNg==","url":"https://github.com/coala/coala-bears/pull/2523#discussion_r207024736","bodyText":"you dont need a dictionary.\nAll of the CI providers who support skipping, all support both.  Someone else did the analysis for you at https://github.com/srz-zumix/ci-skip ;-)\nOnly Appveyor has an extra method of skipping, and you already have special logic for AppVeyor, so you can treat it as a special case.","diffHunk":"@@ -0,0 +1,72 @@\n+import re\n+\n+from bears.vcs.git.GitCommitMetadataBear import GitCommitMetadataBear\n+from coalib.bears.GlobalBear import GlobalBear\n+from coalib.results.Result import Result\n+\n+\n+class CISkipInspectBear(GlobalBear):\n+    LANGUAGES = {'Git'}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+\n+    CI_PROVIDERS_METADATA = {\n+          'CircleCI': r'\\[ci skip\\]|\\[skip ci\\]',","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-08-01T20:43:20Z","lastEditedAt":null,"updatedAt":"2018-08-01T20:43:20Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzI0OTc3Mg==","url":"https://github.com/coala/coala-bears/pull/2523#discussion_r207249772","bodyText":".. modifies a file that has pattern \"%s\" ...","diffHunk":"@@ -0,0 +1,60 @@\n+import re\n+\n+from bears.vcs.git.GitCommitMetadataBear import GitCommitMetadataBear\n+from coalib.bears.GlobalBear import GlobalBear\n+from coalib.results.Result import Result\n+\n+\n+class CISkipInspectBear(GlobalBear):\n+    LANGUAGES = {'Git'}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+\n+    BEAR_DEPS = {GitCommitMetadataBear}\n+\n+    def run(self, dependency_results, ci_engines_used,\n+            filename_patterns, **kwargs):\n+        \"\"\"\n+        Check the HEAD commit to see if it disables CI build and\n+        return result accordingly.\n+\n+        :param ci_engines_used:     CI engines used in the project.\n+        :param filename_patterns:   To identify files that should not\n+                                    skip CI builds.\n+        \"\"\"\n+        for result in dependency_results[GitCommitMetadataBear.name]:\n+\n+            for ci_engine in ci_engines_used:\n+\n+                supported_regex = r'\\[ci skip\\]|\\[skip ci\\]'\n+\n+                # AppVeyor allows to skip build by commit if the\n+                # supported sequence is present in the title of the\n+                # commit only. All other CI tools allow these sequences\n+                # to be present anywhere in the commit message.\n+                if ci_engine == 'AppveyorCI':\n+                    pos = result.raw_commit_message.find('\\n')\n+                    commit_title = result.raw_commit_message[:pos] if (\n+                        pos != -1) else result.raw_commit_message\n+\n+                    match = re.search(supported_regex, commit_title)\n+\n+                else:\n+                    match = re.search(\n+                        supported_regex, result.raw_commit_message)\n+\n+                if match:\n+\n+                    all_files = (result.modified_files +\n+                                 result.added_files + result.deleted_files)\n+\n+                    for file in all_files:\n+                        for pattern in filename_patterns:\n+                            if re.search(pattern, file):\n+                                yield Result(\n+                                    self,\n+                                    'This commit modifies files of type '","author":{"login":"refeed","avatarUrl":"https://avatars1.githubusercontent.com/u/20320125?v=4","name":"Rafid Aslam"},"reactions":[],"createdAt":"2018-08-02T14:33:55Z","lastEditedAt":null,"updatedAt":"2018-08-02T14:33:55Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzI1MTM3MA==","url":"https://github.com/coala/coala-bears/pull/2523#discussion_r207251370","bodyText":"It's not necessary to escape \"\n..., thus should not disable CI build.\nBecause I think this bear only can advice the user (we'd place it in GitMate or somewhere), if the CI didn't run because of the \"skip\" commit then this bear didn't run either","diffHunk":"@@ -0,0 +1,60 @@\n+import re\n+\n+from bears.vcs.git.GitCommitMetadataBear import GitCommitMetadataBear\n+from coalib.bears.GlobalBear import GlobalBear\n+from coalib.results.Result import Result\n+\n+\n+class CISkipInspectBear(GlobalBear):\n+    LANGUAGES = {'Git'}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+\n+    BEAR_DEPS = {GitCommitMetadataBear}\n+\n+    def run(self, dependency_results, ci_engines_used,\n+            filename_patterns, **kwargs):\n+        \"\"\"\n+        Check the HEAD commit to see if it disables CI build and\n+        return result accordingly.\n+\n+        :param ci_engines_used:     CI engines used in the project.\n+        :param filename_patterns:   To identify files that should not\n+                                    skip CI builds.\n+        \"\"\"\n+        for result in dependency_results[GitCommitMetadataBear.name]:\n+\n+            for ci_engine in ci_engines_used:\n+\n+                supported_regex = r'\\[ci skip\\]|\\[skip ci\\]'\n+\n+                # AppVeyor allows to skip build by commit if the\n+                # supported sequence is present in the title of the\n+                # commit only. All other CI tools allow these sequences\n+                # to be present anywhere in the commit message.\n+                if ci_engine == 'AppveyorCI':\n+                    pos = result.raw_commit_message.find('\\n')\n+                    commit_title = result.raw_commit_message[:pos] if (\n+                        pos != -1) else result.raw_commit_message\n+\n+                    match = re.search(supported_regex, commit_title)\n+\n+                else:\n+                    match = re.search(\n+                        supported_regex, result.raw_commit_message)\n+\n+                if match:\n+\n+                    all_files = (result.modified_files +\n+                                 result.added_files + result.deleted_files)\n+\n+                    for file in all_files:\n+                        for pattern in filename_patterns:\n+                            if re.search(pattern, file):\n+                                yield Result(\n+                                    self,\n+                                    'This commit modifies files of type '\n+                                    '\\\"%s\\\" and cannot disable CI build.' %","author":{"login":"refeed","avatarUrl":"https://avatars1.githubusercontent.com/u/20320125?v=4","name":"Rafid Aslam"},"reactions":[],"createdAt":"2018-08-02T14:37:56Z","lastEditedAt":"2018-08-02T14:52:08Z","updatedAt":"2018-08-02T14:52:08Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzI1MjMyMQ==","url":"https://github.com/coala/coala-bears/pull/2523#discussion_r207252321","bodyText":"Did you mean git add file2.txt ?","diffHunk":"@@ -0,0 +1,134 @@\n+import os\n+import platform\n+import shutil\n+import stat\n+import unittest\n+import unittest.mock\n+from pathlib import Path\n+from queue import Queue\n+from tempfile import mkdtemp\n+\n+from bears.vcs.git.GitCommitMetadataBear import GitCommitMetadataBear\n+from bears.vcs.git.CISkipInspectBear import CISkipInspectBear\n+from coalib.misc.Shell import run_shell_command\n+from coalib.settings.Section import Section\n+from coalib.testing.BearTestHelper import generate_skip_decorator\n+from .GitCommitBearTest import GitCommitBearTest\n+\n+\n+@generate_skip_decorator(CISkipInspectBear)\n+class CISkipInspectBearTest(unittest.TestCase):\n+\n+    def run_uut(self, *args, **kwargs):\n+        \"\"\"\n+        Runs the unit-under-test (via `self.uut.run()`) and collects the\n+        messages of the yielded results as a list.\n+\n+        :param args:   Positional arguments to forward to the run function.\n+        :param kwargs: Keyword arguments to forward to the run function.\n+        :return:       A list of the message strings.\n+        \"\"\"\n+        dep_bear = GitCommitMetadataBear(None, self.section, Queue())\n+        deps_results = dict(GitCommitMetadataBear=list(dep_bear.run()))\n+        return list(result.message for result in self.uut.run(\n+            deps_results, *args, **kwargs))\n+\n+    def setUp(self):\n+        self.msg_queue = Queue()\n+        self.section = Section('')\n+        self.uut = CISkipInspectBear(None, self.section, self.msg_queue)\n+\n+        self._old_cwd = os.getcwd()\n+        self.gitdir = mkdtemp()\n+        os.chdir(self.gitdir)\n+        GitCommitBearTest.run_git_command('init')\n+        GitCommitBearTest.run_git_command(\n+            'config', 'user.email coala@coala.io')\n+        GitCommitBearTest.run_git_command('config', 'user.name coala')\n+\n+    @staticmethod\n+    def _windows_rmtree_remove_readonly(func, path, excinfo):\n+        os.chmod(path, stat.S_IWRITE)\n+        func(path)\n+\n+    def tearDown(self):\n+        os.chdir(self._old_cwd)\n+        if platform.system() == 'Windows':\n+            onerror = self._windows_rmtree_remove_readonly\n+        else:\n+            onerror = None\n+        shutil.rmtree(self.gitdir, onerror=onerror)\n+\n+    def test_skipci_build_commit(self):\n+        Path('file1.txt').touch()\n+        run_shell_command('git add file1.txt')\n+        run_shell_command('git commit -m \"Add file1\"')\n+        self.assertEqual(self.run_uut(\n+            ci_engines_used=['AppveyorCI', 'CircleCI', 'TravisCI'],\n+            filename_patterns=['Test.py', 'coafile']), [])\n+\n+        Path('file2.txt').touch()\n+        run_shell_command('git add file4.txt')","author":{"login":"refeed","avatarUrl":"https://avatars1.githubusercontent.com/u/20320125?v=4","name":"Rafid Aslam"},"reactions":[],"createdAt":"2018-08-02T14:40:08Z","lastEditedAt":null,"updatedAt":"2018-08-02T14:40:08Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzI1MjM4NA==","url":"https://github.com/coala/coala-bears/pull/2523#discussion_r207252384","bodyText":"Did you mean git add file3.txt ?","diffHunk":"@@ -0,0 +1,134 @@\n+import os\n+import platform\n+import shutil\n+import stat\n+import unittest\n+import unittest.mock\n+from pathlib import Path\n+from queue import Queue\n+from tempfile import mkdtemp\n+\n+from bears.vcs.git.GitCommitMetadataBear import GitCommitMetadataBear\n+from bears.vcs.git.CISkipInspectBear import CISkipInspectBear\n+from coalib.misc.Shell import run_shell_command\n+from coalib.settings.Section import Section\n+from coalib.testing.BearTestHelper import generate_skip_decorator\n+from .GitCommitBearTest import GitCommitBearTest\n+\n+\n+@generate_skip_decorator(CISkipInspectBear)\n+class CISkipInspectBearTest(unittest.TestCase):\n+\n+    def run_uut(self, *args, **kwargs):\n+        \"\"\"\n+        Runs the unit-under-test (via `self.uut.run()`) and collects the\n+        messages of the yielded results as a list.\n+\n+        :param args:   Positional arguments to forward to the run function.\n+        :param kwargs: Keyword arguments to forward to the run function.\n+        :return:       A list of the message strings.\n+        \"\"\"\n+        dep_bear = GitCommitMetadataBear(None, self.section, Queue())\n+        deps_results = dict(GitCommitMetadataBear=list(dep_bear.run()))\n+        return list(result.message for result in self.uut.run(\n+            deps_results, *args, **kwargs))\n+\n+    def setUp(self):\n+        self.msg_queue = Queue()\n+        self.section = Section('')\n+        self.uut = CISkipInspectBear(None, self.section, self.msg_queue)\n+\n+        self._old_cwd = os.getcwd()\n+        self.gitdir = mkdtemp()\n+        os.chdir(self.gitdir)\n+        GitCommitBearTest.run_git_command('init')\n+        GitCommitBearTest.run_git_command(\n+            'config', 'user.email coala@coala.io')\n+        GitCommitBearTest.run_git_command('config', 'user.name coala')\n+\n+    @staticmethod\n+    def _windows_rmtree_remove_readonly(func, path, excinfo):\n+        os.chmod(path, stat.S_IWRITE)\n+        func(path)\n+\n+    def tearDown(self):\n+        os.chdir(self._old_cwd)\n+        if platform.system() == 'Windows':\n+            onerror = self._windows_rmtree_remove_readonly\n+        else:\n+            onerror = None\n+        shutil.rmtree(self.gitdir, onerror=onerror)\n+\n+    def test_skipci_build_commit(self):\n+        Path('file1.txt').touch()\n+        run_shell_command('git add file1.txt')\n+        run_shell_command('git commit -m \"Add file1\"')\n+        self.assertEqual(self.run_uut(\n+            ci_engines_used=['AppveyorCI', 'CircleCI', 'TravisCI'],\n+            filename_patterns=['Test.py', 'coafile']), [])\n+\n+        Path('file2.txt').touch()\n+        run_shell_command('git add file4.txt')\n+        run_shell_command('git commit -m \"Add file4  [ci skip]\"')\n+        self.assertEqual(self.run_uut(\n+            ci_engines_used=['CircleCI', 'TravisCI', 'AppveyorCI'],\n+            filename_patterns=['Test.py', 'coafile']), [])\n+\n+        Path('file3.txt').touch()\n+        run_shell_command('git add file5.txt')","author":{"login":"refeed","avatarUrl":"https://avatars1.githubusercontent.com/u/20320125?v=4","name":"Rafid Aslam"},"reactions":[],"createdAt":"2018-08-02T14:40:18Z","lastEditedAt":null,"updatedAt":"2018-08-02T14:40:18Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzI1MzQzNQ==","url":"https://github.com/coala/coala-bears/pull/2523#discussion_r207253435","bodyText":"Put an annotation list for filename_patterns","diffHunk":"@@ -0,0 +1,60 @@\n+import re\n+\n+from bears.vcs.git.GitCommitMetadataBear import GitCommitMetadataBear\n+from coalib.bears.GlobalBear import GlobalBear\n+from coalib.results.Result import Result\n+\n+\n+class CISkipInspectBear(GlobalBear):\n+    LANGUAGES = {'Git'}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+\n+    BEAR_DEPS = {GitCommitMetadataBear}\n+\n+    def run(self, dependency_results, ci_engines_used,\n+            filename_patterns, **kwargs):","author":{"login":"refeed","avatarUrl":"https://avatars1.githubusercontent.com/u/20320125?v=4","name":"Rafid Aslam"},"reactions":[],"createdAt":"2018-08-02T14:42:50Z","lastEditedAt":null,"updatedAt":"2018-08-02T14:42:50Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzI1NTc2Mw==","url":"https://github.com/coala/coala-bears/pull/2523#discussion_r207255763","bodyText":"AppveyorCI also supports [skip appveyor] as in https://github.com/srz-zumix/ci-skip\nAdd |\\[skip appveyor\\] to the supported regex string here","diffHunk":"@@ -0,0 +1,60 @@\n+import re\n+\n+from bears.vcs.git.GitCommitMetadataBear import GitCommitMetadataBear\n+from coalib.bears.GlobalBear import GlobalBear\n+from coalib.results.Result import Result\n+\n+\n+class CISkipInspectBear(GlobalBear):\n+    LANGUAGES = {'Git'}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+\n+    BEAR_DEPS = {GitCommitMetadataBear}\n+\n+    def run(self, dependency_results, ci_engines_used,\n+            filename_patterns, **kwargs):\n+        \"\"\"\n+        Check the HEAD commit to see if it disables CI build and\n+        return result accordingly.\n+\n+        :param ci_engines_used:     CI engines used in the project.\n+        :param filename_patterns:   To identify files that should not\n+                                    skip CI builds.\n+        \"\"\"\n+        for result in dependency_results[GitCommitMetadataBear.name]:\n+\n+            for ci_engine in ci_engines_used:\n+\n+                supported_regex = r'\\[ci skip\\]|\\[skip ci\\]'\n+\n+                # AppVeyor allows to skip build by commit if the\n+                # supported sequence is present in the title of the\n+                # commit only. All other CI tools allow these sequences\n+                # to be present anywhere in the commit message.\n+                if ci_engine == 'AppveyorCI':\n+                    pos = result.raw_commit_message.find('\\n')\n+                    commit_title = result.raw_commit_message[:pos] if (\n+                        pos != -1) else result.raw_commit_message\n+\n+                    match = re.search(supported_regex, commit_title)","author":{"login":"refeed","avatarUrl":"https://avatars1.githubusercontent.com/u/20320125?v=4","name":"Rafid Aslam"},"reactions":[],"createdAt":"2018-08-02T14:48:26Z","lastEditedAt":null,"updatedAt":"2018-08-02T14:48:26Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzI1NjA2OA==","url":"https://github.com/coala/coala-bears/pull/2523#discussion_r207256068","bodyText":"Also explain what CI currently it supports, e.g Travis-CI, AppveyorCI, etc","diffHunk":"@@ -0,0 +1,60 @@\n+import re\n+\n+from bears.vcs.git.GitCommitMetadataBear import GitCommitMetadataBear\n+from coalib.bears.GlobalBear import GlobalBear\n+from coalib.results.Result import Result\n+\n+\n+class CISkipInspectBear(GlobalBear):\n+    LANGUAGES = {'Git'}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+\n+    BEAR_DEPS = {GitCommitMetadataBear}\n+\n+    def run(self, dependency_results, ci_engines_used,\n+            filename_patterns, **kwargs):\n+        \"\"\"\n+        Check the HEAD commit to see if it disables CI build and\n+        return result accordingly.","author":{"login":"refeed","avatarUrl":"https://avatars1.githubusercontent.com/u/20320125?v=4","name":"Rafid Aslam"},"reactions":[],"createdAt":"2018-08-02T14:49:07Z","lastEditedAt":null,"updatedAt":"2018-08-02T14:49:07Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzI1NjU3NA==","url":"https://github.com/coala/coala-bears/pull/2523#discussion_r207256574","bodyText":"I think we might wanna change the ci_engines_used parameter with appveyor_ci: bool = False now","diffHunk":"@@ -0,0 +1,60 @@\n+import re\n+\n+from bears.vcs.git.GitCommitMetadataBear import GitCommitMetadataBear\n+from coalib.bears.GlobalBear import GlobalBear\n+from coalib.results.Result import Result\n+\n+\n+class CISkipInspectBear(GlobalBear):\n+    LANGUAGES = {'Git'}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+\n+    BEAR_DEPS = {GitCommitMetadataBear}\n+\n+    def run(self, dependency_results, ci_engines_used,","author":{"login":"refeed","avatarUrl":"https://avatars1.githubusercontent.com/u/20320125?v=4","name":"Rafid Aslam"},"reactions":[],"createdAt":"2018-08-02T14:50:16Z","lastEditedAt":null,"updatedAt":"2018-08-02T14:50:16Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzI1NjgyMw==","url":"https://github.com/coala/coala-bears/pull/2523#discussion_r207256823","bodyText":"A regex to identify..","diffHunk":"@@ -0,0 +1,60 @@\n+import re\n+\n+from bears.vcs.git.GitCommitMetadataBear import GitCommitMetadataBear\n+from coalib.bears.GlobalBear import GlobalBear\n+from coalib.results.Result import Result\n+\n+\n+class CISkipInspectBear(GlobalBear):\n+    LANGUAGES = {'Git'}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+\n+    BEAR_DEPS = {GitCommitMetadataBear}\n+\n+    def run(self, dependency_results, ci_engines_used,\n+            filename_patterns, **kwargs):\n+        \"\"\"\n+        Check the HEAD commit to see if it disables CI build and\n+        return result accordingly.\n+\n+        :param ci_engines_used:     CI engines used in the project.\n+        :param filename_patterns:   To identify files that should not","author":{"login":"refeed","avatarUrl":"https://avatars1.githubusercontent.com/u/20320125?v=4","name":"Rafid Aslam"},"reactions":[],"createdAt":"2018-08-02T14:50:51Z","lastEditedAt":null,"updatedAt":"2018-08-02T14:50:51Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzcyNTY4OA==","url":"https://github.com/coala/coala-bears/pull/2523#discussion_r207725688","bodyText":"I think we might want to directly append |\\[skip appveyor\\] to supported_regex instead creating a whole different variable","diffHunk":"@@ -0,0 +1,63 @@\n+import re\n+\n+from bears.vcs.git.GitCommitMetadataBear import GitCommitMetadataBear\n+from coalib.bears.GlobalBear import GlobalBear\n+from coalib.results.Result import Result\n+\n+\n+class CISkipInspectBear(GlobalBear):\n+    LANGUAGES = {'Git'}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+\n+    BEAR_DEPS = {GitCommitMetadataBear}\n+\n+    def run(self, dependency_results, filename_patterns: list,\n+            appveyor_ci: bool = False, **kwargs):\n+        \"\"\"\n+        Check the HEAD commit to see if it disables CI build and\n+        return result accordingly. Supported CI include AppVeyor,\n+        Bitrise, Circle CI, GitLab CI, Scrutinizer, Semaphore,\n+        Shippable, Travis CI and wercker.\n+\n+        :param filename_patterns:   A list of regex to identify files\n+                                    that should not skip CI builds.\n+        :appveyor_ci:               Whether AppVeyor is used by the\n+                                    project or not.\n+        \"\"\"\n+        for result in dependency_results[GitCommitMetadataBear.name]:\n+\n+            supported_regex = r'\\[ci skip\\]|\\[skip ci\\]'\n+\n+            # AppVeyor allows to skip build by commit if the\n+            # supported sequence is present in the title of the\n+            # commit only. All other CI tools allow these sequences\n+            # to be present anywhere in the commit message.\n+            if appveyor_ci:\n+                supported_regex = r'\\[ci skip\\]|\\[skip ci\\]|\\[skip appveyor\\]'","author":{"login":"refeed","avatarUrl":"https://avatars1.githubusercontent.com/u/20320125?v=4","name":"Rafid Aslam"},"reactions":[],"createdAt":"2018-08-05T05:21:47Z","lastEditedAt":null,"updatedAt":"2018-08-05T05:21:47Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzcyNTcxOQ==","url":"https://github.com/coala/coala-bears/pull/2523#discussion_r207725719","bodyText":"appveyor_ci","diffHunk":"@@ -0,0 +1,116 @@\n+import os\n+import platform\n+import shutil\n+import stat\n+import unittest\n+import unittest.mock\n+from pathlib import Path\n+from queue import Queue\n+from tempfile import mkdtemp\n+\n+from bears.vcs.git.GitCommitMetadataBear import GitCommitMetadataBear\n+from bears.vcs.git.CISkipInspectBear import CISkipInspectBear\n+from coalib.misc.Shell import run_shell_command\n+from coalib.settings.Section import Section\n+from coalib.testing.BearTestHelper import generate_skip_decorator\n+from .GitCommitBearTest import GitCommitBearTest\n+\n+\n+@generate_skip_decorator(CISkipInspectBear)\n+class CISkipInspectBearTest(unittest.TestCase):\n+\n+    def run_uut(self, *args, **kwargs):\n+        \"\"\"\n+        Runs the unit-under-test (via `self.uut.run()`) and collects the\n+        messages of the yielded results as a list.\n+\n+        :param args:   Positional arguments to forward to the run function.\n+        :param kwargs: Keyword arguments to forward to the run function.\n+        :return:       A list of the message strings.\n+        \"\"\"\n+        dep_bear = GitCommitMetadataBear(None, self.section, Queue())\n+        deps_results = dict(GitCommitMetadataBear=list(dep_bear.run()))\n+        return list(result.message for result in self.uut.run(\n+            deps_results, *args, **kwargs))\n+\n+    def setUp(self):\n+        self.msg_queue = Queue()\n+        self.section = Section('')\n+        self.uut = CISkipInspectBear(None, self.section, self.msg_queue)\n+\n+        self._old_cwd = os.getcwd()\n+        self.gitdir = mkdtemp()\n+        os.chdir(self.gitdir)\n+        GitCommitBearTest.run_git_command('init')\n+        GitCommitBearTest.run_git_command(\n+            'config', 'user.email coala@coala.io')\n+        GitCommitBearTest.run_git_command('config', 'user.name coala')\n+\n+    @staticmethod\n+    def _windows_rmtree_remove_readonly(func, path, excinfo):\n+        os.chmod(path, stat.S_IWRITE)\n+        func(path)\n+\n+    def tearDown(self):\n+        os.chdir(self._old_cwd)\n+        if platform.system() == 'Windows':\n+            onerror = self._windows_rmtree_remove_readonly\n+        else:\n+            onerror = None\n+        shutil.rmtree(self.gitdir, onerror=onerror)\n+\n+    def test_skipci_build_commit(self):\n+        Path('file1.txt').touch()\n+        run_shell_command('git add file1.txt')\n+        run_shell_command('git commit -m \"Add file1\"')\n+        self.assertEqual(\n+            self.run_uut(AppVeyorCI=True,","author":{"login":"refeed","avatarUrl":"https://avatars1.githubusercontent.com/u/20320125?v=4","name":"Rafid Aslam"},"reactions":[],"createdAt":"2018-08-05T05:24:35Z","lastEditedAt":null,"updatedAt":"2018-08-05T05:24:35Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzcyNTc0NQ==","url":"https://github.com/coala/coala-bears/pull/2523#discussion_r207725745","bodyText":"It's not necessary to escape \"","diffHunk":"@@ -0,0 +1,116 @@\n+import os\n+import platform\n+import shutil\n+import stat\n+import unittest\n+import unittest.mock\n+from pathlib import Path\n+from queue import Queue\n+from tempfile import mkdtemp\n+\n+from bears.vcs.git.GitCommitMetadataBear import GitCommitMetadataBear\n+from bears.vcs.git.CISkipInspectBear import CISkipInspectBear\n+from coalib.misc.Shell import run_shell_command\n+from coalib.settings.Section import Section\n+from coalib.testing.BearTestHelper import generate_skip_decorator\n+from .GitCommitBearTest import GitCommitBearTest\n+\n+\n+@generate_skip_decorator(CISkipInspectBear)\n+class CISkipInspectBearTest(unittest.TestCase):\n+\n+    def run_uut(self, *args, **kwargs):\n+        \"\"\"\n+        Runs the unit-under-test (via `self.uut.run()`) and collects the\n+        messages of the yielded results as a list.\n+\n+        :param args:   Positional arguments to forward to the run function.\n+        :param kwargs: Keyword arguments to forward to the run function.\n+        :return:       A list of the message strings.\n+        \"\"\"\n+        dep_bear = GitCommitMetadataBear(None, self.section, Queue())\n+        deps_results = dict(GitCommitMetadataBear=list(dep_bear.run()))\n+        return list(result.message for result in self.uut.run(\n+            deps_results, *args, **kwargs))\n+\n+    def setUp(self):\n+        self.msg_queue = Queue()\n+        self.section = Section('')\n+        self.uut = CISkipInspectBear(None, self.section, self.msg_queue)\n+\n+        self._old_cwd = os.getcwd()\n+        self.gitdir = mkdtemp()\n+        os.chdir(self.gitdir)\n+        GitCommitBearTest.run_git_command('init')\n+        GitCommitBearTest.run_git_command(\n+            'config', 'user.email coala@coala.io')\n+        GitCommitBearTest.run_git_command('config', 'user.name coala')\n+\n+    @staticmethod\n+    def _windows_rmtree_remove_readonly(func, path, excinfo):\n+        os.chmod(path, stat.S_IWRITE)\n+        func(path)\n+\n+    def tearDown(self):\n+        os.chdir(self._old_cwd)\n+        if platform.system() == 'Windows':\n+            onerror = self._windows_rmtree_remove_readonly\n+        else:\n+            onerror = None\n+        shutil.rmtree(self.gitdir, onerror=onerror)\n+\n+    def test_skipci_build_commit(self):\n+        Path('file1.txt').touch()\n+        run_shell_command('git add file1.txt')\n+        run_shell_command('git commit -m \"Add file1\"')\n+        self.assertEqual(\n+            self.run_uut(AppVeyorCI=True,\n+                         filename_patterns=['Test.py', 'coafile']), [])\n+\n+        Path('file2.txt').touch()\n+        run_shell_command('git add file2.txt')\n+        run_shell_command('git commit -m \"Add file2  [ci skip]\"')\n+        self.assertEqual(\n+            self.run_uut(appveyor_ci=True,\n+                         filename_patterns=['Test.py', 'coafile']), [])\n+\n+        Path('file3.txt').touch()\n+        run_shell_command('git add file3.txt')\n+        run_shell_command('git commit -m \"Add file3  [ci skip]\"')\n+        self.assertEqual(\n+            self.run_uut(appveyor_ci=True,\n+                         filename_patterns=['Test.py', 'coafile']), [])\n+\n+        Path('AbcBearTest.py').touch()\n+        run_shell_command('git add AbcBearTest.py')\n+        run_shell_command(\n+            'git commit -m \"AbcBearTest.py: Add first commit\\n\\n[ci skip]\"')\n+        self.assertEqual(\n+            self.run_uut(appveyor_ci=True,\n+                         filename_patterns=['AbcTest.cpp']), [])\n+\n+        Path('DefBearTest.py').touch()\n+        run_shell_command('git add DefBearTest.py')\n+        run_shell_command(\n+            'git commit -m \"DefBearTest.py: Add next commit\\n\\n[ci skip]\"')\n+        self.assertEqual(\n+            self.run_uut(filename_patterns=['Test.py']),\n+            ['This commit modifies a file that has pattern of type '\n+             '\\\"Test.py\\\", thus should not disable CI build.'])","author":{"login":"refeed","avatarUrl":"https://avatars1.githubusercontent.com/u/20320125?v=4","name":"Rafid Aslam"},"reactions":[],"createdAt":"2018-08-05T05:27:16Z","lastEditedAt":null,"updatedAt":"2018-08-05T05:27:16Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzcyNTc5NQ==","url":"https://github.com/coala/coala-bears/pull/2523#discussion_r207725795","bodyText":":param appveyor_ci:","diffHunk":"@@ -0,0 +1,63 @@\n+import re\n+\n+from bears.vcs.git.GitCommitMetadataBear import GitCommitMetadataBear\n+from coalib.bears.GlobalBear import GlobalBear\n+from coalib.results.Result import Result\n+\n+\n+class CISkipInspectBear(GlobalBear):\n+    LANGUAGES = {'Git'}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+\n+    BEAR_DEPS = {GitCommitMetadataBear}\n+\n+    def run(self, dependency_results, filename_patterns: list,\n+            appveyor_ci: bool = False, **kwargs):\n+        \"\"\"\n+        Check the HEAD commit to see if it disables CI build and\n+        return result accordingly. Supported CI include AppVeyor,\n+        Bitrise, Circle CI, GitLab CI, Scrutinizer, Semaphore,\n+        Shippable, Travis CI and wercker.\n+\n+        :param filename_patterns:   A list of regex to identify files\n+                                    that should not skip CI builds.\n+        :appveyor_ci:               Whether AppVeyor is used by the","author":{"login":"refeed","avatarUrl":"https://avatars1.githubusercontent.com/u/20320125?v=4","name":"Rafid Aslam"},"reactions":[],"createdAt":"2018-08-05T05:31:27Z","lastEditedAt":null,"updatedAt":"2018-08-05T05:31:27Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzcyOTIyNQ==","url":"https://github.com/coala/coala-bears/pull/2523#discussion_r207729225","bodyText":"Fix the strange indentation","diffHunk":"@@ -0,0 +1,63 @@\n+import re\n+\n+from bears.vcs.git.GitCommitMetadataBear import GitCommitMetadataBear\n+from coalib.bears.GlobalBear import GlobalBear\n+from coalib.results.Result import Result\n+\n+\n+class CISkipInspectBear(GlobalBear):\n+    LANGUAGES = {'Git'}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+\n+    BEAR_DEPS = {GitCommitMetadataBear}\n+\n+    def run(self, dependency_results, filename_patterns: list,\n+            appveyor_ci: bool = False, **kwargs):\n+        \"\"\"\n+        Check the HEAD commit to see if it disables CI build and\n+        return result accordingly. Supported CI include AppVeyor,\n+        Bitrise, Circle CI, GitLab CI, Scrutinizer, Semaphore,\n+        Shippable, Travis CI and wercker.\n+\n+        :param filename_patterns:   A list of regex to identify files\n+                                    that should not skip CI builds.\n+        :param appveyor_ci:               Whether AppVeyor is used by the","author":{"login":"refeed","avatarUrl":"https://avatars1.githubusercontent.com/u/20320125?v=4","name":"Rafid Aslam"},"reactions":[],"createdAt":"2018-08-05T08:28:48Z","lastEditedAt":null,"updatedAt":"2018-08-05T08:28:48Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzcyOTMwNQ==","url":"https://github.com/coala/coala-bears/pull/2523#discussion_r207729305","bodyText":"\" doesn't need to be escaped","diffHunk":"@@ -0,0 +1,116 @@\n+import os\n+import platform\n+import shutil\n+import stat\n+import unittest\n+import unittest.mock\n+from pathlib import Path\n+from queue import Queue\n+from tempfile import mkdtemp\n+\n+from bears.vcs.git.GitCommitMetadataBear import GitCommitMetadataBear\n+from bears.vcs.git.CISkipInspectBear import CISkipInspectBear\n+from coalib.misc.Shell import run_shell_command\n+from coalib.settings.Section import Section\n+from coalib.testing.BearTestHelper import generate_skip_decorator\n+from .GitCommitBearTest import GitCommitBearTest\n+\n+\n+@generate_skip_decorator(CISkipInspectBear)\n+class CISkipInspectBearTest(unittest.TestCase):\n+\n+    def run_uut(self, *args, **kwargs):\n+        \"\"\"\n+        Runs the unit-under-test (via `self.uut.run()`) and collects the\n+        messages of the yielded results as a list.\n+\n+        :param args:   Positional arguments to forward to the run function.\n+        :param kwargs: Keyword arguments to forward to the run function.\n+        :return:       A list of the message strings.\n+        \"\"\"\n+        dep_bear = GitCommitMetadataBear(None, self.section, Queue())\n+        deps_results = dict(GitCommitMetadataBear=list(dep_bear.run()))\n+        return list(result.message for result in self.uut.run(\n+            deps_results, *args, **kwargs))\n+\n+    def setUp(self):\n+        self.msg_queue = Queue()\n+        self.section = Section('')\n+        self.uut = CISkipInspectBear(None, self.section, self.msg_queue)\n+\n+        self._old_cwd = os.getcwd()\n+        self.gitdir = mkdtemp()\n+        os.chdir(self.gitdir)\n+        GitCommitBearTest.run_git_command('init')\n+        GitCommitBearTest.run_git_command(\n+            'config', 'user.email coala@coala.io')\n+        GitCommitBearTest.run_git_command('config', 'user.name coala')\n+\n+    @staticmethod\n+    def _windows_rmtree_remove_readonly(func, path, excinfo):\n+        os.chmod(path, stat.S_IWRITE)\n+        func(path)\n+\n+    def tearDown(self):\n+        os.chdir(self._old_cwd)\n+        if platform.system() == 'Windows':\n+            onerror = self._windows_rmtree_remove_readonly\n+        else:\n+            onerror = None\n+        shutil.rmtree(self.gitdir, onerror=onerror)\n+\n+    def test_skipci_build_commit(self):\n+        Path('file1.txt').touch()\n+        run_shell_command('git add file1.txt')\n+        run_shell_command('git commit -m \"Add file1\"')\n+        self.assertEqual(\n+            self.run_uut(appveyor_ci=True,\n+                         filename_patterns=['Test.py', 'coafile']), [])\n+\n+        Path('file2.txt').touch()\n+        run_shell_command('git add file2.txt')\n+        run_shell_command('git commit -m \"Add file2  [ci skip]\"')\n+        self.assertEqual(\n+            self.run_uut(appveyor_ci=True,\n+                         filename_patterns=['Test.py', 'coafile']), [])\n+\n+        Path('file3.txt').touch()\n+        run_shell_command('git add file3.txt')\n+        run_shell_command('git commit -m \"Add file3  [ci skip]\"')\n+        self.assertEqual(\n+            self.run_uut(appveyor_ci=True,\n+                         filename_patterns=['Test.py', 'coafile']), [])\n+\n+        Path('AbcBearTest.py').touch()\n+        run_shell_command('git add AbcBearTest.py')\n+        run_shell_command(\n+            'git commit -m \"AbcBearTest.py: Add first commit\\n\\n[ci skip]\"')\n+        self.assertEqual(\n+            self.run_uut(appveyor_ci=True,\n+                         filename_patterns=['AbcTest.cpp']), [])\n+\n+        Path('DefBearTest.py').touch()\n+        run_shell_command('git add DefBearTest.py')\n+        run_shell_command(\n+            'git commit -m \"DefBearTest.py: Add next commit\\n\\n[ci skip]\"')\n+        self.assertEqual(\n+            self.run_uut(filename_patterns=['Test.py']),\n+            ['This commit modifies a file that has pattern of type '\n+             '\"Test.py\", thus should not disable CI build.'])\n+\n+        Path('DefBearTest.py').touch()\n+        run_shell_command('git add DefBearTest.py')\n+        run_shell_command(\n+            'git commit -m \"DefBearTest.py: Add next commit [ci skip]\"')\n+        self.assertEqual(\n+            self.run_uut(filename_patterns=['Test.py']),\n+            ['This commit modifies a file that has pattern of type '\n+             '\\\"Test.py\\\", thus should not disable CI build.'])","author":{"login":"refeed","avatarUrl":"https://avatars1.githubusercontent.com/u/20320125?v=4","name":"Rafid Aslam"},"reactions":[],"createdAt":"2018-08-05T08:33:22Z","lastEditedAt":null,"updatedAt":"2018-08-05T08:33:22Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzcyOTMwOA==","url":"https://github.com/coala/coala-bears/pull/2523#discussion_r207729308","bodyText":"\" doesn't need to be escaped","diffHunk":"@@ -0,0 +1,116 @@\n+import os\n+import platform\n+import shutil\n+import stat\n+import unittest\n+import unittest.mock\n+from pathlib import Path\n+from queue import Queue\n+from tempfile import mkdtemp\n+\n+from bears.vcs.git.GitCommitMetadataBear import GitCommitMetadataBear\n+from bears.vcs.git.CISkipInspectBear import CISkipInspectBear\n+from coalib.misc.Shell import run_shell_command\n+from coalib.settings.Section import Section\n+from coalib.testing.BearTestHelper import generate_skip_decorator\n+from .GitCommitBearTest import GitCommitBearTest\n+\n+\n+@generate_skip_decorator(CISkipInspectBear)\n+class CISkipInspectBearTest(unittest.TestCase):\n+\n+    def run_uut(self, *args, **kwargs):\n+        \"\"\"\n+        Runs the unit-under-test (via `self.uut.run()`) and collects the\n+        messages of the yielded results as a list.\n+\n+        :param args:   Positional arguments to forward to the run function.\n+        :param kwargs: Keyword arguments to forward to the run function.\n+        :return:       A list of the message strings.\n+        \"\"\"\n+        dep_bear = GitCommitMetadataBear(None, self.section, Queue())\n+        deps_results = dict(GitCommitMetadataBear=list(dep_bear.run()))\n+        return list(result.message for result in self.uut.run(\n+            deps_results, *args, **kwargs))\n+\n+    def setUp(self):\n+        self.msg_queue = Queue()\n+        self.section = Section('')\n+        self.uut = CISkipInspectBear(None, self.section, self.msg_queue)\n+\n+        self._old_cwd = os.getcwd()\n+        self.gitdir = mkdtemp()\n+        os.chdir(self.gitdir)\n+        GitCommitBearTest.run_git_command('init')\n+        GitCommitBearTest.run_git_command(\n+            'config', 'user.email coala@coala.io')\n+        GitCommitBearTest.run_git_command('config', 'user.name coala')\n+\n+    @staticmethod\n+    def _windows_rmtree_remove_readonly(func, path, excinfo):\n+        os.chmod(path, stat.S_IWRITE)\n+        func(path)\n+\n+    def tearDown(self):\n+        os.chdir(self._old_cwd)\n+        if platform.system() == 'Windows':\n+            onerror = self._windows_rmtree_remove_readonly\n+        else:\n+            onerror = None\n+        shutil.rmtree(self.gitdir, onerror=onerror)\n+\n+    def test_skipci_build_commit(self):\n+        Path('file1.txt').touch()\n+        run_shell_command('git add file1.txt')\n+        run_shell_command('git commit -m \"Add file1\"')\n+        self.assertEqual(\n+            self.run_uut(appveyor_ci=True,\n+                         filename_patterns=['Test.py', 'coafile']), [])\n+\n+        Path('file2.txt').touch()\n+        run_shell_command('git add file2.txt')\n+        run_shell_command('git commit -m \"Add file2  [ci skip]\"')\n+        self.assertEqual(\n+            self.run_uut(appveyor_ci=True,\n+                         filename_patterns=['Test.py', 'coafile']), [])\n+\n+        Path('file3.txt').touch()\n+        run_shell_command('git add file3.txt')\n+        run_shell_command('git commit -m \"Add file3  [ci skip]\"')\n+        self.assertEqual(\n+            self.run_uut(appveyor_ci=True,\n+                         filename_patterns=['Test.py', 'coafile']), [])\n+\n+        Path('AbcBearTest.py').touch()\n+        run_shell_command('git add AbcBearTest.py')\n+        run_shell_command(\n+            'git commit -m \"AbcBearTest.py: Add first commit\\n\\n[ci skip]\"')\n+        self.assertEqual(\n+            self.run_uut(appveyor_ci=True,\n+                         filename_patterns=['AbcTest.cpp']), [])\n+\n+        Path('DefBearTest.py').touch()\n+        run_shell_command('git add DefBearTest.py')\n+        run_shell_command(\n+            'git commit -m \"DefBearTest.py: Add next commit\\n\\n[ci skip]\"')\n+        self.assertEqual(\n+            self.run_uut(filename_patterns=['Test.py']),\n+            ['This commit modifies a file that has pattern of type '\n+             '\"Test.py\", thus should not disable CI build.'])\n+\n+        Path('DefBearTest.py').touch()\n+        run_shell_command('git add DefBearTest.py')\n+        run_shell_command(\n+            'git commit -m \"DefBearTest.py: Add next commit [ci skip]\"')\n+        self.assertEqual(\n+            self.run_uut(filename_patterns=['Test.py']),\n+            ['This commit modifies a file that has pattern of type '\n+             '\\\"Test.py\\\", thus should not disable CI build.'])\n+\n+        Path('.coafile').touch()\n+        run_shell_command('git add .coafile')\n+        run_shell_command('git commit -m \".coafile: Add coafile [skip ci]\"')\n+        self.assertEqual(\n+            self.run_uut(appveyor_ci=True, filename_patterns=['coafile']),\n+            ['This commit modifies a file that has pattern of type '\n+             '\\\"coafile\\\", thus should not disable CI build.'])","author":{"login":"refeed","avatarUrl":"https://avatars1.githubusercontent.com/u/20320125?v=4","name":"Rafid Aslam"},"reactions":[],"createdAt":"2018-08-05T08:33:28Z","lastEditedAt":null,"updatedAt":"2018-08-05T08:33:28Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzczODI0Nw==","url":"https://github.com/coala/coala-bears/pull/2523#discussion_r207738247","bodyText":"list -> typed_list(str)","diffHunk":"@@ -0,0 +1,63 @@\n+import re\n+\n+from bears.vcs.git.GitCommitMetadataBear import GitCommitMetadataBear\n+from coalib.bears.GlobalBear import GlobalBear\n+from coalib.results.Result import Result\n+\n+\n+class CISkipInspectBear(GlobalBear):\n+    LANGUAGES = {'Git'}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+\n+    BEAR_DEPS = {GitCommitMetadataBear}\n+\n+    def run(self, dependency_results, filename_patterns: list,","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-08-05T14:21:00Z","lastEditedAt":null,"updatedAt":"2018-08-05T14:21:00Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzczODI2NQ==","url":"https://github.com/coala/coala-bears/pull/2523#discussion_r207738265","bodyText":"put kwargs on a separate line -- no need for a trailing comma after kwargs, as no other args can follow it","diffHunk":"@@ -0,0 +1,63 @@\n+import re\n+\n+from bears.vcs.git.GitCommitMetadataBear import GitCommitMetadataBear\n+from coalib.bears.GlobalBear import GlobalBear\n+from coalib.results.Result import Result\n+\n+\n+class CISkipInspectBear(GlobalBear):\n+    LANGUAGES = {'Git'}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+\n+    BEAR_DEPS = {GitCommitMetadataBear}\n+\n+    def run(self, dependency_results, filename_patterns: list,\n+            appveyor_ci: bool = False, **kwargs):","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-08-05T14:21:34Z","lastEditedAt":null,"updatedAt":"2018-08-05T14:21:34Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzczODI4OA==","url":"https://github.com/coala/coala-bears/pull/2523#discussion_r207738288","bodyText":"why is this regex being defined inside a loop?\nput it in a module or class level CONSTANT","diffHunk":"@@ -0,0 +1,63 @@\n+import re\n+\n+from bears.vcs.git.GitCommitMetadataBear import GitCommitMetadataBear\n+from coalib.bears.GlobalBear import GlobalBear\n+from coalib.results.Result import Result\n+\n+\n+class CISkipInspectBear(GlobalBear):\n+    LANGUAGES = {'Git'}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+\n+    BEAR_DEPS = {GitCommitMetadataBear}\n+\n+    def run(self, dependency_results, filename_patterns: list,\n+            appveyor_ci: bool = False, **kwargs):\n+        \"\"\"\n+        Check the HEAD commit to see if it disables CI build and\n+        return result accordingly. Supported CI include AppVeyor,\n+        Bitrise, Circle CI, GitLab CI, Scrutinizer, Semaphore,\n+        Shippable, Travis CI and wercker.\n+\n+        :param filename_patterns:   A list of regex to identify files\n+                                    that should not skip CI builds.\n+        :param appveyor_ci:         Whether AppVeyor is used by the\n+                                    project or not.\n+        \"\"\"\n+        for result in dependency_results[GitCommitMetadataBear.name]:\n+\n+            supported_regex = r'\\[ci skip\\]|\\[skip ci\\]'","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-08-05T14:22:23Z","lastEditedAt":null,"updatedAt":"2018-08-05T14:22:23Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzczODMyMA==","url":"https://github.com/coala/coala-bears/pull/2523#discussion_r207738320","bodyText":"why do you have round brackets around this.  it makes it confusing.","diffHunk":"@@ -0,0 +1,63 @@\n+import re\n+\n+from bears.vcs.git.GitCommitMetadataBear import GitCommitMetadataBear\n+from coalib.bears.GlobalBear import GlobalBear\n+from coalib.results.Result import Result\n+\n+\n+class CISkipInspectBear(GlobalBear):\n+    LANGUAGES = {'Git'}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+\n+    BEAR_DEPS = {GitCommitMetadataBear}\n+\n+    def run(self, dependency_results, filename_patterns: list,\n+            appveyor_ci: bool = False, **kwargs):\n+        \"\"\"\n+        Check the HEAD commit to see if it disables CI build and\n+        return result accordingly. Supported CI include AppVeyor,\n+        Bitrise, Circle CI, GitLab CI, Scrutinizer, Semaphore,\n+        Shippable, Travis CI and wercker.\n+\n+        :param filename_patterns:   A list of regex to identify files\n+                                    that should not skip CI builds.\n+        :param appveyor_ci:         Whether AppVeyor is used by the\n+                                    project or not.\n+        \"\"\"\n+        for result in dependency_results[GitCommitMetadataBear.name]:\n+\n+            supported_regex = r'\\[ci skip\\]|\\[skip ci\\]'\n+\n+            # AppVeyor allows to skip build by commit if the\n+            # supported sequence is present in the title of the\n+            # commit only. All other CI tools allow these sequences\n+            # to be present anywhere in the commit message.\n+            if appveyor_ci:\n+                supported_regex += (r'|\\[skip appveyor\\]')","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-08-05T14:23:34Z","lastEditedAt":null,"updatedAt":"2018-08-05T14:23:34Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzczODM1NA==","url":"https://github.com/coala/coala-bears/pull/2523#discussion_r207738354","bodyText":"commit_title = result.raw_commit_message\nthen you can do the re.search outside of this if .. else ..","diffHunk":"@@ -0,0 +1,63 @@\n+import re\n+\n+from bears.vcs.git.GitCommitMetadataBear import GitCommitMetadataBear\n+from coalib.bears.GlobalBear import GlobalBear\n+from coalib.results.Result import Result\n+\n+\n+class CISkipInspectBear(GlobalBear):\n+    LANGUAGES = {'Git'}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+\n+    BEAR_DEPS = {GitCommitMetadataBear}\n+\n+    def run(self, dependency_results, filename_patterns: list,\n+            appveyor_ci: bool = False, **kwargs):\n+        \"\"\"\n+        Check the HEAD commit to see if it disables CI build and\n+        return result accordingly. Supported CI include AppVeyor,\n+        Bitrise, Circle CI, GitLab CI, Scrutinizer, Semaphore,\n+        Shippable, Travis CI and wercker.\n+\n+        :param filename_patterns:   A list of regex to identify files\n+                                    that should not skip CI builds.\n+        :param appveyor_ci:         Whether AppVeyor is used by the\n+                                    project or not.\n+        \"\"\"\n+        for result in dependency_results[GitCommitMetadataBear.name]:\n+\n+            supported_regex = r'\\[ci skip\\]|\\[skip ci\\]'\n+\n+            # AppVeyor allows to skip build by commit if the\n+            # supported sequence is present in the title of the\n+            # commit only. All other CI tools allow these sequences\n+            # to be present anywhere in the commit message.\n+            if appveyor_ci:\n+                supported_regex += (r'|\\[skip appveyor\\]')\n+                pos = result.raw_commit_message.find('\\n')\n+                commit_title = result.raw_commit_message[:pos] if (\n+                    pos != -1) else result.raw_commit_message\n+\n+                match = re.search(supported_regex, commit_title)\n+\n+            else:\n+                match = re.search(","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-08-05T14:24:42Z","lastEditedAt":null,"updatedAt":"2018-08-05T14:24:42Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzczODM2OQ==","url":"https://github.com/coala/coala-bears/pull/2523#discussion_r207738369","bodyText":"if not match: continue","diffHunk":"@@ -0,0 +1,63 @@\n+import re\n+\n+from bears.vcs.git.GitCommitMetadataBear import GitCommitMetadataBear\n+from coalib.bears.GlobalBear import GlobalBear\n+from coalib.results.Result import Result\n+\n+\n+class CISkipInspectBear(GlobalBear):\n+    LANGUAGES = {'Git'}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+\n+    BEAR_DEPS = {GitCommitMetadataBear}\n+\n+    def run(self, dependency_results, filename_patterns: list,\n+            appveyor_ci: bool = False, **kwargs):\n+        \"\"\"\n+        Check the HEAD commit to see if it disables CI build and\n+        return result accordingly. Supported CI include AppVeyor,\n+        Bitrise, Circle CI, GitLab CI, Scrutinizer, Semaphore,\n+        Shippable, Travis CI and wercker.\n+\n+        :param filename_patterns:   A list of regex to identify files\n+                                    that should not skip CI builds.\n+        :param appveyor_ci:         Whether AppVeyor is used by the\n+                                    project or not.\n+        \"\"\"\n+        for result in dependency_results[GitCommitMetadataBear.name]:\n+\n+            supported_regex = r'\\[ci skip\\]|\\[skip ci\\]'\n+\n+            # AppVeyor allows to skip build by commit if the\n+            # supported sequence is present in the title of the\n+            # commit only. All other CI tools allow these sequences\n+            # to be present anywhere in the commit message.\n+            if appveyor_ci:\n+                supported_regex += (r'|\\[skip appveyor\\]')\n+                pos = result.raw_commit_message.find('\\n')\n+                commit_title = result.raw_commit_message[:pos] if (\n+                    pos != -1) else result.raw_commit_message\n+\n+                match = re.search(supported_regex, commit_title)\n+\n+            else:\n+                match = re.search(\n+                    supported_regex, result.raw_commit_message)\n+\n+            if match:","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-08-05T14:25:06Z","lastEditedAt":null,"updatedAt":"2018-08-05T14:25:06Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzczODM5Ng==","url":"https://github.com/coala/coala-bears/pull/2523#discussion_r207738396","bodyText":"why return ?  there is a loop going on, and the bear should process all data it is being given.","diffHunk":"@@ -0,0 +1,63 @@\n+import re\n+\n+from bears.vcs.git.GitCommitMetadataBear import GitCommitMetadataBear\n+from coalib.bears.GlobalBear import GlobalBear\n+from coalib.results.Result import Result\n+\n+\n+class CISkipInspectBear(GlobalBear):\n+    LANGUAGES = {'Git'}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+\n+    BEAR_DEPS = {GitCommitMetadataBear}\n+\n+    def run(self, dependency_results, filename_patterns: list,\n+            appveyor_ci: bool = False, **kwargs):\n+        \"\"\"\n+        Check the HEAD commit to see if it disables CI build and\n+        return result accordingly. Supported CI include AppVeyor,\n+        Bitrise, Circle CI, GitLab CI, Scrutinizer, Semaphore,\n+        Shippable, Travis CI and wercker.\n+\n+        :param filename_patterns:   A list of regex to identify files\n+                                    that should not skip CI builds.\n+        :param appveyor_ci:         Whether AppVeyor is used by the\n+                                    project or not.\n+        \"\"\"\n+        for result in dependency_results[GitCommitMetadataBear.name]:\n+\n+            supported_regex = r'\\[ci skip\\]|\\[skip ci\\]'\n+\n+            # AppVeyor allows to skip build by commit if the\n+            # supported sequence is present in the title of the\n+            # commit only. All other CI tools allow these sequences\n+            # to be present anywhere in the commit message.\n+            if appveyor_ci:\n+                supported_regex += (r'|\\[skip appveyor\\]')\n+                pos = result.raw_commit_message.find('\\n')\n+                commit_title = result.raw_commit_message[:pos] if (\n+                    pos != -1) else result.raw_commit_message\n+\n+                match = re.search(supported_regex, commit_title)\n+\n+            else:\n+                match = re.search(\n+                    supported_regex, result.raw_commit_message)\n+\n+            if match:\n+\n+                all_files = (result.modified_files +\n+                             result.added_files + result.deleted_files)\n+\n+                for file in all_files:\n+                    for pattern in filename_patterns:\n+                        if re.search(pattern, file):\n+                            yield Result(\n+                                self,\n+                                'This commit modifies a file that has '\n+                                'pattern of type \"%s\", thus should '\n+                                'not disable CI build.' %\n+                                pattern)\n+                            return","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-08-05T14:26:06Z","lastEditedAt":null,"updatedAt":"2018-08-05T14:26:06Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzgwMjY5MA==","url":"https://github.com/coala/coala-bears/pull/2523#discussion_r207802690","bodyText":"Firstly explain all CI which uses [ci skip] or [skip ci] is supported, and indicate that is most CI.\nThen briefly explain how AppVeyor is also supported and how it is different.","diffHunk":"@@ -0,0 +1,62 @@\n+import re\n+\n+from bears.vcs.git.GitCommitMetadataBear import GitCommitMetadataBear\n+from coalib.bears.GlobalBear import GlobalBear\n+from coalib.results.Result import Result\n+from coalib.settings.Setting import typed_list\n+\n+\n+class CISkipInspectBear(GlobalBear):\n+    LANGUAGES = {'Git'}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+\n+    BEAR_DEPS = {GitCommitMetadataBear}\n+\n+    SKIP_CI_REGEX = r'\\[ci skip\\]|\\[skip ci\\]'\n+\n+    def run(self, dependency_results,\n+            filename_patterns: typed_list(str),\n+            appveyor_ci: bool = False,\n+            **kwargs):\n+        \"\"\"\n+        Check the HEAD commit to see if it disables CI build and\n+        return result accordingly. Supported CI include AppVeyor,","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-08-06T07:58:52Z","lastEditedAt":null,"updatedAt":"2018-08-06T07:58:52Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzgwMjkyNw==","url":"https://github.com/coala/coala-bears/pull/2523#discussion_r207802927","bodyText":"why is this inside the for loop?  This is a horrific bug if the loop runs twice.","diffHunk":"@@ -0,0 +1,62 @@\n+import re\n+\n+from bears.vcs.git.GitCommitMetadataBear import GitCommitMetadataBear\n+from coalib.bears.GlobalBear import GlobalBear\n+from coalib.results.Result import Result\n+from coalib.settings.Setting import typed_list\n+\n+\n+class CISkipInspectBear(GlobalBear):\n+    LANGUAGES = {'Git'}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+\n+    BEAR_DEPS = {GitCommitMetadataBear}\n+\n+    SKIP_CI_REGEX = r'\\[ci skip\\]|\\[skip ci\\]'\n+\n+    def run(self, dependency_results,\n+            filename_patterns: typed_list(str),\n+            appveyor_ci: bool = False,\n+            **kwargs):\n+        \"\"\"\n+        Check the HEAD commit to see if it disables CI build and\n+        return result accordingly. Supported CI include AppVeyor,\n+        Bitrise, Circle CI, GitLab CI, Scrutinizer, Semaphore,\n+        Shippable, Travis CI and wercker.\n+\n+        :param filename_patterns:   A list of regex to identify files\n+                                    that should not skip CI builds.\n+        :param appveyor_ci:         Whether AppVeyor is used by the\n+                                    project or not.\n+        \"\"\"\n+        for result in dependency_results[GitCommitMetadataBear.name]:\n+\n+            # AppVeyor allows to skip build by commit if the\n+            # supported sequence is present in the title of the\n+            # commit only. All other CI tools allow these sequences\n+            # to be present anywhere in the commit message.\n+            if appveyor_ci:\n+                self.SKIP_CI_REGEX += r'|\\[skip appveyor\\]'","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-08-06T07:59:53Z","lastEditedAt":null,"updatedAt":"2018-08-06T07:59:53Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzgwMzA4Mw==","url":"https://github.com/coala/coala-bears/pull/2523#discussion_r207803083","bodyText":"if match: continue\nalways try to get out of an indent as soon as possible.","diffHunk":"@@ -0,0 +1,62 @@\n+import re\n+\n+from bears.vcs.git.GitCommitMetadataBear import GitCommitMetadataBear\n+from coalib.bears.GlobalBear import GlobalBear\n+from coalib.results.Result import Result\n+from coalib.settings.Setting import typed_list\n+\n+\n+class CISkipInspectBear(GlobalBear):\n+    LANGUAGES = {'Git'}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+\n+    BEAR_DEPS = {GitCommitMetadataBear}\n+\n+    SKIP_CI_REGEX = r'\\[ci skip\\]|\\[skip ci\\]'\n+\n+    def run(self, dependency_results,\n+            filename_patterns: typed_list(str),\n+            appveyor_ci: bool = False,\n+            **kwargs):\n+        \"\"\"\n+        Check the HEAD commit to see if it disables CI build and\n+        return result accordingly. Supported CI include AppVeyor,\n+        Bitrise, Circle CI, GitLab CI, Scrutinizer, Semaphore,\n+        Shippable, Travis CI and wercker.\n+\n+        :param filename_patterns:   A list of regex to identify files\n+                                    that should not skip CI builds.\n+        :param appveyor_ci:         Whether AppVeyor is used by the\n+                                    project or not.\n+        \"\"\"\n+        for result in dependency_results[GitCommitMetadataBear.name]:\n+\n+            # AppVeyor allows to skip build by commit if the\n+            # supported sequence is present in the title of the\n+            # commit only. All other CI tools allow these sequences\n+            # to be present anywhere in the commit message.\n+            if appveyor_ci:\n+                self.SKIP_CI_REGEX += r'|\\[skip appveyor\\]'\n+                pos = result.raw_commit_message.find('\\n')\n+                commit_title = result.raw_commit_message[:pos] if (\n+                    pos != -1) else result.raw_commit_message\n+\n+            else:\n+                commit_title = result.raw_commit_message\n+\n+            match = re.search(self.SKIP_CI_REGEX, commit_title)\n+            if match:","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-08-06T08:00:32Z","lastEditedAt":null,"updatedAt":"2018-08-06T08:00:32Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzgwMzIwOA==","url":"https://github.com/coala/coala-bears/pull/2523#discussion_r207803208","bodyText":"if not re.search(pattern, file): continue","diffHunk":"@@ -0,0 +1,62 @@\n+import re\n+\n+from bears.vcs.git.GitCommitMetadataBear import GitCommitMetadataBear\n+from coalib.bears.GlobalBear import GlobalBear\n+from coalib.results.Result import Result\n+from coalib.settings.Setting import typed_list\n+\n+\n+class CISkipInspectBear(GlobalBear):\n+    LANGUAGES = {'Git'}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+\n+    BEAR_DEPS = {GitCommitMetadataBear}\n+\n+    SKIP_CI_REGEX = r'\\[ci skip\\]|\\[skip ci\\]'\n+\n+    def run(self, dependency_results,\n+            filename_patterns: typed_list(str),\n+            appveyor_ci: bool = False,\n+            **kwargs):\n+        \"\"\"\n+        Check the HEAD commit to see if it disables CI build and\n+        return result accordingly. Supported CI include AppVeyor,\n+        Bitrise, Circle CI, GitLab CI, Scrutinizer, Semaphore,\n+        Shippable, Travis CI and wercker.\n+\n+        :param filename_patterns:   A list of regex to identify files\n+                                    that should not skip CI builds.\n+        :param appveyor_ci:         Whether AppVeyor is used by the\n+                                    project or not.\n+        \"\"\"\n+        for result in dependency_results[GitCommitMetadataBear.name]:\n+\n+            # AppVeyor allows to skip build by commit if the\n+            # supported sequence is present in the title of the\n+            # commit only. All other CI tools allow these sequences\n+            # to be present anywhere in the commit message.\n+            if appveyor_ci:\n+                self.SKIP_CI_REGEX += r'|\\[skip appveyor\\]'\n+                pos = result.raw_commit_message.find('\\n')\n+                commit_title = result.raw_commit_message[:pos] if (\n+                    pos != -1) else result.raw_commit_message\n+\n+            else:\n+                commit_title = result.raw_commit_message\n+\n+            match = re.search(self.SKIP_CI_REGEX, commit_title)\n+            if match:\n+                all_files = (result.modified_files +\n+                             result.added_files + result.deleted_files)\n+\n+                for file in all_files:\n+                    for pattern in filename_patterns:\n+                        if re.search(pattern, file):","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-08-06T08:01:01Z","lastEditedAt":null,"updatedAt":"2018-08-06T08:01:01Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODA2MjE4Nw==","url":"https://github.com/coala/coala-bears/pull/2523#discussion_r208062187","bodyText":"regex is a bad way to select files.\nplease use glob.glob or coala's glob functions whenever dealing with files.\nBut .. as mentioned above, coala already has a files setting for every section, so we dont need another one.","diffHunk":"@@ -0,0 +1,67 @@\n+import re\n+\n+from bears.vcs.git.GitCommitMetadataBear import GitCommitMetadataBear\n+from coalib.bears.GlobalBear import GlobalBear\n+from coalib.results.Result import Result\n+from coalib.settings.Setting import typed_list\n+\n+\n+class CISkipInspectBear(GlobalBear):\n+    LANGUAGES = {'Git'}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+\n+    BEAR_DEPS = {GitCommitMetadataBear}\n+\n+    SKIP_CI_REGEX = r'\\[ci skip\\]|\\[skip ci\\]'\n+\n+    def run(self, dependency_results,\n+            filename_patterns: typed_list(str),\n+            appveyor_ci: bool = False,\n+            **kwargs):\n+        \"\"\"\n+        Most CI allow commits to skip CI build by including sequences\n+        like [skip ci] or [ci skip] anywhere in the commit message.\n+        AppVeyor CI supports [skip appveyor] in addition to the above\n+        but only in the commit title.\n+        This bear checks the HEAD commit to see if it disables CI build\n+        and return result accordingly. Supported CI include AppVeyor,\n+        Bitrise, Circle CI, GitLab CI, Scrutinizer, Semaphore,\n+        Shippable, Travis CI and wercker.\n+\n+        :param filename_patterns:   A list of regex to identify files\n+                                    that should not skip CI builds.\n+        :param appveyor_ci:         Whether AppVeyor is used by the\n+                                    project or not.\n+        \"\"\"\n+        if appveyor_ci:\n+            self.SKIP_CI_REGEX += r'|\\[skip appveyor\\]'\n+\n+        for result in dependency_results[GitCommitMetadataBear.name]:\n+\n+            if appveyor_ci:\n+                pos = result.raw_commit_message.find('\\n')\n+                commit_title = result.raw_commit_message[:pos] if (\n+                    pos != -1) else result.raw_commit_message\n+\n+            else:\n+                commit_title = result.raw_commit_message\n+\n+            match = re.search(self.SKIP_CI_REGEX, commit_title)\n+            if not match:\n+                continue\n+\n+            all_files = (result.modified_files +\n+                         result.added_files + result.deleted_files)\n+\n+            for file in all_files:\n+                for pattern in filename_patterns:\n+                    if not re.search(pattern, file):","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-08-06T23:56:37Z","lastEditedAt":null,"updatedAt":"2018-08-06T23:56:37Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODA2Mjk4Mg==","url":"https://github.com/coala/coala-bears/pull/2523#discussion_r208062982","bodyText":"Each .coafile section already has a files setting (and ignore).  These are already populated for you with real filenames.  Use it for the list of files.","diffHunk":"@@ -0,0 +1,67 @@\n+import re\n+\n+from bears.vcs.git.GitCommitMetadataBear import GitCommitMetadataBear\n+from coalib.bears.GlobalBear import GlobalBear\n+from coalib.results.Result import Result\n+from coalib.settings.Setting import typed_list\n+\n+\n+class CISkipInspectBear(GlobalBear):\n+    LANGUAGES = {'Git'}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+\n+    BEAR_DEPS = {GitCommitMetadataBear}\n+\n+    SKIP_CI_REGEX = r'\\[ci skip\\]|\\[skip ci\\]'\n+\n+    def run(self, dependency_results,\n+            filename_patterns: typed_list(str),\n+            appveyor_ci: bool = False,\n+            **kwargs):\n+        \"\"\"\n+        Most CI allow commits to skip CI build by including sequences\n+        like [skip ci] or [ci skip] anywhere in the commit message.\n+        AppVeyor CI supports [skip appveyor] in addition to the above\n+        but only in the commit title.\n+        This bear checks the HEAD commit to see if it disables CI build\n+        and return result accordingly. Supported CI include AppVeyor,\n+        Bitrise, Circle CI, GitLab CI, Scrutinizer, Semaphore,\n+        Shippable, Travis CI and wercker.\n+\n+        :param filename_patterns:   A list of regex to identify files","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-08-07T00:02:18Z","lastEditedAt":null,"updatedAt":"2018-08-07T00:02:18Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODQ1NzkyMQ==","url":"https://github.com/coala/coala-bears/pull/2523#discussion_r208457921","bodyText":"@jayvdb Could you please give me an example bear which uses these settings. I am not able to understand how to do it. Also, I think in section like [all], we can have files of type tests/**/*.py in files setting which are to be ignored. How should I manage that?","diffHunk":"@@ -0,0 +1,67 @@\n+import re\n+\n+from bears.vcs.git.GitCommitMetadataBear import GitCommitMetadataBear\n+from coalib.bears.GlobalBear import GlobalBear\n+from coalib.results.Result import Result\n+from coalib.settings.Setting import typed_list\n+\n+\n+class CISkipInspectBear(GlobalBear):\n+    LANGUAGES = {'Git'}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+\n+    BEAR_DEPS = {GitCommitMetadataBear}\n+\n+    SKIP_CI_REGEX = r'\\[ci skip\\]|\\[skip ci\\]'\n+\n+    def run(self, dependency_results,\n+            filename_patterns: typed_list(str),\n+            appveyor_ci: bool = False,\n+            **kwargs):\n+        \"\"\"\n+        Most CI allow commits to skip CI build by including sequences\n+        like [skip ci] or [ci skip] anywhere in the commit message.\n+        AppVeyor CI supports [skip appveyor] in addition to the above\n+        but only in the commit title.\n+        This bear checks the HEAD commit to see if it disables CI build\n+        and return result accordingly. Supported CI include AppVeyor,\n+        Bitrise, Circle CI, GitLab CI, Scrutinizer, Semaphore,\n+        Shippable, Travis CI and wercker.\n+\n+        :param filename_patterns:   A list of regex to identify files","author":{"login":"kriti21","avatarUrl":"https://avatars3.githubusercontent.com/u/19872082?v=4","name":"Kriti Rohilla"},"reactions":[],"createdAt":"2018-08-08T05:10:51Z","lastEditedAt":null,"updatedAt":"2018-08-08T05:10:51Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODQ1ODAwOA==","url":"https://github.com/coala/coala-bears/pull/2523#discussion_r208458008","bodyText":"I am using glob.glob for this.","diffHunk":"@@ -0,0 +1,67 @@\n+import re\n+\n+from bears.vcs.git.GitCommitMetadataBear import GitCommitMetadataBear\n+from coalib.bears.GlobalBear import GlobalBear\n+from coalib.results.Result import Result\n+from coalib.settings.Setting import typed_list\n+\n+\n+class CISkipInspectBear(GlobalBear):\n+    LANGUAGES = {'Git'}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+\n+    BEAR_DEPS = {GitCommitMetadataBear}\n+\n+    SKIP_CI_REGEX = r'\\[ci skip\\]|\\[skip ci\\]'\n+\n+    def run(self, dependency_results,\n+            filename_patterns: typed_list(str),\n+            appveyor_ci: bool = False,\n+            **kwargs):\n+        \"\"\"\n+        Most CI allow commits to skip CI build by including sequences\n+        like [skip ci] or [ci skip] anywhere in the commit message.\n+        AppVeyor CI supports [skip appveyor] in addition to the above\n+        but only in the commit title.\n+        This bear checks the HEAD commit to see if it disables CI build\n+        and return result accordingly. Supported CI include AppVeyor,\n+        Bitrise, Circle CI, GitLab CI, Scrutinizer, Semaphore,\n+        Shippable, Travis CI and wercker.\n+\n+        :param filename_patterns:   A list of regex to identify files\n+                                    that should not skip CI builds.\n+        :param appveyor_ci:         Whether AppVeyor is used by the\n+                                    project or not.\n+        \"\"\"\n+        if appveyor_ci:\n+            self.SKIP_CI_REGEX += r'|\\[skip appveyor\\]'\n+\n+        for result in dependency_results[GitCommitMetadataBear.name]:\n+\n+            if appveyor_ci:\n+                pos = result.raw_commit_message.find('\\n')\n+                commit_title = result.raw_commit_message[:pos] if (\n+                    pos != -1) else result.raw_commit_message\n+\n+            else:\n+                commit_title = result.raw_commit_message\n+\n+            match = re.search(self.SKIP_CI_REGEX, commit_title)\n+            if not match:\n+                continue\n+\n+            all_files = (result.modified_files +\n+                         result.added_files + result.deleted_files)\n+\n+            for file in all_files:\n+                for pattern in filename_patterns:\n+                    if not re.search(pattern, file):","author":{"login":"kriti21","avatarUrl":"https://avatars3.githubusercontent.com/u/19872082?v=4","name":"Kriti Rohilla"},"reactions":[],"createdAt":"2018-08-08T05:11:43Z","lastEditedAt":null,"updatedAt":"2018-08-08T05:11:43Z"}]}}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1533099186000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/pull/2531","number":2531,"title":".gitignore: Use moban template","body":"Closes #2326\nCloses #2394\nCloses #2441","comments":3,"createdAt":"2018-06-10T02:02:09Z","updatedAt":"2018-08-01T04:53:06Z","closedAt":null,"state":"open","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"assignee":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"difficulty/low","color":"207de5"},{"name":"difficulty/newcomer","color":"65C8FF"},{"name":"size/L","color":"FF8888"},{"name":"status/blocked","color":"e11d21"}],"pullRequest":{"htmlUrl":"https://github.com/coala/coala-bears/pull/2531","comments":[{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDczNTczOQ==","url":"https://github.com/coala/coala-bears/pull/2531#discussion_r194735739","bodyText":"also being removed by #2517 , and discussed there and on gitter a bit recently","diffHunk":"@@ -1,45 +1,472 @@\n-.DS_Store\n-.directory\n-.idea\n-.kdev4\n-__pycache__\n-*~\n-build\n-*.mo\n-dist\n+# moban hashes\n+.moban.hashes\n+\n+# Extra rules from https://github.com/github/gitignore/\n+# Python rules\n+# Byte-compiled / optimized / DLL files\n+__pycache__/\n+*.py[cod]\n+*$py.class\n+\n+# C extensions\n+*.so\n+\n+# Distribution / packaging\n+.Python\n+build/\n+develop-eggs/\n+dist/\n+downloads/\n+eggs/\n+.eggs/\n+lib/\n+lib64/\n+parts/\n+sdist/\n+var/\n+wheels/\n+*.egg-info/\n+.installed.cfg\n+*.egg\n MANIFEST\n-*.pyc\n+\n+# PyInstaller\n+#  Usually these files are written by a python script from a template\n+#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n+*.manifest\n+*.spec\n+\n+# Installer logs\n+pip-log.txt\n+pip-delete-this-directory.txt\n+\n+# Unit test / coverage reports\n+htmlcov/\n+.tox/\n .coverage\n-*.patch\n-_build\n-coverage.xml\n-htmlcov\n-*.orig\n-*.diff\n-*.kdev4\n-*.patch\n-*.sublime-project\n-*.sublime-workspace\n-.python-version\n-*.egg-info\n .coverage.*\n-src\n-site\n-.zanata-cache\n-*.exe\n .cache\n-*.eggs\n-node_modules\n+nosetests.xml\n+coverage.xml\n+*.cover\n+.hypothesis/\n+.pytest_cache/\n+\n+# Translations\n+*.mo\n+*.pot\n+\n+# Django stuff:\n *.log\n-*.jar\n-.bundle\n-.vendor\n-vendor\n-Goopfile.lock\n-Gemfile.lock\n-.Rhistory\n-.Rprofile\n+local_settings.py\n+db.sqlite3\n+\n+# Flask stuff:\n+instance/\n+.webassets-cache\n+\n+# Scrapy stuff:\n+.scrapy\n+\n+# Sphinx documentation\n+docs/_build/\n+\n+# PyBuilder\n+target/\n+\n+# Jupyter Notebook\n+.ipynb_checkpoints\n+\n+# pyenv\n+.python-version\n+\n+# celery beat schedule file\n+celerybeat-schedule\n+\n+# SageMath parsed files\n+*.sage.py\n+\n+# Environments\n+.env\n+.venv\n+env/\n+venv/\n+ENV/\n+env.bak/\n+venv.bak/\n+\n+# Spyder project settings\n+.spyderproject\n+.spyproject\n+\n+# Rope project settings\n+.ropeproject\n+\n+# mkdocs documentation\n+/site\n+\n+# mypy\n+.mypy_cache/\n+\n+# VirtualEnv rules\n+# Virtualenv\n+# http://iamzed.com/2009/05/07/a-primer-on-virtualenv/\n+.Python\n+[Bb]in\n+[Ii]nclude\n+[Ll]ib\n+[Ll]ib64\n+[Ll]ocal\n+[Ss]cripts\n+pyvenv.cfg\n+.venv\n+pip-selfcheck.json\n+\n+# Linux rules\n+*~\n+\n+# temporary files which can be created if a process still has a handle open of a deleted file\n+.fuse_hidden*\n+\n+# KDE directory preferences\n+.directory\n+\n+# Linux trash folder which might appear on any partition or disk\n+.Trash-*\n+\n+# .nfs files are created when an open file is removed but is still being accessed\n+.nfs*\n+\n+# Windows rules\n+# Windows thumbnail cache files\n+Thumbs.db\n+ehthumbs.db\n+ehthumbs_vista.db\n+\n+# Dump file\n+*.stackdump\n+\n+# Folder config file\n+[Dd]esktop.ini\n+\n+# Recycle Bin used on file shares\n+$RECYCLE.BIN/\n+\n+# Windows Installer files\n+*.cab\n+*.msi\n+*.msix\n+*.msm\n+*.msp\n+\n+# Windows shortcuts\n+*.lnk\n+\n+# macOS rules\n+# General\n+.DS_Store\n+.AppleDouble\n+.LSOverride\n+\n+# Icon must end with two \\r\n+Icon\n+\n+\n+# Thumbnails\n+._*\n+\n+# Files that might appear in the root of a volume\n+.DocumentRevisions-V100\n+.fseventsd\n+.Spotlight-V100\n+.TemporaryItems\n+.Trashes\n+.VolumeIcon.icns\n+.com.apple.timemachine.donotpresent\n+\n+# Directories potentially created on remote AFP share\n+.AppleDB\n+.AppleDesktop\n+Network Trash Folder\n+Temporary Items\n+.apdisk\n+\n+# Emacs rules\n+# -*- mode: gitignore; -*-\n+*~\n+\\#*\\#\n+/.emacs.desktop\n+/.emacs.desktop.lock\n+*.elc\n+auto-save-list\n+tramp\n+.\\#*\n+\n+# Org-mode\n+.org-id-locations\n+*_archive\n+\n+# flymake-mode\n+*_flymake.*\n+\n+# eshell files\n+/eshell/history\n+/eshell/lastdir\n+\n+# elpa packages\n+/elpa/\n+\n+# reftex files\n+*.rel\n+\n+# AUCTeX auto folder\n+/auto/\n+\n+# cask packages\n+.cask/\n+dist/\n+\n+# Flycheck\n+flycheck_*.el\n+\n+# server auth directory\n+/server/\n+\n+# projectiles files\n+.projectile\n+\n+# directory configuration\n+.dir-locals.el\n+\n+# Vim rules\n+# Swap\n+[._]*.s[a-v][a-z]\n+[._]*.sw[a-p]\n+[._]s[a-v][a-z]\n+[._]sw[a-p]\n+\n+# Session\n+Session.vim\n+\n+# Temporary\n+.netrwhist\n+*~\n+# Auto-generated tag files\n+tags\n+# Persistent undo\n+[._]*.un~\n+\n+# JetBrains rules\n+# Covers JetBrains IDEs: IntelliJ, RubyMine, PhpStorm, AppCode, PyCharm, CLion, Android Studio and WebStorm\n+# Reference: https://intellij-support.jetbrains.com/hc/en-us/articles/206544839\n+\n+# User-specific stuff\n+.idea/**/workspace.xml\n+.idea/**/tasks.xml\n+.idea/**/dictionaries\n+.idea/**/shelf\n+\n+# Sensitive or high-churn files\n+.idea/**/dataSources/\n+.idea/**/dataSources.ids\n+.idea/**/dataSources.local.xml\n+.idea/**/sqlDataSources.xml\n+.idea/**/dynamic.xml\n+.idea/**/uiDesigner.xml\n+.idea/**/dbnavigator.xml\n+\n+# Gradle\n+.idea/**/gradle.xml\n+.idea/**/libraries\n+\n+# CMake\n+cmake-build-debug/\n+cmake-build-release/\n+\n+# Mongo Explorer plugin\n+.idea/**/mongoSettings.xml\n+\n+# File-based project format\n+*.iws\n+\n+# IntelliJ\n+out/\n+\n+# mpeltonen/sbt-idea plugin\n+.idea_modules/\n+\n+# JIRA plugin\n+atlassian-ide-plugin.xml\n+\n+# Cursive Clojure plugin\n+.idea/replstate.xml\n+\n+# Crashlytics plugin (for Android Studio and IntelliJ)\n+com_crashlytics_export_strings.xml\n+crashlytics.properties\n+crashlytics-build.properties\n+fabric.properties\n+\n+# Editor-based Rest Client\n+.idea/httpRequests\n+\n+# SublimeText rules\n+# Cache files for Sublime Text\n+*.tmlanguage.cache\n+*.tmPreferences.cache\n+*.stTheme.cache\n+\n+# Workspace files are user-specific\n+*.sublime-workspace\n+\n+# Project files should be checked into the repository, unless a significant\n+# proportion of contributors will probably not be using Sublime Text\n+# *.sublime-project\n+\n+# SFTP configuration file\n+sftp-config.json\n+\n+# Package control specific files\n+Package Control.last-run\n+Package Control.ca-list\n+Package Control.ca-bundle\n+Package Control.system-ca-bundle\n+Package Control.cache/\n+Package Control.ca-certs/\n+Package Control.merged-ca-bundle\n+Package Control.user-ca-bundle\n+oscrypto-ca-bundle.crt\n+bh_unicode_properties.cache\n+\n+# Sublime-github package stores a github token in this file\n+# https://packagecontrol.io/packages/sublime-github\n+GitHub.sublime-settings\n+\n+# KDevelop4 rules\n+*.kdev4\n+.kdev4/\n+\n+# Kate rules\n+# Swap Files #\n+.*.kate-swp\n+.swp.*\n+\n+# TextMate rules\n+*.tmproj\n+*.tmproject\n+tmtags\n+\n+# VisualStudioCode rules\n+.vscode/*\n+!.vscode/settings.json\n+!.vscode/tasks.json\n+!.vscode/launch.json\n+!.vscode/extensions.json\n+\n+# Xcode rules\n+# Xcode\n+#\n+# gitignore contributors: remember to update Global/Xcode.gitignore, Objective-C.gitignore & Swift.gitignore\n+\n+## User settings\n+xcuserdata/\n+\n+## compatibility with Xcode 8 and earlier (ignoring not required starting Xcode 9)\n+*.xcscmblueprint\n+*.xccheckout\n+\n+## compatibility with Xcode 3 and earlier (ignoring not required starting Xcode 4)\n+build/\n+DerivedData/\n+*.moved-aside\n+*.pbxuser\n+!default.pbxuser\n+*.mode1v3\n+!default.mode1v3\n+*.mode2v3\n+!default.mode2v3\n+*.perspectivev3\n+!default.perspectivev3\n+\n+# Eclipse rules\n+\n+.metadata\n+bin/\n+tmp/\n+*.tmp\n+*.bak\n *.swp\n-venv\n-bears/upload/\n-package-lock.json","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-06-12T13:25:09Z","lastEditedAt":null,"updatedAt":"2018-06-12T13:25:09Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDczNzM1Mg==","url":"https://github.com/coala/coala-bears/pull/2531#discussion_r194737352","bodyText":"this needs to be added as a custom rule f7836d1","diffHunk":"@@ -1,45 +1,472 @@\n-.DS_Store\n-.directory\n-.idea\n-.kdev4\n-__pycache__\n-*~\n-build\n-*.mo\n-dist\n+# moban hashes\n+.moban.hashes\n+\n+# Extra rules from https://github.com/github/gitignore/\n+# Python rules\n+# Byte-compiled / optimized / DLL files\n+__pycache__/\n+*.py[cod]\n+*$py.class\n+\n+# C extensions\n+*.so\n+\n+# Distribution / packaging\n+.Python\n+build/\n+develop-eggs/\n+dist/\n+downloads/\n+eggs/\n+.eggs/\n+lib/\n+lib64/\n+parts/\n+sdist/\n+var/\n+wheels/\n+*.egg-info/\n+.installed.cfg\n+*.egg\n MANIFEST\n-*.pyc\n+\n+# PyInstaller\n+#  Usually these files are written by a python script from a template\n+#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n+*.manifest\n+*.spec\n+\n+# Installer logs\n+pip-log.txt\n+pip-delete-this-directory.txt\n+\n+# Unit test / coverage reports\n+htmlcov/\n+.tox/\n .coverage\n-*.patch\n-_build\n-coverage.xml\n-htmlcov\n-*.orig\n-*.diff\n-*.kdev4\n-*.patch\n-*.sublime-project\n-*.sublime-workspace\n-.python-version\n-*.egg-info\n .coverage.*\n-src\n-site\n-.zanata-cache\n-*.exe\n .cache\n-*.eggs\n-node_modules\n+nosetests.xml\n+coverage.xml\n+*.cover\n+.hypothesis/\n+.pytest_cache/\n+\n+# Translations\n+*.mo\n+*.pot\n+\n+# Django stuff:\n *.log\n-*.jar\n-.bundle\n-.vendor\n-vendor\n-Goopfile.lock\n-Gemfile.lock\n-.Rhistory\n-.Rprofile\n+local_settings.py\n+db.sqlite3\n+\n+# Flask stuff:\n+instance/\n+.webassets-cache\n+\n+# Scrapy stuff:\n+.scrapy\n+\n+# Sphinx documentation\n+docs/_build/\n+\n+# PyBuilder\n+target/\n+\n+# Jupyter Notebook\n+.ipynb_checkpoints\n+\n+# pyenv\n+.python-version\n+\n+# celery beat schedule file\n+celerybeat-schedule\n+\n+# SageMath parsed files\n+*.sage.py\n+\n+# Environments\n+.env\n+.venv\n+env/\n+venv/\n+ENV/\n+env.bak/\n+venv.bak/\n+\n+# Spyder project settings\n+.spyderproject\n+.spyproject\n+\n+# Rope project settings\n+.ropeproject\n+\n+# mkdocs documentation\n+/site\n+\n+# mypy\n+.mypy_cache/\n+\n+# VirtualEnv rules\n+# Virtualenv\n+# http://iamzed.com/2009/05/07/a-primer-on-virtualenv/\n+.Python\n+[Bb]in\n+[Ii]nclude\n+[Ll]ib\n+[Ll]ib64\n+[Ll]ocal\n+[Ss]cripts\n+pyvenv.cfg\n+.venv\n+pip-selfcheck.json\n+\n+# Linux rules\n+*~\n+\n+# temporary files which can be created if a process still has a handle open of a deleted file\n+.fuse_hidden*\n+\n+# KDE directory preferences\n+.directory\n+\n+# Linux trash folder which might appear on any partition or disk\n+.Trash-*\n+\n+# .nfs files are created when an open file is removed but is still being accessed\n+.nfs*\n+\n+# Windows rules\n+# Windows thumbnail cache files\n+Thumbs.db\n+ehthumbs.db\n+ehthumbs_vista.db\n+\n+# Dump file\n+*.stackdump\n+\n+# Folder config file\n+[Dd]esktop.ini\n+\n+# Recycle Bin used on file shares\n+$RECYCLE.BIN/\n+\n+# Windows Installer files\n+*.cab\n+*.msi\n+*.msix\n+*.msm\n+*.msp\n+\n+# Windows shortcuts\n+*.lnk\n+\n+# macOS rules\n+# General\n+.DS_Store\n+.AppleDouble\n+.LSOverride\n+\n+# Icon must end with two \\r\n+Icon\n+\n+\n+# Thumbnails\n+._*\n+\n+# Files that might appear in the root of a volume\n+.DocumentRevisions-V100\n+.fseventsd\n+.Spotlight-V100\n+.TemporaryItems\n+.Trashes\n+.VolumeIcon.icns\n+.com.apple.timemachine.donotpresent\n+\n+# Directories potentially created on remote AFP share\n+.AppleDB\n+.AppleDesktop\n+Network Trash Folder\n+Temporary Items\n+.apdisk\n+\n+# Emacs rules\n+# -*- mode: gitignore; -*-\n+*~\n+\\#*\\#\n+/.emacs.desktop\n+/.emacs.desktop.lock\n+*.elc\n+auto-save-list\n+tramp\n+.\\#*\n+\n+# Org-mode\n+.org-id-locations\n+*_archive\n+\n+# flymake-mode\n+*_flymake.*\n+\n+# eshell files\n+/eshell/history\n+/eshell/lastdir\n+\n+# elpa packages\n+/elpa/\n+\n+# reftex files\n+*.rel\n+\n+# AUCTeX auto folder\n+/auto/\n+\n+# cask packages\n+.cask/\n+dist/\n+\n+# Flycheck\n+flycheck_*.el\n+\n+# server auth directory\n+/server/\n+\n+# projectiles files\n+.projectile\n+\n+# directory configuration\n+.dir-locals.el\n+\n+# Vim rules\n+# Swap\n+[._]*.s[a-v][a-z]\n+[._]*.sw[a-p]\n+[._]s[a-v][a-z]\n+[._]sw[a-p]\n+\n+# Session\n+Session.vim\n+\n+# Temporary\n+.netrwhist\n+*~\n+# Auto-generated tag files\n+tags\n+# Persistent undo\n+[._]*.un~\n+\n+# JetBrains rules\n+# Covers JetBrains IDEs: IntelliJ, RubyMine, PhpStorm, AppCode, PyCharm, CLion, Android Studio and WebStorm\n+# Reference: https://intellij-support.jetbrains.com/hc/en-us/articles/206544839\n+\n+# User-specific stuff\n+.idea/**/workspace.xml\n+.idea/**/tasks.xml\n+.idea/**/dictionaries\n+.idea/**/shelf\n+\n+# Sensitive or high-churn files\n+.idea/**/dataSources/\n+.idea/**/dataSources.ids\n+.idea/**/dataSources.local.xml\n+.idea/**/sqlDataSources.xml\n+.idea/**/dynamic.xml\n+.idea/**/uiDesigner.xml\n+.idea/**/dbnavigator.xml\n+\n+# Gradle\n+.idea/**/gradle.xml\n+.idea/**/libraries\n+\n+# CMake\n+cmake-build-debug/\n+cmake-build-release/\n+\n+# Mongo Explorer plugin\n+.idea/**/mongoSettings.xml\n+\n+# File-based project format\n+*.iws\n+\n+# IntelliJ\n+out/\n+\n+# mpeltonen/sbt-idea plugin\n+.idea_modules/\n+\n+# JIRA plugin\n+atlassian-ide-plugin.xml\n+\n+# Cursive Clojure plugin\n+.idea/replstate.xml\n+\n+# Crashlytics plugin (for Android Studio and IntelliJ)\n+com_crashlytics_export_strings.xml\n+crashlytics.properties\n+crashlytics-build.properties\n+fabric.properties\n+\n+# Editor-based Rest Client\n+.idea/httpRequests\n+\n+# SublimeText rules\n+# Cache files for Sublime Text\n+*.tmlanguage.cache\n+*.tmPreferences.cache\n+*.stTheme.cache\n+\n+# Workspace files are user-specific\n+*.sublime-workspace\n+\n+# Project files should be checked into the repository, unless a significant\n+# proportion of contributors will probably not be using Sublime Text\n+# *.sublime-project\n+\n+# SFTP configuration file\n+sftp-config.json\n+\n+# Package control specific files\n+Package Control.last-run\n+Package Control.ca-list\n+Package Control.ca-bundle\n+Package Control.system-ca-bundle\n+Package Control.cache/\n+Package Control.ca-certs/\n+Package Control.merged-ca-bundle\n+Package Control.user-ca-bundle\n+oscrypto-ca-bundle.crt\n+bh_unicode_properties.cache\n+\n+# Sublime-github package stores a github token in this file\n+# https://packagecontrol.io/packages/sublime-github\n+GitHub.sublime-settings\n+\n+# KDevelop4 rules\n+*.kdev4\n+.kdev4/\n+\n+# Kate rules\n+# Swap Files #\n+.*.kate-swp\n+.swp.*\n+\n+# TextMate rules\n+*.tmproj\n+*.tmproject\n+tmtags\n+\n+# VisualStudioCode rules\n+.vscode/*\n+!.vscode/settings.json\n+!.vscode/tasks.json\n+!.vscode/launch.json\n+!.vscode/extensions.json\n+\n+# Xcode rules\n+# Xcode\n+#\n+# gitignore contributors: remember to update Global/Xcode.gitignore, Objective-C.gitignore & Swift.gitignore\n+\n+## User settings\n+xcuserdata/\n+\n+## compatibility with Xcode 8 and earlier (ignoring not required starting Xcode 9)\n+*.xcscmblueprint\n+*.xccheckout\n+\n+## compatibility with Xcode 3 and earlier (ignoring not required starting Xcode 4)\n+build/\n+DerivedData/\n+*.moved-aside\n+*.pbxuser\n+!default.pbxuser\n+*.mode1v3\n+!default.mode1v3\n+*.mode2v3\n+!default.mode2v3\n+*.perspectivev3\n+!default.perspectivev3\n+\n+# Eclipse rules\n+\n+.metadata\n+bin/\n+tmp/\n+*.tmp\n+*.bak\n *.swp\n-venv\n-bears/upload/","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-06-12T13:29:30Z","lastEditedAt":null,"updatedAt":"2018-06-12T13:29:30Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDczNzkxOQ==","url":"https://github.com/coala/coala-bears/pull/2531#discussion_r194737919","bodyText":"likely needed 2894b03","diffHunk":"@@ -1,45 +1,472 @@\n-.DS_Store\n-.directory\n-.idea\n-.kdev4\n-__pycache__\n-*~\n-build\n-*.mo\n-dist\n+# moban hashes\n+.moban.hashes\n+\n+# Extra rules from https://github.com/github/gitignore/\n+# Python rules\n+# Byte-compiled / optimized / DLL files\n+__pycache__/\n+*.py[cod]\n+*$py.class\n+\n+# C extensions\n+*.so\n+\n+# Distribution / packaging\n+.Python\n+build/\n+develop-eggs/\n+dist/\n+downloads/\n+eggs/\n+.eggs/\n+lib/\n+lib64/\n+parts/\n+sdist/\n+var/\n+wheels/\n+*.egg-info/\n+.installed.cfg\n+*.egg\n MANIFEST\n-*.pyc\n+\n+# PyInstaller\n+#  Usually these files are written by a python script from a template\n+#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n+*.manifest\n+*.spec\n+\n+# Installer logs\n+pip-log.txt\n+pip-delete-this-directory.txt\n+\n+# Unit test / coverage reports\n+htmlcov/\n+.tox/\n .coverage\n-*.patch\n-_build\n-coverage.xml\n-htmlcov\n-*.orig\n-*.diff\n-*.kdev4\n-*.patch\n-*.sublime-project\n-*.sublime-workspace\n-.python-version\n-*.egg-info\n .coverage.*\n-src\n-site\n-.zanata-cache\n-*.exe\n .cache\n-*.eggs\n-node_modules\n+nosetests.xml\n+coverage.xml\n+*.cover\n+.hypothesis/\n+.pytest_cache/\n+\n+# Translations\n+*.mo\n+*.pot\n+\n+# Django stuff:\n *.log\n-*.jar\n-.bundle\n-.vendor\n-vendor\n-Goopfile.lock\n-Gemfile.lock\n-.Rhistory","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-06-12T13:31:06Z","lastEditedAt":null,"updatedAt":"2018-06-12T13:31:06Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDczODUzNw==","url":"https://github.com/coala/coala-bears/pull/2531#discussion_r194738537","bodyText":"probably similar to #2517","diffHunk":"@@ -1,45 +1,472 @@\n-.DS_Store\n-.directory\n-.idea\n-.kdev4\n-__pycache__\n-*~\n-build\n-*.mo\n-dist\n+# moban hashes\n+.moban.hashes\n+\n+# Extra rules from https://github.com/github/gitignore/\n+# Python rules\n+# Byte-compiled / optimized / DLL files\n+__pycache__/\n+*.py[cod]\n+*$py.class\n+\n+# C extensions\n+*.so\n+\n+# Distribution / packaging\n+.Python\n+build/\n+develop-eggs/\n+dist/\n+downloads/\n+eggs/\n+.eggs/\n+lib/\n+lib64/\n+parts/\n+sdist/\n+var/\n+wheels/\n+*.egg-info/\n+.installed.cfg\n+*.egg\n MANIFEST\n-*.pyc\n+\n+# PyInstaller\n+#  Usually these files are written by a python script from a template\n+#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n+*.manifest\n+*.spec\n+\n+# Installer logs\n+pip-log.txt\n+pip-delete-this-directory.txt\n+\n+# Unit test / coverage reports\n+htmlcov/\n+.tox/\n .coverage\n-*.patch\n-_build\n-coverage.xml\n-htmlcov\n-*.orig\n-*.diff\n-*.kdev4\n-*.patch\n-*.sublime-project\n-*.sublime-workspace\n-.python-version\n-*.egg-info\n .coverage.*\n-src\n-site\n-.zanata-cache\n-*.exe\n .cache\n-*.eggs\n-node_modules\n+nosetests.xml\n+coverage.xml\n+*.cover\n+.hypothesis/\n+.pytest_cache/\n+\n+# Translations\n+*.mo\n+*.pot\n+\n+# Django stuff:\n *.log\n-*.jar\n-.bundle\n-.vendor\n-vendor\n-Goopfile.lock\n-Gemfile.lock","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-06-12T13:32:42Z","lastEditedAt":null,"updatedAt":"2018-06-12T13:32:42Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDczODc1OA==","url":"https://github.com/coala/coala-bears/pull/2531#discussion_r194738758","bodyText":"unused. see coala/coala#5507","diffHunk":"@@ -1,45 +1,472 @@\n-.DS_Store\n-.directory\n-.idea\n-.kdev4\n-__pycache__\n-*~\n-build\n-*.mo\n-dist\n+# moban hashes\n+.moban.hashes\n+\n+# Extra rules from https://github.com/github/gitignore/\n+# Python rules\n+# Byte-compiled / optimized / DLL files\n+__pycache__/\n+*.py[cod]\n+*$py.class\n+\n+# C extensions\n+*.so\n+\n+# Distribution / packaging\n+.Python\n+build/\n+develop-eggs/\n+dist/\n+downloads/\n+eggs/\n+.eggs/\n+lib/\n+lib64/\n+parts/\n+sdist/\n+var/\n+wheels/\n+*.egg-info/\n+.installed.cfg\n+*.egg\n MANIFEST\n-*.pyc\n+\n+# PyInstaller\n+#  Usually these files are written by a python script from a template\n+#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n+*.manifest\n+*.spec\n+\n+# Installer logs\n+pip-log.txt\n+pip-delete-this-directory.txt\n+\n+# Unit test / coverage reports\n+htmlcov/\n+.tox/\n .coverage\n-*.patch\n-_build\n-coverage.xml\n-htmlcov\n-*.orig\n-*.diff\n-*.kdev4\n-*.patch\n-*.sublime-project\n-*.sublime-workspace\n-.python-version\n-*.egg-info\n .coverage.*\n-src\n-site\n-.zanata-cache\n-*.exe\n .cache\n-*.eggs\n-node_modules\n+nosetests.xml\n+coverage.xml\n+*.cover\n+.hypothesis/\n+.pytest_cache/\n+\n+# Translations\n+*.mo\n+*.pot\n+\n+# Django stuff:\n *.log\n-*.jar\n-.bundle\n-.vendor\n-vendor\n-Goopfile.lock","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-06-12T13:33:21Z","lastEditedAt":null,"updatedAt":"2018-06-12T13:33:21Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDczODgyMw==","url":"https://github.com/coala/coala-bears/pull/2531#discussion_r194738823","bodyText":"unused see coala/coala#5507","diffHunk":"@@ -1,45 +1,472 @@\n-.DS_Store\n-.directory\n-.idea\n-.kdev4\n-__pycache__\n-*~\n-build\n-*.mo\n-dist\n+# moban hashes\n+.moban.hashes\n+\n+# Extra rules from https://github.com/github/gitignore/\n+# Python rules\n+# Byte-compiled / optimized / DLL files\n+__pycache__/\n+*.py[cod]\n+*$py.class\n+\n+# C extensions\n+*.so\n+\n+# Distribution / packaging\n+.Python\n+build/\n+develop-eggs/\n+dist/\n+downloads/\n+eggs/\n+.eggs/\n+lib/\n+lib64/\n+parts/\n+sdist/\n+var/\n+wheels/\n+*.egg-info/\n+.installed.cfg\n+*.egg\n MANIFEST\n-*.pyc\n+\n+# PyInstaller\n+#  Usually these files are written by a python script from a template\n+#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n+*.manifest\n+*.spec\n+\n+# Installer logs\n+pip-log.txt\n+pip-delete-this-directory.txt\n+\n+# Unit test / coverage reports\n+htmlcov/\n+.tox/\n .coverage\n-*.patch\n-_build\n-coverage.xml\n-htmlcov\n-*.orig\n-*.diff\n-*.kdev4\n-*.patch\n-*.sublime-project\n-*.sublime-workspace\n-.python-version\n-*.egg-info\n .coverage.*\n-src\n-site\n-.zanata-cache","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-06-12T13:33:32Z","lastEditedAt":null,"updatedAt":"2018-06-12T13:33:32Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDczODk0NA==","url":"https://github.com/coala/coala-bears/pull/2531#discussion_r194738944","bodyText":"these are below","diffHunk":"@@ -1,45 +1,472 @@\n-.DS_Store\n-.directory\n-.idea\n-.kdev4\n-__pycache__\n-*~\n-build\n-*.mo\n-dist\n+# moban hashes\n+.moban.hashes\n+\n+# Extra rules from https://github.com/github/gitignore/\n+# Python rules\n+# Byte-compiled / optimized / DLL files\n+__pycache__/\n+*.py[cod]\n+*$py.class\n+\n+# C extensions\n+*.so\n+\n+# Distribution / packaging\n+.Python\n+build/\n+develop-eggs/\n+dist/\n+downloads/\n+eggs/\n+.eggs/\n+lib/\n+lib64/\n+parts/\n+sdist/\n+var/\n+wheels/\n+*.egg-info/\n+.installed.cfg\n+*.egg\n MANIFEST\n-*.pyc\n+\n+# PyInstaller\n+#  Usually these files are written by a python script from a template\n+#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n+*.manifest\n+*.spec\n+\n+# Installer logs\n+pip-log.txt\n+pip-delete-this-directory.txt\n+\n+# Unit test / coverage reports\n+htmlcov/\n+.tox/\n .coverage\n-*.patch\n-_build\n-coverage.xml\n-htmlcov\n-*.orig\n-*.diff\n-*.kdev4\n-*.patch\n-*.sublime-project","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-06-12T13:33:54Z","lastEditedAt":null,"updatedAt":"2018-06-12T13:33:54Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTkyNTY3NA==","url":"https://github.com/coala/coala-bears/pull/2531#discussion_r195925674","bodyText":"That is in R\nhttps://github.com/github/gitignore/blob/master/R.gitignore\nBut .Rprofile is not","diffHunk":"@@ -1,45 +1,472 @@\n-.DS_Store\n-.directory\n-.idea\n-.kdev4\n-__pycache__\n-*~\n-build\n-*.mo\n-dist\n+# moban hashes\n+.moban.hashes\n+\n+# Extra rules from https://github.com/github/gitignore/\n+# Python rules\n+# Byte-compiled / optimized / DLL files\n+__pycache__/\n+*.py[cod]\n+*$py.class\n+\n+# C extensions\n+*.so\n+\n+# Distribution / packaging\n+.Python\n+build/\n+develop-eggs/\n+dist/\n+downloads/\n+eggs/\n+.eggs/\n+lib/\n+lib64/\n+parts/\n+sdist/\n+var/\n+wheels/\n+*.egg-info/\n+.installed.cfg\n+*.egg\n MANIFEST\n-*.pyc\n+\n+# PyInstaller\n+#  Usually these files are written by a python script from a template\n+#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n+*.manifest\n+*.spec\n+\n+# Installer logs\n+pip-log.txt\n+pip-delete-this-directory.txt\n+\n+# Unit test / coverage reports\n+htmlcov/\n+.tox/\n .coverage\n-*.patch\n-_build\n-coverage.xml\n-htmlcov\n-*.orig\n-*.diff\n-*.kdev4\n-*.patch\n-*.sublime-project\n-*.sublime-workspace\n-.python-version\n-*.egg-info\n .coverage.*\n-src\n-site\n-.zanata-cache\n-*.exe\n .cache\n-*.eggs\n-node_modules\n+nosetests.xml\n+coverage.xml\n+*.cover\n+.hypothesis/\n+.pytest_cache/\n+\n+# Translations\n+*.mo\n+*.pot\n+\n+# Django stuff:\n *.log\n-*.jar\n-.bundle\n-.vendor\n-vendor\n-Goopfile.lock\n-Gemfile.lock\n-.Rhistory","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-06-17T11:04:56Z","lastEditedAt":null,"updatedAt":"2018-06-17T11:04:56Z"},{"id":"MDEyOklzc3VlQ29tbWVudDM5NjAxMzY3Nw==","url":"https://github.com/coala/coala-bears/pull/2531#issuecomment-396013677","bodyText":"c.f. coala/coala#5507 which is the simpler case, as it doesnt have many dependencies.","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-06-10T02:03:44Z","lastEditedAt":null,"updatedAt":"2018-06-10T02:03:44Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwMjMyMDY2Nw==","url":"https://github.com/coala/coala-bears/pull/2531#issuecomment-402320667","bodyText":"This depends on https://gitlab.com/coala/mobans/merge_requests/51","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-07-03T23:33:45Z","lastEditedAt":null,"updatedAt":"2018-07-03T23:33:45Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwNTMzMDIyNQ==","url":"https://github.com/coala/coala-bears/pull/2531#issuecomment-405330225","bodyText":"This keeps encountering #2609","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-07-16T18:04:33Z","lastEditedAt":null,"updatedAt":"2018-07-16T18:04:33Z"}]}}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1532840604000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/pull/2543","number":2543,"title":"VCSCommitMetadataBear: New meta bear for analyzing commits","body":"This adds a new meta bear that returns HiddenResult\nof commit analysis for other bears to use.\n\nFor short term contributors: we understand that getting your commits well\ndefined like we require is a hard task and takes some learning. If you\nlook to help without wanting to contribute long term there's no need\nfor you to learn this. Just drop us a message and we'll take care of brushing\nup your stuff for merge!\nChecklist\n\n I read the commit guidelines and I've followed\nthem.\n I ran coala over my code locally. (All commits have to pass\nindividually. It is not sufficient to have \"fixup commits\" on your PR,\nour bot will still report the issues for the previous commit.) You will\nlikely receive a lot of bot comments and build failures if coala does not\npass on every single commit!\n\nAfter you submit your pull request, DO NOT click the 'Update Branch' button.\nWhen asked for a rebase, consult coala.io/rebase\ninstead.\nPlease consider helping us by reviewing other peoples pull requests as well:\n\npick up any PR at https://coala.io/review\nreview it (check https://coala.io/reviewing for more info)\nif you are sure that it needs work, use corobo mark wip <URL> to get it out\nof the review queue.\n\nThe more you review, the more your score will grow at coala.io and we will\nreview your PRs faster!","comments":14,"createdAt":"2018-06-20T08:35:26Z","updatedAt":"2018-07-29T05:03:24Z","closedAt":"2018-07-29T05:03:24Z","state":"merged","user":{"login":"kriti21","avatarUrl":"https://avatars3.githubusercontent.com/u/19872082?v=4"},"owner":{"login":"kriti21","avatarUrl":"https://avatars3.githubusercontent.com/u/19872082?v=4"},"assignee":{"login":"kriti21","avatarUrl":"https://avatars3.githubusercontent.com/u/19872082?v=4"},"labels":[{"name":"area/documentation","color":"c5def5"},{"name":"area/lintbears","color":"fbca04"},{"name":"difficulty/newcomer","color":"65C8FF"},{"name":"size/M","color":"CFB80A"},{"name":"type/spelling","color":"50b5f4"},{"name":"type/test","color":"207de5"}],"pullRequest":{"htmlUrl":"https://github.com/coala/coala-bears/pull/2543","comments":[{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5Njc1NTM3NQ==","url":"https://github.com/coala/coala-bears/pull/2543#discussion_r196755375","bodyText":"You can assign the commit_info directly to the instance variable named self.commit_info as well.\nThe history of self.contents itself comes from the original usage of HiddenResult, keep it there for compatibility.","diffHunk":"@@ -0,0 +1,81 @@\n+import abc\n+\n+from coalib.bears.GlobalBear import GlobalBear\n+from coalib.results.HiddenResult import HiddenResult\n+from coalib.results.Result import Result\n+from coalib.misc.Shell import run_shell_command\n+\n+\n+class CommitResult(HiddenResult):\n+    def __init__(self, origin, commit_info, message):\n+        Result.__init__(self, origin, commit_info)\n+        self.contents = [commit_info]","author":{"login":"refeed","avatarUrl":"https://avatars1.githubusercontent.com/u/20320125?v=4","name":"Rafid Aslam"},"reactions":[],"createdAt":"2018-06-20T12:27:09Z","lastEditedAt":null,"updatedAt":"2018-06-20T12:27:09Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5Njc2MDA5OA==","url":"https://github.com/coala/coala-bears/pull/2543#discussion_r196760098","bodyText":"Again, remove the _, use parent_commits = run_shell_command(get_parent_commits)[0]instead._` isn't used anywhere here, better to ignore it instead of saving it.","diffHunk":"@@ -0,0 +1,81 @@\n+import abc\n+\n+from coalib.bears.GlobalBear import GlobalBear\n+from coalib.results.HiddenResult import HiddenResult\n+from coalib.results.Result import Result\n+from coalib.misc.Shell import run_shell_command\n+\n+\n+class CommitResult(HiddenResult):\n+    def __init__(self, origin, commit_info, message):\n+        Result.__init__(self, origin, commit_info)\n+        self.contents = [commit_info]\n+        self.message = message\n+\n+\n+class VCSCommitBear(GlobalBear):\n+    __metaclass__ = abc.ABCMeta\n+    LANGUAGES = {'Git'}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+\n+    @abc.abstractmethod\n+    def get_head_commit(self):\n+        \"\"\"\n+        Return the commit message from the head commit\n+        \"\"\"\n+\n+    def analyze_git_commit(self, stdout):\n+        commit_info = dict()\n+        commit_info['raw_commit_message'] = stdout\n+\n+        commit_sha = run_shell_command('git rev-parse HEAD')[0].strip('\\n')\n+\n+        commit_type = []\n+\n+        stdout = stdout.strip('\\n')\n+\n+        if 'ci skip' in stdout or 'skip ci' in stdout:\n+            commit_type.append('ci_skip_commit')\n+\n+        get_parent_commits = 'git log --pretty=%P -n 1 ' + commit_sha\n+        parent_commits, _ = run_shell_command(get_parent_commits)","author":{"login":"refeed","avatarUrl":"https://avatars1.githubusercontent.com/u/20320125?v=4","name":"Rafid Aslam"},"reactions":[],"createdAt":"2018-06-20T12:39:22Z","lastEditedAt":"2018-06-21T14:20:50Z","updatedAt":"2018-06-21T14:20:50Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5Njc2MDg2MA==","url":"https://github.com/coala/coala-bears/pull/2543#discussion_r196760860","bodyText":"Remove _","diffHunk":"@@ -0,0 +1,81 @@\n+import abc\n+\n+from coalib.bears.GlobalBear import GlobalBear\n+from coalib.results.HiddenResult import HiddenResult\n+from coalib.results.Result import Result\n+from coalib.misc.Shell import run_shell_command\n+\n+\n+class CommitResult(HiddenResult):\n+    def __init__(self, origin, commit_info, message):\n+        Result.__init__(self, origin, commit_info)\n+        self.contents = [commit_info]\n+        self.message = message\n+\n+\n+class VCSCommitBear(GlobalBear):\n+    __metaclass__ = abc.ABCMeta\n+    LANGUAGES = {'Git'}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+\n+    @abc.abstractmethod\n+    def get_head_commit(self):\n+        \"\"\"\n+        Return the commit message from the head commit\n+        \"\"\"\n+\n+    def analyze_git_commit(self, stdout):\n+        commit_info = dict()\n+        commit_info['raw_commit_message'] = stdout\n+\n+        commit_sha = run_shell_command('git rev-parse HEAD')[0].strip('\\n')\n+\n+        commit_type = []\n+\n+        stdout = stdout.strip('\\n')\n+\n+        if 'ci skip' in stdout or 'skip ci' in stdout:\n+            commit_type.append('ci_skip_commit')\n+\n+        get_parent_commits = 'git log --pretty=%P -n 1 ' + commit_sha\n+        parent_commits, _ = run_shell_command(get_parent_commits)\n+        parent_commits_list = parent_commits.split('\\n')\n+\n+        if len(parent_commits_list) > 2:\n+            commit_type.append('merge_commit')\n+\n+        get_all_committed_files = ('git show --pretty=\"\" --name-status ' +\n+                                   commit_sha)\n+        all_committed_files, _ = run_shell_command(get_all_committed_files)\n+        all_committed_files = all_committed_files.split('\\n')\n+\n+        modified_files_list = []\n+        added_files_list = []\n+        deleted_files_list = []\n+\n+        for file in all_committed_files:\n+            pos = file.find('\\t')\n+            change = file[:pos]\n+            if change == 'M':\n+                modified_files_list.append(file[pos+1:])\n+            elif change == 'A':\n+                added_files_list.append(file[pos+1:])\n+            elif change == 'D':\n+                deleted_files_list.append(file[pos+1:])\n+\n+        commit_info['commit_sha'] = commit_sha\n+        commit_info['commit_type'] = commit_type\n+        commit_info['modified_files'] = modified_files_list\n+        commit_info['added_files'] = added_files_list\n+        commit_info['deleted_files'] = deleted_files_list\n+\n+        return str(commit_info)\n+\n+    def run(self):\n+        stdout, _ = self.get_head_commit()","author":{"login":"refeed","avatarUrl":"https://avatars1.githubusercontent.com/u/20320125?v=4","name":"Rafid Aslam"},"reactions":[],"createdAt":"2018-06-20T12:41:47Z","lastEditedAt":"2018-06-21T14:20:43Z","updatedAt":"2018-06-21T14:20:43Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5Njc2ODk3MA==","url":"https://github.com/coala/coala-bears/pull/2543#discussion_r196768970","bodyText":"You can import run_git_command() & git_commit() from GitCommitBearTest module and use it here, they're static methods. Code duplication isn't a good idea","diffHunk":"@@ -0,0 +1,174 @@\n+import os\n+import platform\n+import shutil\n+import stat\n+import unittest\n+import unittest.mock\n+from queue import Queue\n+from tempfile import mkdtemp\n+\n+from coalib.testing.BearTestHelper import generate_skip_decorator\n+from bears.vcs.VCSCommitBear import VCSCommitBear, CommitResult\n+from bears.vcs.git.GitCommitBear import GitCommitBear\n+from coalib.settings.Section import Section\n+from coalib.misc.Shell import run_shell_command\n+\n+\n+class FakeCommitBear(VCSCommitBear):\n+    @classmethod\n+    def check_prerequisites(cls):\n+        return True\n+\n+    def get_head_commit(self):\n+        return ('This is the fake head commit', '')\n+\n+\n+@generate_skip_decorator(VCSCommitBear)\n+class VCSCommitBearTest(unittest.TestCase):\n+\n+    def run_uut(self, *args, **kwargs):\n+        \"\"\"\n+        Runs the unit-under-test (via `self.uut.run()`) and collects the\n+        messages of the yielded results as a list.\n+\n+        :param args:   Positional arguments to forward to the run function.\n+        :param kwargs: Keyword arguments to forward to the run function.\n+        :return:       A list of the message strings.\n+        \"\"\"\n+        return list(result.message for result in self.uut.run(*args, **kwargs))\n+\n+    def assert_no_msgs(self):\n+        \"\"\"\n+        Assert that there are no messages in the message queue of the bear, and\n+        show the messages in the failure message if it is not empty.\n+        \"\"\"\n+        self.assertTrue(\n+            self.msg_queue.empty(),\n+            'Expected no messages in bear message queue, but got: ' +\n+            str(list(str(i) for i in self.msg_queue.queue)))\n+\n+    def setUp(self):\n+        self.msg_queue = Queue()\n+        self.section = Section('')\n+        self.uut = FakeCommitBear(None, self.section, self.msg_queue)\n+\n+    def test_check_prerequisites(self):\n+        _shutil_which = shutil.which\n+        try:\n+            shutil.which = lambda *args, **kwargs: None\n+            self.assertEqual(GitCommitBear.check_prerequisites(),\n+                             'git is not installed.')\n+\n+            shutil.which = lambda *args, **kwargs: 'path/to/git'\n+            self.assertTrue(GitCommitBear.check_prerequisites())\n+        finally:\n+            shutil.which = _shutil_which\n+\n+    def test_head_commit(self):\n+        self.assertEqual(self.run_uut(), ['HEAD commit information'])\n+\n+\n+@generate_skip_decorator(GitCommitBear)\n+class AnalyzeGitCommitTest(unittest.TestCase):\n+\n+    @staticmethod\n+    def run_git_command(*args, stdin=None):","author":{"login":"refeed","avatarUrl":"https://avatars1.githubusercontent.com/u/20320125?v=4","name":"Rafid Aslam"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNTUxNTA4NA==","createdAt":"2018-06-23T18:47:34Z","content":"THUMBS_UP","user":{"login":"virresh","name":"Viresh Gupta"}}],"createdAt":"2018-06-20T13:08:04Z","lastEditedAt":null,"updatedAt":"2018-06-20T13:08:04Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5Njc2OTg2NA==","url":"https://github.com/coala/coala-bears/pull/2543#discussion_r196769864","bodyText":">=","diffHunk":"@@ -0,0 +1,81 @@\n+import abc\n+\n+from coalib.bears.GlobalBear import GlobalBear\n+from coalib.results.HiddenResult import HiddenResult\n+from coalib.results.Result import Result\n+from coalib.misc.Shell import run_shell_command\n+\n+\n+class CommitResult(HiddenResult):\n+    def __init__(self, origin, commit_info, message):\n+        Result.__init__(self, origin, commit_info)\n+        self.contents = [commit_info]\n+        self.message = message\n+\n+\n+class VCSCommitBear(GlobalBear):\n+    __metaclass__ = abc.ABCMeta\n+    LANGUAGES = {'Git'}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+\n+    @abc.abstractmethod\n+    def get_head_commit(self):\n+        \"\"\"\n+        Return the commit message from the head commit\n+        \"\"\"\n+\n+    def analyze_git_commit(self, stdout):\n+        commit_info = dict()\n+        commit_info['raw_commit_message'] = stdout\n+\n+        commit_sha = run_shell_command('git rev-parse HEAD')[0].strip('\\n')\n+\n+        commit_type = []\n+\n+        stdout = stdout.strip('\\n')\n+\n+        if 'ci skip' in stdout or 'skip ci' in stdout:\n+            commit_type.append('ci_skip_commit')\n+\n+        get_parent_commits = 'git log --pretty=%P -n 1 ' + commit_sha\n+        parent_commits, _ = run_shell_command(get_parent_commits)\n+        parent_commits_list = parent_commits.split('\\n')\n+\n+        if len(parent_commits_list) > 2:","author":{"login":"refeed","avatarUrl":"https://avatars1.githubusercontent.com/u/20320125?v=4","name":"Rafid Aslam"},"reactions":[],"createdAt":"2018-06-20T13:10:36Z","lastEditedAt":null,"updatedAt":"2018-06-20T13:10:36Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5Njc3MzczMg==","url":"https://github.com/coala/coala-bears/pull/2543#discussion_r196773732","bodyText":"If there's a shortlog that contains those strings, it also matches, suppose there will be a commit with a shortlog 'Update ci skip string'.\nUse regex so we can really sure we matched it accurately.","diffHunk":"@@ -0,0 +1,81 @@\n+import abc\n+\n+from coalib.bears.GlobalBear import GlobalBear\n+from coalib.results.HiddenResult import HiddenResult\n+from coalib.results.Result import Result\n+from coalib.misc.Shell import run_shell_command\n+\n+\n+class CommitResult(HiddenResult):\n+    def __init__(self, origin, commit_info, message):\n+        Result.__init__(self, origin, commit_info)\n+        self.contents = [commit_info]\n+        self.message = message\n+\n+\n+class VCSCommitBear(GlobalBear):\n+    __metaclass__ = abc.ABCMeta\n+    LANGUAGES = {'Git'}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+\n+    @abc.abstractmethod\n+    def get_head_commit(self):\n+        \"\"\"\n+        Return the commit message from the head commit\n+        \"\"\"\n+\n+    def analyze_git_commit(self, stdout):\n+        commit_info = dict()\n+        commit_info['raw_commit_message'] = stdout\n+\n+        commit_sha = run_shell_command('git rev-parse HEAD')[0].strip('\\n')\n+\n+        commit_type = []\n+\n+        stdout = stdout.strip('\\n')\n+\n+        if 'ci skip' in stdout or 'skip ci' in stdout:","author":{"login":"refeed","avatarUrl":"https://avatars1.githubusercontent.com/u/20320125?v=4","name":"Rafid Aslam"},"reactions":[],"createdAt":"2018-06-20T13:22:01Z","lastEditedAt":null,"updatedAt":"2018-06-20T13:22:01Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NjgwMTQxOQ==","url":"https://github.com/coala/coala-bears/pull/2543#discussion_r196801419","bodyText":"I also think the stdout is more to a head_commit_message, use that name instead..","diffHunk":"@@ -0,0 +1,81 @@\n+import abc\n+\n+from coalib.bears.GlobalBear import GlobalBear\n+from coalib.results.HiddenResult import HiddenResult\n+from coalib.results.Result import Result\n+from coalib.misc.Shell import run_shell_command\n+\n+\n+class CommitResult(HiddenResult):\n+    def __init__(self, origin, commit_info, message):\n+        Result.__init__(self, origin, commit_info)\n+        self.contents = [commit_info]\n+        self.message = message\n+\n+\n+class VCSCommitBear(GlobalBear):\n+    __metaclass__ = abc.ABCMeta\n+    LANGUAGES = {'Git'}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+\n+    @abc.abstractmethod\n+    def get_head_commit(self):\n+        \"\"\"\n+        Return the commit message from the head commit\n+        \"\"\"\n+\n+    def analyze_git_commit(self, stdout):\n+        commit_info = dict()\n+        commit_info['raw_commit_message'] = stdout\n+\n+        commit_sha = run_shell_command('git rev-parse HEAD')[0].strip('\\n')\n+\n+        commit_type = []\n+\n+        stdout = stdout.strip('\\n')\n+\n+        if 'ci skip' in stdout or 'skip ci' in stdout:\n+            commit_type.append('ci_skip_commit')\n+\n+        get_parent_commits = 'git log --pretty=%P -n 1 ' + commit_sha\n+        parent_commits, _ = run_shell_command(get_parent_commits)\n+        parent_commits_list = parent_commits.split('\\n')\n+\n+        if len(parent_commits_list) > 2:\n+            commit_type.append('merge_commit')\n+\n+        get_all_committed_files = ('git show --pretty=\"\" --name-status ' +\n+                                   commit_sha)\n+        all_committed_files, _ = run_shell_command(get_all_committed_files)\n+        all_committed_files = all_committed_files.split('\\n')\n+\n+        modified_files_list = []\n+        added_files_list = []\n+        deleted_files_list = []\n+\n+        for file in all_committed_files:\n+            pos = file.find('\\t')\n+            change = file[:pos]\n+            if change == 'M':\n+                modified_files_list.append(file[pos+1:])\n+            elif change == 'A':\n+                added_files_list.append(file[pos+1:])\n+            elif change == 'D':\n+                deleted_files_list.append(file[pos+1:])\n+\n+        commit_info['commit_sha'] = commit_sha\n+        commit_info['commit_type'] = commit_type\n+        commit_info['modified_files'] = modified_files_list\n+        commit_info['added_files'] = added_files_list\n+        commit_info['deleted_files'] = deleted_files_list\n+\n+        return str(commit_info)\n+\n+    def run(self):\n+        stdout, _ = self.get_head_commit()","author":{"login":"refeed","avatarUrl":"https://avatars1.githubusercontent.com/u/20320125?v=4","name":"Rafid Aslam"},"reactions":[],"createdAt":"2018-06-20T14:29:40Z","lastEditedAt":null,"updatedAt":"2018-06-20T14:29:40Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NjgwNDE4Mw==","url":"https://github.com/coala/coala-bears/pull/2543#discussion_r196804183","bodyText":"Add some type annotation and @enforce_signature see URLHeadResult","diffHunk":"@@ -0,0 +1,81 @@\n+import abc\n+\n+from coalib.bears.GlobalBear import GlobalBear\n+from coalib.results.HiddenResult import HiddenResult\n+from coalib.results.Result import Result\n+from coalib.misc.Shell import run_shell_command\n+\n+\n+class CommitResult(HiddenResult):\n+    def __init__(self, origin, commit_info, message):","author":{"login":"refeed","avatarUrl":"https://avatars1.githubusercontent.com/u/20320125?v=4","name":"Rafid Aslam"},"reactions":[],"createdAt":"2018-06-20T14:33:44Z","lastEditedAt":null,"updatedAt":"2018-06-20T14:33:44Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NjgxMzAxMA==","url":"https://github.com/coala/coala-bears/pull/2543#discussion_r196813010","bodyText":"Remove _","diffHunk":"@@ -0,0 +1,81 @@\n+import abc\n+\n+from coalib.bears.GlobalBear import GlobalBear\n+from coalib.results.HiddenResult import HiddenResult\n+from coalib.results.Result import Result\n+from coalib.misc.Shell import run_shell_command\n+\n+\n+class CommitResult(HiddenResult):\n+    def __init__(self, origin, commit_info, message):\n+        Result.__init__(self, origin, commit_info)\n+        self.contents = [commit_info]\n+        self.message = message\n+\n+\n+class VCSCommitBear(GlobalBear):\n+    __metaclass__ = abc.ABCMeta\n+    LANGUAGES = {'Git'}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+\n+    @abc.abstractmethod\n+    def get_head_commit(self):\n+        \"\"\"\n+        Return the commit message from the head commit\n+        \"\"\"\n+\n+    def analyze_git_commit(self, stdout):\n+        commit_info = dict()\n+        commit_info['raw_commit_message'] = stdout\n+\n+        commit_sha = run_shell_command('git rev-parse HEAD')[0].strip('\\n')\n+\n+        commit_type = []\n+\n+        stdout = stdout.strip('\\n')\n+\n+        if 'ci skip' in stdout or 'skip ci' in stdout:\n+            commit_type.append('ci_skip_commit')\n+\n+        get_parent_commits = 'git log --pretty=%P -n 1 ' + commit_sha\n+        parent_commits, _ = run_shell_command(get_parent_commits)\n+        parent_commits_list = parent_commits.split('\\n')\n+\n+        if len(parent_commits_list) > 2:\n+            commit_type.append('merge_commit')\n+\n+        get_all_committed_files = ('git show --pretty=\"\" --name-status ' +\n+                                   commit_sha)\n+        all_committed_files, _ = run_shell_command(get_all_committed_files)","author":{"login":"refeed","avatarUrl":"https://avatars1.githubusercontent.com/u/20320125?v=4","name":"Rafid Aslam"},"reactions":[],"createdAt":"2018-06-20T14:51:22Z","lastEditedAt":"2018-06-21T14:21:01Z","updatedAt":"2018-06-21T14:21:01Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NjgzNzQyNg==","url":"https://github.com/coala/coala-bears/pull/2543#discussion_r196837426","bodyText":"You need to add\n        try:\n            super(_CommitBear,self).run()\n        except NotImplementedError as e:\n            pass\n\nwithin the run method of _CommitBear so that it can call VCSCommitBear's run method as well\nEdit: Apparently since this is not a diamond inheritance issue, you will rather need something like:\n    def run(self, *args, **kwargs):\n        for x in _CommitBear.run(self, *args, **kwargs):\n            yield x\n        for y in VCSCommitBear.run(self, *args, **kwargs):\n            yield y\n\nin a run() method defined in GitCommitBear","diffHunk":"@@ -2,11 +2,12 @@\n import shutil\n \n from bears.vcs.CommitBear import _CommitBear\n+from bears.vcs.VCSCommitBear import VCSCommitBear\n from coala_utils.ContextManagers import change_directory\n from coalib.misc.Shell import run_shell_command\n \n \n-class GitCommitBear(_CommitBear):\n+class GitCommitBear(_CommitBear, VCSCommitBear):","author":{"login":"virresh","avatarUrl":"https://avatars0.githubusercontent.com/u/10978108?v=4","name":"Viresh Gupta"},"reactions":[],"createdAt":"2018-06-20T15:55:20Z","lastEditedAt":"2018-06-20T16:21:38Z","updatedAt":"2018-06-20T16:21:38Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NzE0NDA1Nw==","url":"https://github.com/coala/coala-bears/pull/2543#discussion_r197144057","bodyText":"get_head_commit returns two values, that's why _ is needed here.","diffHunk":"@@ -0,0 +1,81 @@\n+import abc\n+\n+from coalib.bears.GlobalBear import GlobalBear\n+from coalib.results.HiddenResult import HiddenResult\n+from coalib.results.Result import Result\n+from coalib.misc.Shell import run_shell_command\n+\n+\n+class CommitResult(HiddenResult):\n+    def __init__(self, origin, commit_info, message):\n+        Result.__init__(self, origin, commit_info)\n+        self.contents = [commit_info]\n+        self.message = message\n+\n+\n+class VCSCommitBear(GlobalBear):\n+    __metaclass__ = abc.ABCMeta\n+    LANGUAGES = {'Git'}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+\n+    @abc.abstractmethod\n+    def get_head_commit(self):\n+        \"\"\"\n+        Return the commit message from the head commit\n+        \"\"\"\n+\n+    def analyze_git_commit(self, stdout):\n+        commit_info = dict()\n+        commit_info['raw_commit_message'] = stdout\n+\n+        commit_sha = run_shell_command('git rev-parse HEAD')[0].strip('\\n')\n+\n+        commit_type = []\n+\n+        stdout = stdout.strip('\\n')\n+\n+        if 'ci skip' in stdout or 'skip ci' in stdout:\n+            commit_type.append('ci_skip_commit')\n+\n+        get_parent_commits = 'git log --pretty=%P -n 1 ' + commit_sha\n+        parent_commits, _ = run_shell_command(get_parent_commits)\n+        parent_commits_list = parent_commits.split('\\n')\n+\n+        if len(parent_commits_list) > 2:\n+            commit_type.append('merge_commit')\n+\n+        get_all_committed_files = ('git show --pretty=\"\" --name-status ' +\n+                                   commit_sha)\n+        all_committed_files, _ = run_shell_command(get_all_committed_files)\n+        all_committed_files = all_committed_files.split('\\n')\n+\n+        modified_files_list = []\n+        added_files_list = []\n+        deleted_files_list = []\n+\n+        for file in all_committed_files:\n+            pos = file.find('\\t')\n+            change = file[:pos]\n+            if change == 'M':\n+                modified_files_list.append(file[pos+1:])\n+            elif change == 'A':\n+                added_files_list.append(file[pos+1:])\n+            elif change == 'D':\n+                deleted_files_list.append(file[pos+1:])\n+\n+        commit_info['commit_sha'] = commit_sha\n+        commit_info['commit_type'] = commit_type\n+        commit_info['modified_files'] = modified_files_list\n+        commit_info['added_files'] = added_files_list\n+        commit_info['deleted_files'] = deleted_files_list\n+\n+        return str(commit_info)\n+\n+    def run(self):\n+        stdout, _ = self.get_head_commit()","author":{"login":"kriti21","avatarUrl":"https://avatars3.githubusercontent.com/u/19872082?v=4","name":"Kriti Rohilla"},"reactions":[],"createdAt":"2018-06-21T14:01:23Z","lastEditedAt":null,"updatedAt":"2018-06-21T14:01:23Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NzE1MTMxNw==","url":"https://github.com/coala/coala-bears/pull/2543#discussion_r197151317","bodyText":"Ah yup, actually I know about that. I just wasn't agree with  the \"_\" style. After a while searching in the internet about this style, it turns out this style is fine\nI never used this style tbh, since I usually use _ to access gettext in my another community's codebase. But in this codebase, I think it's fine to use this style..","diffHunk":"@@ -0,0 +1,81 @@\n+import abc\n+\n+from coalib.bears.GlobalBear import GlobalBear\n+from coalib.results.HiddenResult import HiddenResult\n+from coalib.results.Result import Result\n+from coalib.misc.Shell import run_shell_command\n+\n+\n+class CommitResult(HiddenResult):\n+    def __init__(self, origin, commit_info, message):\n+        Result.__init__(self, origin, commit_info)\n+        self.contents = [commit_info]\n+        self.message = message\n+\n+\n+class VCSCommitBear(GlobalBear):\n+    __metaclass__ = abc.ABCMeta\n+    LANGUAGES = {'Git'}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+\n+    @abc.abstractmethod\n+    def get_head_commit(self):\n+        \"\"\"\n+        Return the commit message from the head commit\n+        \"\"\"\n+\n+    def analyze_git_commit(self, stdout):\n+        commit_info = dict()\n+        commit_info['raw_commit_message'] = stdout\n+\n+        commit_sha = run_shell_command('git rev-parse HEAD')[0].strip('\\n')\n+\n+        commit_type = []\n+\n+        stdout = stdout.strip('\\n')\n+\n+        if 'ci skip' in stdout or 'skip ci' in stdout:\n+            commit_type.append('ci_skip_commit')\n+\n+        get_parent_commits = 'git log --pretty=%P -n 1 ' + commit_sha\n+        parent_commits, _ = run_shell_command(get_parent_commits)\n+        parent_commits_list = parent_commits.split('\\n')\n+\n+        if len(parent_commits_list) > 2:\n+            commit_type.append('merge_commit')\n+\n+        get_all_committed_files = ('git show --pretty=\"\" --name-status ' +\n+                                   commit_sha)\n+        all_committed_files, _ = run_shell_command(get_all_committed_files)\n+        all_committed_files = all_committed_files.split('\\n')\n+\n+        modified_files_list = []\n+        added_files_list = []\n+        deleted_files_list = []\n+\n+        for file in all_committed_files:\n+            pos = file.find('\\t')\n+            change = file[:pos]\n+            if change == 'M':\n+                modified_files_list.append(file[pos+1:])\n+            elif change == 'A':\n+                added_files_list.append(file[pos+1:])\n+            elif change == 'D':\n+                deleted_files_list.append(file[pos+1:])\n+\n+        commit_info['commit_sha'] = commit_sha\n+        commit_info['commit_type'] = commit_type\n+        commit_info['modified_files'] = modified_files_list\n+        commit_info['added_files'] = added_files_list\n+        commit_info['deleted_files'] = deleted_files_list\n+\n+        return str(commit_info)\n+\n+    def run(self):\n+        stdout, _ = self.get_head_commit()","author":{"login":"refeed","avatarUrl":"https://avatars1.githubusercontent.com/u/20320125?v=4","name":"Rafid Aslam"},"reactions":[],"createdAt":"2018-06-21T14:20:33Z","lastEditedAt":null,"updatedAt":"2018-06-21T14:20:33Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NzM4NzYzNw==","url":"https://github.com/coala/coala-bears/pull/2543#discussion_r197387637","bodyText":"Remove _ and __ as the return value isn't used anywhere, and for consistency","diffHunk":"@@ -0,0 +1,179 @@\n+import os\n+import platform\n+import shutil\n+import stat\n+import unittest\n+import unittest.mock\n+from queue import Queue\n+from tempfile import mkdtemp\n+\n+from coalib.testing.BearTestHelper import generate_skip_decorator\n+from bears.vcs.VCSCommitBear import VCSCommitBear, CommitResult\n+from bears.vcs.git.GitCommitBear import GitCommitBear\n+from coalib.settings.Section import Section\n+from coalib.misc.Shell import run_shell_command\n+\n+\n+class FakeCommitBear(VCSCommitBear):\n+    @classmethod\n+    def check_prerequisites(cls):\n+        return True\n+\n+    def get_head_commit(self):\n+        return ('This is the fake head commit', '')\n+\n+\n+@generate_skip_decorator(VCSCommitBear)\n+class VCSCommitBearTest(unittest.TestCase):\n+\n+    def run_uut(self, *args, **kwargs):\n+        \"\"\"\n+        Runs the unit-under-test (via `self.uut.run()`) and collects the\n+        messages of the yielded results as a list.\n+\n+        :param args:   Positional arguments to forward to the run function.\n+        :param kwargs: Keyword arguments to forward to the run function.\n+        :return:       A list of the message strings.\n+        \"\"\"\n+        return list(result.message for result in self.uut.run(*args, **kwargs))\n+\n+    def assert_no_msgs(self):\n+        \"\"\"\n+        Assert that there are no messages in the message queue of the bear, and\n+        show the messages in the failure message if it is not empty.\n+        \"\"\"\n+        self.assertTrue(\n+            self.msg_queue.empty(),\n+            'Expected no messages in bear message queue, but got: ' +\n+            str(list(str(i) for i in self.msg_queue.queue)))\n+\n+    def setUp(self):\n+        self.msg_queue = Queue()\n+        self.section = Section('')\n+        self.uut = FakeCommitBear(None, self.section, self.msg_queue)\n+\n+    def test_check_prerequisites(self):\n+        _shutil_which = shutil.which\n+        try:\n+            shutil.which = lambda *args, **kwargs: None\n+            self.assertEqual(GitCommitBear.check_prerequisites(),\n+                             'git is not installed.')\n+\n+            shutil.which = lambda *args, **kwargs: 'path/to/git'\n+            self.assertTrue(GitCommitBear.check_prerequisites())\n+        finally:\n+            shutil.which = _shutil_which\n+\n+    def test_head_commit(self):\n+        self.assertEqual(self.run_uut(), ['HEAD commit information'])\n+\n+\n+@generate_skip_decorator(GitCommitBear)\n+class AnalyzeGitCommitTest(unittest.TestCase):\n+\n+    @staticmethod\n+    def run_git_command(*args, stdin=None):\n+        run_shell_command(' '.join(('git',) + args), stdin)\n+\n+    @staticmethod\n+    def git_commit(msg):\n+        # Use stdin mode from git, since -m on Windows cmd does not support\n+        # multiline messages.\n+        AnalyzeGitCommitTest.run_git_command('commit',\n+                                             '--allow-empty',\n+                                             '--allow-empty-message',\n+                                             '--file=-',\n+                                             stdin=msg)\n+\n+    def run_uut(self, *args, **kwargs):\n+        \"\"\"\n+        Runs the unit-under-test (via `self.uut.run()`) and collects the\n+        messages of the yielded results as a list.\n+\n+        :param args:   Positional arguments to forward to the run function.\n+        :param kwargs: Keyword arguments to forward to the run function.\n+        :return:       A list of the message strings.\n+        \"\"\"\n+        return list(result.message for result in self.uut.run(*args, **kwargs))\n+\n+    def assert_no_msgs(self):\n+        \"\"\"\n+        Assert that there are no messages in the message queue of the bear, and\n+        show the messages in the failure messgae if it is not empty.\n+        \"\"\"\n+        self.assertTrue(\n+            self.msg_queue.empty(),\n+            'Expected no messages in bear message queue, but got: ' +\n+            str(list(str(i) for i in self.msg_queue.queue)))\n+\n+    def setUp(self):\n+        self.msg_queue = Queue()\n+        self.section = Section('')\n+        self.uut = GitCommitBear(None, self.section, self.msg_queue)\n+\n+        self._old_cwd = os.getcwd()\n+        self.gitdir = mkdtemp()\n+        os.chdir(self.gitdir)\n+        self.run_git_command('init')\n+        self.run_git_command('config', 'user.email coala@coala.io')\n+        self.run_git_command('config', 'user.name coala')\n+\n+    @staticmethod\n+    def _windows_rmtree_remove_readonly(func, path, excinfo):\n+        os.chmod(path, stat.S_IWRITE)\n+        func(path)\n+\n+    def tearDown(self):\n+        os.chdir(self._old_cwd)\n+        if platform.system() == 'Windows':\n+            onerror = self._windows_rmtree_remove_readonly\n+        else:\n+            onerror = None\n+        shutil.rmtree(self.gitdir, onerror=onerror)\n+\n+    def test_analyze_git_commit(self):\n+        run_shell_command('echo \"abc\" >> testfile1.txt ')\n+        run_shell_command('git add testfile1.txt')\n+        run_shell_command('git commit -m \"Add testfile1\"')\n+        self.assertEqual(self.run_uut(), [])\n+\n+        run_shell_command('echo \"abcdabcd\" >> testfile2.txt ')\n+        run_shell_command('git add testfile2.txt')\n+        run_shell_command('git commit -m \"Add testfile2 [ci skip]\"')\n+        self.assertEqual(self.run_uut(), [])\n+\n+        run_shell_command('echo \"abcdefabcdef\" >> testfile3.txt ')\n+        self.run_git_command('add', 'testfile3.txt')\n+        self.run_git_command('commit', '-m', '\"another commit [skip ci]\"')\n+        self.run_git_command('revert', 'HEAD', '--no-edit')\n+        self.assertEqual(self.run_uut(), [])\n+\n+        run_shell_command('git checkout -b new-feature master')\n+        _, __ = run_shell_command('echo \"some text\" >> testfile4.txt ')","author":{"login":"refeed","avatarUrl":"https://avatars1.githubusercontent.com/u/20320125?v=4","name":"Rafid Aslam"},"reactions":[],"createdAt":"2018-06-22T09:14:35Z","lastEditedAt":null,"updatedAt":"2018-06-22T09:14:35Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NzQ2NjM4OQ==","url":"https://github.com/coala/coala-bears/pull/2543#discussion_r197466389","bodyText":"Delete commit_info argument from this","diffHunk":"@@ -0,0 +1,107 @@\n+import abc\n+import re\n+\n+from coalib.bears.GlobalBear import GlobalBear\n+from coalib.results.HiddenResult import HiddenResult\n+from coalib.results.Result import Result\n+from coalib.misc.Shell import run_shell_command\n+from collections import namedtuple\n+from coala_utils.decorators import (enforce_signature, generate_ordering,\n+                                    generate_repr)\n+\n+\n+@generate_repr(('id', hex),\n+               'origin',\n+               'commit_info',\n+               'message')\n+@generate_ordering('commit_info',\n+                   'contents',\n+                   'severity',\n+                   'confidence',\n+                   'origin',\n+                   'message_base',\n+                   'message_arguments',\n+                   'aspect',\n+                   'additional_info',\n+                   'debug_msg')\n+class CommitResult(HiddenResult):\n+\n+    @enforce_signature\n+    def __init__(self, origin, commit_info):\n+        Result.__init__(self, origin, 'HEAD commit information', commit_info)","author":{"login":"refeed","avatarUrl":"https://avatars1.githubusercontent.com/u/20320125?v=4","name":"Rafid Aslam"},"reactions":[],"createdAt":"2018-06-22T14:38:15Z","lastEditedAt":null,"updatedAt":"2018-06-22T14:38:15Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NzQ2OTYzOA==","url":"https://github.com/coala/coala-bears/pull/2543#discussion_r197469638","bodyText":"The parentheses are rendundant","diffHunk":"@@ -0,0 +1,107 @@\n+import abc\n+import re\n+\n+from coalib.bears.GlobalBear import GlobalBear\n+from coalib.results.HiddenResult import HiddenResult\n+from coalib.results.Result import Result\n+from coalib.misc.Shell import run_shell_command\n+from collections import namedtuple\n+from coala_utils.decorators import (enforce_signature, generate_ordering,\n+                                    generate_repr)\n+\n+\n+@generate_repr(('id', hex),\n+               'origin',\n+               'commit_info',\n+               'message')\n+@generate_ordering('commit_info',\n+                   'contents',\n+                   'severity',\n+                   'confidence',\n+                   'origin',\n+                   'message_base',\n+                   'message_arguments',\n+                   'aspect',\n+                   'additional_info',\n+                   'debug_msg')\n+class CommitResult(HiddenResult):\n+\n+    @enforce_signature\n+    def __init__(self, origin, commit_info):\n+        Result.__init__(self, origin, 'HEAD commit information', commit_info)\n+\n+        self.contents = commit_info\n+\n+\n+class VCSCommitBear(GlobalBear):\n+    __metaclass__ = abc.ABCMeta\n+    LANGUAGES = {'Git'}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+\n+    @abc.abstractmethod\n+    def get_head_commit(self):\n+        \"\"\"\n+        Return the commit message from the head commit\n+        \"\"\"\n+\n+    def analyze_git_commit(self, head_commit):\n+        commit_info = namedtuple('Commit_Info',\n+                                 'raw_commit_message commit_sha commit_type '\n+                                 'modified_files added_files deleted_files')\n+\n+        raw_commit_message = head_commit\n+\n+        commit_sha = run_shell_command('git rev-parse HEAD')[0].strip('\\n')\n+\n+        commit_type = []\n+\n+        head_commit = head_commit.strip('\\n')\n+\n+        ciskip_regex = re.compile(r'ci skip|skip ci')\n+        match = re.search(ciskip_regex, head_commit)\n+        if match:\n+            commit_type.append('ci_skip_commit')\n+\n+        get_parent_commits = 'git log --pretty=%P -n 1 ' + commit_sha\n+        parent_commits = run_shell_command(get_parent_commits)[0]\n+        parent_commits_list = parent_commits.split('\\n')\n+\n+        if len(parent_commits_list) >= 2:\n+            commit_type.append('merge_commit')\n+\n+        get_all_committed_files = ('git show --pretty=\"\" --name-status ' +\n+                                   commit_sha)\n+        all_committed_files = run_shell_command(get_all_committed_files)[0]\n+        all_committed_files = all_committed_files.split('\\n')\n+\n+        modified_files_list = []\n+        added_files_list = []\n+        deleted_files_list = []\n+\n+        for file in all_committed_files:\n+            pos = file.find('\\t')\n+            change = file[:pos]\n+            if change == 'M':\n+                modified_files_list.append(file[pos+1:])\n+            elif change == 'A':\n+                added_files_list.append(file[pos+1:])\n+            elif change == 'D':\n+                deleted_files_list.append(file[pos+1:])\n+\n+        commit_info.raw_commit_message = raw_commit_message\n+        commit_info.commit_sha = commit_sha\n+        commit_info.commit_type = commit_type\n+        commit_info.modified_files = modified_files_list\n+        commit_info.added_files = added_files_list\n+        commit_info.deleted_files = deleted_files_list\n+\n+        return (commit_info)","author":{"login":"refeed","avatarUrl":"https://avatars1.githubusercontent.com/u/20320125?v=4","name":"Rafid Aslam"},"reactions":[],"createdAt":"2018-06-22T14:48:02Z","lastEditedAt":null,"updatedAt":"2018-06-22T14:48:02Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NzQ3MTMzMQ==","url":"https://github.com/coala/coala-bears/pull/2543#discussion_r197471331","bodyText":"Delete the whole Result line inside _init_. I dont understand its existence. you are already passing commit_info as contents right :)","diffHunk":"@@ -0,0 +1,107 @@\n+import abc\n+import re\n+\n+from coalib.bears.GlobalBear import GlobalBear\n+from coalib.results.HiddenResult import HiddenResult\n+from coalib.results.Result import Result\n+from coalib.misc.Shell import run_shell_command\n+from collections import namedtuple\n+from coala_utils.decorators import (enforce_signature, generate_ordering,\n+                                    generate_repr)\n+\n+\n+@generate_repr(('id', hex),\n+               'origin',\n+               'commit_info',\n+               'message')\n+@generate_ordering('commit_info',\n+                   'contents',\n+                   'severity',\n+                   'confidence',\n+                   'origin',\n+                   'message_base',\n+                   'message_arguments',\n+                   'aspect',\n+                   'additional_info',\n+                   'debug_msg')\n+class CommitResult(HiddenResult):\n+\n+    @enforce_signature\n+    def __init__(self, origin, commit_info):\n+        Result.__init__(self, origin, 'HEAD commit information', commit_info)","author":{"login":"damngamerz","avatarUrl":"https://avatars2.githubusercontent.com/u/13048113?v=4","name":"Saurav Singh"},"reactions":[],"createdAt":"2018-06-22T14:53:25Z","lastEditedAt":"2018-06-22T15:02:42Z","updatedAt":"2018-06-22T15:02:42Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NzQ3NDMwNg==","url":"https://github.com/coala/coala-bears/pull/2543#discussion_r197474306","bodyText":"Well, the reason of why Result.init is there is because HiddenResult is a subclass of Result.\nSo we need to run the Result.init\n\nThis makes sense. Well keep it then.","diffHunk":"@@ -0,0 +1,107 @@\n+import abc\n+import re\n+\n+from coalib.bears.GlobalBear import GlobalBear\n+from coalib.results.HiddenResult import HiddenResult\n+from coalib.results.Result import Result\n+from coalib.misc.Shell import run_shell_command\n+from collections import namedtuple\n+from coala_utils.decorators import (enforce_signature, generate_ordering,\n+                                    generate_repr)\n+\n+\n+@generate_repr(('id', hex),\n+               'origin',\n+               'commit_info',\n+               'message')\n+@generate_ordering('commit_info',\n+                   'contents',\n+                   'severity',\n+                   'confidence',\n+                   'origin',\n+                   'message_base',\n+                   'message_arguments',\n+                   'aspect',\n+                   'additional_info',\n+                   'debug_msg')\n+class CommitResult(HiddenResult):\n+\n+    @enforce_signature\n+    def __init__(self, origin, commit_info):\n+        Result.__init__(self, origin, 'HEAD commit information', commit_info)","author":{"login":"damngamerz","avatarUrl":"https://avatars2.githubusercontent.com/u/13048113?v=4","name":"Saurav Singh"},"reactions":[],"createdAt":"2018-06-22T15:02:27Z","lastEditedAt":null,"updatedAt":"2018-06-22T15:02:27Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NzQ3NTQwMA==","url":"https://github.com/coala/coala-bears/pull/2543#discussion_r197475400","bodyText":"and also, test the result by using get_results() (See URLHeadBear for the example) as we're not matching only the message here, we're also matching the contents of the CommitResult.contents","diffHunk":"@@ -0,0 +1,179 @@\n+import os\n+import platform\n+import shutil\n+import stat\n+import unittest\n+import unittest.mock\n+from queue import Queue\n+from tempfile import mkdtemp\n+\n+from coalib.testing.BearTestHelper import generate_skip_decorator\n+from bears.vcs.VCSCommitBear import VCSCommitBear, CommitResult\n+from bears.vcs.git.GitCommitBear import GitCommitBear\n+from coalib.settings.Section import Section\n+from coalib.misc.Shell import run_shell_command\n+\n+\n+class FakeCommitBear(VCSCommitBear):\n+    @classmethod\n+    def check_prerequisites(cls):\n+        return True\n+\n+    def get_head_commit(self):\n+        return ('This is the fake head commit', '')\n+\n+\n+@generate_skip_decorator(VCSCommitBear)\n+class VCSCommitBearTest(unittest.TestCase):\n+\n+    def run_uut(self, *args, **kwargs):\n+        \"\"\"\n+        Runs the unit-under-test (via `self.uut.run()`) and collects the\n+        messages of the yielded results as a list.\n+\n+        :param args:   Positional arguments to forward to the run function.\n+        :param kwargs: Keyword arguments to forward to the run function.\n+        :return:       A list of the message strings.\n+        \"\"\"\n+        return list(result.message for result in self.uut.run(*args, **kwargs))\n+\n+    def assert_no_msgs(self):\n+        \"\"\"\n+        Assert that there are no messages in the message queue of the bear, and\n+        show the messages in the failure message if it is not empty.\n+        \"\"\"\n+        self.assertTrue(\n+            self.msg_queue.empty(),\n+            'Expected no messages in bear message queue, but got: ' +\n+            str(list(str(i) for i in self.msg_queue.queue)))\n+\n+    def setUp(self):\n+        self.msg_queue = Queue()\n+        self.section = Section('')\n+        self.uut = FakeCommitBear(None, self.section, self.msg_queue)\n+\n+    def test_check_prerequisites(self):\n+        _shutil_which = shutil.which\n+        try:\n+            shutil.which = lambda *args, **kwargs: None\n+            self.assertEqual(GitCommitBear.check_prerequisites(),\n+                             'git is not installed.')\n+\n+            shutil.which = lambda *args, **kwargs: 'path/to/git'\n+            self.assertTrue(GitCommitBear.check_prerequisites())\n+        finally:\n+            shutil.which = _shutil_which\n+\n+    def test_head_commit(self):\n+        self.assertEqual(self.run_uut(), ['HEAD commit information'])\n+\n+\n+@generate_skip_decorator(GitCommitBear)\n+class AnalyzeGitCommitTest(unittest.TestCase):\n+\n+    @staticmethod\n+    def run_git_command(*args, stdin=None):\n+        run_shell_command(' '.join(('git',) + args), stdin)\n+\n+    @staticmethod\n+    def git_commit(msg):\n+        # Use stdin mode from git, since -m on Windows cmd does not support\n+        # multiline messages.\n+        AnalyzeGitCommitTest.run_git_command('commit',\n+                                             '--allow-empty',\n+                                             '--allow-empty-message',\n+                                             '--file=-',\n+                                             stdin=msg)\n+\n+    def run_uut(self, *args, **kwargs):\n+        \"\"\"\n+        Runs the unit-under-test (via `self.uut.run()`) and collects the\n+        messages of the yielded results as a list.\n+\n+        :param args:   Positional arguments to forward to the run function.\n+        :param kwargs: Keyword arguments to forward to the run function.\n+        :return:       A list of the message strings.\n+        \"\"\"\n+        return list(result.message for result in self.uut.run(*args, **kwargs))\n+\n+    def assert_no_msgs(self):\n+        \"\"\"\n+        Assert that there are no messages in the message queue of the bear, and\n+        show the messages in the failure messgae if it is not empty.\n+        \"\"\"\n+        self.assertTrue(\n+            self.msg_queue.empty(),\n+            'Expected no messages in bear message queue, but got: ' +\n+            str(list(str(i) for i in self.msg_queue.queue)))\n+\n+    def setUp(self):\n+        self.msg_queue = Queue()\n+        self.section = Section('')\n+        self.uut = GitCommitBear(None, self.section, self.msg_queue)\n+\n+        self._old_cwd = os.getcwd()\n+        self.gitdir = mkdtemp()\n+        os.chdir(self.gitdir)\n+        self.run_git_command('init')\n+        self.run_git_command('config', 'user.email coala@coala.io')\n+        self.run_git_command('config', 'user.name coala')\n+\n+    @staticmethod\n+    def _windows_rmtree_remove_readonly(func, path, excinfo):\n+        os.chmod(path, stat.S_IWRITE)\n+        func(path)\n+\n+    def tearDown(self):\n+        os.chdir(self._old_cwd)\n+        if platform.system() == 'Windows':\n+            onerror = self._windows_rmtree_remove_readonly\n+        else:\n+            onerror = None\n+        shutil.rmtree(self.gitdir, onerror=onerror)\n+\n+    def test_analyze_git_commit(self):\n+        run_shell_command('echo \"abc\" >> testfile1.txt ')\n+        run_shell_command('git add testfile1.txt')\n+        run_shell_command('git commit -m \"Add testfile1\"')\n+        self.assertEqual(self.run_uut(), [])","author":{"login":"refeed","avatarUrl":"https://avatars1.githubusercontent.com/u/20320125?v=4","name":"Rafid Aslam"},"reactions":[],"createdAt":"2018-06-22T15:06:17Z","lastEditedAt":"2018-06-22T16:58:19Z","updatedAt":"2018-06-22T16:58:19Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NzUwNzk0Ng==","url":"https://github.com/coala/coala-bears/pull/2543#discussion_r197507946","bodyText":"Return all of the yielded values from uut.run(), not only the message.\nreturn list(self.uut.run(*args, **kwargs))","diffHunk":"@@ -0,0 +1,179 @@\n+import os\n+import platform\n+import shutil\n+import stat\n+import unittest\n+import unittest.mock\n+from queue import Queue\n+from tempfile import mkdtemp\n+\n+from coalib.testing.BearTestHelper import generate_skip_decorator\n+from bears.vcs.VCSCommitBear import VCSCommitBear, CommitResult\n+from bears.vcs.git.GitCommitBear import GitCommitBear\n+from coalib.settings.Section import Section\n+from coalib.misc.Shell import run_shell_command\n+\n+\n+class FakeCommitBear(VCSCommitBear):\n+    @classmethod\n+    def check_prerequisites(cls):\n+        return True\n+\n+    def get_head_commit(self):\n+        return ('This is the fake head commit', '')\n+\n+\n+@generate_skip_decorator(VCSCommitBear)\n+class VCSCommitBearTest(unittest.TestCase):\n+\n+    def run_uut(self, *args, **kwargs):\n+        \"\"\"\n+        Runs the unit-under-test (via `self.uut.run()`) and collects the\n+        messages of the yielded results as a list.\n+\n+        :param args:   Positional arguments to forward to the run function.\n+        :param kwargs: Keyword arguments to forward to the run function.\n+        :return:       A list of the message strings.\n+        \"\"\"\n+        return list(result.message for result in self.uut.run(*args, **kwargs))\n+\n+    def assert_no_msgs(self):\n+        \"\"\"\n+        Assert that there are no messages in the message queue of the bear, and\n+        show the messages in the failure message if it is not empty.\n+        \"\"\"\n+        self.assertTrue(\n+            self.msg_queue.empty(),\n+            'Expected no messages in bear message queue, but got: ' +\n+            str(list(str(i) for i in self.msg_queue.queue)))\n+\n+    def setUp(self):\n+        self.msg_queue = Queue()\n+        self.section = Section('')\n+        self.uut = FakeCommitBear(None, self.section, self.msg_queue)\n+\n+    def test_check_prerequisites(self):\n+        _shutil_which = shutil.which\n+        try:\n+            shutil.which = lambda *args, **kwargs: None\n+            self.assertEqual(GitCommitBear.check_prerequisites(),\n+                             'git is not installed.')\n+\n+            shutil.which = lambda *args, **kwargs: 'path/to/git'\n+            self.assertTrue(GitCommitBear.check_prerequisites())\n+        finally:\n+            shutil.which = _shutil_which\n+\n+    def test_head_commit(self):\n+        self.assertEqual(self.run_uut(), ['HEAD commit information'])\n+\n+\n+@generate_skip_decorator(GitCommitBear)\n+class AnalyzeGitCommitTest(unittest.TestCase):\n+\n+    @staticmethod\n+    def run_git_command(*args, stdin=None):\n+        run_shell_command(' '.join(('git',) + args), stdin)\n+\n+    @staticmethod\n+    def git_commit(msg):\n+        # Use stdin mode from git, since -m on Windows cmd does not support\n+        # multiline messages.\n+        AnalyzeGitCommitTest.run_git_command('commit',\n+                                             '--allow-empty',\n+                                             '--allow-empty-message',\n+                                             '--file=-',\n+                                             stdin=msg)\n+\n+    def run_uut(self, *args, **kwargs):\n+        \"\"\"\n+        Runs the unit-under-test (via `self.uut.run()`) and collects the\n+        messages of the yielded results as a list.\n+\n+        :param args:   Positional arguments to forward to the run function.\n+        :param kwargs: Keyword arguments to forward to the run function.\n+        :return:       A list of the message strings.\n+        \"\"\"\n+        return list(result.message for result in self.uut.run(*args, **kwargs))","author":{"login":"refeed","avatarUrl":"https://avatars1.githubusercontent.com/u/20320125?v=4","name":"Rafid Aslam"},"reactions":[],"createdAt":"2018-06-22T17:00:08Z","lastEditedAt":"2018-06-22T17:00:16Z","updatedAt":"2018-06-22T17:00:16Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NzUwODA1NA==","url":"https://github.com/coala/coala-bears/pull/2543#discussion_r197508054","bodyText":"See https://github.com/coala/coala-bears/pull/2543/files#r197507946","diffHunk":"@@ -0,0 +1,179 @@\n+import os\n+import platform\n+import shutil\n+import stat\n+import unittest\n+import unittest.mock\n+from queue import Queue\n+from tempfile import mkdtemp\n+\n+from coalib.testing.BearTestHelper import generate_skip_decorator\n+from bears.vcs.VCSCommitBear import VCSCommitBear, CommitResult\n+from bears.vcs.git.GitCommitBear import GitCommitBear\n+from coalib.settings.Section import Section\n+from coalib.misc.Shell import run_shell_command\n+\n+\n+class FakeCommitBear(VCSCommitBear):\n+    @classmethod\n+    def check_prerequisites(cls):\n+        return True\n+\n+    def get_head_commit(self):\n+        return ('This is the fake head commit', '')\n+\n+\n+@generate_skip_decorator(VCSCommitBear)\n+class VCSCommitBearTest(unittest.TestCase):\n+\n+    def run_uut(self, *args, **kwargs):\n+        \"\"\"\n+        Runs the unit-under-test (via `self.uut.run()`) and collects the\n+        messages of the yielded results as a list.\n+\n+        :param args:   Positional arguments to forward to the run function.\n+        :param kwargs: Keyword arguments to forward to the run function.\n+        :return:       A list of the message strings.\n+        \"\"\"\n+        return list(result.message for result in self.uut.run(*args, **kwargs))\n+\n+    def assert_no_msgs(self):\n+        \"\"\"\n+        Assert that there are no messages in the message queue of the bear, and\n+        show the messages in the failure message if it is not empty.\n+        \"\"\"\n+        self.assertTrue(\n+            self.msg_queue.empty(),\n+            'Expected no messages in bear message queue, but got: ' +\n+            str(list(str(i) for i in self.msg_queue.queue)))\n+\n+    def setUp(self):\n+        self.msg_queue = Queue()\n+        self.section = Section('')\n+        self.uut = FakeCommitBear(None, self.section, self.msg_queue)\n+\n+    def test_check_prerequisites(self):\n+        _shutil_which = shutil.which\n+        try:\n+            shutil.which = lambda *args, **kwargs: None\n+            self.assertEqual(GitCommitBear.check_prerequisites(),\n+                             'git is not installed.')\n+\n+            shutil.which = lambda *args, **kwargs: 'path/to/git'\n+            self.assertTrue(GitCommitBear.check_prerequisites())\n+        finally:\n+            shutil.which = _shutil_which\n+\n+    def test_head_commit(self):\n+        self.assertEqual(self.run_uut(), ['HEAD commit information'])\n+\n+\n+@generate_skip_decorator(GitCommitBear)\n+class AnalyzeGitCommitTest(unittest.TestCase):\n+\n+    @staticmethod\n+    def run_git_command(*args, stdin=None):\n+        run_shell_command(' '.join(('git',) + args), stdin)\n+\n+    @staticmethod\n+    def git_commit(msg):\n+        # Use stdin mode from git, since -m on Windows cmd does not support\n+        # multiline messages.\n+        AnalyzeGitCommitTest.run_git_command('commit',\n+                                             '--allow-empty',\n+                                             '--allow-empty-message',\n+                                             '--file=-',\n+                                             stdin=msg)\n+\n+    def run_uut(self, *args, **kwargs):\n+        \"\"\"\n+        Runs the unit-under-test (via `self.uut.run()`) and collects the\n+        messages of the yielded results as a list.\n+\n+        :param args:   Positional arguments to forward to the run function.\n+        :param kwargs: Keyword arguments to forward to the run function.\n+        :return:       A list of the message strings.\n+        \"\"\"\n+        return list(result.message for result in self.uut.run(*args, **kwargs))\n+\n+    def assert_no_msgs(self):\n+        \"\"\"\n+        Assert that there are no messages in the message queue of the bear, and\n+        show the messages in the failure messgae if it is not empty.\n+        \"\"\"\n+        self.assertTrue(\n+            self.msg_queue.empty(),\n+            'Expected no messages in bear message queue, but got: ' +\n+            str(list(str(i) for i in self.msg_queue.queue)))\n+\n+    def setUp(self):\n+        self.msg_queue = Queue()\n+        self.section = Section('')\n+        self.uut = GitCommitBear(None, self.section, self.msg_queue)\n+\n+        self._old_cwd = os.getcwd()\n+        self.gitdir = mkdtemp()\n+        os.chdir(self.gitdir)\n+        self.run_git_command('init')\n+        self.run_git_command('config', 'user.email coala@coala.io')\n+        self.run_git_command('config', 'user.name coala')\n+\n+    @staticmethod\n+    def _windows_rmtree_remove_readonly(func, path, excinfo):\n+        os.chmod(path, stat.S_IWRITE)\n+        func(path)\n+\n+    def tearDown(self):\n+        os.chdir(self._old_cwd)\n+        if platform.system() == 'Windows':\n+            onerror = self._windows_rmtree_remove_readonly\n+        else:\n+            onerror = None\n+        shutil.rmtree(self.gitdir, onerror=onerror)\n+\n+    def test_analyze_git_commit(self):\n+        run_shell_command('echo \"abc\" >> testfile1.txt ')\n+        run_shell_command('git add testfile1.txt')\n+        run_shell_command('git commit -m \"Add testfile1\"')\n+        self.assertEqual(self.run_uut(), [])","author":{"login":"refeed","avatarUrl":"https://avatars1.githubusercontent.com/u/20320125?v=4","name":"Rafid Aslam"},"reactions":[],"createdAt":"2018-06-22T17:00:35Z","lastEditedAt":null,"updatedAt":"2018-06-22T17:00:35Z"},{"id":"MDEyOklzc3VlQ29tbWVudDM5OTcwOTA0MQ==","url":"https://github.com/coala/coala-bears/pull/2543#issuecomment-399709041","bodyText":"@virresh Pushed some changes that I had made locally. I am still working on tests for VCSCommitBear but this will give you an idea about the HiddenResult being returned.\nAnd yes I was confused about the code changes in GitCommitBear but since you said in your last review, I will have to modify the tests in GitCommitBeatTest, I have done that too. Hope this helps.","diffHunk":null,"author":{"login":"kriti21","avatarUrl":"https://avatars3.githubusercontent.com/u/19872082?v=4","name":"Kriti Rohilla"},"reactions":[],"createdAt":"2018-06-23T20:33:12Z","lastEditedAt":null,"updatedAt":"2018-06-23T20:33:12Z"},{"id":"MDEyOklzc3VlQ29tbWVudDM5OTcxMTUzMA==","url":"https://github.com/coala/coala-bears/pull/2543#issuecomment-399711530","bodyText":"@kriti21\nActually I am more confused now,\nSeems like you in the modified tests, you are testing for HiddenResults and Results simultaneously\nWhile that is not a very bad idea, but I think the actual contents of the HiddenResult are not being checked, only whether a HiddenResult was generated or not is being checked\nI would rather suggest to wrap the self.uut.run method in a custom decorator and return only the results generated by _CommitBear inside of the already existing tests, and create another class that uses this decorator to obtain results from VCSCommitBear and then check there contents as well, since that would ensure that the result returned by the meta-bear are actually correct\nAlso I'm not sure why the older review got removed even though the line didn't change in the diff, but would be great if you could please clarify #2543 (comment) ?","diffHunk":null,"author":{"login":"virresh","avatarUrl":"https://avatars0.githubusercontent.com/u/10978108?v=4","name":"Viresh Gupta"},"reactions":[],"createdAt":"2018-06-23T21:24:15Z","lastEditedAt":"2018-06-23T21:26:15Z","updatedAt":"2018-06-23T21:26:15Z"},{"id":"MDEyOklzc3VlQ29tbWVudDM5OTcyNDM4Mw==","url":"https://github.com/coala/coala-bears/pull/2543#issuecomment-399724383","bodyText":"@virresh I am working on\n\nbut I think the actual contents of the HiddenResult are not being checked, only whether a HiddenResult was generated or not is being checked\n\nThe code now should atleast clear this doubt\n\nI really don't seem to understand how the tests are executing right now ?\nThe tests simply are wrong IMO, and furthermore the main logic doesn't seem convincing to me as to why would it work as per what is in the cEP.\n\nIf not, please tell what is wrong with the logic ? As for the tests execution, please run the code and see where tests fail.\nI have tried to reply to all your comments. Let me know of any other improvements you suggest","diffHunk":null,"author":{"login":"kriti21","avatarUrl":"https://avatars3.githubusercontent.com/u/19872082?v=4","name":"Kriti Rohilla"},"reactions":[],"createdAt":"2018-06-24T02:37:55Z","lastEditedAt":"2018-06-24T02:44:05Z","updatedAt":"2018-06-24T02:44:05Z"},{"id":"MDEyOklzc3VlQ29tbWVudDM5OTczMTEzOQ==","url":"https://github.com/coala/coala-bears/pull/2543#issuecomment-399731139","bodyText":"@kriti21\nIf nothing else, then the first point that I'd question is why does the assertion in GitCommitBear get a 'HEAD commit information'\nwhile you are checking for the CommitResult Object in the VCSCommitBearTests\nI know that you are using the same function of self.run_uut which was meant to only return messages,\nBut checking if the hidden result was generated or not is of no use in the GitCommitBear, either don't check it at all, (using some approach as described in my previous comment) or check the whole commit object like what would be done in the VCSCommitResult (both of them should be done imo, i.e don't check for the hidden results in the existing tests, so they won't change, and make another class to check for the hidden results)\nAs for the main logic, I'd recommended previously as well to have a look over generators,\nThe for loop that I had written as an example was simply to illustrate the point why the tests weren't being executed, I expected you to read up a little more on that and use the appropriate things\nWhat would be apt would be using a yield from IMO\nI hope I haven't got things wrong here and am clearer now 😅","diffHunk":null,"author":{"login":"virresh","avatarUrl":"https://avatars0.githubusercontent.com/u/10978108?v=4","name":"Viresh Gupta"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNTUyMjA5NA==","createdAt":"2018-06-24T09:22:04Z","content":"THUMBS_UP","user":{"login":"refeed","name":"Rafid Aslam"}}],"createdAt":"2018-06-24T05:39:53Z","lastEditedAt":null,"updatedAt":"2018-06-24T05:39:53Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwMDQzNjE5Nw==","url":"https://github.com/coala/coala-bears/pull/2543#issuecomment-400436197","bodyText":"circleci and travis-ci failing due to sourceforge. Please review @jayvdb @damngamerz @refeed","diffHunk":null,"author":{"login":"kriti21","avatarUrl":"https://avatars3.githubusercontent.com/u/19872082?v=4","name":"Kriti Rohilla"},"reactions":[],"createdAt":"2018-06-26T19:35:34Z","lastEditedAt":null,"updatedAt":"2018-06-26T19:35:34Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwMzY5NTk5Mg==","url":"https://github.com/coala/coala-bears/pull/2543#issuecomment-403695992","bodyText":"Ping @jayvdb . Review request for this PR.","diffHunk":null,"author":{"login":"kriti21","avatarUrl":"https://avatars3.githubusercontent.com/u/19872082?v=4","name":"Kriti Rohilla"},"reactions":[],"createdAt":"2018-07-10T04:23:50Z","lastEditedAt":null,"updatedAt":"2018-07-10T04:23:50Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwNzg2MjA5OQ==","url":"https://github.com/coala/coala-bears/pull/2543#issuecomment-407862099","bodyText":"@jayvdb I did something wrong while rebasing this branch by mistake because of which gitmate assigned this PR to some other members. Please unassign them and remove extra labels.\nAnd also please review.","diffHunk":null,"author":{"login":"kriti21","avatarUrl":"https://avatars3.githubusercontent.com/u/19872082?v=4","name":"Kriti Rohilla"},"reactions":[],"createdAt":"2018-07-25T19:05:11Z","lastEditedAt":"2018-07-25T19:25:36Z","updatedAt":"2018-07-25T19:25:36Z"}]}}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1531293991000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/pull/2551","number":2551,"title":"ClangFunctionDifferenceBear: Add ClangFunctionDifferenceResult","body":"Create and use ClangFunctionDifferenceResult to pass the results\nto dependent bears, rather than using HiddenResult.\nCloses #1904\n\nFor short term contributors: we understand that getting your commits well\ndefined like we require is a hard task and takes some learning. If you\nlook to help without wanting to contribute long term there's no need\nfor you to learn this. Just drop us a message and we'll take care of brushing\nup your stuff for merge!\nChecklist\n\n I read the commit guidelines and I've followed\nthem.\n I ran coala over my code locally. (All commits have to pass\nindividually. It is not sufficient to have \"fixup commits\" on your PR,\nour bot will still report the issues for the previous commit.) You will\nlikely receive a lot of bot comments and build failures if coala does not\npass on every single commit!\n\nAfter you submit your pull request, DO NOT click the 'Update Branch' button.\nWhen asked for a rebase, consult coala.io/rebase\ninstead.\nPlease consider helping us by reviewing other peoples pull requests as well:\n\npick up any PR at https://coala.io/review\nreview it (check https://coala.io/reviewing for more info)\nif you are sure that it needs work, use corobo mark wip <URL> to get it out\nof the review queue.\n\nThe more you review, the more your score will grow at coala.io and we will\nreview your PRs faster!","comments":8,"createdAt":"2018-06-24T08:09:57Z","updatedAt":"2018-07-11T07:26:31Z","closedAt":"2018-07-11T07:26:29Z","state":"merged","user":{"login":"refeed","avatarUrl":"https://avatars1.githubusercontent.com/u/20320125?v=4"},"owner":{"login":"refeed","avatarUrl":"https://avatars1.githubusercontent.com/u/20320125?v=4"},"assignee":{"login":"refeed","avatarUrl":"https://avatars1.githubusercontent.com/u/20320125?v=4"},"labels":[{"name":"difficulty/low","color":"207de5"},{"name":"importance/low","color":"70e870"},{"name":"size/M","color":"CFB80A"}],"pullRequest":{"htmlUrl":"https://github.com/coala/coala-bears/pull/2551","comments":[{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5ODgxMjkzMQ==","url":"https://github.com/coala/coala-bears/pull/2551#discussion_r198812931","bodyText":"super()?","diffHunk":"@@ -46,6 +48,29 @@\n member_accessed\"\"\"))\n \n \n+@generate_repr(('id', hex),\n+               'origin',\n+               'differences',\n+               'count_matrices',\n+               'message')\n+@generate_ordering('origin',\n+                   'differences',\n+                   'count_matrices',\n+                   'message')\n+class ClangFunctionDifferenceResult(HiddenResult):\n+\n+    @enforce_signature\n+    def __init__(self, origin,\n+                 differences: list,\n+                 count_matrices: dict):\n+        HiddenResult.__init__(origin,","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNTgxNDA2Ng==","createdAt":"2018-06-29T17:54:50Z","content":"THUMBS_UP","user":{"login":"refeed","name":"Rafid Aslam"}}],"createdAt":"2018-06-28T11:54:14Z","lastEditedAt":null,"updatedAt":"2018-06-28T11:54:14Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5ODgxMzE0MA==","url":"https://github.com/coala/coala-bears/pull/2551#discussion_r198813140","bodyText":"is this necessary?\nif not, remove, as we dont want to enhance the deprecated '.contents'","diffHunk":"@@ -46,6 +48,29 @@\n member_accessed\"\"\"))\n \n \n+@generate_repr(('id', hex),\n+               'origin',\n+               'differences',\n+               'count_matrices',\n+               'message')\n+@generate_ordering('origin',\n+                   'differences',\n+                   'count_matrices',\n+                   'message')\n+class ClangFunctionDifferenceResult(HiddenResult):\n+\n+    @enforce_signature\n+    def __init__(self, origin,\n+                 differences: list,\n+                 count_matrices: dict):\n+        HiddenResult.__init__(origin,\n+                              [differences, count_matrices],\n+                              ('ClangFunctionDifferenceResult: differences[%d]'","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-06-28T11:55:01Z","lastEditedAt":null,"updatedAt":"2018-06-28T11:55:01Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTI0MTc1Ng==","url":"https://github.com/coala/coala-bears/pull/2551#discussion_r199241756","bodyText":"@jayvdb Well, yeah, it's not too necessary, it's just for the message argument, I can remove it..\nBut, did you mean to point to line 67? that's the contents argument","diffHunk":"@@ -46,6 +48,29 @@\n member_accessed\"\"\"))\n \n \n+@generate_repr(('id', hex),\n+               'origin',\n+               'differences',\n+               'count_matrices',\n+               'message')\n+@generate_ordering('origin',\n+                   'differences',\n+                   'count_matrices',\n+                   'message')\n+class ClangFunctionDifferenceResult(HiddenResult):\n+\n+    @enforce_signature\n+    def __init__(self, origin,\n+                 differences: list,\n+                 count_matrices: dict):\n+        HiddenResult.__init__(origin,\n+                              [differences, count_matrices],\n+                              ('ClangFunctionDifferenceResult: differences[%d]'","author":{"login":"refeed","avatarUrl":"https://avatars1.githubusercontent.com/u/20320125?v=4","name":"Rafid Aslam"},"reactions":[],"createdAt":"2018-06-29T18:17:34Z","lastEditedAt":null,"updatedAt":"2018-06-29T18:17:34Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTMwMTcwNA==","url":"https://github.com/coala/coala-bears/pull/2551#discussion_r199301704","bodyText":"Sorry i meant '.message' which was previously unused and isnt very useful for this bear.","diffHunk":"@@ -46,6 +48,29 @@\n member_accessed\"\"\"))\n \n \n+@generate_repr(('id', hex),\n+               'origin',\n+               'differences',\n+               'count_matrices',\n+               'message')\n+@generate_ordering('origin',\n+                   'differences',\n+                   'count_matrices',\n+                   'message')\n+class ClangFunctionDifferenceResult(HiddenResult):\n+\n+    @enforce_signature\n+    def __init__(self, origin,\n+                 differences: list,\n+                 count_matrices: dict):\n+        HiddenResult.__init__(origin,\n+                              [differences, count_matrices],\n+                              ('ClangFunctionDifferenceResult: differences[%d]'","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-06-29T23:29:33Z","lastEditedAt":null,"updatedAt":"2018-06-29T23:29:33Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwMjg4MDcyMw==","url":"https://github.com/coala/coala-bears/pull/2551#issuecomment-402880723","bodyText":"AttributeError: 'ClangCloneDetectionBearTest' object has no attribute 'assertComparableObjectsEqual'\n\nThis is only in master?\nIf so, you can rebase on top of 8ef60e7, as that is going to be merged soon.","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-05T23:28:32Z","lastEditedAt":null,"updatedAt":"2018-07-05T23:28:32Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwMzcyMTE4Nw==","url":"https://github.com/coala/coala-bears/pull/2551#issuecomment-403721187","bodyText":"This is kinda strange, the expected results that I created in 74e200d , some of them don't match with the actual Results object in Python3.4, and Python3.5, but all of them are passing in Python3.6","diffHunk":null,"author":{"login":"refeed","avatarUrl":"https://avatars1.githubusercontent.com/u/20320125?v=4","name":"Rafid Aslam"},"reactions":[],"createdAt":"2018-07-10T06:59:53Z","lastEditedAt":null,"updatedAt":"2018-07-10T06:59:53Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwNDAwMTU5Nw==","url":"https://github.com/coala/coala-bears/pull/2551#issuecomment-404001597","bodyText":"@refeed, different floating number implementations.\nJust using an if to get your build green.","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNjI3ODYzNQ==","createdAt":"2018-07-11T04:13:07Z","content":"THUMBS_UP","user":{"login":"refeed","name":"Rafid Aslam"}}],"createdAt":"2018-07-10T23:54:13Z","lastEditedAt":null,"updatedAt":"2018-07-10T23:54:13Z"}]}}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1531124923000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/pull/2553","number":2553,"title":".ci/deps.sh: Update astyle dependency link","body":"wget just returns \"Unable to establish SSL connection.\" when using\nthe old link. This commit updates the astyle dependency download link\nso it can work again\nCloses #2552\n\nFor short term contributors: we understand that getting your commits well\ndefined like we require is a hard task and takes some learning. If you\nlook to help without wanting to contribute long term there's no need\nfor you to learn this. Just drop us a message and we'll take care of brushing\nup your stuff for merge!\nChecklist\n\n I read the commit guidelines and I've followed\nthem.\n I ran coala over my code locally. (All commits have to pass\nindividually. It is not sufficient to have \"fixup commits\" on your PR,\nour bot will still report the issues for the previous commit.) You will\nlikely receive a lot of bot comments and build failures if coala does not\npass on every single commit!\n\nAfter you submit your pull request, DO NOT click the 'Update Branch' button.\nWhen asked for a rebase, consult coala.io/rebase\ninstead.\nPlease consider helping us by reviewing other peoples pull requests as well:\n\npick up any PR at https://coala.io/review\nreview it (check https://coala.io/reviewing for more info)\nif you are sure that it needs work, use corobo mark wip <URL> to get it out\nof the review queue.\n\nThe more you review, the more your score will grow at coala.io and we will\nreview your PRs faster!","comments":4,"createdAt":"2018-06-26T12:14:29Z","updatedAt":"2018-07-09T08:28:43Z","closedAt":"2018-07-09T08:28:43Z","state":"closed","user":{"login":"refeed","avatarUrl":"https://avatars1.githubusercontent.com/u/20320125?v=4"},"owner":{"login":"refeed","avatarUrl":"https://avatars1.githubusercontent.com/u/20320125?v=4"},"assignee":{"login":"refeed","avatarUrl":"https://avatars1.githubusercontent.com/u/20320125?v=4"},"labels":[{"name":"process/pending review","color":"bfe5bf"},{"name":"size/XS","color":"00DE0F"},{"name":"status/blocked","color":"e11d21"},{"name":"status/needs info","color":"d4c5f9"},{"name":"type/bug","color":"e11d21"},{"name":"type/dependencies","color":"b60205"}],"pullRequest":{"htmlUrl":"https://github.com/coala/coala-bears/pull/2553","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQwMDY0OTc3MQ==","url":"https://github.com/coala/coala-bears/pull/2553#issuecomment-400649771","bodyText":"The problem hasnt been analysed enough yet.\nsee #2552 (comment)","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-06-27T12:11:59Z","lastEditedAt":null,"updatedAt":"2018-06-27T12:11:59Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwMzQwMTIyMg==","url":"https://github.com/coala/coala-bears/pull/2553#issuecomment-403401222","bodyText":"Solved by #2593","diffHunk":null,"author":{"login":"refeed","avatarUrl":"https://avatars1.githubusercontent.com/u/20320125?v=4","name":"Rafid Aslam"},"createdAt":"2018-07-09T08:28:43Z","lastEditedAt":null,"updatedAt":"2018-07-09T08:28:43Z"}]}}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1531736601000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/pull/2555","number":2555,"title":"bear-requirements.txt: Bump to PyYAML 4.1.0","body":"Most dependencies are moving to PyYAML 4.x due to its\ndefault secure mode.\nThe bears pin to 3.12 causes VersionConflict errors\nwhen other yaml tools are in the same environment.\nCloses coala/coala#5559\n\nFor short term contributors: we understand that getting your commits well\ndefined like we require is a hard task and takes some learning. If you\nlook to help without wanting to contribute long term there's no need\nfor you to learn this. Just drop us a message and we'll take care of brushing\nup your stuff for merge!\nChecklist\n\n I read the commit guidelines and I've followed\nthem.\n I ran coala over my code locally. (All commits have to pass\nindividually. It is not sufficient to have \"fixup commits\" on your PR,\nour bot will still report the issues for the previous commit.) You will\nlikely receive a lot of bot comments and build failures if coala does not\npass on every single commit!\n\nAfter you submit your pull request, DO NOT click the 'Update Branch' button.\nWhen asked for a rebase, consult coala.io/rebase\ninstead.\nPlease consider helping us by reviewing other peoples pull requests as well:\n\npick up any PR at https://coala.io/review\nreview it (check https://coala.io/reviewing for more info)\nif you are sure that it needs work, use corobo mark wip <URL> to get it out\nof the review queue.\n\nThe more you review, the more your score will grow at coala.io and we will\nreview your PRs faster!","comments":1,"createdAt":"2018-06-28T15:34:10Z","updatedAt":"2018-07-16T10:23:21Z","closedAt":"2018-07-16T10:23:21Z","state":"closed","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"area/ci","color":"d93f0b"},{"name":"process/pending review","color":"bfe5bf"},{"name":"size/XS","color":"00DE0F"},{"name":"type/bug","color":"e11d21"}],"pullRequest":{"htmlUrl":"https://github.com/coala/coala-bears/pull/2555","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQwNTIwNTA5NA==","url":"https://github.com/coala/coala-bears/pull/2555#issuecomment-405205094","bodyText":"PyYaml 3.13 was released with py37 compatibility, and most projects are going with that as 4.x is going to be a bit different.","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-07-16T10:23:15Z","lastEditedAt":null,"updatedAt":"2018-07-16T10:23:15Z"}]}}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1531737889000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/pull/2561","number":2561,"title":"Add gem versions","body":"Blocked by #2559 and other breakages","comments":4,"createdAt":"2018-07-02T07:03:20Z","updatedAt":"2018-07-16T10:44:49Z","closedAt":"2018-07-16T10:44:44Z","state":"merged","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"assignee":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"area/ci","color":"d93f0b"},{"name":"area/tests","color":"c5def5"},{"name":"difficulty/low","color":"207de5"},{"name":"size/XS","color":"00DE0F"}],"pullRequest":{"htmlUrl":"https://github.com/coala/coala-bears/pull/2561","comments":[]}}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1531050743000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/pull/2568","number":2568,"title":"appveyor.yml: Sync moban","body":"Closes #2567\n\nFor short term contributors: we understand that getting your commits well\ndefined like we require is a hard task and takes some learning. If you\nlook to help without wanting to contribute long term there's no need\nfor you to learn this. Just drop us a message and we'll take care of brushing\nup your stuff for merge!\nChecklist\n\n I read the commit guidelines and I've followed\nthem.\n I ran coala over my code locally. (All commits have to pass\nindividually. It is not sufficient to have \"fixup commits\" on your PR,\nour bot will still report the issues for the previous commit.) You will\nlikely receive a lot of bot comments and build failures if coala does not\npass on every single commit!\n\nAfter you submit your pull request, DO NOT click the 'Update Branch' button.\nWhen asked for a rebase, consult coala.io/rebase\ninstead.\nPlease consider helping us by reviewing other peoples pull requests as well:\n\npick up any PR at https://coala.io/review\nreview it (check https://coala.io/reviewing for more info)\nif you are sure that it needs work, use corobo mark wip <URL> to get it out\nof the review queue.\n\nThe more you review, the more your score will grow at coala.io and we will\nreview your PRs faster!","comments":5,"createdAt":"2018-07-03T10:30:00Z","updatedAt":"2018-07-08T11:52:23Z","closedAt":"2018-07-08T11:51:54Z","state":"merged","user":{"login":"anctartica","avatarUrl":"https://avatars0.githubusercontent.com/u/7020962?v=4"},"owner":{"login":"anctartica","avatarUrl":"https://avatars0.githubusercontent.com/u/7020962?v=4"},"labels":[{"name":"size/XS","color":"00DE0F"},{"name":"type/bug","color":"e11d21"}],"pullRequest":{"htmlUrl":"https://github.com/coala/coala-bears/pull/2568","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQwMjE3NjczNg==","url":"https://github.com/coala/coala-bears/pull/2568#issuecomment-402176736","bodyText":"more moban changes at https://travis-ci.org/coala/coala-bears/jobs/399516062\nand probably a gitignore update also needed. (gitignore is still a WIP PR)","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-07-03T14:27:21Z","lastEditedAt":"2018-07-03T14:30:31Z","updatedAt":"2018-07-03T14:30:31Z"}]}}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1531977717000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/pull/2584","number":2584,"title":".coafile: Check all Python files","body":"Builds on top of #2541\n\nFor short term contributors: we understand that getting your commits well\ndefined like we require is a hard task and takes some learning. If you\nlook to help without wanting to contribute long term there's no need\nfor you to learn this. Just drop us a message and we'll take care of brushing\nup your stuff for merge!\nChecklist\n\n I read the commit guidelines and I've followed\nthem.\n I ran coala over my code locally. (All commits have to pass\nindividually. It is not sufficient to have \"fixup commits\" on your PR,\nour bot will still report the issues for the previous commit.) You will\nlikely receive a lot of bot comments and build failures if coala does not\npass on every single commit!\n\nAfter you submit your pull request, DO NOT click the 'Update Branch' button.\nWhen asked for a rebase, consult coala.io/rebase\ninstead.\nPlease consider helping us by reviewing other peoples pull requests as well:\n\npick up any PR at https://coala.io/review\nreview it (check https://coala.io/reviewing for more info)\nif you are sure that it needs work, use corobo mark wip <URL> to get it out\nof the review queue.\n\nThe more you review, the more your score will grow at coala.io and we will\nreview your PRs faster!","comments":3,"createdAt":"2018-07-06T02:01:15Z","updatedAt":"2018-07-19T05:21:57Z","closedAt":null,"state":"open","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"assignee":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"process/wip","color":"fbca04"},{"name":"size/XS","color":"00DE0F"}],"pullRequest":{"htmlUrl":"https://github.com/coala/coala-bears/pull/2584","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQwMjkxOTk1Mg==","url":"https://github.com/coala/coala-bears/pull/2584#issuecomment-402919952","bodyText":"Something is wrong with Travis CI atm.  apt-get is failing.","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-07-06T04:08:17Z","lastEditedAt":null,"updatedAt":"2018-07-06T04:08:17Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwMjkyMDE1NQ==","url":"https://github.com/coala/coala-bears/pull/2584#issuecomment-402920155","bodyText":"https://travis-ci.org/jayvdb/coala-bears/builds/400719488 is a possible workaround for the Circle CI failure.","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-07-06T04:10:01Z","lastEditedAt":null,"updatedAt":"2018-07-06T04:10:01Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwMzIxNjAwOA==","url":"https://github.com/coala/coala-bears/pull/2584#issuecomment-403216008","bodyText":"@jayvdb Try to retry the ci job?","diffHunk":null,"author":{"login":"nemaniarjun","avatarUrl":"https://avatars0.githubusercontent.com/u/15715894?v=4","name":"Arjun Nemani"},"createdAt":"2018-07-07T13:34:38Z","lastEditedAt":null,"updatedAt":"2018-07-07T13:34:38Z"}]}}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1531264765000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/pull/2586","number":2586,"title":"ClangBear.py: Rename range to range_obj","body":"Fixes #2585\n\nFor short term contributors: we understand that getting your commits well\ndefined like we require is a hard task and takes some learning. If you\nlook to help without wanting to contribute long term there's no need\nfor you to learn this. Just drop us a message and we'll take care of brushing\nup your stuff for merge!\nChecklist\n\n I read the commit guidelines and I've followed\nthem.\n I ran coala over my code locally. (All commits have to pass\nindividually. It is not sufficient to have \"fixup commits\" on your PR,\nour bot will still report the issues for the previous commit.) You will\nlikely receive a lot of bot comments and build failures if coala does not\npass on every single commit!\n\nAfter you submit your pull request, DO NOT click the 'Update Branch' button.\nWhen asked for a rebase, consult coala.io/rebase\ninstead.\nPlease consider helping us by reviewing other peoples pull requests as well:\n\npick up any PR at https://coala.io/review\nreview it (check https://coala.io/reviewing for more info)\nif you are sure that it needs work, use corobo mark wip <URL> to get it out\nof the review queue.\n\nThe more you review, the more your score will grow at coala.io and we will\nreview your PRs faster!","comments":7,"createdAt":"2018-07-06T11:38:57Z","updatedAt":"2018-07-10T23:19:25Z","closedAt":"2018-07-10T22:24:27Z","state":"closed","user":{"login":"kUSHAL0601","avatarUrl":"https://avatars3.githubusercontent.com/u/29600964?v=4"},"owner":{"login":"kUSHAL0601","avatarUrl":"https://avatars3.githubusercontent.com/u/29600964?v=4"},"labels":[{"name":"difficulty/newcomer","color":"65C8FF"},{"name":"process/approved","color":"009800"},{"name":"size/XS","color":"00DE0F"},{"name":"type/bug","color":"e11d21"}],"pullRequest":{"htmlUrl":"https://github.com/coala/coala-bears/pull/2586","comments":[]}}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1531095160000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/pull/2593","number":2593,"title":"CI: Use cs50/ppa for astyle 3.0.1","body":"Closes #2302\nRelated to #2592","comments":6,"createdAt":"2018-07-08T14:30:50Z","updatedAt":"2018-07-09T00:12:40Z","closedAt":"2018-07-09T00:12:31Z","state":"merged","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"assignee":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"area/ci","color":"d93f0b"},{"name":"difficulty/low","color":"207de5"},{"name":"size/XS","color":"00DE0F"},{"name":"type/dependencies","color":"b60205"},{"name":"upstream","color":"fbca04"}],"pullRequest":{"htmlUrl":"https://github.com/coala/coala-bears/pull/2593","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQwMzI5ODgxNQ==","url":"https://github.com/coala/coala-bears/pull/2593#issuecomment-403298815","bodyText":"@jayvdb\nI am slightly confused as to how is astyle being downloaded for Circleci now?\nOr is it not needed by Circleci...","diffHunk":null,"author":{"login":"harshhx17","avatarUrl":"https://avatars2.githubusercontent.com/u/31805694?v=4","name":"Harsh Kumar Bhartiya"},"createdAt":"2018-07-08T16:20:25Z","lastEditedAt":null,"updatedAt":"2018-07-08T16:20:25Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwMzMyNzA4NQ==","url":"https://github.com/coala/coala-bears/pull/2593#issuecomment-403327085","bodyText":"Read the circle log to check that is happening.","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-07-08T23:54:40Z","lastEditedAt":null,"updatedAt":"2018-07-08T23:54:40Z"}]}}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1531176577000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/pull/2594","number":2594,"title":".travis.yml: Remove sudo","body":"Closes #2592\nUnfortunately also adds more use of Travis CI's addon, which is a bit dodgy atm\n#2591","comments":6,"createdAt":"2018-07-08T14:52:08Z","updatedAt":"2018-07-09T22:49:37Z","closedAt":"2018-07-09T22:49:37Z","state":"merged","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"assignee":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"area/ci","color":"d93f0b"},{"name":"difficulty/low","color":"207de5"},{"name":"importance/critical","color":"e11d21"},{"name":"process/pending review","color":"bfe5bf"},{"name":"size/S","color":"B1CF0A"},{"name":"type/bug","color":"e11d21"},{"name":"type/dependencies","color":"b60205"},{"name":"upstream","color":"fbca04"}],"pullRequest":{"htmlUrl":"https://github.com/coala/coala-bears/pull/2594","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQwMzI5NzU1Mg==","url":"https://github.com/coala/coala-bears/pull/2594#issuecomment-403297552","bodyText":"The tests almost passed on Circle.  A timeout issue https://circleci.com/gh/jayvdb/coala-bears/1001 I've started a new build.","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-07-08T16:01:15Z","lastEditedAt":null,"updatedAt":"2018-07-08T16:01:15Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwMzMzMDkzOA==","url":"https://github.com/coala/coala-bears/pull/2594#issuecomment-403330938","bodyText":"The Python 3.6 Travis job has exceeded the time limit twice :/\nEven the cache of ~/.local/share/coala-bears is being ignored, resulting in .ci/deps.coala-bears.sh being longer than usual.","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-07-09T00:46:05Z","lastEditedAt":"2018-07-09T01:00:20Z","updatedAt":"2018-07-09T01:00:20Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwMzYzNzEyMw==","url":"https://github.com/coala/coala-bears/pull/2594#issuecomment-403637123","bodyText":"reack","diffHunk":null,"author":{"login":"yukiisbored","avatarUrl":"https://avatars0.githubusercontent.com/u/18437312?v=4","name":"Muhammad Kaisar Arkhan"},"createdAt":"2018-07-09T22:13:19Z","lastEditedAt":null,"updatedAt":"2018-07-09T22:13:19Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwMzY0NDIzNA==","url":"https://github.com/coala/coala-bears/pull/2594#issuecomment-403644234","bodyText":"gitmate is still down.  Manually merged.","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-07-09T22:49:23Z","lastEditedAt":null,"updatedAt":"2018-07-09T22:49:23Z"}]}}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1532526282000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/pull/2595","number":2595,"title":"RubyFastererBear.py: Add `fasterer`","body":"This adds a Local Bear for Ruby, wrapping\nfasterer.\nCloses #444","comments":10,"createdAt":"2018-07-08T15:52:07Z","updatedAt":"2018-07-25T13:44:42Z","closedAt":"2018-07-23T23:58:19Z","state":"merged","user":{"login":"sangamcse","avatarUrl":"https://avatars2.githubusercontent.com/u/26381717?v=4"},"owner":{"login":"sangamcse","avatarUrl":"https://avatars2.githubusercontent.com/u/26381717?v=4"},"assignee":{"login":"sangamcse","avatarUrl":"https://avatars2.githubusercontent.com/u/26381717?v=4"},"labels":[{"name":"area/lintbears","color":"fbca04"},{"name":"process/approved","color":"009800"},{"name":"size/S","color":"B1CF0A"}],"pullRequest":{"htmlUrl":"https://github.com/coala/coala-bears/pull/2595","comments":[{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMjYzNzM3Ng==","url":"https://github.com/coala/coala-bears/pull/2595#discussion_r202637376","bodyText":"two space indent please.\nAlso pls review #2561 so we can merge that and you can rebase on top of it. to avoid conflicting it.","diffHunk":"@@ -0,0 +1,15 @@\n+module Hihi\n+  class << self\n+    module_eval %{\n+      def hello\n+        puts \"win\"\n+      end\n+    }\n+  end\n+end\n+\n+Hihi.hello\n+\n+Hihi.module_eval %{\n+ puts @foo","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-07-16T10:34:46Z","lastEditedAt":null,"updatedAt":"2018-07-16T10:34:46Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMjk0MDk2Mw==","url":"https://github.com/coala/coala-bears/pull/2595#discussion_r202940963","bodyText":"Done @jayvdb","diffHunk":"@@ -0,0 +1,15 @@\n+module Hihi\n+  class << self\n+    module_eval %{\n+      def hello\n+        puts \"win\"\n+      end\n+    }\n+  end\n+end\n+\n+Hihi.hello\n+\n+Hihi.module_eval %{\n+ puts @foo","author":{"login":"sangamcse","avatarUrl":"https://avatars2.githubusercontent.com/u/26381717?v=4","name":"Sangam Kumar"},"createdAt":"2018-07-17T08:49:03Z","lastEditedAt":null,"updatedAt":"2018-07-17T08:49:03Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwNjE2OTU2MQ==","url":"https://github.com/coala/coala-bears/pull/2595#issuecomment-406169561","bodyText":"Waiting on #2612 and #2614 to be reviewed to avoid rebasing those ones.","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-07-19T06:33:03Z","lastEditedAt":null,"updatedAt":"2018-07-19T06:33:03Z"}]}}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1531119412000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/pull/2597","number":2597,"title":"Use coalib c31fb2e","body":"","comments":2,"createdAt":"2018-07-09T05:38:06Z","updatedAt":"2018-07-09T06:56:52Z","closedAt":"2018-07-09T06:56:51Z","state":"closed","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"assignee":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"area/ci","color":"d93f0b"},{"name":"process/pending review","color":"bfe5bf"},{"name":"size/S","color":"B1CF0A"},{"name":"type/bug","color":"e11d21"}],"pullRequest":{"htmlUrl":"https://github.com/coala/coala-bears/pull/2597","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQwMzM3NzgwOQ==","url":"https://github.com/coala/coala-bears/pull/2597#issuecomment-403377809","bodyText":"Circle is failing because pip is somehow using python and not python3. ;-(","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-07-09T06:53:18Z","lastEditedAt":null,"updatedAt":"2018-07-09T06:53:18Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwMzM3ODYyMw==","url":"https://github.com/coala/coala-bears/pull/2597#issuecomment-403378623","bodyText":"The fix to use master was easy.","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-07-09T06:56:51Z","lastEditedAt":null,"updatedAt":"2018-07-09T06:56:51Z"}]}}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1531131725000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/pull/2598","number":2598,"title":"AnnotationBear: Use comment_delimiters","body":"Fixes #2589","comments":1,"createdAt":"2018-07-09T07:01:57Z","updatedAt":"2018-07-09T10:22:05Z","closedAt":"2018-07-09T10:22:05Z","state":"merged","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"process/pending review","color":"bfe5bf"},{"name":"size/XS","color":"00DE0F"},{"name":"type/bug","color":"e11d21"}],"pullRequest":{"htmlUrl":"https://github.com/coala/coala-bears/pull/2598","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQwMzM3OTkyMQ==","url":"https://github.com/coala/coala-bears/pull/2598#issuecomment-403379921","bodyText":"Circle is failing because pip is somehow using python and not python3. ;-(","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-07-09T07:03:00Z","lastEditedAt":null,"updatedAt":"2018-07-09T07:03:00Z"}]}}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1531760538000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/pull/2599","number":2599,"title":".ci/deps.sh: Remove go deps now in .ci/deps.go.sh","body":"Continues #2536","comments":6,"createdAt":"2018-07-09T07:22:11Z","updatedAt":"2018-07-16T17:02:18Z","closedAt":"2018-07-16T17:02:18Z","state":"merged","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"assignee":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"area/ci","color":"d93f0b"},{"name":"difficulty/low","color":"207de5"},{"name":"importance/critical","color":"e11d21"},{"name":"process/pending review","color":"bfe5bf"},{"name":"size/XS","color":"00DE0F"},{"name":"type/bug","color":"e11d21"}],"pullRequest":{"htmlUrl":"https://github.com/coala/coala-bears/pull/2599","comments":[]}}},{"repoOwner":"coala","repoName":"coala-bears","updatedAtMs":1532859348000,"issue":{"htmlUrl":"https://github.com/coala/coala-bears/pull/2600","number":2600,"title":"GitLinearCommitBear: To inspect git merge commits","body":"For short term contributors: we understand that getting your commits well\ndefined like we require is a hard task and takes some learning. If you\nlook to help without wanting to contribute long term there's no need\nfor you to learn this. Just drop us a message and we'll take care of brushing\nup your stuff for merge!\nChecklist\n\n I read the commit guidelines and I've followed\nthem.\n I ran coala over my code locally. (All commits have to pass\nindividually. It is not sufficient to have \"fixup commits\" on your PR,\nour bot will still report the issues for the previous commit.) You will\nlikely receive a lot of bot comments and build failures if coala does not\npass on every single commit!\n\nAfter you submit your pull request, DO NOT click the 'Update Branch' button.\nWhen asked for a rebase, consult coala.io/rebase\ninstead.\nPlease consider helping us by reviewing other peoples pull requests as well:\n\npick up any PR at https://coala.io/review\nreview it (check https://coala.io/reviewing for more info)\nif you are sure that it needs work, use corobo mark wip <URL> to get it out\nof the review queue.\n\nThe more you review, the more your score will grow at coala.io and we will\nreview your PRs faster!","comments":8,"createdAt":"2018-07-09T07:25:43Z","updatedAt":"2018-07-29T10:15:48Z","closedAt":"2018-07-29T10:15:23Z","state":"merged","user":{"login":"kriti21","avatarUrl":"https://avatars3.githubusercontent.com/u/19872082?v=4"},"owner":{"login":"kriti21","avatarUrl":"https://avatars3.githubusercontent.com/u/19872082?v=4"},"labels":[{"name":"size/S","color":"B1CF0A"}],"pullRequest":{"htmlUrl":"https://github.com/coala/coala-bears/pull/2600","comments":[{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTkyNzkzMA==","url":"https://github.com/coala/coala-bears/pull/2600#discussion_r201927930","bodyText":"Use if COMMIT_TYPE.merge_commit in result.commit_type:","diffHunk":"@@ -0,0 +1,40 @@\n+import re\n+\n+from bears.vcs.git.GitCommitBear import GitCommitBear\n+from coalib.bears.GlobalBear import GlobalBear\n+from coalib.results.Result import Result\n+\n+\n+class GitMergeInspectBear(GlobalBear):\n+    LANGUAGES = {'Git'}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+\n+    BEAR_DEPS = {GitCommitBear}\n+\n+    def run(self, dependency_results,\n+            allow_git_merge_commit: bool = False,\n+            **kwargs):\n+        \"\"\"\n+        Inspect the HEAD commit to check if it is a\n+        git merge commit and return result accordingly.\n+\n+        :param allow_merge_commit: whether merge commits are\n+                                   allowed or not.\n+        \"\"\"\n+        if allow_git_merge_commit:\n+            return\n+\n+        gitrebase_tutorial_link = (\n+            'http://api.coala.io/en/latest/Developers/Git_Basics.html#rebasing'\n+            )\n+\n+        for result in dependency_results[GitCommitBear.name]:\n+\n+            if re.search(\n+                    r'COMMIT_TYPE\\.merge_commit', str(result.commit_type)):","author":{"login":"refeed","avatarUrl":"https://avatars1.githubusercontent.com/u/20320125?v=4","name":"Rafid Aslam"},"reactions":[],"createdAt":"2018-07-12T07:01:37Z","lastEditedAt":null,"updatedAt":"2018-07-12T07:01:37Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTkyODE0NQ==","url":"https://github.com/coala/coala-bears/pull/2600#discussion_r201928145","bodyText":"allow_git_merge_commit","diffHunk":"@@ -0,0 +1,40 @@\n+import re\n+\n+from bears.vcs.git.GitCommitBear import GitCommitBear\n+from coalib.bears.GlobalBear import GlobalBear\n+from coalib.results.Result import Result\n+\n+\n+class GitMergeInspectBear(GlobalBear):\n+    LANGUAGES = {'Git'}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+\n+    BEAR_DEPS = {GitCommitBear}\n+\n+    def run(self, dependency_results,\n+            allow_git_merge_commit: bool = False,\n+            **kwargs):\n+        \"\"\"\n+        Inspect the HEAD commit to check if it is a\n+        git merge commit and return result accordingly.\n+\n+        :param allow_merge_commit: whether merge commits are","author":{"login":"refeed","avatarUrl":"https://avatars1.githubusercontent.com/u/20320125?v=4","name":"Rafid Aslam"},"reactions":[],"createdAt":"2018-07-12T07:02:39Z","lastEditedAt":null,"updatedAt":"2018-07-12T07:02:39Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTk0OTQwNQ==","url":"https://github.com/coala/coala-bears/pull/2600#discussion_r201949405","bodyText":"Uppercase 'W'","diffHunk":"@@ -0,0 +1,38 @@\n+from bears.vcs.VCSCommitBear import COMMIT_TYPE\n+from bears.vcs.git.GitCommitBear import GitCommitBear\n+from coalib.bears.GlobalBear import GlobalBear\n+from coalib.results.Result import Result\n+\n+\n+class GitMergeInspectBear(GlobalBear):\n+    LANGUAGES = {'Git'}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+\n+    BEAR_DEPS = {GitCommitBear}\n+\n+    def run(self, dependency_results,\n+            allow_git_merge_commit: bool = False,\n+            **kwargs):\n+        \"\"\"\n+        Inspect the HEAD commit to check if it is a\n+        git merge commit and return result accordingly.\n+\n+        :param allow_git_merge_commit: whether merge commits are","author":{"login":"refeed","avatarUrl":"https://avatars1.githubusercontent.com/u/20320125?v=4","name":"Rafid Aslam"},"reactions":[],"createdAt":"2018-07-12T08:25:59Z","lastEditedAt":null,"updatedAt":"2018-07-12T08:25:59Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMjEyMDEzNg==","url":"https://github.com/coala/coala-bears/pull/2600#discussion_r202120136","bodyText":"Make this as a constant inside of the GitMergeInspectBear, e.g GIT_REBASE_TUTORIAL_LINK","diffHunk":"@@ -0,0 +1,38 @@\n+from bears.vcs.VCSCommitBear import COMMIT_TYPE\n+from bears.vcs.git.GitCommitBear import GitCommitBear\n+from coalib.bears.GlobalBear import GlobalBear\n+from coalib.results.Result import Result\n+\n+\n+class GitMergeInspectBear(GlobalBear):\n+    LANGUAGES = {'Git'}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+\n+    BEAR_DEPS = {GitCommitBear}\n+\n+    def run(self, dependency_results,\n+            allow_git_merge_commit: bool = False,\n+            **kwargs):\n+        \"\"\"\n+        Inspect the HEAD commit to check if it is a\n+        git merge commit and return result accordingly.\n+\n+        :param allow_git_merge_commit: Whether merge commits are\n+                                       allowed or not.\n+        \"\"\"\n+        if allow_git_merge_commit:\n+            return\n+\n+        gitrebase_tutorial_link = (","author":{"login":"refeed","avatarUrl":"https://avatars1.githubusercontent.com/u/20320125?v=4","name":"Rafid Aslam"},"reactions":[],"createdAt":"2018-07-12T17:40:19Z","lastEditedAt":null,"updatedAt":"2018-07-12T17:40:19Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMjYzMTU5Nw==","url":"https://github.com/coala/coala-bears/pull/2600#discussion_r202631597","bodyText":"It isnt useful to have a bear which only has a default disabled option -- by default it does nothing.\nLets call this GitLinearCommitBear and remove the allow_git_merge_commit option.\nAdd a parameter for the help message URL, default to\nhttp://www.bitsnbites.eu/a-tidy-linear-git-history/\ncoala will use this bear.\ncoala will change the url to http://api.coala.io/en/latest/Developers/Git_Basics.html#rebasing","diffHunk":"@@ -0,0 +1,38 @@\n+from bears.vcs.VCSCommitBear import COMMIT_TYPE\n+from bears.vcs.git.GitCommitBear import GitCommitBear\n+from coalib.bears.GlobalBear import GlobalBear\n+from coalib.results.Result import Result\n+\n+\n+class GitMergeInspectBear(GlobalBear):","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-16T10:09:17Z","lastEditedAt":null,"updatedAt":"2018-07-16T10:09:17Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk2MTQzOQ==","url":"https://github.com/coala/coala-bears/pull/2600#discussion_r205961439","bodyText":"split into multiple test methods, with method names explaining what they do","diffHunk":"@@ -0,0 +1,95 @@\n+import os\n+import platform\n+import shutil\n+import stat\n+import unittest\n+import unittest.mock\n+from pathlib import Path\n+from queue import Queue\n+from tempfile import mkdtemp\n+\n+from bears.vcs.git.GitCommitMetadataBear import GitCommitMetadataBear\n+from bears.vcs.git.GitLinearCommitBear import GitLinearCommitBear\n+from coalib.misc.Shell import run_shell_command\n+from coalib.settings.Section import Section\n+from coalib.testing.BearTestHelper import generate_skip_decorator\n+from .GitCommitBearTest import GitCommitBearTest\n+\n+\n+@generate_skip_decorator(GitLinearCommitBear)\n+class GitLinearCommitBearTest(unittest.TestCase):\n+\n+    def run_uut(self, *args, **kwargs):\n+        \"\"\"\n+        Runs the unit-under-test (via `self.uut.run()`) and collects the\n+        messages of the yielded results as a list.\n+\n+        :param args:   Positional arguments to forward to the run function.\n+        :param kwargs: Keyword arguments to forward to the run function.\n+        :return:       A list of the message strings.\n+        \"\"\"\n+        dep_bear = GitCommitMetadataBear(None, self.section, Queue())\n+        deps_results = dict(GitCommitMetadataBear=list(dep_bear.run()))\n+        return list(result.message for result in self.uut.run(\n+            deps_results, *args, **kwargs))\n+\n+    def setUp(self):\n+        self.msg_queue = Queue()\n+        self.section = Section('')\n+        self.uut = GitLinearCommitBear(None, self.section, self.msg_queue)\n+\n+        self._old_cwd = os.getcwd()\n+        self.gitdir = mkdtemp()\n+        os.chdir(self.gitdir)\n+        GitCommitBearTest.run_git_command('init')\n+        GitCommitBearTest.run_git_command(\n+            'config', 'user.email coala@coala.io')\n+        GitCommitBearTest.run_git_command('config', 'user.name coala')\n+\n+    @staticmethod\n+    def _windows_rmtree_remove_readonly(func, path, excinfo):\n+        os.chmod(path, stat.S_IWRITE)\n+        func(path)\n+\n+    def tearDown(self):\n+        os.chdir(self._old_cwd)\n+        if platform.system() == 'Windows':\n+            onerror = self._windows_rmtree_remove_readonly\n+        else:\n+            onerror = None\n+        shutil.rmtree(self.gitdir, onerror=onerror)\n+\n+    def test_check_git_merge_commit(self):","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-29T05:40:27Z","lastEditedAt":null,"updatedAt":"2018-07-29T05:40:27Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk2MTQ1Ng==","url":"https://github.com/coala/coala-bears/pull/2600#discussion_r205961456","bodyText":"remove parameter.\n\"GitLinearCommitBear\" never allows merge commits, because then it isnt a linear history.\nupdate docstrings and everything else accordingly.","diffHunk":"@@ -0,0 +1,32 @@\n+from bears.vcs.VCSCommitMetadataBear import COMMIT_TYPE\n+from bears.vcs.git.GitCommitMetadataBear import GitCommitMetadataBear\n+from coalib.bears.GlobalBear import GlobalBear\n+from coalib.results.Result import Result\n+\n+\n+class GitLinearCommitBear(GlobalBear):\n+    LANGUAGES = {'Git'}\n+    AUTHORS = {'The coala developers'}\n+    AUTHORS_EMAILS = {'coala-devel@googlegroups.com'}\n+    LICENSE = 'AGPL-3.0'\n+\n+    BEAR_DEPS = {GitCommitMetadataBear}\n+\n+    def run(self, dependency_results,\n+            git_rebase_help_url: str =\n+            'http://www.bitsnbites.eu/a-tidy-linear-git-history/',\n+            **kwargs):\n+        \"\"\"\n+        Inspect the HEAD commit to check if it is a\n+        git merge commit and return result accordingly.\n+\n+        :param allow_git_merge_commit: Whether merge commits are","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-29T05:41:26Z","lastEditedAt":null,"updatedAt":"2018-07-29T05:41:26Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwODY2MjgwNQ==","url":"https://github.com/coala/coala-bears/pull/2600#issuecomment-408662805","bodyText":"Someone forgot to rebase ! :P","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNzEyODUxNg==","createdAt":"2018-07-29T09:09:17Z","content":"LAUGH","user":{"login":"kriti21","name":"Kriti Rohilla"}}],"createdAt":"2018-07-29T09:07:54Z","lastEditedAt":null,"updatedAt":"2018-07-29T09:07:54Z"}]}}},{"repoOwner":"coala","repoName":"documentation","updatedAtMs":1533151979000,"issue":{"htmlUrl":"https://github.com/coala/documentation/pull/566","number":566,"title":"FAQ.rst:Replace a FAQ","body":"Replace a FAQ about pull requests with how to contribute to coala.\ncloses: #552\n\nFor short term contributors: we understand that getting your commits well\ndefined like we require is a hard task and takes some learning. If you\nlook to help without wanting to contribute long term there's no need\nfor you to learn this. Just drop us a message and we'll take care of brushing\nup your stuff for merge!\nChecklist\n\n I read the commit guidelines and I've followed\nthem.\n I ran coala over my code locally. (All commits have to pass\nindividually. It is not sufficient to have \"fixup commits\" on your PR,\nour bot will still report the issues for the previous commit.) You will\nlikely receive a lot of bot comments and build failures if coala does not\npass on every single commit!\n\nAfter you submit your pull request, DO NOT click the 'Update Branch' button.\nWhen asked for a rebase, consult coala.io/rebase\ninstead.\nPlease consider helping us by reviewing other peoples pull requests as well:\n\npick up any PR at https://coala.io/review\nreview it (check https://coala.io/reviewing for more info)\nif you are sure that it needs work, use corobo mark wip <URL> to get it out\nof the review queue.\n\nThe more you review, the more your score will grow at coala.io and we will\nreview your PRs faster!","comments":4,"createdAt":"2018-07-26T11:41:45Z","updatedAt":"2018-08-01T19:32:59Z","closedAt":null,"state":"open","user":{"login":"sarthakchakerverty","avatarUrl":"https://avatars3.githubusercontent.com/u/31766358?v=4"},"owner":{"login":"sarthakchakerverty","avatarUrl":"https://avatars3.githubusercontent.com/u/31766358?v=4"},"labels":[{"name":"process/wip","color":"fbca04"},{"name":"size/XS","color":"0e8a16"}],"pullRequest":{"htmlUrl":"https://github.com/coala/documentation/pull/566","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQwODQwMDc1Ng==","url":"https://github.com/coala/documentation/pull/566#issuecomment-408400756","bodyText":"@chhabrabhishek made the requested changes.","diffHunk":null,"author":{"login":"sarthakchakerverty","avatarUrl":"https://avatars3.githubusercontent.com/u/31766358?v=4","name":"Sarthak Chakerverty"},"createdAt":"2018-07-27T12:09:49Z","lastEditedAt":null,"updatedAt":"2018-07-27T12:09:49Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwODY2MzM0Mg==","url":"https://github.com/coala/documentation/pull/566#issuecomment-408663342","bodyText":"@chhabrabhishek @jayvdb squashed the commits.Please review!","diffHunk":null,"author":{"login":"sarthakchakerverty","avatarUrl":"https://avatars3.githubusercontent.com/u/31766358?v=4","name":"Sarthak Chakerverty"},"createdAt":"2018-07-29T09:18:37Z","lastEditedAt":null,"updatedAt":"2018-07-29T09:18:37Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwODk2MzYwNg==","url":"https://github.com/coala/documentation/pull/566#issuecomment-408963606","bodyText":"@jayvdb Commit message is now editted.","diffHunk":null,"author":{"login":"sarthakchakerverty","avatarUrl":"https://avatars3.githubusercontent.com/u/31766358?v=4","name":"Sarthak Chakerverty"},"createdAt":"2018-07-30T18:27:57Z","lastEditedAt":null,"updatedAt":"2018-07-30T18:27:57Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwOTY5NDcxMg==","url":"https://github.com/coala/documentation/pull/566#issuecomment-409694712","bodyText":"At least two things wrong with your commit message.","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-08-01T19:32:51Z","lastEditedAt":null,"updatedAt":"2018-08-01T19:32:51Z"}]}}},{"repoOwner":"coala","repoName":"documentation","updatedAtMs":1532083203000,"issue":{"htmlUrl":"https://github.com/coala/documentation/pull/565","number":565,"title":"FAQ.rst: Add question \"What is a bear anyway?\"","body":"This adds a brief description on what a bear is.\nCloses #284\n\nFor short term contributors: we understand that getting your commits well\ndefined like we require is a hard task and takes some learning. If you\nlook to help without wanting to contribute long term there's no need\nfor you to learn this. Just drop us a message and we'll take care of brushing\nup your stuff for merge!\nChecklist\n\n I read the commit guidelines and I've followed\nthem.\n I ran coala over my code locally. (All commits have to pass\nindividually. It is not sufficient to have \"fixup commits\" on your PR,\nour bot will still report the issues for the previous commit.) You will\nlikely receive a lot of bot comments and build failures if coala does not\npass on every single commit!\n\nAfter you submit your pull request, DO NOT click the 'Update Branch' button.\nWhen asked for a rebase, consult coala.io/rebase\ninstead.\nPlease consider helping us by reviewing other peoples pull requests as well:\n\npick up any PR at https://coala.io/review\nreview it (check https://coala.io/reviewing for more info)\nif you are sure that it needs work, use corobo mark wip <URL> to get it out\nof the review queue.\n\nThe more you review, the more your score will grow at coala.io and we will\nreview your PRs faster!","comments":8,"createdAt":"2018-07-07T07:34:16Z","updatedAt":"2018-07-20T10:40:03Z","closedAt":"2018-07-19T06:49:04Z","state":"merged","user":{"login":"sarthakchakerverty","avatarUrl":"https://avatars3.githubusercontent.com/u/31766358?v=4"},"owner":{"login":"sarthakchakerverty","avatarUrl":"https://avatars3.githubusercontent.com/u/31766358?v=4"},"assignee":{"login":"sarthakchakerverty","avatarUrl":"https://avatars3.githubusercontent.com/u/31766358?v=4"},"labels":[{"name":"difficulty/newcomer","color":"bfd4f2"},{"name":"process/pending review","color":"c2e0c6"},{"name":"size/XS","color":"0e8a16"}],"pullRequest":{"htmlUrl":"https://github.com/coala/documentation/pull/565","comments":[{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDgwNzQzMw==","url":"https://github.com/coala/documentation/pull/565#discussion_r200807433","bodyText":"I would describe a bear more like a plugin.\nlints => lint issues","diffHunk":"@@ -55,6 +55,14 @@ There are also generic bears, which can be applied language independently on\n your code. Their capabilities and information can be seen\n `here <https://coala.io/#/languages>`__.\n \n+What is a bear anyway?\n+----------------------\n+\n+A bear is a routine that is used by a coala package to check for lints and","author":{"login":"ksdme","avatarUrl":"https://avatars1.githubusercontent.com/u/12156014?v=4","name":"Kilari Teja"},"reactions":[],"createdAt":"2018-07-07T09:26:33Z","lastEditedAt":null,"updatedAt":"2018-07-07T09:26:33Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDgwNzQ1Ng==","url":"https://github.com/coala/documentation/pull/565#discussion_r200807456","bodyText":"optionally fix if automatic fixes are available","diffHunk":"@@ -55,6 +55,14 @@ There are also generic bears, which can be applied language independently on\n your code. Their capabilities and information can be seen\n `here <https://coala.io/#/languages>`__.\n \n+What is a bear anyway?\n+----------------------\n+\n+A bear is a routine that is used by a coala package to check for lints and\n+fix issues if found. A group of these routines is used for defining certain","author":{"login":"ksdme","avatarUrl":"https://avatars1.githubusercontent.com/u/12156014?v=4","name":"Kilari Teja"},"reactions":[],"createdAt":"2018-07-07T09:27:16Z","lastEditedAt":null,"updatedAt":"2018-07-07T09:27:16Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDgwNzUyNw==","url":"https://github.com/coala/documentation/pull/565#discussion_r200807527","bodyText":"I think you should change this and make it more straightforward to understand. You need not define the internals of bears, a bear itself should be considered as a rule set for analysis instead of its routines.\nAlso, maybe mention that bears are user configurable.","diffHunk":"@@ -55,6 +55,14 @@ There are also generic bears, which can be applied language independently on\n your code. Their capabilities and information can be seen\n `here <https://coala.io/#/languages>`__.\n \n+What is a bear anyway?\n+----------------------\n+\n+A bear is a routine that is used by a coala package to check for lints and\n+fix issues if found. A group of these routines is used for defining certain\n+quality requirements in various languages and these checking routines are","author":{"login":"ksdme","avatarUrl":"https://avatars1.githubusercontent.com/u/12156014?v=4","name":"Kilari Teja"},"reactions":[],"createdAt":"2018-07-07T09:28:44Z","lastEditedAt":null,"updatedAt":"2018-07-07T09:28:44Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDgwNzYxNw==","url":"https://github.com/coala/documentation/pull/565#discussion_r200807617","bodyText":"@ksdme I have confirmed this definition of bear from @jayvdb . And he approved that.","diffHunk":"@@ -55,6 +55,14 @@ There are also generic bears, which can be applied language independently on\n your code. Their capabilities and information can be seen\n `here <https://coala.io/#/languages>`__.\n \n+What is a bear anyway?\n+----------------------\n+\n+A bear is a routine that is used by a coala package to check for lints and\n+fix issues if found. A group of these routines is used for defining certain\n+quality requirements in various languages and these checking routines are","author":{"login":"sarthakchakerverty","avatarUrl":"https://avatars3.githubusercontent.com/u/31766358?v=4","name":"Sarthak Chakerverty"},"reactions":[],"createdAt":"2018-07-07T09:33:02Z","lastEditedAt":null,"updatedAt":"2018-07-07T09:33:02Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDgwNzY5NQ==","url":"https://github.com/coala/documentation/pull/565#discussion_r200807695","bodyText":"I would still recommend lints => lint issues and optionally fix if automatic fixes are available.","diffHunk":"@@ -55,6 +55,14 @@ There are also generic bears, which can be applied language independently on\n your code. Their capabilities and information can be seen\n `here <https://coala.io/#/languages>`__.\n \n+What is a bear anyway?\n+----------------------\n+\n+A bear is a routine that is used by a coala package to check for lints and\n+fix issues if found. A group of these routines is used for defining certain\n+quality requirements in various languages and these checking routines are","author":{"login":"ksdme","avatarUrl":"https://avatars1.githubusercontent.com/u/12156014?v=4","name":"Kilari Teja"},"reactions":[],"createdAt":"2018-07-07T09:36:13Z","lastEditedAt":null,"updatedAt":"2018-07-07T09:36:13Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDgxMDE5Mw==","url":"https://github.com/coala/documentation/pull/565#discussion_r200810193","bodyText":"Just noting that my approval was only that what you had written was good.  But we have a team of developers who can help fine tune the wording for you ;-)","diffHunk":"@@ -55,6 +55,14 @@ There are also generic bears, which can be applied language independently on\n your code. Their capabilities and information can be seen\n `here <https://coala.io/#/languages>`__.\n \n+What is a bear anyway?\n+----------------------\n+\n+A bear is a routine that is used by a coala package to check for lints and\n+fix issues if found. A group of these routines is used for defining certain\n+quality requirements in various languages and these checking routines are","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-07T11:44:22Z","lastEditedAt":null,"updatedAt":"2018-07-07T11:44:22Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTA1MjIyMA==","url":"https://github.com/coala/documentation/pull/565#discussion_r201052220","bodyText":"My suggestion would be to change\n\nfind various others on the internet => easily write your own","diffHunk":"@@ -55,6 +55,15 @@ There are also generic bears, which can be applied language independently on\n your code. Their capabilities and information can be seen\n `here <https://coala.io/#/languages>`__.\n \n+What is a bear anyway?\n+----------------------\n+\n+A bear is a set of rules that is used by coala packages to check for\n+lint issues and fix them if found. A bear is used for defining certain\n+quality requirements in various languages. While many of these\n+plugins(bears) for various languages are shipped along with coala,\n+you can find various others on the internet.","author":{"login":"ksdme","avatarUrl":"https://avatars1.githubusercontent.com/u/12156014?v=4","name":"Kilari Teja"},"reactions":[],"createdAt":"2018-07-09T15:47:23Z","lastEditedAt":null,"updatedAt":"2018-07-09T15:47:23Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTA1NjY3MA==","url":"https://github.com/coala/documentation/pull/565#discussion_r201056670","bodyText":"I think plural would be better since it a bear can have multiple lint checks in place or just one so change this to check -> check(s)","diffHunk":"@@ -55,6 +55,15 @@ There are also generic bears, which can be applied language independently on\n your code. Their capabilities and information can be seen\n `here <https://coala.io/#/languages>`__.\n \n+What is a bear anyway?\n+----------------------\n+\n+A bear is a set of rules that is used by coala packages to check for","author":{"login":"palash25","avatarUrl":"https://avatars0.githubusercontent.com/u/21367710?v=4","name":"Palash Nigam"},"reactions":[],"createdAt":"2018-07-09T15:59:24Z","lastEditedAt":null,"updatedAt":"2018-07-09T15:59:24Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTIyMjMxNA==","url":"https://github.com/coala/documentation/pull/565#discussion_r201222314","bodyText":"Is packages a right word for coala?","diffHunk":"@@ -55,6 +55,15 @@ There are also generic bears, which can be applied language independently on\n your code. Their capabilities and information can be seen\n `here <https://coala.io/#/languages>`__.\n \n+What is a bear anyway?\n+----------------------\n+\n+A bear is a set of rules that is used by coala packages to check for","author":{"login":"sangamcse","avatarUrl":"https://avatars2.githubusercontent.com/u/26381717?v=4","name":"Sangam Kumar"},"reactions":[],"createdAt":"2018-07-10T05:42:03Z","lastEditedAt":null,"updatedAt":"2018-07-10T05:42:03Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTIyMjc3OA==","url":"https://github.com/coala/documentation/pull/565#discussion_r201222778","bodyText":"Also, to do some analysis is better than to check, IMO. A bear is meant to do some analysis on the source code. It can check your code for potential problems, calculate metrics and even provide corrections for your code. A bear contains the actual subroutine that is responsible for checking code for certain specifications.","diffHunk":"@@ -55,6 +55,15 @@ There are also generic bears, which can be applied language independently on\n your code. Their capabilities and information can be seen\n `here <https://coala.io/#/languages>`__.\n \n+What is a bear anyway?\n+----------------------\n+\n+A bear is a set of rules that is used by coala packages to check for","author":{"login":"sangamcse","avatarUrl":"https://avatars2.githubusercontent.com/u/26381717?v=4","name":"Sangam Kumar"},"reactions":[],"createdAt":"2018-07-10T05:45:45Z","lastEditedAt":"2018-07-10T05:46:21Z","updatedAt":"2018-07-10T05:46:21Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTIzNTcwNA==","url":"https://github.com/coala/documentation/pull/565#discussion_r201235704","bodyText":"@ksdme @palash25 @sangamcse  consider the definition(after suggested changes) stated below:\nA bear is a routine that is used by a coala package to check your code for\nlint issues. A group of these routines(bears) is used for defining certain\nquality requirements in various languages. A bear can analyse code for potential problems, calculate metrics and even provide corrections for your code.\nWhile many of these bears for various languages are shipped along with coala,\nyou can easily write some of your own.","diffHunk":"@@ -55,6 +55,15 @@ There are also generic bears, which can be applied language independently on\n your code. Their capabilities and information can be seen\n `here <https://coala.io/#/languages>`__.\n \n+What is a bear anyway?\n+----------------------\n+\n+A bear is a set of rules that is used by coala packages to check for","author":{"login":"sarthakchakerverty","avatarUrl":"https://avatars3.githubusercontent.com/u/31766358?v=4","name":"Sarthak Chakerverty"},"reactions":[],"createdAt":"2018-07-10T07:01:04Z","lastEditedAt":"2018-07-10T07:14:51Z","updatedAt":"2018-07-10T07:14:51Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTIzNzQzNw==","url":"https://github.com/coala/documentation/pull/565#discussion_r201237437","bodyText":"@sangamcse would 'libraries' be a better replacement for 'packages' ?","diffHunk":"@@ -55,6 +55,15 @@ There are also generic bears, which can be applied language independently on\n your code. Their capabilities and information can be seen\n `here <https://coala.io/#/languages>`__.\n \n+What is a bear anyway?\n+----------------------\n+\n+A bear is a set of rules that is used by coala packages to check for","author":{"login":"sarthakchakerverty","avatarUrl":"https://avatars3.githubusercontent.com/u/31766358?v=4","name":"Sarthak Chakerverty"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNjIyMDY4Nw==","createdAt":"2018-07-10T07:15:58Z","content":"THUMBS_DOWN","user":{"login":"ksdme","name":"Kilari Teja"}},{"id":"MDg6UmVhY3Rpb24yNjIyMTQ0NQ==","createdAt":"2018-07-10T07:34:45Z","content":"THUMBS_DOWN","user":{"login":"palash25","name":"Palash Nigam"}}],"createdAt":"2018-07-10T07:09:08Z","lastEditedAt":null,"updatedAt":"2018-07-10T07:09:08Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTI0MzEyNA==","url":"https://github.com/coala/documentation/pull/565#discussion_r201243124","bodyText":"Why not just 'coala' like: a bear is a set of rules used by coala or a bear is a routine used by coala to check ...","diffHunk":"@@ -55,6 +55,15 @@ There are also generic bears, which can be applied language independently on\n your code. Their capabilities and information can be seen\n `here <https://coala.io/#/languages>`__.\n \n+What is a bear anyway?\n+----------------------\n+\n+A bear is a set of rules that is used by coala packages to check for","author":{"login":"palash25","avatarUrl":"https://avatars0.githubusercontent.com/u/21367710?v=4","name":"Palash Nigam"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNjIyMzA2Ng==","createdAt":"2018-07-10T08:10:17Z","content":"THUMBS_UP","user":{"login":"ksdme","name":"Kilari Teja"}},{"id":"MDg6UmVhY3Rpb24yNjIyMzk3Mg==","createdAt":"2018-07-10T08:27:49Z","content":"THUMBS_UP","user":{"login":"sarthakchakerverty","name":"Sarthak Chakerverty"}}],"createdAt":"2018-07-10T07:34:38Z","lastEditedAt":null,"updatedAt":"2018-07-10T07:34:38Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTgyNjk1MQ==","url":"https://github.com/coala/documentation/pull/565#discussion_r201826951","bodyText":"for your code sounds redundant, but I think it is acceptable.","diffHunk":"@@ -55,6 +55,16 @@ There are also generic bears, which can be applied language independently on\n your code. Their capabilities and information can be seen\n `here <https://coala.io/#/languages>`__.\n \n+What is a bear anyway?\n+----------------------\n+\n+A bear is a routine that is used by coala to check your code\n+for lint issues. A group of these routines(bears) is used for defining\n+certain quality requirements in various languages. A bear can analyse code\n+for potential problems, calculate metrics and even provide corrections for\n+your code. While many of these bears for various languages are shipped along","author":{"login":"ksdme","avatarUrl":"https://avatars1.githubusercontent.com/u/12156014?v=4","name":"Kilari Teja"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNjQxNTUxMA==","createdAt":"2018-07-13T08:57:37Z","content":"THUMBS_UP","user":{"login":"sarthakchakerverty","name":"Sarthak Chakerverty"}}],"createdAt":"2018-07-11T20:21:42Z","lastEditedAt":null,"updatedAt":"2018-07-11T20:21:42Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwMzIzMTg5MQ==","url":"https://github.com/coala/documentation/pull/565#issuecomment-403231891","bodyText":"@jayvdb can please suggest some member(s) that I could consult for the same?","diffHunk":null,"author":{"login":"sarthakchakerverty","avatarUrl":"https://avatars3.githubusercontent.com/u/31766358?v=4","name":"Sarthak Chakerverty"},"reactions":[],"createdAt":"2018-07-07T17:39:33Z","lastEditedAt":null,"updatedAt":"2018-07-07T17:39:33Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwMzMwMzk3OA==","url":"https://github.com/coala/documentation/pull/565#issuecomment-403303978","bodyText":"@jayvdb I have made the requested changes.Please review.","diffHunk":null,"author":{"login":"sarthakchakerverty","avatarUrl":"https://avatars3.githubusercontent.com/u/31766358?v=4","name":"Sarthak Chakerverty"},"reactions":[],"createdAt":"2018-07-08T17:46:10Z","lastEditedAt":null,"updatedAt":"2018-07-08T17:46:10Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwNDA4MDI3Mw==","url":"https://github.com/coala/documentation/pull/565#issuecomment-404080273","bodyText":"Made the requesed changes @jayvdb .But,Gitmate is down.What should I do?","diffHunk":null,"author":{"login":"sarthakchakerverty","avatarUrl":"https://avatars3.githubusercontent.com/u/31766358?v=4","name":"Sarthak Chakerverty"},"reactions":[],"createdAt":"2018-07-11T07:59:46Z","lastEditedAt":null,"updatedAt":"2018-07-11T07:59:46Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwNjU2MzAxNg==","url":"https://github.com/coala/documentation/pull/565#issuecomment-406563016","bodyText":"Thank you @jayvdb .","diffHunk":null,"author":{"login":"sarthakchakerverty","avatarUrl":"https://avatars3.githubusercontent.com/u/31766358?v=4","name":"Sarthak Chakerverty"},"reactions":[],"createdAt":"2018-07-20T10:40:03Z","lastEditedAt":null,"updatedAt":"2018-07-20T10:40:03Z"}]}}},{"repoOwner":"coala","repoName":"documentation","updatedAtMs":1532082814000,"issue":{"htmlUrl":"https://github.com/coala/documentation/pull/563","number":563,"title":".gitignore: Use template","body":"For short term contributors: we understand that getting your commits well\ndefined like we require is a hard task and takes some learning. If you\nlook to help without wanting to contribute long term there's no need\nfor you to learn this. Just drop us a message and we'll take care of brushing\nup your stuff for merge!\nChecklist\n\n I read the commit guidelines and I've followed\nthem.\n I ran coala over my code locally. (All commits have to pass\nindividually. It is not sufficient to have \"fixup commits\" on your PR,\nour bot will still report the issues for the previous commit.) You will\nlikely receive a lot of bot comments and build failures if coala does not\npass on every single commit!\n\nAfter you submit your pull request, DO NOT click the 'Update Branch' button.\nWhen asked for a rebase, consult coala.io/rebase\ninstead.\nPlease consider helping us by reviewing other peoples pull requests as well:\n\npick up any PR at https://coala.io/review\nreview it (check https://coala.io/reviewing for more info)\nif you are sure that it needs work, use corobo mark wip <URL> to get it out\nof the review queue.\n\nThe more you review, the more your score will grow at coala.io and we will\nreview your PRs faster!","comments":7,"createdAt":"2018-07-03T23:06:12Z","updatedAt":"2018-07-20T10:33:34Z","closedAt":"2018-07-20T10:32:49Z","state":"merged","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"process/pending review","color":"c2e0c6"},{"name":"size/M","color":"fbca04"}],"pullRequest":{"htmlUrl":"https://github.com/coala/documentation/pull/563","comments":[]}}},{"repoOwner":"coala","repoName":"corobo","updatedAtMs":1533709981000,"issue":{"htmlUrl":"https://github.com/coala/corobo/pull/608","number":608,"title":"LabHubTestCase: LabHub testing setup ","body":"The role of LabHubTestCase is to do the setUp\nnecessary for testing a plugin which depends\non LabHub plugin. It adapts the tests for\nGitStats plugins to use the LabHubTestCase.\nCloses #607","comments":3,"createdAt":"2018-08-07T19:14:54Z","updatedAt":"2018-08-08T06:33:01Z","closedAt":null,"state":"open","user":{"login":"nvzard","avatarUrl":"https://avatars0.githubusercontent.com/u/19310512?v=4"},"owner":{"login":"nvzard","avatarUrl":"https://avatars0.githubusercontent.com/u/19310512?v=4"},"labels":[{"name":"area/tests","color":"5facd8"},{"name":"bug","color":"ee0701"},{"name":"process/pending review","color":"bfe5bf"},{"name":"size/S","color":"ededed"}],"pullRequest":{"htmlUrl":"https://github.com/coala/corobo/pull/608","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQxMTE5NzU0Mw==","url":"https://github.com/coala/corobo/pull/608#issuecomment-411197543","bodyText":"Yes it was possible to include LabHub also, but Ban is not dependent on labhub. It does not require LabHubTestBase.","diffHunk":null,"author":{"login":"nvzard","avatarUrl":"https://avatars0.githubusercontent.com/u/19310512?v=4","name":"Nitanshu"},"createdAt":"2018-08-07T20:49:08Z","lastEditedAt":null,"updatedAt":"2018-08-07T20:49:08Z"}]}}},{"repoOwner":"coala","repoName":"corobo","updatedAtMs":1533579392000,"issue":{"htmlUrl":"https://github.com/coala/corobo/pull/605","number":605,"title":"nevermind.py: Add caret in regex pattern","body":"Add caret in regex pattern so that 'corobo nm' and 'corobo nevermind'\nare matched only, and only then corobo says \"I'm sorry :(\".\nThus, corobo would not respond with a sorry for commands where nm\nor nevermind appear anywhere in the command.\nFixes #519\nReviewers Checklist\n\n Appropriate logging is done.\n Appropriate error responses.\n Handle every possible exception.\n Make sure there is a docstring in the command functions. Hint: Lookout for\nbotcmd and re_botcmd decorators.\n See that 100% coverage is there.\n See to it that mocking is not done where it is not necessary.","comments":10,"createdAt":"2018-08-05T19:12:24Z","updatedAt":"2018-08-06T18:16:32Z","closedAt":"2018-08-06T17:44:05Z","state":"closed","user":{"login":"bhavya17037","avatarUrl":"https://avatars0.githubusercontent.com/u/35334585?v=4"},"owner":{"login":"bhavya17037","avatarUrl":"https://avatars0.githubusercontent.com/u/35334585?v=4"},"assignee":{"login":"bhavya17037","avatarUrl":"https://avatars0.githubusercontent.com/u/35334585?v=4"},"labels":[{"name":"bug","color":"ee0701"},{"name":"difficulty/low","color":"207de5"},{"name":"process/pending review","color":"bfe5bf"},{"name":"size/XS","color":"ededed"}],"pullRequest":{"htmlUrl":"https://github.com/coala/corobo/pull/605","comments":[{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzk1MTU2OA==","url":"https://github.com/coala/corobo/pull/605#discussion_r207951568","bodyText":"A better way r'^(?:nm|nevermind)$'","diffHunk":"@@ -8,7 +8,7 @@ class Nevermind(BotPlugin):\n     Doesn't mind\n     \"\"\"\n \n-    @re_botcmd(pattern=r'(nm)|(nevermind)', flags=re.IGNORECASE)\n+    @re_botcmd(pattern=r'^(nm)$|^(nevermind)$', flags=re.IGNORECASE)","author":{"login":"Vamshi99","avatarUrl":"https://avatars2.githubusercontent.com/u/20969586?v=4","name":"Vamshi Krishna"},"createdAt":"2018-08-06T16:23:10Z","lastEditedAt":null,"updatedAt":"2018-08-06T16:23:10Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQxMDU2Mjc4Mg==","url":"https://github.com/coala/corobo/pull/605#issuecomment-410562782","bodyText":"See https://github.com/coala/corobo/blob/master/tests/nevermind_test.py","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-08-06T01:07:27Z","lastEditedAt":null,"updatedAt":"2018-08-06T01:07:27Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQxMDU5NTMwMw==","url":"https://github.com/coala/corobo/pull/605#issuecomment-410595303","bodyText":"@jayvdb what does \"!\" In the beginning of \"nevermind\" mean in the test file?","diffHunk":null,"author":{"login":"bhavya17037","avatarUrl":"https://avatars0.githubusercontent.com/u/35334585?v=4","name":"Bhavya Srivastava"},"createdAt":"2018-08-06T05:45:27Z","lastEditedAt":null,"updatedAt":"2018-08-06T05:45:27Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQxMDYwODgwMA==","url":"https://github.com/coala/corobo/pull/605#issuecomment-410608800","bodyText":"@bhavya17037  check this out http://errbot.io/en/latest/user_guide/plugin_development/testing.html","diffHunk":null,"author":{"login":"RaiVaibhav","avatarUrl":"https://avatars3.githubusercontent.com/u/22278438?v=4","name":"Vaibhav Rai"},"createdAt":"2018-08-06T07:04:01Z","lastEditedAt":null,"updatedAt":"2018-08-06T07:04:01Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQxMDYzMTA1MA==","url":"https://github.com/coala/corobo/pull/605#issuecomment-410631050","bodyText":"That is 'BOT_PREFIX' , just like we use 'corobo' as our bot's prefix. Go\nthrough the documentation and you'll understand.\n…\nOn Mon 6 Aug, 2018, 11:15 AM Bhavya Srivastava, ***@***.***> wrote:\n @jayvdb <https://github.com/jayvdb> what does \"!\" In the beginning of\n \"nevermind\" mean in the test file?\n\n —\n You are receiving this because you commented.\n Reply to this email directly, view it on GitHub\n <#605 (comment)>, or mute\n the thread\n <https://github.com/notifications/unsubscribe-auth/ASansMihYVRaJcVouVKzrF6yhTWiFAxQks5uN9f4gaJpZM4Vvf3r>\n .","diffHunk":null,"author":{"login":"nvzard","avatarUrl":"https://avatars0.githubusercontent.com/u/19310512?v=4","name":"Nitanshu"},"createdAt":"2018-08-06T08:34:21Z","lastEditedAt":null,"updatedAt":"2018-08-06T08:34:21Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQxMDc2NzE3OA==","url":"https://github.com/coala/corobo/pull/605#issuecomment-410767178","bodyText":"@bhavya17037 You have multiple commits, squash all your commits into a single one, refer http://api.coala.io/en/latest/Developers/Git_Basics.html#squashing-your-commits, don't close this PR. Also, fix errors reported by coala.","diffHunk":null,"author":{"login":"Vamshi99","avatarUrl":"https://avatars2.githubusercontent.com/u/20969586?v=4","name":"Vamshi Krishna"},"createdAt":"2018-08-06T16:26:40Z","lastEditedAt":null,"updatedAt":"2018-08-06T16:26:40Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQxMDc5ODcxNw==","url":"https://github.com/coala/corobo/pull/605#issuecomment-410798717","bodyText":"don't close this PR\n\n@bhavya17037 Please read what I have said 😄","diffHunk":null,"author":{"login":"Vamshi99","avatarUrl":"https://avatars2.githubusercontent.com/u/20969586?v=4","name":"Vamshi Krishna"},"createdAt":"2018-08-06T18:05:53Z","lastEditedAt":null,"updatedAt":"2018-08-06T18:05:53Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQxMDgwMjI1Ng==","url":"https://github.com/coala/corobo/pull/605#issuecomment-410802256","bodyText":"@Vamshi99 Oh no im so sorry! :(\nI have made another pull request with the correct and final changes!Could you please review it? :)\n#606","diffHunk":null,"author":{"login":"bhavya17037","avatarUrl":"https://avatars0.githubusercontent.com/u/35334585?v=4","name":"Bhavya Srivastava"},"createdAt":"2018-08-06T18:16:32Z","lastEditedAt":"2018-08-06T18:17:06Z","updatedAt":"2018-08-06T18:17:06Z"}]}}},{"repoOwner":"coala","repoName":"corobo","updatedAtMs":1533648272000,"issue":{"htmlUrl":"https://github.com/coala/corobo/pull/606","number":606,"title":"nevermind.py: Change regex pattern","body":"Change regex pattern so that corobo only apologizes\nwhen \"corobo nm\" or \"corobo nevermind\" are used.\nAlso add unit tests for the same\nFixes #519\nReviewers Checklist\n\n Appropriate logging is done.\n Appropriate error responses.\n Handle every possible exception.\n Make sure there is a docstring in the command functions. Hint: Lookout for\nbotcmd and re_botcmd decorators.\n See that 100% coverage is there.\n See to it that mocking is not done where it is not necessary.","comments":6,"createdAt":"2018-08-06T18:10:29Z","updatedAt":"2018-08-07T13:24:32Z","closedAt":"2018-08-07T13:10:23Z","state":"merged","user":{"login":"bhavya17037","avatarUrl":"https://avatars0.githubusercontent.com/u/35334585?v=4"},"owner":{"login":"bhavya17037","avatarUrl":"https://avatars0.githubusercontent.com/u/35334585?v=4"},"assignee":{"login":"bhavya17037","avatarUrl":"https://avatars0.githubusercontent.com/u/35334585?v=4"},"labels":[{"name":"bug","color":"ee0701"},{"name":"difficulty/low","color":"207de5"},{"name":"process/approved","color":"009800"},{"name":"size/XS","color":"ededed"}],"pullRequest":{"htmlUrl":"https://github.com/coala/corobo/pull/606","comments":[{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODA5Nzc2NA==","url":"https://github.com/coala/corobo/pull/606#discussion_r208097764","bodyText":"Unrelated change?","diffHunk":"@@ -15,9 +15,6 @@ class Coatils(BotPlugin):\n     Various coala related utilities, exposing the REST API, etc.\n     \"\"\"\n \n-    def __init__(self, bot, name=None):","author":{"login":"Vamshi99","avatarUrl":"https://avatars2.githubusercontent.com/u/20969586?v=4","name":"Vamshi Krishna"},"createdAt":"2018-08-07T04:48:16Z","lastEditedAt":null,"updatedAt":"2018-08-07T04:48:16Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODEwMDMwMQ==","url":"https://github.com/coala/corobo/pull/606#discussion_r208100301","bodyText":"Remove this change from the file and do git commit --amend to modify the commit(do not use git commit)","diffHunk":"@@ -15,9 +15,6 @@ class Coatils(BotPlugin):\n     Various coala related utilities, exposing the REST API, etc.\n     \"\"\"\n \n-    def __init__(self, bot, name=None):","author":{"login":"Vamshi99","avatarUrl":"https://avatars2.githubusercontent.com/u/20969586?v=4","name":"Vamshi Krishna"},"createdAt":"2018-08-07T05:09:46Z","lastEditedAt":null,"updatedAt":"2018-08-07T05:09:46Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODEwMTM3MA==","url":"https://github.com/coala/corobo/pull/606#discussion_r208101370","bodyText":"But this change is already in corobo's \"coatils.py\" (master)","diffHunk":"@@ -15,9 +15,6 @@ class Coatils(BotPlugin):\n     Various coala related utilities, exposing the REST API, etc.\n     \"\"\"\n \n-    def __init__(self, bot, name=None):","author":{"login":"bhavya17037","avatarUrl":"https://avatars0.githubusercontent.com/u/35334585?v=4","name":"Bhavya Srivastava"},"createdAt":"2018-08-07T05:18:40Z","lastEditedAt":null,"updatedAt":"2018-08-07T05:18:40Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODEwMTc4NQ==","url":"https://github.com/coala/corobo/pull/606#discussion_r208101785","bodyText":"You need to fetch that change from upstream repo(master) by performing a rebase, refer http://api.coala.io/en/latest/Developers/Git_Basics.html#rebasing","diffHunk":"@@ -15,9 +15,6 @@ class Coatils(BotPlugin):\n     Various coala related utilities, exposing the REST API, etc.\n     \"\"\"\n \n-    def __init__(self, bot, name=None):","author":{"login":"Vamshi99","avatarUrl":"https://avatars2.githubusercontent.com/u/20969586?v=4","name":"Vamshi Krishna"},"createdAt":"2018-08-07T05:22:32Z","lastEditedAt":null,"updatedAt":"2018-08-07T05:22:32Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQxMDgxMzQ1OQ==","url":"https://github.com/coala/corobo/pull/606#issuecomment-410813459","bodyText":"@jayvdb\nI will rebase in a while. Dont worry","diffHunk":null,"author":{"login":"bhavya17037","avatarUrl":"https://avatars0.githubusercontent.com/u/35334585?v=4","name":"Bhavya Srivastava"},"createdAt":"2018-08-06T18:50:09Z","lastEditedAt":null,"updatedAt":"2018-08-06T18:50:09Z"}]}}},{"repoOwner":"coala","repoName":"corobo","updatedAtMs":1533632802000,"issue":{"htmlUrl":"https://github.com/coala/corobo/pull/597","number":597,"title":"[WIP] DefaultConfigMixin: Modify implementation","body":"Store the default values in CONFIG_TEMPLATE and\nthen allow a subset of those config variables\noverridden in the config.py's DEFAULT_CONFIG.\nCloses #596","comments":3,"createdAt":"2018-08-04T14:30:20Z","updatedAt":"2018-08-07T09:06:42Z","closedAt":null,"state":"open","user":{"login":"nvzard","avatarUrl":"https://avatars0.githubusercontent.com/u/19310512?v=4"},"owner":{"login":"nvzard","avatarUrl":"https://avatars0.githubusercontent.com/u/19310512?v=4"},"assignee":{"login":"nvzard","avatarUrl":"https://avatars0.githubusercontent.com/u/19310512?v=4"},"labels":[{"name":"area/ci","color":"ab04e8"},{"name":"area/config","color":"60a1db"},{"name":"area/labhub","color":"63ccf9"},{"name":"difficulty/low","color":"207de5"},{"name":"enhancement","color":"84b6eb"},{"name":"importance/low","color":"f9d0c4"},{"name":"importance/medium","color":"ddba61"},{"name":"process/wip","color":"fbca04"},{"name":"size/S","color":"ededed"}],"pullRequest":{"htmlUrl":"https://github.com/coala/corobo/pull/597","comments":[{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzcxNDg2MQ==","url":"https://github.com/coala/corobo/pull/597#discussion_r207714861","bodyText":"Why change from 500 to 50?","diffHunk":"@@ -38,8 +38,7 @@ def setUp(self):\n         extra_config = {\n             'DEFAULT_CONFIG': {\n                 'SpammingAlert': {\n-                    'MAX_MSG_LEN': 500,\n-                    'MAX_LINES': 5,\n+                    'MAX_MSG_LEN': 50,","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNzQ1NjYzMQ==","createdAt":"2018-08-04T19:52:13Z","content":"THUMBS_UP","user":{"login":"nvzard","name":"Nitanshu"}}],"createdAt":"2018-08-04T17:47:36Z","lastEditedAt":null,"updatedAt":"2018-08-04T17:47:36Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzcxNzkxNg==","url":"https://github.com/coala/corobo/pull/597#discussion_r207717916","bodyText":"misjudgement","diffHunk":"@@ -38,8 +38,7 @@ def setUp(self):\n         extra_config = {\n             'DEFAULT_CONFIG': {\n                 'SpammingAlert': {\n-                    'MAX_MSG_LEN': 500,\n-                    'MAX_LINES': 5,\n+                    'MAX_MSG_LEN': 50,","author":{"login":"nvzard","avatarUrl":"https://avatars0.githubusercontent.com/u/19310512?v=4","name":"Nitanshu"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNzQ1NjYzMw==","createdAt":"2018-08-04T19:52:18Z","content":"THUMBS_DOWN","user":{"login":"nvzard","name":"Nitanshu"}}],"createdAt":"2018-08-04T19:52:10Z","lastEditedAt":null,"updatedAt":"2018-08-04T19:52:10Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQxMDQ5MTA2NA==","url":"https://github.com/coala/corobo/pull/597#issuecomment-410491064","bodyText":"I would like to see separate commits included in this PR for all of the configuration upgrades which we need (except for LabHub):\n\n#380\n#381\n#383\n\nAny others?\nOnly by putting them all in here together can we ensure that this is the last change needed to DefaultConfigMixin for your project.","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNzQ2NTYwMw==","createdAt":"2018-08-05T12:50:21Z","content":"THUMBS_UP","user":{"login":"nvzard","name":"Nitanshu"}}],"createdAt":"2018-08-05T02:32:26Z","lastEditedAt":"2018-08-05T02:33:44Z","updatedAt":"2018-08-05T02:33:44Z"}]}}},{"repoOwner":"coala","repoName":"corobo","updatedAtMs":1533450303000,"issue":{"htmlUrl":"https://github.com/coala/corobo/pull/598","number":598,"title":"GitStats: Remove LabHub inheritance","body":"Inheritence was resulting in labhub commands\nbeing triggered twice when used. This creates\ndependency on labhub instead of inheritance.\nFixes #441","comments":5,"createdAt":"2018-08-04T20:58:54Z","updatedAt":"2018-08-05T06:25:03Z","closedAt":"2018-08-05T00:30:32Z","state":"merged","user":{"login":"nvzard","avatarUrl":"https://avatars0.githubusercontent.com/u/19310512?v=4"},"owner":{"login":"nvzard","avatarUrl":"https://avatars0.githubusercontent.com/u/19310512?v=4"},"assignee":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"bug","color":"ee0701"},{"name":"difficulty/medium","color":"0052cc"},{"name":"importance/medium","color":"ddba61"},{"name":"process/approved","color":"009800"},{"name":"size/XS","color":"ededed"}],"pullRequest":{"htmlUrl":"https://github.com/coala/corobo/pull/598","comments":[]}}},{"repoOwner":"coala","repoName":"corobo","updatedAtMs":1533451172000,"issue":{"htmlUrl":"https://github.com/coala/corobo/pull/599","number":599,"title":"Make noisy commands private to org members","body":"Pitchfork command is accessible only by\nmembers of the organization.\nCloses #358","comments":4,"createdAt":"2018-08-04T22:35:10Z","updatedAt":"2018-08-05T06:39:32Z","closedAt":null,"state":"open","user":{"login":"nvzard","avatarUrl":"https://avatars0.githubusercontent.com/u/19310512?v=4"},"owner":{"login":"nvzard","avatarUrl":"https://avatars0.githubusercontent.com/u/19310512?v=4"},"assignee":{"login":"aashraybhandar1","avatarUrl":"https://avatars0.githubusercontent.com/u/12982393?v=4"},"labels":[{"name":"area/security","color":"fc6805"},{"name":"area/ui","color":"dd02cf"},{"name":"difficulty/low","color":"207de5"},{"name":"importance/critical","color":"b60205"},{"name":"process/wip","color":"fbca04"},{"name":"size/XS","color":"ededed"},{"name":"status/blocked","color":"b60205"}],"pullRequest":{"htmlUrl":"https://github.com/coala/corobo/pull/599","comments":[{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzcyMjc4Mw==","url":"https://github.com/coala/corobo/pull/599#discussion_r207722783","bodyText":"why change name?","diffHunk":"@@ -1,6 +1,7 @@\n [Core]\n-name = pitchfork\n+name = Pitchfork","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-08-05T01:00:27Z","lastEditedAt":null,"updatedAt":"2018-08-05T01:00:27Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzcyMjgwMA==","url":"https://github.com/coala/corobo/pull/599#discussion_r207722800","bodyText":"Many of our plugins which be changed to using labhub permissions.\ncreate a LabHubTestCase subclassing CoroboTestCase which does all the setUp necessary for testing a plugin which depends on LabHub.","diffHunk":"@@ -1,9 +1,54 @@\n-pytest_plugins = ['errbot.backends.test']\n-extra_plugin_dir = 'plugins'\n+import github3\n+import IGitt\n+import plugins.labhub\n+import plugins.pitchfork\n \n+from unittest.mock import PropertyMock\n+from unittest.mock import create_autospec\n+from tests.corobo_test_case import CoroboTestCase\n \n-def test(testbot):\n-    testbot.assertCommand('!pitchfork @meet', 'being pitchforked')\n-    testbot.assertCommand('!pitchfork @meet down to hell', 'being pitchforked')\n-    testbot.assertCommand('!pitchfork meet to hell', 'being pitchforked')\n-    testbot.assertCommand('!pitchfork', 'Usage')\n+\n+class TestPitchfork(CoroboTestCase):","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNzQ2MTg1Mg==","createdAt":"2018-08-05T06:27:41Z","content":"THUMBS_UP","user":{"login":"nvzard","name":"Nitanshu"}}],"createdAt":"2018-08-05T01:02:15Z","lastEditedAt":null,"updatedAt":"2018-08-05T01:02:15Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzcyMzA3NQ==","url":"https://github.com/coala/corobo/pull/599#discussion_r207723075","bodyText":"It shouldnt be necessary for all our plugins to have this duplicated activate code.\nAgain, creating a subclass or mixin for those plugins would be helpful.","diffHunk":"@@ -3,14 +3,20 @@\n import textwrap\n \n from errbot import BotPlugin, botcmd\n+from plugins.labhub import members_only\n \n \n class Pitchfork(BotPlugin):\n     \"\"\"\n     To pitchfork users down to ...\n     \"\"\"\n \n+    def activate(self):\n+        super().activate()\n+        self.team_mapping = self.get_plugin('LabHub').team_mapping","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-08-05T01:29:28Z","lastEditedAt":null,"updatedAt":"2018-08-05T01:29:28Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzcyNjU5Nw==","url":"https://github.com/coala/corobo/pull/599#discussion_r207726597","bodyText":"To make it workable with CoroboTestCase. According to errbot documentation plugin name and the class name should be same.\n\nThe key Name should be identical to the name you gave to the class in your plugin file, which in our case was HelloWorld. While these names can differ, doing so is not recommended.","diffHunk":"@@ -1,6 +1,7 @@\n [Core]\n-name = pitchfork\n+name = Pitchfork","author":{"login":"nvzard","avatarUrl":"https://avatars0.githubusercontent.com/u/19310512?v=4","name":"Nitanshu"},"reactions":[],"createdAt":"2018-08-05T06:27:35Z","lastEditedAt":"2018-08-05T06:39:32Z","updatedAt":"2018-08-05T06:39:32Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQxMDQ4ODY2OQ==","url":"https://github.com/coala/corobo/pull/599#issuecomment-410488669","bodyText":"All other plugins which should disabled: the_rules, wolfram_alpha, answer, lmgtfy, ghetto, explain, nevermind.\ni.e. everything except searchdocs .\nAlso this is blocked by #577 .\nIf LabHub is disabled, all of the corobo plugins (listed at https://github.com/errbotio/errbot/wiki ) should not become useless.","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-08-05T01:27:20Z","lastEditedAt":null,"updatedAt":"2018-08-05T01:27:20Z"}]}}},{"repoOwner":"coala","repoName":"corobo","updatedAtMs":1533635308000,"issue":{"htmlUrl":"https://github.com/coala/corobo/pull/604","number":604,"title":"plugins/coatils.py: Remove __init__ constructor","body":"This removes init initializer as the init in this module\nonly invokes super, which happens anyway if _init is removed\nCloses #601\nReviewers Checklist\n\n Appropriate logging is done.\n Appropriate error responses.\n Handle every possible exception.\n Make sure there is a docstring in the command functions. Hint: Lookout for\nbotcmd and re_botcmd decorators.\n See that 100% coverage is there.\n See to it that mocking is not done where it is not necessary.","comments":6,"createdAt":"2018-08-05T09:14:08Z","updatedAt":"2018-08-07T09:48:28Z","closedAt":"2018-08-05T13:44:14Z","state":"merged","user":{"login":"bhavya17037","avatarUrl":"https://avatars0.githubusercontent.com/u/35334585?v=4"},"owner":{"login":"bhavya17037","avatarUrl":"https://avatars0.githubusercontent.com/u/35334585?v=4"},"assignee":{"login":"bhavya17037","avatarUrl":"https://avatars0.githubusercontent.com/u/35334585?v=4"},"labels":[{"name":"difficulty/newcomer","color":"65c8ff"},{"name":"importance/medium","color":"ddba61"},{"name":"size/XS","color":"ededed"}],"pullRequest":{"htmlUrl":"https://github.com/coala/corobo/pull/604","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQxMDUwNzYzNQ==","url":"https://github.com/coala/corobo/pull/604#issuecomment-410507635","bodyText":"The commit looks good to me.","diffHunk":null,"author":{"login":"sladyn98","avatarUrl":"https://avatars1.githubusercontent.com/u/28837406?v=4","name":"Sladyn"},"reactions":[],"createdAt":"2018-08-05T09:33:16Z","lastEditedAt":null,"updatedAt":"2018-08-05T09:33:16Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQxMDUyMTc0NQ==","url":"https://github.com/coala/corobo/pull/604#issuecomment-410521745","bodyText":"__new__ & __init__ combined are the implementation of the contructor.  You can read about it at https://en.wikipedia.org/wiki/Constructor_(object-oriented_programming) , especially https://en.wikipedia.org/wiki/Constructor_(object-oriented_programming)#Python\nFoo() is never a constructor.  It is invoking a constructor.  It is rarely, and always incorrectly, called the constructor.  It should be called instantiation.","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNzQ2NjYzMA==","createdAt":"2018-08-05T14:09:47Z","content":"THUMBS_UP","user":{"login":"nvzard","name":"Nitanshu"}}],"createdAt":"2018-08-05T13:53:56Z","lastEditedAt":null,"updatedAt":"2018-08-05T13:53:56Z"}]}}},{"repoOwner":"coala","repoName":"corobo","updatedAtMs":1533023609000,"issue":{"htmlUrl":"https://github.com/coala/corobo/pull/581","number":581,"title":"[REBASED ON TOP OF 572] [WIP] tests: Adapt to CoroboTestCase ","body":"Adapts tests to use CoroboTestCase after\nrelease of Errbot 6.0.0a.","comments":13,"createdAt":"2018-07-13T10:48:25Z","updatedAt":"2018-07-31T07:53:29Z","closedAt":"2018-07-30T21:16:39Z","state":"closed","user":{"login":"nvzard","avatarUrl":"https://avatars0.githubusercontent.com/u/19310512?v=4"},"owner":{"login":"nvzard","avatarUrl":"https://avatars0.githubusercontent.com/u/19310512?v=4"},"labels":[{"name":"enhancement","color":"84b6eb"},{"name":"question","color":"cc317c"},{"name":"size/M","color":"ededed"},{"name":"status/blocked","color":"b60205"}],"pullRequest":{"htmlUrl":"https://github.com/coala/corobo/pull/581","comments":[{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMjc5OTQzNQ==","url":"https://github.com/coala/corobo/pull/581#discussion_r202799435","bodyText":"useless trailing comma.","diffHunk":"@@ -0,0 +1,41 @@\n+from errbot.backends.test import FullStackTest\n+from errbot.plugin_info import PluginInfo\n+from errbot.templating import add_plugin_templates_path\n+from pathlib import Path\n+\n+import logging\n+\n+\n+class CoroboTestCase(FullStackTest):\n+\n+    def setUp(self,\n+              extra_plugin_dir=None,\n+              extra_test_file=None,\n+              loglevel=logging.DEBUG,\n+              extra_config=None,\n+              plug_filename=None,):","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNjUzNzA4NQ==","createdAt":"2018-07-17T01:05:15Z","content":"THUMBS_UP","user":{"login":"nvzard","name":"Nitanshu"}}],"createdAt":"2018-07-16T19:38:21Z","lastEditedAt":null,"updatedAt":"2018-07-16T19:38:21Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMjgwMTI0OQ==","url":"https://github.com/coala/corobo/pull/581#discussion_r202801249","bodyText":"I think you can remove all these args.\nThey are not being used, and unittest and pytest do not use them.","diffHunk":"@@ -0,0 +1,41 @@\n+from errbot.backends.test import FullStackTest\n+from errbot.plugin_info import PluginInfo\n+from errbot.templating import add_plugin_templates_path\n+from pathlib import Path\n+\n+import logging\n+\n+\n+class CoroboTestCase(FullStackTest):\n+\n+    def setUp(self,\n+              extra_plugin_dir=None,","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNjUzNzA4Mg==","createdAt":"2018-07-17T01:05:11Z","content":"THUMBS_UP","user":{"login":"nvzard","name":"Nitanshu"}}],"createdAt":"2018-07-16T19:45:35Z","lastEditedAt":null,"updatedAt":"2018-07-16T19:45:35Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwNjE1ODA2Ng==","url":"https://github.com/coala/corobo/pull/581#issuecomment-406158066","bodyText":"requests at #581 (review) and the following one were not done.","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-19T05:20:38Z","lastEditedAt":null,"updatedAt":"2018-07-19T05:20:38Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwNjIzOTkzNQ==","url":"https://github.com/coala/corobo/pull/581#issuecomment-406239935","bodyText":"@jayvdb because I've rebased this commit over the PR which updates errbot i.e. #572, I made the changes in that commit.","diffHunk":null,"author":{"login":"nvzard","avatarUrl":"https://avatars0.githubusercontent.com/u/19310512?v=4","name":"Nitanshu"},"reactions":[],"createdAt":"2018-07-19T11:07:15Z","lastEditedAt":null,"updatedAt":"2018-07-19T11:07:15Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwODY0NzI4OA==","url":"https://github.com/coala/corobo/pull/581#issuecomment-408647288","bodyText":"Need to get the errbot upgrade PR merged first.","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-29T02:23:19Z","lastEditedAt":null,"updatedAt":"2018-07-29T02:23:19Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwOTAxMzM5Nw==","url":"https://github.com/coala/corobo/pull/581#issuecomment-409013397","bodyText":"#572 wasnt split, so it included this patch also.","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-30T21:16:39Z","lastEditedAt":null,"updatedAt":"2018-07-30T21:16:39Z"}]}}},{"repoOwner":"coala","repoName":"corobo","updatedAtMs":1531969943000,"issue":{"htmlUrl":"https://github.com/coala/corobo/pull/582","number":582,"title":"Added PyUnusedCodeBear to .coafile","body":".coafile : Added PyUnusedCodeBear to [all.python] section\nAdded the PyUnusedCodeBear to .coafile in [all.python] section and then ran coala command which removes the unused imports from project files.\nFixes :- #531","comments":17,"createdAt":"2018-07-13T21:09:42Z","updatedAt":"2018-07-19T03:12:23Z","closedAt":"2018-07-18T18:15:33Z","state":"merged","user":{"login":"Man-Jain","avatarUrl":"https://avatars3.githubusercontent.com/u/12700384?v=4"},"owner":{"login":"Man-Jain","avatarUrl":"https://avatars3.githubusercontent.com/u/12700384?v=4"},"assignee":{"login":"Man-Jain","avatarUrl":"https://avatars3.githubusercontent.com/u/12700384?v=4"},"labels":[{"name":"difficulty/newcomer","color":"65c8ff"},{"name":"process/pending review","color":"bfe5bf"},{"name":"size/XS","color":"ededed"}],"pullRequest":{"htmlUrl":"https://github.com/coala/corobo/pull/582","comments":[{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMjQ3OTQyMA==","url":"https://github.com/coala/corobo/pull/582#discussion_r202479420","bodyText":"No need to make a separate section. You can include it under [all.python].\nAlso, read the commit guidelines and modify your commit according to it.","diffHunk":"@@ -27,6 +27,10 @@ bears = LineLengthBear\n [all.links]\n bears = InvalidLinkBear\n \n+[all.unusedcode]","author":{"login":"nvzard","avatarUrl":"https://avatars0.githubusercontent.com/u/19310512?v=4","name":"Nitanshu"},"reactions":[],"createdAt":"2018-07-13T21:38:34Z","lastEditedAt":null,"updatedAt":"2018-07-13T21:38:34Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMjUxNDQyOQ==","url":"https://github.com/coala/corobo/pull/582#discussion_r202514429","bodyText":"Okay I will do the changes.","diffHunk":"@@ -27,6 +27,10 @@ bears = LineLengthBear\n [all.links]\n bears = InvalidLinkBear\n \n+[all.unusedcode]","author":{"login":"Man-Jain","avatarUrl":"https://avatars3.githubusercontent.com/u/12700384?v=4","name":"Manank Patni"},"reactions":[],"createdAt":"2018-07-14T12:59:00Z","lastEditedAt":null,"updatedAt":"2018-07-14T12:59:00Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzE0ODE3Mg==","url":"https://github.com/coala/corobo/pull/582#discussion_r203148172","bodyText":"@Man-Jain  don't make changes to answers/* and push your commit again. I am not sure, but this might work.","diffHunk":"@@ -60,9 +59,7 @@ def get_answer(question, graph, final=False):\n \n     grapheize(q_graph, q_doc, attrs={'q_type': q_type})\n     scores = Counter()\n-    found_common = False\n     for start, end in q_graph.edges():\n-        found_common = True","author":{"login":"nvzard","avatarUrl":"https://avatars0.githubusercontent.com/u/19310512?v=4","name":"Nitanshu"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNjY0NTQwMw==","createdAt":"2018-07-18T18:12:25Z","content":"THUMBS_DOWN","user":{"login":"jayvdb","name":"John Vandenberg"}}],"createdAt":"2018-07-17T19:22:02Z","lastEditedAt":null,"updatedAt":"2018-07-17T19:22:02Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzE1NzA2NQ==","url":"https://github.com/coala/corobo/pull/582#discussion_r203157065","bodyText":"^Ignore","diffHunk":"@@ -60,9 +59,7 @@ def get_answer(question, graph, final=False):\n \n     grapheize(q_graph, q_doc, attrs={'q_type': q_type})\n     scores = Counter()\n-    found_common = False\n     for start, end in q_graph.edges():\n-        found_common = True","author":{"login":"nvzard","avatarUrl":"https://avatars0.githubusercontent.com/u/19310512?v=4","name":"Nitanshu"},"reactions":[],"createdAt":"2018-07-17T19:54:36Z","lastEditedAt":null,"updatedAt":"2018-07-17T19:54:36Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzIzNTEyMg==","url":"https://github.com/coala/corobo/pull/582#discussion_r203235122","bodyText":"the returned value wasnt being used, and invoking Coatils.all_langs doesnt have side-effects .\nYou can remove the line.\n(whereas the self.pop_message() in coatils_test.py does have side effects and can not be removed.)","diffHunk":"@@ -110,7 +109,7 @@ def ls(self, msg, match):\n         Example: `ls bears python python3`\n         \"\"\"\n         langs = list(map(lambda x: x.lower(), match.group(1).split()))\n-        all_langs = Coatils.all_langs()\n+        Coatils.all_langs()","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-18T02:23:42Z","lastEditedAt":null,"updatedAt":"2018-07-18T02:23:42Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwNTAyNTQyNQ==","url":"https://github.com/coala/corobo/pull/582#issuecomment-405025425","bodyText":"@nvzard Sorry, But I am not able to understand why the build is failing on semaphoreci. It would be great if you could help me.","diffHunk":null,"author":{"login":"Man-Jain","avatarUrl":"https://avatars3.githubusercontent.com/u/12700384?v=4","name":"Manank Patni"},"reactions":[],"createdAt":"2018-07-14T13:58:57Z","lastEditedAt":null,"updatedAt":"2018-07-14T13:58:57Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwNTA0OTE1Mw==","url":"https://github.com/coala/corobo/pull/582#issuecomment-405049153","bodyText":"@Man-Jain sorry Internet was down whole day due to govt orders.\nYou need to squash your commits and go through the commit guideline as I said before. Make sure you push your code from a separate branch and not the master branch.\nPush again, most probably a restart will fix the semaphore build failure.\nAlso, you need to rebase.","diffHunk":null,"author":{"login":"nvzard","avatarUrl":"https://avatars0.githubusercontent.com/u/19310512?v=4","name":"Nitanshu"},"reactions":[],"createdAt":"2018-07-14T20:52:53Z","lastEditedAt":"2018-07-14T20:56:26Z","updatedAt":"2018-07-14T20:56:26Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwNTE3MDk3Nw==","url":"https://github.com/coala/corobo/pull/582#issuecomment-405170977","bodyText":"@nvzard Surprisingly the internet was down in our city also due to Govt. Orders. I have done the other changes but in order to push from a a differnt branch I will have to create a new pull request. So should I close this Pull Request and open a new one?","diffHunk":null,"author":{"login":"Man-Jain","avatarUrl":"https://avatars3.githubusercontent.com/u/12700384?v=4","name":"Manank Patni"},"reactions":[],"createdAt":"2018-07-16T07:49:17Z","lastEditedAt":null,"updatedAt":"2018-07-16T07:49:17Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwNTE3NzQxMA==","url":"https://github.com/coala/corobo/pull/582#issuecomment-405177410","bodyText":"Don't close the PR. Your master is different from corobo's master, just fix that first and amend your changes. Keep it in mind and don't push from master next time.","diffHunk":null,"author":{"login":"nvzard","avatarUrl":"https://avatars0.githubusercontent.com/u/19310512?v=4","name":"Nitanshu"},"reactions":[],"createdAt":"2018-07-16T08:22:05Z","lastEditedAt":null,"updatedAt":"2018-07-16T08:22:05Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwNTE4MjgxNA==","url":"https://github.com/coala/corobo/pull/582#issuecomment-405182814","bodyText":"@nvzard The semaphoreci Docker is still failing.","diffHunk":null,"author":{"login":"Man-Jain","avatarUrl":"https://avatars3.githubusercontent.com/u/12700384?v=4","name":"Manank Patni"},"reactions":[],"createdAt":"2018-07-16T08:48:06Z","lastEditedAt":null,"updatedAt":"2018-07-16T08:48:06Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwNTIxOTE4MA==","url":"https://github.com/coala/corobo/pull/582#issuecomment-405219180","bodyText":"@meetmangukiya I can't figure out why semaphore.docker is failing, can you please take a look.\n@Man-Jain as mentioned in the commit guidelines, short log is written in imperative present tense (i.e. Add something, not Adding something or Added something).\nAlso, use closes instead of fixes and read the commit guidelines for the reason.","diffHunk":null,"author":{"login":"nvzard","avatarUrl":"https://avatars0.githubusercontent.com/u/19310512?v=4","name":"Nitanshu"},"reactions":[],"createdAt":"2018-07-16T11:34:37Z","lastEditedAt":"2018-07-17T19:05:43Z","updatedAt":"2018-07-17T19:05:43Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwNTIzNjA1OQ==","url":"https://github.com/coala/corobo/pull/582#issuecomment-405236059","bodyText":"@nvzard I am very sorry for that mistake. I missed that part. I will surely take care of this next time.","diffHunk":null,"author":{"login":"Man-Jain","avatarUrl":"https://avatars3.githubusercontent.com/u/12700384?v=4","name":"Manank Patni"},"reactions":[],"createdAt":"2018-07-16T12:48:00Z","lastEditedAt":"2018-07-16T12:52:18Z","updatedAt":"2018-07-16T12:52:18Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwNTcwNzE0MQ==","url":"https://github.com/coala/corobo/pull/582#issuecomment-405707141","bodyText":"@Man-Jain  Semaphore is failing because you pushed your commit from the master branch. Create a new branch and then push your commit.\nYou can go through \n  \n    \n      corobo/.ci/semaphore.answers.sh\n    \n    \n         Line 8\n      in\n      861f7f8\n    \n    \n    \n    \n\n        \n          \n           if [[ $BRANCH_NAME != \"master\" ]] \n        \n    \n  \n\n and read the CI logs to find the cause.","diffHunk":null,"author":{"login":"nvzard","avatarUrl":"https://avatars0.githubusercontent.com/u/19310512?v=4","name":"Nitanshu"},"reactions":[],"createdAt":"2018-07-17T19:54:23Z","lastEditedAt":"2018-07-17T19:55:47Z","updatedAt":"2018-07-17T19:55:47Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwNTc4MDQ5Mg==","url":"https://github.com/coala/corobo/pull/582#issuecomment-405780492","bodyText":"@Man-Jain , dont create a new PR.  I will try to fix this one for you.","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-18T01:34:59Z","lastEditedAt":null,"updatedAt":"2018-07-18T01:34:59Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwNTg2MDY1OA==","url":"https://github.com/coala/corobo/pull/582#issuecomment-405860658","bodyText":"@nvzard Okay, I see I should have carefully made the pull request.","diffHunk":null,"author":{"login":"Man-Jain","avatarUrl":"https://avatars3.githubusercontent.com/u/12700384?v=4","name":"Manank Patni"},"reactions":[],"createdAt":"2018-07-18T08:56:16Z","lastEditedAt":"2018-07-18T09:00:00Z","updatedAt":"2018-07-18T09:00:00Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwNTg2MDk5OQ==","url":"https://github.com/coala/corobo/pull/582#issuecomment-405860999","bodyText":"@jayvdb Okay I will make the changes that you have suggested.","diffHunk":null,"author":{"login":"Man-Jain","avatarUrl":"https://avatars3.githubusercontent.com/u/12700384?v=4","name":"Manank Patni"},"reactions":[],"createdAt":"2018-07-18T08:57:22Z","lastEditedAt":null,"updatedAt":"2018-07-18T08:57:22Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwNTkyOTUzOQ==","url":"https://github.com/coala/corobo/pull/582#issuecomment-405929539","bodyText":"please do it really quickly, as all other PRs need to wait for your one to be merged","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-18T13:25:09Z","lastEditedAt":null,"updatedAt":"2018-07-18T13:25:09Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwNjE0MTA1OA==","url":"https://github.com/coala/corobo/pull/582#issuecomment-406141058","bodyText":"Yikes! We missed the 72 char commit body limit with this one 😥","diffHunk":null,"author":{"login":"nvzard","avatarUrl":"https://avatars0.githubusercontent.com/u/19310512?v=4","name":"Nitanshu"},"reactions":[],"createdAt":"2018-07-19T03:12:23Z","lastEditedAt":null,"updatedAt":"2018-07-19T03:12:23Z"}]}}},{"repoOwner":"coala","repoName":"corobo","updatedAtMs":1533117893000,"issue":{"htmlUrl":"https://github.com/coala/corobo/pull/588","number":588,"title":"configuration: Use default configurations","body":"Closes #586\nCloses #587","comments":16,"createdAt":"2018-07-20T19:30:55Z","updatedAt":"2018-08-01T10:04:53Z","closedAt":"2018-08-01T10:03:37Z","state":"merged","user":{"login":"nvzard","avatarUrl":"https://avatars0.githubusercontent.com/u/19310512?v=4"},"owner":{"login":"nvzard","avatarUrl":"https://avatars0.githubusercontent.com/u/19310512?v=4"},"labels":[{"name":"area/ci","color":"ab04e8"},{"name":"enhancement","color":"84b6eb"},{"name":"process/pending review","color":"bfe5bf"},{"name":"size/S","color":"ededed"}],"pullRequest":{"htmlUrl":"https://github.com/coala/corobo/pull/588","comments":[{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDIxODkzMA==","url":"https://github.com/coala/corobo/pull/588#discussion_r204218930","bodyText":"one level less of indentation, same for next line.","diffHunk":"@@ -107,3 +107,10 @@\n     'LabHub:*': {'allowprivate': False}}\n \n AUTOINSTALL_DEPS = True\n+\n+DEFAULT_CONFIG = {\n+    'SpammingAlert': {\n+        'MAX_MSG_LEN': 1000,\n+        'MAX_LINES': 20,\n+        },","author":{"login":"meetmangukiya","avatarUrl":"https://avatars0.githubusercontent.com/u/7620533?v=4","name":"Meet Mangukiya"},"reactions":[],"createdAt":"2018-07-21T19:05:01Z","lastEditedAt":null,"updatedAt":"2018-07-21T19:05:01Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDIxOTAyOA==","url":"https://github.com/coala/corobo/pull/588#discussion_r204219028","bodyText":"Reorder class definition as SpammingAlert(DefaultConfigMixin, BotPlugin) and you can eliminate the get_configuration_template overriding completely.","diffHunk":"@@ -3,32 +3,28 @@\n from errbot import BotPlugin\n from errbot.templating import tenv\n \n-from plugins import constants\n+from utils.mixin import DefaultConfigMixin\n \n \n-class SpammingAlert(BotPlugin):\n+class SpammingAlert(BotPlugin, DefaultConfigMixin):\n     \"\"\"\n     A plugin which alerts the user that they might be spamming.\n     \"\"\"\n \n-    CONFIG_TEMPLATE = {\n-        'MAX_MSG_LEN': constants.MAX_MSG_LEN,\n-        'MAX_LINES': constants.MAX_LINES\n-    }\n-\n     def get_configuration_template(self):","author":{"login":"meetmangukiya","avatarUrl":"https://avatars0.githubusercontent.com/u/7620533?v=4","name":"Meet Mangukiya"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNjk5MTAyMg==","createdAt":"2018-07-25T23:03:20Z","content":"THUMBS_UP","user":{"login":"nvzard","name":"Nitanshu"}}],"createdAt":"2018-07-21T19:10:45Z","lastEditedAt":null,"updatedAt":"2018-07-21T19:10:45Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDIxOTQwNg==","url":"https://github.com/coala/corobo/pull/588#discussion_r204219406","bodyText":"create a configure method that does something like:\ndef configure(self, config):\n  new = self.bot_config.DEFAULT_CONFIG[self.name]\n  for key, value in config:\n    new[key] = value\n  self.config = new","diffHunk":"@@ -0,0 +1,18 @@\n+class DefaultConfigMixin():\n+\n+    @property\n+    def _default_config(self):\n+        if (self.bot_config.DEFAULT_CONFIG and self.name\n+            in self.bot_config.DEFAULT_CONFIG):\n+            return self.bot_config.DEFAULT_CONFIG[self.name]\n+\n+    def __init__(self, bot, name=None):\n+        super().__init__(bot, name=name)\n+        default_config = self._default_config\n+        if default_config and not self.config:\n+            super().configure(default_config)\n+\n+    def get_configuration_template(self):\n+        default_config = self._default_config\n+        if default_config:\n+            return default_config","author":{"login":"meetmangukiya","avatarUrl":"https://avatars0.githubusercontent.com/u/7620533?v=4","name":"Meet Mangukiya"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNjk5MTAxOQ==","createdAt":"2018-07-25T23:03:15Z","content":"THUMBS_UP","user":{"login":"nvzard","name":"Nitanshu"}}],"createdAt":"2018-07-21T19:27:01Z","lastEditedAt":null,"updatedAt":"2018-07-21T19:27:01Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTMwMDQ3NQ==","url":"https://github.com/coala/corobo/pull/588#discussion_r205300475","bodyText":"Changing the order (BotPlugin, DefaultConfigMixin) --> (DefaultConfigMixin, BotPlugin)) makes  BotPlugin the base class and hence it throws AttributeError for self.config","diffHunk":"@@ -0,0 +1,24 @@\n+class DefaultConfigMixin():\n+\n+    @property\n+    def _default_config(self):\n+        if (self.bot_config.DEFAULT_CONFIG and self.name\n+            in self.bot_config.DEFAULT_CONFIG):\n+            return self.bot_config.DEFAULT_CONFIG[self.name]\n+\n+    def __init__(self, bot, name=None):\n+        super().__init__(bot, name=name)\n+        default_config = self._default_config\n+        if default_config:","author":{"login":"nvzard","avatarUrl":"https://avatars0.githubusercontent.com/u/19310512?v=4","name":"Nitanshu"},"reactions":[],"createdAt":"2018-07-26T00:26:28Z","lastEditedAt":null,"updatedAt":"2018-07-26T00:26:28Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk1ODY5OQ==","url":"https://github.com/coala/corobo/pull/588#discussion_r205958699","bodyText":"No it doesnt.\nIt makes both classes the base class, irrespective of order.\nWhat changes is which is called first, and the mixin must be first.\nThen you call the super to let BotPlugin do its work at beginning or end of the mixin methods depending on the needs of the mixin.","diffHunk":"@@ -0,0 +1,24 @@\n+class DefaultConfigMixin():\n+\n+    @property\n+    def _default_config(self):\n+        if (self.bot_config.DEFAULT_CONFIG and self.name\n+            in self.bot_config.DEFAULT_CONFIG):\n+            return self.bot_config.DEFAULT_CONFIG[self.name]\n+\n+    def __init__(self, bot, name=None):\n+        super().__init__(bot, name=name)\n+        default_config = self._default_config\n+        if default_config:","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-29T02:14:09Z","lastEditedAt":null,"updatedAt":"2018-07-29T02:14:09Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk1ODczOA==","url":"https://github.com/coala/corobo/pull/588#discussion_r205958738","bodyText":"what the??\na plugin should include its own config template in its own source file, and not rely on config.py.\nthe plugin config information stays here in the plugin.\nconfig.py should only have overrides for the orgs preferred starting config, only where it differs from the bot defaults.\notherwise it is mandatory to include in config.py a bunch of plugin config values which are not coala specific.\nand if someone copies only the plugin file , they should be ok.  (they will also need to copy DefaultConfigMixin , which is annoying but we can solve that later.)  constants.py should go away eventually when each plugin is able to be customised by orgs easily.","diffHunk":"@@ -3,32 +3,25 @@\n from errbot import BotPlugin\n from errbot.templating import tenv\n \n-from plugins import constants\n+from utils.mixin import DefaultConfigMixin\n \n \n-class SpammingAlert(BotPlugin):\n+class SpammingAlert(DefaultConfigMixin, BotPlugin):\n     \"\"\"\n     A plugin which alerts the user that they might be spamming.\n     \"\"\"\n \n-    CONFIG_TEMPLATE = {","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-29T02:17:18Z","lastEditedAt":null,"updatedAt":"2018-07-29T02:17:18Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk4Njk2OQ==","url":"https://github.com/coala/corobo/pull/588#discussion_r205986969","bodyText":"Got it 👍\nIt took me more than the required time to understand this but I finally understood now 😅 .\nI got confused by the Right->Left sequence mentioned here https://www.ianlewis.org/en/mixins-and-python and ignored the fact that __init__ will be called based on the left to right sequence.\nEarlier __init__ of DefaultConfigMixin with sequece (BotPlugin, DefaultConfigMixin) was not even being called.\nThanks for explaining.","diffHunk":"@@ -0,0 +1,24 @@\n+class DefaultConfigMixin():\n+\n+    @property\n+    def _default_config(self):\n+        if (self.bot_config.DEFAULT_CONFIG and self.name\n+            in self.bot_config.DEFAULT_CONFIG):\n+            return self.bot_config.DEFAULT_CONFIG[self.name]\n+\n+    def __init__(self, bot, name=None):\n+        super().__init__(bot, name=name)\n+        default_config = self._default_config\n+        if default_config:","author":{"login":"nvzard","avatarUrl":"https://avatars0.githubusercontent.com/u/19310512?v=4","name":"Nitanshu"},"reactions":[],"createdAt":"2018-07-29T21:01:10Z","lastEditedAt":null,"updatedAt":"2018-07-29T21:01:10Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjEwNTEzOQ==","url":"https://github.com/coala/corobo/pull/588#discussion_r206105139","bodyText":"lines with an if clause should be indented four additional spaces so that do not align with the statements in the indented block","diffHunk":"@@ -0,0 +1,38 @@\n+from itertools import chain\n+\n+class DefaultConfigMixin():\n+\n+    @property\n+    def _default_config(self):\n+        if (self.bot_config.DEFAULT_CONFIG and self.name\n+            in self.bot_config.DEFAULT_CONFIG):","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNzE2MTcxNA==","createdAt":"2018-07-30T12:09:00Z","content":"THUMBS_UP","user":{"login":"nvzard","name":"Nitanshu"}}],"createdAt":"2018-07-30T11:54:37Z","lastEditedAt":null,"updatedAt":"2018-07-30T11:54:37Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjEwNTU0Nw==","url":"https://github.com/coala/corobo/pull/588#discussion_r206105547","bodyText":"extra config here should override the plugin defaults, so these tests passing show that your code is not working correctly.\nAnyway, dont add extra_config here.  This test class is good without it.\nCreate an additional test class TestSpamExtraConfig which verifies the extra config overrides the plugin defaults.","diffHunk":"@@ -7,8 +7,17 @@\n class TestSpam(unittest.TestCase):\n \n     def setUp(self):\n+        extra_config = {\n+            'DEFAULT_CONFIG': {\n+                'SpammingAlert': {\n+                    'MAX_MSG_LEN': 1000,\n+                    'MAX_LINES': 10,\n+                }\n+            }\n+        }\n         self.testbot = TestBot(extra_plugin_dir='plugins',\n-                               loglevel=logging.ERROR)\n+                               loglevel=logging.ERROR,\n+                               extra_config=extra_config)","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNzE2MTUzMg==","createdAt":"2018-07-30T12:04:58Z","content":"THUMBS_UP","user":{"login":"nvzard","name":"Nitanshu"}}],"createdAt":"2018-07-30T11:56:19Z","lastEditedAt":null,"updatedAt":"2018-07-30T11:56:19Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjMxMjA1OQ==","url":"https://github.com/coala/corobo/pull/588#discussion_r206312059","bodyText":"done","diffHunk":"@@ -7,8 +7,17 @@\n class TestSpam(unittest.TestCase):\n \n     def setUp(self):\n+        extra_config = {\n+            'DEFAULT_CONFIG': {\n+                'SpammingAlert': {\n+                    'MAX_MSG_LEN': 1000,\n+                    'MAX_LINES': 10,\n+                }\n+            }\n+        }\n         self.testbot = TestBot(extra_plugin_dir='plugins',\n-                               loglevel=logging.ERROR)\n+                               loglevel=logging.ERROR,\n+                               extra_config=extra_config)","author":{"login":"nvzard","avatarUrl":"https://avatars0.githubusercontent.com/u/19310512?v=4","name":"Nitanshu"},"reactions":[],"createdAt":"2018-07-30T20:34:46Z","lastEditedAt":null,"updatedAt":"2018-07-30T20:34:46Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjMyOTI4MQ==","url":"https://github.com/coala/corobo/pull/588#discussion_r206329281","bodyText":"this does not confirm that the extra config is being used, because 5001 is above the default of 1000 and the extra config value of 500.  So it will only verify that the command works; it doesnt verify that the command is triggered only if above the number of lines setting.\nAn obvious omission from this test module is asserting that a person can post content below these sizes and no errors occur.  I'm not sure whether errbot test framework has a suitable helper for that.\nthe next line is also not 100% ok.   '\\n\\n'*6 is 12 new line characters, and that is lower than constants.MAX_LINES -- so, all good?\nnot quite ... it assumes that pytest did not run test_spam_extra_config_configuration before test_spam_extra_config_callback.\nThere is no guarantee of that.\nhttps://duckduckgo.com/?q=pytest+plugin+random+order\nTests should not leave the test bed modified after they have finished\nSimplest fix is to add a tearDown if using unittest.TestCase to reset the config to the default state, or ... less correct .. (re)set to a constant state in setUp.\nThis also needs to be done to TestSpam.","diffHunk":"@@ -22,3 +22,32 @@ def test_spam_configuration(self):\n         self.testbot.assertCommand('!plugin config SpammingAlert '\n                                    '{\\'MAX_MSG_LEN\\':1, \\'MAX_LINES\\': 1}',\n                                    'configuration done')\n+\n+\n+class TestSpamExtraConfig(unittest.TestCase):\n+\n+    def setUp(self):\n+        extra_config = {\n+            'DEFAULT_CONFIG': {\n+                'SpammingAlert': {\n+                    'MAX_MSG_LEN': 500,\n+                    'MAX_LINES': 5,\n+                }\n+            }\n+        }\n+        self.testbot = TestBot(extra_plugin_dir='plugins',\n+                               loglevel=logging.ERROR,\n+                               extra_config=extra_config)\n+        self.testbot.start()\n+\n+    def test_spam_extra_config_callback(self):\n+        self.testbot.assertCommand('c'*5001, 'you\\'re spamming')","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-30T21:32:32Z","lastEditedAt":null,"updatedAt":"2018-07-30T21:32:32Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjY0ODUzNw==","url":"https://github.com/coala/corobo/pull/588#discussion_r206648537","bodyText":"Shit. That 5001 was a typo. It was supposed to be 501. 😅","diffHunk":"@@ -22,3 +22,32 @@ def test_spam_configuration(self):\n         self.testbot.assertCommand('!plugin config SpammingAlert '\n                                    '{\\'MAX_MSG_LEN\\':1, \\'MAX_LINES\\': 1}',\n                                    'configuration done')\n+\n+\n+class TestSpamExtraConfig(unittest.TestCase):\n+\n+    def setUp(self):\n+        extra_config = {\n+            'DEFAULT_CONFIG': {\n+                'SpammingAlert': {\n+                    'MAX_MSG_LEN': 500,\n+                    'MAX_LINES': 5,\n+                }\n+            }\n+        }\n+        self.testbot = TestBot(extra_plugin_dir='plugins',\n+                               loglevel=logging.ERROR,\n+                               extra_config=extra_config)\n+        self.testbot.start()\n+\n+    def test_spam_extra_config_callback(self):\n+        self.testbot.assertCommand('c'*5001, 'you\\'re spamming')","author":{"login":"nvzard","avatarUrl":"https://avatars0.githubusercontent.com/u/19310512?v=4","name":"Nitanshu"},"reactions":[],"createdAt":"2018-07-31T19:06:50Z","lastEditedAt":null,"updatedAt":"2018-07-31T19:06:50Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjcyNjI4Ng==","url":"https://github.com/coala/corobo/pull/588#discussion_r206726286","bodyText":"use '{\\'MAX_MSG_LEN\\':1, \\'MAX_LINES\\': 1}', from the original code, so that the diff is aligned properly.","diffHunk":"@@ -19,6 +23,50 @@ def test_spam_configuration(self):\n         self.testbot.assertCommand('!plugin config SpammingAlert '\n                                    '{\\'MAX_LINES\\': 10}',\n                                    'configuration done')\n+        self.testbot.assertCommand('!plugin config SpammingAlert',\n+                                   '{\\'MAX_LINES\\': 10}')\n+        self.testbot.assertCommand('!plugin config SpammingAlert '\n+                                   '{\\'MAX_LINES\\': 20, \\'MAX_MSG_LEN\\': 200}',","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-08-01T00:49:58Z","lastEditedAt":null,"updatedAt":"2018-08-01T00:49:58Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjc3NDQ5NQ==","url":"https://github.com/coala/corobo/pull/588#discussion_r206774495","bodyText":"@jayvdb this sets the config MAX_MSG_LEN = 1 for the testbot. So when the command msg !plugin config SpammingAlert is executed in the next line. The bot interprets the cmd msg as a spam since MAX_MSG_LEN is set to 1. So I increased the MAX_MSG_LEN to 20.","diffHunk":"@@ -19,6 +23,50 @@ def test_spam_configuration(self):\n         self.testbot.assertCommand('!plugin config SpammingAlert '\n                                    '{\\'MAX_LINES\\': 10}',\n                                    'configuration done')\n+        self.testbot.assertCommand('!plugin config SpammingAlert',\n+                                   '{\\'MAX_LINES\\': 10}')\n+        self.testbot.assertCommand('!plugin config SpammingAlert '\n+                                   '{\\'MAX_LINES\\': 20, \\'MAX_MSG_LEN\\': 200}',","author":{"login":"nvzard","avatarUrl":"https://avatars0.githubusercontent.com/u/19310512?v=4","name":"Nitanshu"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNzI3NTYwMA==","createdAt":"2018-08-01T07:43:01Z","content":"LAUGH","user":{"login":"jayvdb","name":"John Vandenberg"}},{"id":"MDg6UmVhY3Rpb24yNzI3NTYwNg==","createdAt":"2018-08-01T07:43:07Z","content":"THUMBS_UP","user":{"login":"jayvdb","name":"John Vandenberg"}}],"createdAt":"2018-08-01T07:08:39Z","lastEditedAt":"2018-08-01T07:11:08Z","updatedAt":"2018-08-01T07:11:08Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjc4ODk4Nw==","url":"https://github.com/coala/corobo/pull/588#discussion_r206788987","bodyText":"Please do not put any overrides here.\nThese are the same as the bot defaults, so unnecessary.","diffHunk":"@@ -111,3 +111,10 @@\n     'LabHub:*': {'allowprivate': False}}\n \n AUTOINSTALL_DEPS = True\n+\n+DEFAULT_CONFIG = {\n+    'SpammingAlert': {","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNzI4MjU1NQ==","createdAt":"2018-08-01T09:53:38Z","content":"THUMBS_UP","user":{"login":"nvzard","name":"Nitanshu"}}],"createdAt":"2018-08-01T08:09:16Z","lastEditedAt":null,"updatedAt":"2018-08-01T08:09:16Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjgxMDYyNg==","url":"https://github.com/coala/corobo/pull/588#discussion_r206810626","bodyText":"This should be documented and be an exception. Newcomer issue?","diffHunk":"@@ -19,6 +23,50 @@ def test_spam_configuration(self):\n         self.testbot.assertCommand('!plugin config SpammingAlert '\n                                    '{\\'MAX_LINES\\': 10}',\n                                    'configuration done')\n+        self.testbot.assertCommand('!plugin config SpammingAlert',\n+                                   '{\\'MAX_LINES\\': 10}')\n+        self.testbot.assertCommand('!plugin config SpammingAlert '\n+                                   '{\\'MAX_LINES\\': 20, \\'MAX_MSG_LEN\\': 200}',","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-08-01T09:24:03Z","lastEditedAt":null,"updatedAt":"2018-08-01T09:24:03Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwNzkyNTA3Mg==","url":"https://github.com/coala/corobo/pull/588#issuecomment-407925072","bodyText":"Since the SpammingAlert commit (d2cd088) is dependent on the Mixin commit (d0a330f). I pushed the commits it in the same PR.\nPlus, I thought DefaultConfigMixin PR without any adaptation shown would be bland.\n\nUnrelated commits = Different PRs","diffHunk":null,"author":{"login":"nvzard","avatarUrl":"https://avatars0.githubusercontent.com/u/19310512?v=4","name":"Nitanshu"},"reactions":[],"createdAt":"2018-07-25T23:11:01Z","lastEditedAt":"2018-07-29T17:30:27Z","updatedAt":"2018-07-29T17:30:27Z"}]}}},{"repoOwner":"coala","repoName":"corobo","updatedAtMs":1532846207000,"issue":{"htmlUrl":"https://github.com/coala/corobo/pull/589","number":589,"title":"final.py: Remove unused imports  ","body":"Closes #585\nReviewers Checklist\n\n Appropriate logging is done.\n Appropriate error responses.\n Handle every possible exception.\n Make sure there is a docstring in the command functions. Hint: Lookout for\nbotcmd and re_botcmd decorators.\n See that 100% coverage is there.\n See to it that mocking is not done where it is not necessary.","comments":19,"createdAt":"2018-07-21T09:46:31Z","updatedAt":"2018-07-29T06:36:47Z","closedAt":"2018-07-29T05:01:20Z","state":"merged","user":{"login":"Pawank221","avatarUrl":"https://avatars0.githubusercontent.com/u/31545438?v=4"},"owner":{"login":"Pawank221","avatarUrl":"https://avatars0.githubusercontent.com/u/31545438?v=4"},"assignee":{"login":"Pawank221","avatarUrl":"https://avatars0.githubusercontent.com/u/31545438?v=4"},"labels":[{"name":"difficulty/newcomer","color":"65c8ff"},{"name":"process/pending review","color":"bfe5bf"},{"name":"size/XS","color":"ededed"},{"name":"type/style","color":"567c09"}],"pullRequest":{"htmlUrl":"https://github.com/coala/corobo/pull/589","comments":[{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDI2MTg1NQ==","url":"https://github.com/coala/corobo/pull/589#discussion_r204261855","bodyText":"if you like, you can also remove it from https://github.com/coala/corobo/blob/master/answers/requirements.txt","diffHunk":"@@ -1,9 +1,6 @@\n from collections import OrderedDict, Counter\n \n-from gensim.parsing.preprocessing import STOPWORDS\n-from gensim.utils import simple_preprocess\n import networkx\n-import nltk","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-07-23T00:40:42Z","lastEditedAt":null,"updatedAt":"2018-07-23T00:40:42Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk2MDkwMg==","url":"https://github.com/coala/corobo/pull/589#discussion_r205960902","bodyText":"Created new issue about that #593 , for another newcomer to complete","diffHunk":"@@ -1,9 +1,6 @@\n from collections import OrderedDict, Counter\n \n-from gensim.parsing.preprocessing import STOPWORDS\n-from gensim.utils import simple_preprocess\n import networkx\n-import nltk","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-07-29T05:05:40Z","lastEditedAt":null,"updatedAt":"2018-07-29T05:05:40Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwODYzMTA4NA==","url":"https://github.com/coala/corobo/pull/589#issuecomment-408631084","bodyText":"@Pawank221 please reply and fix this soon otherwise you will be unassigned. For any help ask on coala group.","diffHunk":null,"author":{"login":"MacBox7","avatarUrl":"https://avatars0.githubusercontent.com/u/15063552?v=4","name":"Ankit Joshi"},"createdAt":"2018-07-28T19:51:37Z","lastEditedAt":null,"updatedAt":"2018-07-28T19:51:37Z"}]}}},{"repoOwner":"coala","repoName":"corobo","updatedAtMs":1532306423000,"issue":{"htmlUrl":"https://github.com/coala/corobo/pull/590","number":590,"title":"moban: Moban Sync","body":"Sync with mobans template.","comments":5,"createdAt":"2018-07-22T16:32:33Z","updatedAt":"2018-07-23T00:40:23Z","closedAt":"2018-07-23T00:30:26Z","state":"merged","user":{"login":"nvzard","avatarUrl":"https://avatars0.githubusercontent.com/u/19310512?v=4"},"owner":{"login":"nvzard","avatarUrl":"https://avatars0.githubusercontent.com/u/19310512?v=4"},"labels":[{"name":"process/pending review","color":"bfe5bf"},{"name":"size/XS","color":"ededed"}],"pullRequest":{"htmlUrl":"https://github.com/coala/corobo/pull/590","comments":[]}}},{"repoOwner":"coala","repoName":"corobo","updatedAtMs":1533023534000,"issue":{"htmlUrl":"https://github.com/coala/corobo/pull/591","number":591,"title":"config.py: Create empty data sub-directory","body":"Remove need for the empty data/ subdirectory.\nCloses #569","comments":14,"createdAt":"2018-07-23T01:16:40Z","updatedAt":"2018-07-31T07:52:14Z","closedAt":"2018-07-30T22:10:10Z","state":"merged","user":{"login":"nvzard","avatarUrl":"https://avatars0.githubusercontent.com/u/19310512?v=4"},"owner":{"login":"nvzard","avatarUrl":"https://avatars0.githubusercontent.com/u/19310512?v=4"},"assignee":{"login":"nvzard","avatarUrl":"https://avatars0.githubusercontent.com/u/19310512?v=4"},"labels":[{"name":"area/config","color":"60a1db"},{"name":"process/approved","color":"009800"},{"name":"size/XS","color":"ededed"}],"pullRequest":{"htmlUrl":"https://github.com/coala/corobo/pull/591","comments":[{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk1ODMxMA==","url":"https://github.com/coala/corobo/pull/591#discussion_r205958310","bodyText":"you should use BOT_DATA_DIR","diffHunk":"@@ -54,6 +54,16 @@\n \n HIDE_RESTRICTED_COMMANDS = True\n \n+\n+def make_dir(path):\n+    try:\n+        os.mkdir(os.path.join(BOT_ROOT, path))\n+    except OSError:\n+        if os.path.isdir(os.path.join(BOT_ROOT, path)):\n+            pass\n+\n+\n+make_dir('data')","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNzEyODM2NQ==","createdAt":"2018-07-29T08:53:03Z","content":"THUMBS_UP","user":{"login":"nvzard","name":"Nitanshu"}}],"createdAt":"2018-07-29T01:39:20Z","lastEditedAt":null,"updatedAt":"2018-07-29T01:39:20Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk3MDU4NQ==","url":"https://github.com/coala/corobo/pull/591#discussion_r205970585","bodyText":"wtf.\nThis var is being set below","diffHunk":"@@ -54,6 +54,16 @@\n \n HIDE_RESTRICTED_COMMANDS = True\n \n+\n+def make_dir(path):\n+    try:\n+        os.mkdir(os.path.join(BOT_ROOT, path))\n+    except OSError:\n+        if os.path.isdir(os.path.join(BOT_ROOT, path)):\n+            pass\n+\n+\n+make_dir(BOT_DATA_DIR)","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-29T11:48:21Z","lastEditedAt":null,"updatedAt":"2018-07-29T11:48:21Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk3MDY1MQ==","url":"https://github.com/coala/corobo/pull/591#discussion_r205970651","bodyText":"Also please add a note in the log that the directory is being created.","diffHunk":"@@ -54,6 +54,16 @@\n \n HIDE_RESTRICTED_COMMANDS = True\n \n+\n+def make_dir(path):\n+    try:\n+        os.mkdir(os.path.join(BOT_ROOT, path))\n+    except OSError:\n+        if os.path.isdir(os.path.join(BOT_ROOT, path)):\n+            pass\n+\n+\n+make_dir(BOT_DATA_DIR)","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-29T11:50:38Z","lastEditedAt":null,"updatedAt":"2018-07-29T11:50:38Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk3MDcwNw==","url":"https://github.com/coala/corobo/pull/591#discussion_r205970707","bodyText":"why not do this first before trying to make the directory?\nwill os.mkdir recursively create subdirectories that are missing?","diffHunk":"@@ -54,7 +54,17 @@\n \n HIDE_RESTRICTED_COMMANDS = True\n \n+\n+def make_dir(path):\n+    try:\n+        os.mkdir(os.path.join(BOT_ROOT, path))\n+    except OSError:\n+        if os.path.isdir(os.path.join(BOT_ROOT, path)):","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-29T11:52:08Z","lastEditedAt":null,"updatedAt":"2018-07-29T11:52:08Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk4MDc0Ng==","url":"https://github.com/coala/corobo/pull/591#discussion_r205980746","bodyText":"I removed the method completely and just did\nif not os.path.isdir(os.path.join(BOT_ROOT, BOT_DATA_DIR)):\n    os.mkdir(os.path.join(BOT_ROOT, BOT_DATA_DIR))\n\nI tested it locally by running an errbot instance and it works.","diffHunk":"@@ -54,7 +54,17 @@\n \n HIDE_RESTRICTED_COMMANDS = True\n \n+\n+def make_dir(path):\n+    try:\n+        os.mkdir(os.path.join(BOT_ROOT, path))\n+    except OSError:\n+        if os.path.isdir(os.path.join(BOT_ROOT, path)):","author":{"login":"nvzard","avatarUrl":"https://avatars0.githubusercontent.com/u/19310512?v=4","name":"Nitanshu"},"reactions":[],"createdAt":"2018-07-29T17:01:47Z","lastEditedAt":"2018-07-29T17:02:35Z","updatedAt":"2018-07-29T17:02:35Z"}]}}},{"repoOwner":"coala","repoName":"corobo","updatedAtMs":1533023528000,"issue":{"htmlUrl":"https://github.com/coala/corobo/pull/592","number":592,"title":"requirements: Unpin pyopenssl","body":"Closes #433","comments":5,"createdAt":"2018-07-26T01:21:02Z","updatedAt":"2018-07-31T07:52:08Z","closedAt":"2018-07-29T01:38:15Z","state":"merged","user":{"login":"nvzard","avatarUrl":"https://avatars0.githubusercontent.com/u/19310512?v=4"},"owner":{"login":"nvzard","avatarUrl":"https://avatars0.githubusercontent.com/u/19310512?v=4"},"labels":[{"name":"bug","color":"ee0701"},{"name":"importance/high","color":"e99695"},{"name":"process/pending review","color":"bfe5bf"},{"name":"size/XS","color":"ededed"},{"name":"upstream","color":"b60205"}],"pullRequest":{"htmlUrl":"https://github.com/coala/corobo/pull/592","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQwODY0NTg1Mg==","url":"https://github.com/coala/corobo/pull/592#issuecomment-408645852","bodyText":"We probably should remove the mention of pyopenssl; it isnt a direct dependency","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-07-29T01:38:16Z","lastEditedAt":null,"updatedAt":"2018-07-29T01:38:16Z"}]}}},{"repoOwner":"coala","repoName":"corobo","updatedAtMs":1533157345000,"issue":{"htmlUrl":"https://github.com/coala/corobo/pull/595","number":595,"title":"as ","body":"Closes #579\nReviewers Checklist\n\n Appropriate logging is done.\n Appropriate error responses.\n Handle every possible exception.\n Make sure there is a docstring in the command functions. Hint: Lookout for\nbotcmd and re_botcmd decorators.\n See that 100% coverage is there.\n See to it that mocking is not done where it is not necessary.","comments":2,"createdAt":"2018-08-01T20:45:03Z","updatedAt":"2018-08-01T21:02:25Z","closedAt":null,"state":"open","user":{"login":"vaibhav9619","avatarUrl":"https://avatars1.githubusercontent.com/u/35555074?v=4"},"owner":{"login":"vaibhav9619","avatarUrl":"https://avatars1.githubusercontent.com/u/35555074?v=4"},"labels":[{"name":"process/wip","color":"fbca04"},{"name":"size/XS","color":"ededed"}],"pullRequest":{"htmlUrl":"https://github.com/coala/corobo/pull/595","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQwOTcyMTkxNA==","url":"https://github.com/coala/corobo/pull/595#issuecomment-409721914","bodyText":"Please read #579 (comment)","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-08-01T21:02:25Z","lastEditedAt":null,"updatedAt":"2018-08-01T21:02:25Z"}]}}},{"repoOwner":"coala","repoName":"corobo","updatedAtMs":1532209903000,"issue":{"htmlUrl":"https://github.com/coala/corobo/pull/552","number":552,"title":"Make Labhub commands accessible only to org members","body":"Make all LabHub commands accessible only by\nmembers of the organization.\nCloses #548","comments":22,"createdAt":"2018-06-08T09:21:39Z","updatedAt":"2018-07-21T21:51:43Z","closedAt":"2018-07-21T19:02:07Z","state":"merged","user":{"login":"nvzard","avatarUrl":"https://avatars0.githubusercontent.com/u/19310512?v=4"},"owner":{"login":"nvzard","avatarUrl":"https://avatars0.githubusercontent.com/u/19310512?v=4"},"labels":[{"name":"area/labhub","color":"63ccf9"},{"name":"area/security","color":"fc6805"},{"name":"bug","color":"ee0701"},{"name":"enhancement","color":"84b6eb"},{"name":"process/approved","color":"009800"},{"name":"size/S","color":"ededed"}],"pullRequest":{"htmlUrl":"https://github.com/coala/corobo/pull/552","comments":[{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDc0NTAxMw==","url":"https://github.com/coala/corobo/pull/552#discussion_r194745013","bodyText":"Why not use something simpler and functionally equivalent, like :\ndef members_only(func):\n    def wrapper(*args, **kwargs):\n        instance = args[0]\n        msg = args[1]\n        user = msg.frm.nick\n        teams = [\n            instance.TEAMS[instance.GH_ORG_NAME + ' newcomers'],\n            instance.TEAMS[instance.GH_ORG_NAME + ' developers'],\n            instance.TEAMS[instance.GH_ORG_NAME + ' maintainers'],\n        ]\n\n        for team in teams:\n            if team.is_member(user):\n                return func(*args, **kwargs)\n        \n        return 'You need to be a member of this organisation to use this command.'\n    return wrapper","diffHunk":"@@ -0,0 +1,25 @@\n+from decorator import decorator\n+\n+@decorator\n+def members_only(func, *args, **kwargs):\n+\n+    def blocker(*args, **kwargs):\n+        return 'You need to be a member of this ' \\\n+               'organization to use this command.'\n+\n+    # plugin instance\n+    instance = args[0]\n+    msg = args[1]\n+    user = msg.frm.nick\n+\n+    teams = [instance.TEAMS[instance.GH_ORG_NAME + ' newcomers'],\n+             instance.TEAMS[instance.GH_ORG_NAME + ' developers'],\n+             instance.TEAMS[instance.GH_ORG_NAME + ' maintainers']\n+            ]\n+\n+    for team in teams:\n+        if team.is_member(user):\n+            return func(*args, **kwargs)\n+\n+    return blocker(*args, **kwargs)","author":{"login":"meetmangukiya","avatarUrl":"https://avatars0.githubusercontent.com/u/7620533?v=4","name":"Meet Mangukiya"},"reactions":[],"createdAt":"2018-06-12T13:50:48Z","lastEditedAt":"2018-06-12T13:52:20Z","updatedAt":"2018-06-12T13:52:20Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDgyMTg0MA==","url":"https://github.com/coala/corobo/pull/552#discussion_r194821840","bodyText":"Since the methods are pre loaded by Errbot plugin manage, it was not accepting this so I had to return a dummy blocker method.\nI did tried this way and many other ways similar so that I don't have to use decorator but Errbot was not accepting that as a bot command and was resulting in 'Command not found' error.","diffHunk":"@@ -0,0 +1,25 @@\n+from decorator import decorator\n+\n+@decorator\n+def members_only(func, *args, **kwargs):\n+\n+    def blocker(*args, **kwargs):\n+        return 'You need to be a member of this ' \\\n+               'organization to use this command.'\n+\n+    # plugin instance\n+    instance = args[0]\n+    msg = args[1]\n+    user = msg.frm.nick\n+\n+    teams = [instance.TEAMS[instance.GH_ORG_NAME + ' newcomers'],\n+             instance.TEAMS[instance.GH_ORG_NAME + ' developers'],\n+             instance.TEAMS[instance.GH_ORG_NAME + ' maintainers']\n+            ]\n+\n+    for team in teams:\n+        if team.is_member(user):\n+            return func(*args, **kwargs)\n+\n+    return blocker(*args, **kwargs)","author":{"login":"nvzard","avatarUrl":"https://avatars0.githubusercontent.com/u/19310512?v=4","name":"Nitanshu"},"reactions":[],"createdAt":"2018-06-12T17:18:53Z","lastEditedAt":"2018-06-12T19:35:05Z","updatedAt":"2018-06-12T19:35:05Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTg5NDY1NQ==","url":"https://github.com/coala/corobo/pull/552#discussion_r195894655","bodyText":"We need seeing this list of teams being redefined everywhere.  it is silly.\nFix this problem first.\nYou dont need to create the perfect solution, which would be allowing orgs to define their own teams.\nCreate one consistent mechanism for getting information about our teams needed throughout labhub.","diffHunk":"@@ -10,10 +10,34 @@\n from errbot import BotPlugin, re_botcmd\n from errbot.templating import tenv\n \n+from functools import wraps\n from plugins import constants\n from utils.backends import message_link\n \n \n+def members_only(func):\n+    @wraps(func)\n+    def wrapper(*args, **kwargs):\n+        # plugin instance\n+        instance = args[0]\n+        msg = args[1]\n+        user = msg.frm.nick\n+\n+        teams = [\n+            instance.TEAMS[instance.GH_ORG_NAME + ' newcomers'],","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-06-16T05:20:57Z","lastEditedAt":null,"updatedAt":"2018-06-16T05:20:57Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5ODgzMjcxNg==","url":"https://github.com/coala/corobo/pull/552#discussion_r198832716","bodyText":"dont use \\","diffHunk":"@@ -10,10 +10,28 @@\n from errbot import BotPlugin, re_botcmd\n from errbot.templating import tenv\n \n+from functools import wraps\n from plugins import constants\n from utils.backends import message_link\n \n \n+def members_only(func):\n+    @wraps(func)\n+    def wrapper(*args, **kwargs):\n+        # plugin instance\n+        instance = args[0]\n+        msg = args[1]\n+        user = msg.frm.nick\n+\n+        for _, team in instance.team_mapping().items():\n+            if team.is_member(user):\n+                return func(*args, **kwargs)\n+\n+        return 'You need to be a member of this ' \\","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-06-28T13:07:39Z","lastEditedAt":null,"updatedAt":"2018-06-28T13:07:39Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5ODgzMzE2Nw==","url":"https://github.com/coala/corobo/pull/552#discussion_r198833167","bodyText":"items() not needed.  use values()","diffHunk":"@@ -10,10 +10,28 @@\n from errbot import BotPlugin, re_botcmd\n from errbot.templating import tenv\n \n+from functools import wraps\n from plugins import constants\n from utils.backends import message_link\n \n \n+def members_only(func):\n+    @wraps(func)\n+    def wrapper(*args, **kwargs):\n+        # plugin instance\n+        instance = args[0]\n+        msg = args[1]\n+        user = msg.frm.nick\n+\n+        for _, team in instance.team_mapping().items():","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-06-28T13:08:58Z","lastEditedAt":null,"updatedAt":"2018-06-28T13:08:58Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5ODgzMzI5Mg==","url":"https://github.com/coala/corobo/pull/552#discussion_r198833292","bodyText":"what the .. ?","diffHunk":"@@ -322,10 +361,18 @@ def test_assign_cmd(self):\n                                   'not eligible to be assigned to this issue')\n \n     def test_mark_cmd(self):\n+","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-06-28T13:09:21Z","lastEditedAt":null,"updatedAt":"2018-06-28T13:09:21Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5ODg2NzA2OQ==","url":"https://github.com/coala/corobo/pull/552#discussion_r198867069","bodyText":"yes its WIP, I changed that locally","diffHunk":"@@ -10,10 +10,28 @@\n from errbot import BotPlugin, re_botcmd\n from errbot.templating import tenv\n \n+from functools import wraps\n from plugins import constants\n from utils.backends import message_link\n \n \n+def members_only(func):\n+    @wraps(func)\n+    def wrapper(*args, **kwargs):\n+        # plugin instance\n+        instance = args[0]\n+        msg = args[1]\n+        user = msg.frm.nick\n+\n+        for _, team in instance.team_mapping().items():","author":{"login":"nvzard","avatarUrl":"https://avatars0.githubusercontent.com/u/19310512?v=4","name":"Nitanshu"},"reactions":[],"createdAt":"2018-06-28T14:40:35Z","lastEditedAt":null,"updatedAt":"2018-06-28T14:40:35Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDc5OTg3NQ==","url":"https://github.com/coala/corobo/pull/552#discussion_r200799875","bodyText":"dont use trailing \\.  especially when they are unnecessary.\nand move the !new .. string to the next line so it follows python indentation style, and split the string across multiple lines whenever there is a \\n.","diffHunk":"@@ -171,6 +188,14 @@ def test_create_issue_cmd(self):\n \n         testbot_public.assertCommand('!new issue coala title', 'repository that does not exist')\n \n+        # not a member of org\n+        self.mock_team.is_member.return_value = False\n+        labhub.REPOS = {'repository': self.mock_repo,\n+                        'repository.github.io': self.mock_repo}\n+        testbot_public.assertCommand('!new issue repository this is the title\\nbo\\ndy',\n+                                     'You need to be a member of this organization ' \\","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNjEyNzM0NA==","createdAt":"2018-07-07T07:59:08Z","content":"THUMBS_UP","user":{"login":"nvzard","name":"Nitanshu"}}],"createdAt":"2018-07-07T02:15:06Z","lastEditedAt":null,"updatedAt":"2018-07-07T02:15:06Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDc5OTkxMQ==","url":"https://github.com/coala/corobo/pull/552#discussion_r200799911","bodyText":"never remove test logic without doing a git blame\nbfb1f9b\nIf this functionality needs to be removed to make progress, it needs to be done as a separate commit, with a separate issue, explaining the justification for the intentional regression.","diffHunk":"@@ -280,12 +321,6 @@ def test_assign_cmd(self):\n                               'not eligible to be assigned to this issue')\n         testbot.pop_message()\n \n-        # no assignee, newcomer, difficulty medium\n-        labhub.GH_ORG_NAME = 'not-coala'","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNjEyNzM0Mg==","createdAt":"2018-07-07T07:59:06Z","content":"THUMBS_UP","user":{"login":"nvzard","name":"Nitanshu"}}],"createdAt":"2018-07-07T02:17:33Z","lastEditedAt":null,"updatedAt":"2018-07-07T02:17:33Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDc5OTkzMg==","url":"https://github.com/coala/corobo/pull/552#discussion_r200799932","bodyText":"put this in setUp and then re-use it for each test method","diffHunk":"@@ -132,6 +141,12 @@ def test_create_issue_cmd(self):\n         plugins.labhub.GitHubToken = create_autospec(IGitt.GitHub.GitHubToken)\n         plugins.labhub.GitLabPrivateToken = create_autospec(IGitt.GitLab.GitLabPrivateToken)\n \n+        teams = {","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNjEyNzM0MQ==","createdAt":"2018-07-07T07:59:03Z","content":"THUMBS_UP","user":{"login":"nvzard","name":"Nitanshu"}}],"createdAt":"2018-07-07T02:19:21Z","lastEditedAt":null,"updatedAt":"2018-07-07T02:19:21Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDgxMTM0NA==","url":"https://github.com/coala/corobo/pull/552#discussion_r200811344","bodyText":"fixed it","diffHunk":"@@ -280,12 +321,6 @@ def test_assign_cmd(self):\n                               'not eligible to be assigned to this issue')\n         testbot.pop_message()\n \n-        # no assignee, newcomer, difficulty medium\n-        labhub.GH_ORG_NAME = 'not-coala'","author":{"login":"nvzard","avatarUrl":"https://avatars0.githubusercontent.com/u/19310512?v=4","name":"Nitanshu"},"reactions":[],"createdAt":"2018-07-07T12:41:28Z","lastEditedAt":"2018-07-07T13:04:40Z","updatedAt":"2018-07-07T13:04:40Z"},{"id":"MDEyOklzc3VlQ29tbWVudDM5NTcyNjY2OQ==","url":"https://github.com/coala/corobo/pull/552#issuecomment-395726669","bodyText":"@meetmangukiya ping","diffHunk":null,"author":{"login":"nvzard","avatarUrl":"https://avatars0.githubusercontent.com/u/19310512?v=4","name":"Nitanshu"},"reactions":[],"createdAt":"2018-06-08T10:58:41Z","lastEditedAt":null,"updatedAt":"2018-06-08T10:58:41Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwNTE5NzQ0Mw==","url":"https://github.com/coala/corobo/pull/552#issuecomment-405197443","bodyText":"@jayvdb requesting a review.","diffHunk":null,"author":{"login":"nvzard","avatarUrl":"https://avatars0.githubusercontent.com/u/19310512?v=4","name":"Nitanshu"},"reactions":[],"createdAt":"2018-07-16T09:49:20Z","lastEditedAt":"2018-07-16T09:52:33Z","updatedAt":"2018-07-16T09:52:33Z"}]}}},{"repoOwner":"coala","repoName":"corobo","updatedAtMs":1533032931000,"issue":{"htmlUrl":"https://github.com/coala/corobo/pull/572","number":572,"title":"requirements.txt: Update Errbot","body":"Closes #571\nCloses #584","comments":52,"createdAt":"2018-06-22T06:42:53Z","updatedAt":"2018-07-31T10:28:51Z","closedAt":"2018-07-30T21:15:17Z","state":"merged","user":{"login":"nvzard","avatarUrl":"https://avatars0.githubusercontent.com/u/19310512?v=4"},"owner":{"login":"nvzard","avatarUrl":"https://avatars0.githubusercontent.com/u/19310512?v=4"},"labels":[{"name":"enhancement","color":"84b6eb"},{"name":"process/pending review","color":"bfe5bf"},{"name":"question","color":"cc317c"},{"name":"size/M","color":"ededed"}],"pullRequest":{"htmlUrl":"https://github.com/coala/corobo/pull/572","comments":[{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTMxODI1Mw==","url":"https://github.com/coala/corobo/pull/572#discussion_r201318253","bodyText":"def instanciateElement(self, element) -> BotPlugin:\n    \"\"\"Overrides the instanciation of plugins to inject the bot reference.\"\"\"\n    return element(self.bot, name=self._current_pluginfo.name)","diffHunk":"@@ -1,8 +1,8 @@\n from errbot.backends.test import TestBot\n \n-def plugin_testbot(klass, loglevel, config=None):\n+def plugin_testbot(klass, plugin_name, loglevel, config=None):\n     config = config if config else dict()\n     testbot = TestBot(loglevel=loglevel, extra_config=config)\n     testbot.start()\n-    plug = testbot.bot.plugin_manager.instanciateElement(klass)\n+    plug = klass(testbot.bot, plugin_name)","author":{"login":"nvzard","avatarUrl":"https://avatars0.githubusercontent.com/u/19310512?v=4","name":"Nitanshu"},"createdAt":"2018-07-10T12:13:52Z","lastEditedAt":null,"updatedAt":"2018-07-10T12:13:52Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTMyMDI4OQ==","url":"https://github.com/coala/corobo/pull/572#discussion_r201320289","bodyText":"@meetmangukiya @gbin does it make a difference, where a class gets instantiated?","diffHunk":"@@ -1,8 +1,8 @@\n from errbot.backends.test import TestBot\n \n-def plugin_testbot(klass, loglevel, config=None):\n+def plugin_testbot(klass, plugin_name, loglevel, config=None):\n     config = config if config else dict()\n     testbot = TestBot(loglevel=loglevel, extra_config=config)\n     testbot.start()\n-    plug = testbot.bot.plugin_manager.instanciateElement(klass)\n+    plug = klass(testbot.bot, plugin_name)","author":{"login":"nvzard","avatarUrl":"https://avatars0.githubusercontent.com/u/19310512?v=4","name":"Nitanshu"},"createdAt":"2018-07-10T12:21:36Z","lastEditedAt":null,"updatedAt":"2018-07-10T12:21:36Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTQ3MjE4NA==","url":"https://github.com/coala/corobo/pull/572#discussion_r201472184","bodyText":"No this is not the cause for failures. Facing the TemplateNotFound exception due to the changes made to errbot.templating by this commit errbotio/errbot@9a03b72#diff-b27e6e3f6d8b53f810de95de950feea9","diffHunk":"@@ -1,8 +1,8 @@\n from errbot.backends.test import TestBot\n \n-def plugin_testbot(klass, loglevel, config=None):\n+def plugin_testbot(klass, plugin_name, loglevel, config=None):\n     config = config if config else dict()\n     testbot = TestBot(loglevel=loglevel, extra_config=config)\n     testbot.start()\n-    plug = testbot.bot.plugin_manager.instanciateElement(klass)\n+    plug = klass(testbot.bot, plugin_name)","author":{"login":"nvzard","avatarUrl":"https://avatars0.githubusercontent.com/u/19310512?v=4","name":"Nitanshu"},"createdAt":"2018-07-10T19:51:48Z","lastEditedAt":null,"updatedAt":"2018-07-10T19:51:48Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTU0MTIxMA==","url":"https://github.com/coala/corobo/pull/572#discussion_r201541210","bodyText":"Figured a workaround, explore yourself further, here's the patch that fixes it:\nFrom d9858f2dc7162273d8315ae37bfee6467257599e Mon Sep 17 00:00:00 2001\nFrom: Meet Mangukiya <meetmangukiya98@gmail.com>\nDate: Wed, 11 Jul 2018 06:44:23 +0530\nSubject: [PATCH] Fix templating issue\n\n---\n tests/labhub_test.py | 12 ++++++++++++\n 1 file changed, 12 insertions(+)\n\ndiff --git a/tests/labhub_test.py b/tests/labhub_test.py\nindex 9d69a64..e06b195 100644\n--- a/tests/labhub_test.py\n+++ b/tests/labhub_test.py\n@@ -19,9 +19,21 @@ from plugins.labhub import LabHub\n \n from tests.helper import plugin_testbot\n \n+\n+import errbot\n+from errbot.plugin_info import PluginInfo\n+from errbot.templating import add_plugin_templates_path\n+from pathlib import Path\n+\n+\n class TestLabHub(unittest.TestCase):\n \n     def setUp(self):\n+        labhub_info_path = Path(__file__).parent / '..' / 'plugins' / 'labhub.plug'\n+        with labhub_info_path.open() as plugfile:\n+            labhub_info = PluginInfo.load_file(plugfile, labhub_info_path)\n+        add_plugin_templates_path(labhub_info)\n+\n         plugins.labhub.github3 = create_autospec(github3)\n \n         self.mock_org = create_autospec(github3.orgs.Organization)\n-- \n2.18.0","diffHunk":"@@ -1,8 +1,8 @@\n from errbot.backends.test import TestBot\n \n-def plugin_testbot(klass, loglevel, config=None):\n+def plugin_testbot(klass, plugin_name, loglevel, config=None):\n     config = config if config else dict()\n     testbot = TestBot(loglevel=loglevel, extra_config=config)\n     testbot.start()\n-    plug = testbot.bot.plugin_manager.instanciateElement(klass)\n+    plug = klass(testbot.bot, plugin_name)","author":{"login":"meetmangukiya","avatarUrl":"https://avatars0.githubusercontent.com/u/7620533?v=4","name":"Meet Mangukiya"},"createdAt":"2018-07-11T01:18:06Z","lastEditedAt":"2018-07-11T01:19:47Z","updatedAt":"2018-07-11T01:19:47Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMjA0MzcyNg==","url":"https://github.com/coala/corobo/pull/572#discussion_r202043726","bodyText":"This should be put into a helper somewhere.","diffHunk":"@@ -22,6 +26,12 @@\n class TestLabHub(unittest.TestCase):\n \n     def setUp(self):\n+        labhub_info_path = (Path(__file__)","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-07-12T13:55:50Z","lastEditedAt":null,"updatedAt":"2018-07-12T13:55:50Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMjEyNTAyNA==","url":"https://github.com/coala/corobo/pull/572#discussion_r202125024","bodyText":"I shifted this to CoroboTestHelper class in the commit which I'll push once #573 gets merged. But I'll move this into helpers.py for now.","diffHunk":"@@ -22,6 +26,12 @@\n class TestLabHub(unittest.TestCase):\n \n     def setUp(self):\n+        labhub_info_path = (Path(__file__)","author":{"login":"nvzard","avatarUrl":"https://avatars0.githubusercontent.com/u/19310512?v=4","name":"Nitanshu"},"createdAt":"2018-07-12T17:55:37Z","lastEditedAt":"2018-07-12T18:15:08Z","updatedAt":"2018-07-12T18:15:08Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMjEzMjkzMg==","url":"https://github.com/coala/corobo/pull/572#discussion_r202132932","bodyText":"Doesn't make much sense because this is not generic and needed in all plugins using the helper. Specific to plugin stays specific to test cases, no?","diffHunk":"@@ -22,6 +26,12 @@\n class TestLabHub(unittest.TestCase):\n \n     def setUp(self):\n+        labhub_info_path = (Path(__file__)","author":{"login":"meetmangukiya","avatarUrl":"https://avatars0.githubusercontent.com/u/7620533?v=4","name":"Meet Mangukiya"},"createdAt":"2018-07-12T18:21:03Z","lastEditedAt":null,"updatedAt":"2018-07-12T18:21:03Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMjEzNTI1Mg==","url":"https://github.com/coala/corobo/pull/572#discussion_r202135252","bodyText":"Might be useful for some other plugins which may use templates in future :P\nBut we can always move it out when the time comes. Looks cleaner though.","diffHunk":"@@ -22,6 +26,12 @@\n class TestLabHub(unittest.TestCase):\n \n     def setUp(self):\n+        labhub_info_path = (Path(__file__)","author":{"login":"nvzard","avatarUrl":"https://avatars0.githubusercontent.com/u/19310512?v=4","name":"Nitanshu"},"createdAt":"2018-07-12T18:28:25Z","lastEditedAt":"2018-07-12T18:30:22Z","updatedAt":"2018-07-12T18:30:22Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMjE2NzE2Mg==","url":"https://github.com/coala/corobo/pull/572#discussion_r202167162","bodyText":"can't the plugin name be derived using the klass?","diffHunk":"@@ -1,8 +1,18 @@\n from errbot.backends.test import TestBot\n+from errbot.plugin_info import PluginInfo\n+from errbot.templating import add_plugin_templates_path\n+from pathlib import Path\n \n-def plugin_testbot(klass, loglevel, config=None):\n+def plugin_testbot(klass, plugin_name, loglevel, config=None):","author":{"login":"meetmangukiya","avatarUrl":"https://avatars0.githubusercontent.com/u/7620533?v=4","name":"Meet Mangukiya"},"createdAt":"2018-07-12T20:24:27Z","lastEditedAt":null,"updatedAt":"2018-07-12T20:24:27Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMjE2OTc0OQ==","url":"https://github.com/coala/corobo/pull/572#discussion_r202169749","bodyText":"Yes it can, but sometimes the plugin name can be different from the class name. Eg: git_stats plugin.\nklass.__name__ will return the name of the class though. Should go for it or let it be?","diffHunk":"@@ -1,8 +1,18 @@\n from errbot.backends.test import TestBot\n+from errbot.plugin_info import PluginInfo\n+from errbot.templating import add_plugin_templates_path\n+from pathlib import Path\n \n-def plugin_testbot(klass, loglevel, config=None):\n+def plugin_testbot(klass, plugin_name, loglevel, config=None):","author":{"login":"nvzard","avatarUrl":"https://avatars0.githubusercontent.com/u/19310512?v=4","name":"Nitanshu"},"createdAt":"2018-07-12T20:33:34Z","lastEditedAt":"2018-07-12T20:36:37Z","updatedAt":"2018-07-12T20:36:37Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMjE3MzU2NQ==","url":"https://github.com/coala/corobo/pull/572#discussion_r202173565","bodyText":"There is a solution, load plugin file, get the name key.","diffHunk":"@@ -1,8 +1,18 @@\n from errbot.backends.test import TestBot\n+from errbot.plugin_info import PluginInfo\n+from errbot.templating import add_plugin_templates_path\n+from pathlib import Path\n \n-def plugin_testbot(klass, loglevel, config=None):\n+def plugin_testbot(klass, plugin_name, loglevel, config=None):","author":{"login":"meetmangukiya","avatarUrl":"https://avatars0.githubusercontent.com/u/7620533?v=4","name":"Meet Mangukiya"},"createdAt":"2018-07-12T20:46:26Z","lastEditedAt":null,"updatedAt":"2018-07-12T20:46:26Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMjE3NTI3Mw==","url":"https://github.com/coala/corobo/pull/572#discussion_r202175273","bodyText":"but even for that, we'll have to pass the name of the plug file. Should I make it\ndef plugin_testbot(klass, plug_file_name, loglevel, config=None):\n    config = config if config else dict()\n    testbot = TestBot(loglevel=loglevel, extra_config=config)\n    testbot.start()\n    plugin_info_path = (Path(__file__)\n    parent / '..' / 'plugins' / plug_file_name)\n    with plugin_info_path.open() as plugfile:\n        plugin_info = PluginInfo.load_file(plugfile, plugin_info_path)\n        plugin_name = plugfile.['Core']['name']\n    add_plugin_templates_path(plugin_info)\n    plug = klass(testbot.bot, plugin_name)\n    return testbot, plug\n\n\nand load plugfile every time plugin_testbot is called.","diffHunk":"@@ -1,8 +1,18 @@\n from errbot.backends.test import TestBot\n+from errbot.plugin_info import PluginInfo\n+from errbot.templating import add_plugin_templates_path\n+from pathlib import Path\n \n-def plugin_testbot(klass, loglevel, config=None):\n+def plugin_testbot(klass, plugin_name, loglevel, config=None):","author":{"login":"nvzard","avatarUrl":"https://avatars0.githubusercontent.com/u/19310512?v=4","name":"Nitanshu"},"createdAt":"2018-07-12T20:52:34Z","lastEditedAt":"2018-07-12T20:59:54Z","updatedAt":"2018-07-12T20:59:54Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMjQ5Mjk2NA==","url":"https://github.com/coala/corobo/pull/572#discussion_r202492964","bodyText":"Can you not find the name of the plug file from the plug name?","diffHunk":"@@ -1,8 +1,18 @@\n from errbot.backends.test import TestBot\n+from errbot.plugin_info import PluginInfo\n+from errbot.templating import add_plugin_templates_path\n+from pathlib import Path\n \n-def plugin_testbot(klass, loglevel, config=None):\n+def plugin_testbot(klass, plugin_name, loglevel, config=None):","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-07-13T23:15:53Z","lastEditedAt":null,"updatedAt":"2018-07-13T23:15:53Z"},{"id":"MDEyOklzc3VlQ29tbWVudDM5OTQ4ODg4Nw==","url":"https://github.com/coala/corobo/pull/572#issuecomment-399488887","bodyText":"errbotio/errbot@9a03b72#diff-86fb3ee3298c4b1416b1da174131201c\nThis removed the instanciateElement method from the plugin manager.","diffHunk":null,"author":{"login":"nvzard","avatarUrl":"https://avatars0.githubusercontent.com/u/19310512?v=4","name":"Nitanshu"},"createdAt":"2018-06-22T15:51:13Z","lastEditedAt":null,"updatedAt":"2018-06-22T15:51:13Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwMzY1MDY2MQ==","url":"https://github.com/coala/corobo/pull/572#issuecomment-403650661","bodyText":"weird, all the tests are passing locally","diffHunk":null,"author":{"login":"nvzard","avatarUrl":"https://avatars0.githubusercontent.com/u/19310512?v=4","name":"Nitanshu"},"createdAt":"2018-07-09T23:24:45Z","lastEditedAt":null,"updatedAt":"2018-07-09T23:24:45Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwNTU1MzkxNg==","url":"https://github.com/coala/corobo/pull/572#issuecomment-405553916","bodyText":"I simply rebased my #581 commit over this PR and resolved the merge conflict. Should I also delete the changes made to lines in requirements.txt: Update Errbot which are again being changed by the top commit?","diffHunk":null,"author":{"login":"nvzard","avatarUrl":"https://avatars0.githubusercontent.com/u/19310512?v=4","name":"Nitanshu"},"createdAt":"2018-07-17T11:46:18Z","lastEditedAt":null,"updatedAt":"2018-07-17T11:46:18Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwODY0NzIyMw==","url":"https://github.com/coala/corobo/pull/572#issuecomment-408647223","bodyText":"Do we need all of 56995e1 in this PR?\nerrbot upgrade fails without it?","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-07-29T02:21:16Z","lastEditedAt":null,"updatedAt":"2018-07-29T02:21:16Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwODY5MTM2Mg==","url":"https://github.com/coala/corobo/pull/572#issuecomment-408691362","bodyText":"We actually need none 56995e1 for the errbot upgrade as it already includes the changes required to do an upgrade.\n@jayvdb I rebased the commit in #581 on top of this PR as you asked #581 (review) .\n56995e1 is the commit from the PR #581 including the requested changes.\nI'll have to close #581 since I rebased that commit on top of this PR.","diffHunk":null,"author":{"login":"nvzard","avatarUrl":"https://avatars0.githubusercontent.com/u/19310512?v=4","name":"Nitanshu"},"createdAt":"2018-07-29T17:06:53Z","lastEditedAt":"2018-07-29T17:20:25Z","updatedAt":"2018-07-29T17:20:25Z"}]}}},{"repoOwner":"coala","repoName":"corobo","updatedAtMs":1531523987000,"issue":{"htmlUrl":"https://github.com/coala/corobo/pull/573","number":573,"title":".coafile: Include tests","body":"Closes #565","comments":16,"createdAt":"2018-06-23T10:36:48Z","updatedAt":"2018-07-13T23:19:47Z","closedAt":"2018-07-13T23:19:41Z","state":"merged","user":{"login":"nvzard","avatarUrl":"https://avatars0.githubusercontent.com/u/19310512?v=4"},"owner":{"login":"nvzard","avatarUrl":"https://avatars0.githubusercontent.com/u/19310512?v=4"},"labels":[{"name":"difficulty/low","color":"207de5"},{"name":"process/pending review","color":"bfe5bf"},{"name":"size/M","color":"ededed"}],"pullRequest":{"htmlUrl":"https://github.com/coala/corobo/pull/573","comments":[{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5ODgxOTg0Ng==","url":"https://github.com/coala/corobo/pull/573#discussion_r198819846","bodyText":"Using Ignore bear here, as this line will be modified again soon when you fix the bug, and will then be reformatted.","diffHunk":"@@ -142,8 +147,9 @@ def test_create_issue_cmd(self):\n         # TODO\n         # Ignoring assertion to prevent build failure for time being\n         # Creating issue in private chat\n-        # testbot_private.assertCommand('!new issue repository this is the title\\nbo\\ndy',\n-        #                       'You\\'re not allowed')\n+        # testbot_private.assertCommand('!new issue repository this '","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNTc1Njg2NQ==","createdAt":"2018-06-28T17:29:07Z","content":"THUMBS_UP","user":{"login":"nvzard","name":"Nitanshu"}}],"createdAt":"2018-06-28T12:24:17Z","lastEditedAt":null,"updatedAt":"2018-06-28T12:24:17Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5ODgyMDA1NA==","url":"https://github.com/coala/corobo/pull/573#discussion_r198820054","bodyText":"start the command string on the next line so that it can use the full width, and have line breaks in sensible spots.","diffHunk":"@@ -153,21 +159,24 @@ def test_create_issue_cmd(self):\n         labhub.REPOS = {'repository': self.mock_repo,\n                         'repository.github.io': self.mock_repo}\n \n-        testbot_public.assertCommand('!new issue repository this is the title\\nbo\\ndy',\n-                              'Here you go')\n+        testbot_public.assertCommand('!new issue repository this is the '","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNTc1Njg1OA==","createdAt":"2018-06-28T17:28:59Z","content":"THUMBS_UP","user":{"login":"nvzard","name":"Nitanshu"}}],"createdAt":"2018-06-28T12:25:12Z","lastEditedAt":null,"updatedAt":"2018-06-28T12:25:12Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5ODgyMTE0MA==","url":"https://github.com/coala/corobo/pull/573#discussion_r198821140","bodyText":"start string on next line","diffHunk":"@@ -153,21 +159,24 @@ def test_create_issue_cmd(self):\n         labhub.REPOS = {'repository': self.mock_repo,\n                         'repository.github.io': self.mock_repo}\n \n-        testbot_public.assertCommand('!new issue repository this is the title\\nbo\\ndy',\n-                              'Here you go')\n+        testbot_public.assertCommand('!new issue repository this is the '\n+                                     'title\\nbo\\ndy',\n+                                     'Here you go')\n \n         labhub.REPOS['repository'].create_issue.assert_called_once_with(\n             'this is the title', 'bo\\ndy\\nOpened by @None at [text]()'\n         )\n \n-        testbot_public.assertCommand('!new issue repository.github.io another title\\nand body',\n-                              'Here you go')\n+        testbot_public.assertCommand('!new issue repository.github.io '","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNTc1Njg1NA==","createdAt":"2018-06-28T17:28:56Z","content":"THUMBS_UP","user":{"login":"nvzard","name":"Nitanshu"}}],"createdAt":"2018-06-28T12:29:10Z","lastEditedAt":null,"updatedAt":"2018-06-28T12:29:10Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5ODgyMTQ4Ng==","url":"https://github.com/coala/corobo/pull/573#discussion_r198821486","bodyText":"move strings to next line so you dont need to split a URL.  that makes it quite hard to read and understand the test procedure/intention.","diffHunk":"@@ -191,20 +200,26 @@ def test_unassign_cmd(self):\n         mock_iss.assignees = (None, )\n         mock_iss.unassign = MagicMock()\n \n-        testbot.assertCommand('!unassign https://github.com/coala/name/issues/23',\n+        # Start ignoring InvalidLinkBear\n+        testbot.assertCommand('!unassign https://github.com/coala/name/'","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNTc1Njg1MA==","createdAt":"2018-06-28T17:28:52Z","content":"THUMBS_UP","user":{"login":"nvzard","name":"Nitanshu"}}],"createdAt":"2018-06-28T12:30:23Z","lastEditedAt":null,"updatedAt":"2018-06-28T12:30:23Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5ODgyMTkxNw==","url":"https://github.com/coala/corobo/pull/573#discussion_r198821917","bodyText":"drop create_autospec to next line and indent only four from the start of the key.","diffHunk":"@@ -368,22 +385,28 @@ def test_mark_cmd(self):\n         mock_gitlab_mr.labels = ['process/wip']\n         testbot.assertCommand(cmd_github.format('pending', 'coala', 'a', '23'),\n                               'marked pending review')\n-        testbot.assertCommand(cmd_github.format('pending-review', 'coala', 'a', '23'),\n+        testbot.assertCommand(cmd_github.format('pending-review', 'coala',\n+                                                'a', '23'),\n                               'marked pending review')\n-        testbot.assertCommand(cmd_github.format('pending review', 'coala', 'a', '23'),\n+        testbot.assertCommand(cmd_github.format('pending review',\n+                                                'coala', 'a', '23'),\n                               'marked pending review')\n+        # Stop ignoring\n \n     def test_alive(self):\n         labhub, testbot = plugin_testbot(plugins.labhub.LabHub, logging.ERROR)\n         with patch('plugins.labhub.time.sleep') as mock_sleep:\n             labhub.gh_repos = {\n                 'coala': create_autospec(IGitt.GitHub.GitHub.GitHubRepository),\n-                'coala-bears': create_autospec(IGitt.GitHub.GitHub.GitHubRepository),\n-                'coala-utils': create_autospec(IGitt.GitHub.GitHub.GitHubRepository)\n+                'coala-bears': create_autospec(","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNTc1Njg0NA==","createdAt":"2018-06-28T17:28:43Z","content":"THUMBS_UP","user":{"login":"nvzard","name":"Nitanshu"}}],"createdAt":"2018-06-28T12:31:58Z","lastEditedAt":null,"updatedAt":"2018-06-28T12:31:58Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTk4NTYzNw==","url":"https://github.com/coala/corobo/pull/573#discussion_r199985637","bodyText":"apologies. my comment at #573 (comment) suggested the wrong syntax.\nthe point of using ignore is to NOT modify the line.\nSo, you need to use Ignoring ... and End ignoring or something like that so that this TODO doesnt create style errors until it is fixed.","diffHunk":"@@ -144,7 +149,7 @@ def test_create_issue_cmd(self):\n         # TODO\n         # Ignoring assertion to prevent build failure for time being\n         # Creating issue in private chat\n-        # testbot_private.assertCommand('!new issue repository this is the title\\nbo\\ndy',\n+        # testbot_private.assertCommand('!new issue repository this is the title\\nbo\\ndy',  # Ignore PycodestyleBear, LineLengthBear","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNjAwNjA3MQ==","createdAt":"2018-07-04T17:19:08Z","content":"THUMBS_UP","user":{"login":"nvzard","name":"Nitanshu"}}],"createdAt":"2018-07-04T00:58:27Z","lastEditedAt":null,"updatedAt":"2018-07-04T00:58:27Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTk4NTkzNQ==","url":"https://github.com/coala/corobo/pull/573#discussion_r199985935","bodyText":"like the others, dont have \\n in the middle of the line.  It makes it harder for people to read the test and understand its intention.\nAlso these multiple line commands should use textwrap.dedent('''...''') or \"\"\"...\"\"\" so that you dont need to put \\n in the message, and so that the reader doesnt need to check whether the strings on multiple lines are implicit string concats or have a comma, etc.  multiline strings should use Python's multiline strings syntax.\n(would be a possible enhancement to errbot to add a assertMultilineCommand which does the textwrap.dedent for the test writer.)","diffHunk":"@@ -155,21 +160,24 @@ def test_create_issue_cmd(self):\n         labhub.REPOS = {'repository': self.mock_repo,\n                         'repository.github.io': self.mock_repo}\n \n-        testbot_public.assertCommand('!new issue repository this is the title\\nbo\\ndy',\n-                              'Here you go')\n+        testbot_public.assertCommand(\n+            '!new issue repository this is the title\\nbo\\ndy',\n+            'Here you go')\n \n         labhub.REPOS['repository'].create_issue.assert_called_once_with(\n             'this is the title', 'bo\\ndy\\nOpened by @None at [text]()'\n         )\n \n-        testbot_public.assertCommand('!new issue repository.github.io another title\\nand body',\n-                              'Here you go')\n+        testbot_public.assertCommand(\n+            '!new issue repository.github.io another title\\nand body',","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNjAwNjA2OQ==","createdAt":"2018-07-04T17:19:05Z","content":"THUMBS_UP","user":{"login":"nvzard","name":"Nitanshu"}}],"createdAt":"2018-07-04T01:01:16Z","lastEditedAt":null,"updatedAt":"2018-07-04T01:01:16Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTk4NzU3MQ==","url":"https://github.com/coala/corobo/pull/573#discussion_r199987571","bodyText":"change all of these invalid URLs to contain constant strings which you can ignore using settings in the .coafile, and can be re-used in future so InvalidLinkBear doesnt need to be ignored all the time.\n(and where you are improving the style of tests, also switch to using consistent issue numbers instead of random numbers, which make the reader wonder whether those numbers have some impact on the tests.)\nhttps://github.com/coala/name/issues/23 -> https://github.com/coala/example/issues/999\nhttps://github.com/coala/s/issues/52 -> https://github.com/coala/example2/issues/999\nhttps://gitlab.com/ala/am/issues/532 -> https://gitlab.com/example/test/issues/999","diffHunk":"@@ -193,20 +201,27 @@ def test_unassign_cmd(self):\n         mock_iss.assignees = (None, )\n         mock_iss.unassign = MagicMock()\n \n-        testbot.assertCommand('!unassign https://github.com/coala/name/issues/23',\n-                              'you are unassigned now', timeout=10000)\n+        # Start ignoring InvalidLinkBear","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNjAwNjA2NQ==","createdAt":"2018-07-04T17:19:02Z","content":"THUMBS_UP","user":{"login":"nvzard","name":"Nitanshu"}}],"createdAt":"2018-07-04T01:17:49Z","lastEditedAt":null,"updatedAt":"2018-07-04T01:17:49Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTk4NzcxNw==","url":"https://github.com/coala/corobo/pull/573#discussion_r199987717","bodyText":"please create a newcomer or low issue for this to be changed to https","diffHunk":"@@ -2,10 +2,13 @@\n \n extra_plugin_dir = 'plugins'\n \n+\n def test_search_cmd(testbot):\n-    testbot.assertCommand('!search api this is search string',\n-                          'http://api.coala.io/en/latest/search.html?q=this+is+search+string')\n-    testbot.assertCommand('!search user this is search string',\n-                          'http://docs.coala.io/en/latest/search.html?q=this+is+search+string')\n+    testbot.assertCommand(\n+        '!search api this is search string',\n+        'http://api.coala.io/en/latest/search.html?q=this+is+search+string')\n+    testbot.assertCommand(\n+        '!search user this is search string',\n+        'http://docs.coala.io/en/latest/search.html?q=this+is+search+string')","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNjAwNjA2NA==","createdAt":"2018-07-04T17:19:00Z","content":"THUMBS_UP","user":{"login":"nvzard","name":"Nitanshu"}}],"createdAt":"2018-07-04T01:19:31Z","lastEditedAt":null,"updatedAt":"2018-07-04T01:19:31Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTk4OTMwMg==","url":"https://github.com/coala/corobo/pull/573#discussion_r199989302","bodyText":"or assertCommand(..., dedent=True)","diffHunk":"@@ -155,21 +160,24 @@ def test_create_issue_cmd(self):\n         labhub.REPOS = {'repository': self.mock_repo,\n                         'repository.github.io': self.mock_repo}\n \n-        testbot_public.assertCommand('!new issue repository this is the title\\nbo\\ndy',\n-                              'Here you go')\n+        testbot_public.assertCommand(\n+            '!new issue repository this is the title\\nbo\\ndy',\n+            'Here you go')\n \n         labhub.REPOS['repository'].create_issue.assert_called_once_with(\n             'this is the title', 'bo\\ndy\\nOpened by @None at [text]()'\n         )\n \n-        testbot_public.assertCommand('!new issue repository.github.io another title\\nand body',\n-                              'Here you go')\n+        testbot_public.assertCommand(\n+            '!new issue repository.github.io another title\\nand body',","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-04T01:33:45Z","lastEditedAt":null,"updatedAt":"2018-07-04T01:33:45Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDU2NzYxMQ==","url":"https://github.com/coala/corobo/pull/573#discussion_r200567611","bodyText":"@jayvdb Did you meant to use repr(multiline_string) instead? As textwrap.dedent will remove only the common leading whitespace from every line in text.","diffHunk":"@@ -155,21 +160,24 @@ def test_create_issue_cmd(self):\n         labhub.REPOS = {'repository': self.mock_repo,\n                         'repository.github.io': self.mock_repo}\n \n-        testbot_public.assertCommand('!new issue repository this is the title\\nbo\\ndy',\n-                              'Here you go')\n+        testbot_public.assertCommand(\n+            '!new issue repository this is the title\\nbo\\ndy',\n+            'Here you go')\n \n         labhub.REPOS['repository'].create_issue.assert_called_once_with(\n             'this is the title', 'bo\\ndy\\nOpened by @None at [text]()'\n         )\n \n-        testbot_public.assertCommand('!new issue repository.github.io another title\\nand body',\n-                              'Here you go')\n+        testbot_public.assertCommand(\n+            '!new issue repository.github.io another title\\nand body',","author":{"login":"nvzard","avatarUrl":"https://avatars0.githubusercontent.com/u/19310512?v=4","name":"Nitanshu"},"reactions":[],"createdAt":"2018-07-06T07:17:02Z","lastEditedAt":null,"updatedAt":"2018-07-06T07:17:02Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDU3NjAxOA==","url":"https://github.com/coala/corobo/pull/573#discussion_r200576018","bodyText":"testbot_public.assertCommand(\n    repr('''\\\n!new issue repository this is the title\nfirst line of body\nsecond line of body'\n'''),\n    'Here you go')\n\nSomethig like this looks ugly","diffHunk":"@@ -155,21 +160,24 @@ def test_create_issue_cmd(self):\n         labhub.REPOS = {'repository': self.mock_repo,\n                         'repository.github.io': self.mock_repo}\n \n-        testbot_public.assertCommand('!new issue repository this is the title\\nbo\\ndy',\n-                              'Here you go')\n+        testbot_public.assertCommand(\n+            '!new issue repository this is the title\\nbo\\ndy',\n+            'Here you go')\n \n         labhub.REPOS['repository'].create_issue.assert_called_once_with(\n             'this is the title', 'bo\\ndy\\nOpened by @None at [text]()'\n         )\n \n-        testbot_public.assertCommand('!new issue repository.github.io another title\\nand body',\n-                              'Here you go')\n+        testbot_public.assertCommand(\n+            '!new issue repository.github.io another title\\nand body',","author":{"login":"nvzard","avatarUrl":"https://avatars0.githubusercontent.com/u/19310512?v=4","name":"Nitanshu"},"reactions":[],"createdAt":"2018-07-06T07:55:15Z","lastEditedAt":"2018-07-06T07:58:36Z","updatedAt":"2018-07-06T07:58:36Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDY2OTI2Nw==","url":"https://github.com/coala/corobo/pull/573#discussion_r200669267","bodyText":"omg .. of course that is ugly.  The purpose of dedent is to .. dedent ... it allows the string to be indented so that it follows python indentation style.\nfwiw, repr would be completely wrong, replacing the desired newline with literal \\ and n.\ntestbot_public.assertCommand(\n    textwrap.dedent('''\\\n        !new issue repository this is the title\n        first line of body\n        second line of body'\n    '''),\n    'Here you go')\nThe use of the \\ can be removed by creating wrapper as requested, such as assertMultilineCommand, because then the wrapper can do the following to remove the leading blank line\n'\\n'.join(textwrap.dedent(command).splitlines()[1:])\nAnd that can be improved to only remove the first line if it is blank.","diffHunk":"@@ -155,21 +160,24 @@ def test_create_issue_cmd(self):\n         labhub.REPOS = {'repository': self.mock_repo,\n                         'repository.github.io': self.mock_repo}\n \n-        testbot_public.assertCommand('!new issue repository this is the title\\nbo\\ndy',\n-                              'Here you go')\n+        testbot_public.assertCommand(\n+            '!new issue repository this is the title\\nbo\\ndy',\n+            'Here you go')\n \n         labhub.REPOS['repository'].create_issue.assert_called_once_with(\n             'this is the title', 'bo\\ndy\\nOpened by @None at [text]()'\n         )\n \n-        testbot_public.assertCommand('!new issue repository.github.io another title\\nand body',\n-                              'Here you go')\n+        testbot_public.assertCommand(\n+            '!new issue repository.github.io another title\\nand body',","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNjEyNzM0MA==","createdAt":"2018-07-07T07:58:59Z","content":"THUMBS_UP","user":{"login":"nvzard","name":"Nitanshu"}}],"createdAt":"2018-07-06T14:24:15Z","lastEditedAt":null,"updatedAt":"2018-07-06T14:24:15Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDgxMDg4MQ==","url":"https://github.com/coala/corobo/pull/573#discussion_r200810881","bodyText":"I opened a PR errbotio/errbot#1238. As well as made the changes here for now.","diffHunk":"@@ -155,21 +160,24 @@ def test_create_issue_cmd(self):\n         labhub.REPOS = {'repository': self.mock_repo,\n                         'repository.github.io': self.mock_repo}\n \n-        testbot_public.assertCommand('!new issue repository this is the title\\nbo\\ndy',\n-                              'Here you go')\n+        testbot_public.assertCommand(\n+            '!new issue repository this is the title\\nbo\\ndy',\n+            'Here you go')\n \n         labhub.REPOS['repository'].create_issue.assert_called_once_with(\n             'this is the title', 'bo\\ndy\\nOpened by @None at [text]()'\n         )\n \n-        testbot_public.assertCommand('!new issue repository.github.io another title\\nand body',\n-                              'Here you go')\n+        testbot_public.assertCommand(\n+            '!new issue repository.github.io another title\\nand body',","author":{"login":"nvzard","avatarUrl":"https://avatars0.githubusercontent.com/u/19310512?v=4","name":"Nitanshu"},"reactions":[],"createdAt":"2018-07-07T12:17:51Z","lastEditedAt":null,"updatedAt":"2018-07-07T12:17:51Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDgxMTExNQ==","url":"https://github.com/coala/corobo/pull/573#discussion_r200811115","bodyText":"#579","diffHunk":"@@ -2,10 +2,13 @@\n \n extra_plugin_dir = 'plugins'\n \n+\n def test_search_cmd(testbot):\n-    testbot.assertCommand('!search api this is search string',\n-                          'http://api.coala.io/en/latest/search.html?q=this+is+search+string')\n-    testbot.assertCommand('!search user this is search string',\n-                          'http://docs.coala.io/en/latest/search.html?q=this+is+search+string')\n+    testbot.assertCommand(\n+        '!search api this is search string',\n+        'http://api.coala.io/en/latest/search.html?q=this+is+search+string')\n+    testbot.assertCommand(\n+        '!search user this is search string',\n+        'http://docs.coala.io/en/latest/search.html?q=this+is+search+string')","author":{"login":"nvzard","avatarUrl":"https://avatars0.githubusercontent.com/u/19310512?v=4","name":"Nitanshu"},"reactions":[],"createdAt":"2018-07-07T12:29:07Z","lastEditedAt":null,"updatedAt":"2018-07-07T12:29:07Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDg5MzI0MQ==","url":"https://github.com/coala/corobo/pull/573#discussion_r200893241","bodyText":"This is not what I said to do in #573 (comment)\nHere you are ignoring all links to those websites in any file.  Obviously not approriate I would think.","diffHunk":"@@ -26,6 +26,7 @@ bears = LineLengthBear\n \n [all.links]\n bears = InvalidLinkBear\n+link_ignore_regex = ((github|gitlab)\\.com|\\{|\\$)","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-09T06:42:57Z","lastEditedAt":null,"updatedAt":"2018-07-09T06:42:57Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTA4MDIzMA==","url":"https://github.com/coala/corobo/pull/573#discussion_r201080230","bodyText":"You are using (). You can start the string on next line, indented.","diffHunk":"@@ -340,11 +373,13 @@ def test_mark_cmd(self):\n         # Non-eistent repo\n         testbot.assertCommand(cmd_github.format('wip', 'a', 'b', '23'),\n                               'Repository doesn\\'t exist.')\n-        testbot.assertCommand('!mark wip https://gitlab.com/a/b/merge_requests/2',\n-                              'Repository doesn\\'t exist.')\n+        testbot.assertCommand(\n+            '!mark wip https://gitlab.com/a/b/merge_requests/2',\n+            'Repository doesn\\'t exist.')\n \n-        mock_github_mr.web_url = 'https://github.com/coala/a/pull/23'\n-        mock_gitlab_mr.web_url = 'https://gitlab.com/coala/a/merge_requests/23'\n+        mock_github_mr.web_url = 'https://github.com/coala/test/pull/23'\n+        mock_gitlab_mr.web_url = ('https://gitlab.com/coala/test'","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-09T17:13:31Z","lastEditedAt":null,"updatedAt":"2018-07-09T17:13:31Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTA4MTU0MA==","url":"https://github.com/coala/corobo/pull/573#discussion_r201081540","bodyText":"Start string on next line, indented.","diffHunk":"@@ -94,7 +97,8 @@ def test_run_coala(self):\n                       self.pop_message())\n \n     def test_construct_settings(self):\n-        self.assertEqual(Coatils.construct_settings('bear1 a=1 b=2 bear2 bear3'),\n+        self.assertEqual(Coatils.construct_settings('bear1 a=1 b=2 bear2 '","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-09T17:17:49Z","lastEditedAt":null,"updatedAt":"2018-07-09T17:17:49Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTg5Njc3Mg==","url":"https://github.com/coala/corobo/pull/573#discussion_r201896772","bodyText":"Improper indentation.\nNot same style as you use directly above","diffHunk":"@@ -155,21 +163,41 @@ def test_create_issue_cmd(self):\n         labhub.REPOS = {'repository': self.mock_repo,\n                         'repository.github.io': self.mock_repo}\n \n-        testbot_public.assertCommand('!new issue repository this is the title\\nbo\\ndy',\n-                              'Here you go')\n+        testbot_public.assertCommand(\n+            textwrap.dedent('''\\\n+                !new issue repository this is the title\n+                first line of body\n+                second line of body\n+            '''),\n+            'Here you go')\n \n         labhub.REPOS['repository'].create_issue.assert_called_once_with(\n-            'this is the title', 'bo\\ndy\\nOpened by @None at [text]()'\n+            'this is the title',\n+            textwrap.dedent('''\\\n+                first line of body\n+                second line of body\n+                Opened by @None at [text]()'''\n+                            )","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-12T03:01:03Z","lastEditedAt":null,"updatedAt":"2018-07-12T03:01:03Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTg5Njg5Ng==","url":"https://github.com/coala/corobo/pull/573#discussion_r201896896","bodyText":"Again.\nCheck elsewhere","diffHunk":"@@ -155,21 +163,41 @@ def test_create_issue_cmd(self):\n         labhub.REPOS = {'repository': self.mock_repo,\n                         'repository.github.io': self.mock_repo}\n \n-        testbot_public.assertCommand('!new issue repository this is the title\\nbo\\ndy',\n-                              'Here you go')\n+        testbot_public.assertCommand(\n+            textwrap.dedent('''\\\n+                !new issue repository this is the title\n+                first line of body\n+                second line of body\n+            '''),\n+            'Here you go')\n \n         labhub.REPOS['repository'].create_issue.assert_called_once_with(\n-            'this is the title', 'bo\\ndy\\nOpened by @None at [text]()'\n+            'this is the title',\n+            textwrap.dedent('''\\\n+                first line of body\n+                second line of body\n+                Opened by @None at [text]()'''\n+                            )\n         )\n \n-        testbot_public.assertCommand('!new issue repository.github.io another title\\nand body',\n-                              'Here you go')\n+        testbot_public.assertCommand(\n+            textwrap.dedent('''\\\n+                !new issue repository.github.io another title\n+                body\n+            '''),\n+            'Here you go')\n \n         labhub.REPOS['repository.github.io'].create_issue.assert_called_with(\n-            'another title', 'and body\\nOpened by @None at [text]()'\n+            'another title',\n+            textwrap.dedent('''\\\n+                body\n+                Opened by @None at [text]()'''\n+                            )","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-12T03:02:21Z","lastEditedAt":null,"updatedAt":"2018-07-12T03:02:21Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwMjEzMTcyNQ==","url":"https://github.com/coala/corobo/pull/573#issuecomment-402131725","bodyText":"@jayvdb can you please review this, I made the requested changes.","diffHunk":null,"author":{"login":"nvzard","avatarUrl":"https://avatars0.githubusercontent.com/u/19310512?v=4","name":"Nitanshu"},"reactions":[],"createdAt":"2018-07-03T12:05:33Z","lastEditedAt":null,"updatedAt":"2018-07-03T12:05:33Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwNDQ5NjE5OQ==","url":"https://github.com/coala/corobo/pull/573#issuecomment-404496199","bodyText":"I did a thorough review and made the changes. Hope everything is fine this time.","diffHunk":null,"author":{"login":"nvzard","avatarUrl":"https://avatars0.githubusercontent.com/u/19310512?v=4","name":"Nitanshu"},"reactions":[],"createdAt":"2018-07-12T12:32:44Z","lastEditedAt":null,"updatedAt":"2018-07-12T12:32:44Z"}]}}},{"repoOwner":"coala","repoName":"corobo","updatedAtMs":1531487343000,"issue":{"htmlUrl":"https://github.com/coala/corobo/pull/576","number":576,"title":"LabHub: Remove redundant teams list","body":"Redefine excessive usage for the list\nof teams.\nCloses #575","comments":13,"createdAt":"2018-06-26T22:31:55Z","updatedAt":"2018-07-13T13:09:03Z","closedAt":"2018-06-28T11:38:15Z","state":"merged","user":{"login":"nvzard","avatarUrl":"https://avatars0.githubusercontent.com/u/19310512?v=4"},"owner":{"login":"nvzard","avatarUrl":"https://avatars0.githubusercontent.com/u/19310512?v=4"},"labels":[{"name":"enhancement","color":"84b6eb"},{"name":"process/approved","color":"009800"},{"name":"size/XS","color":"ededed"}],"pullRequest":{"htmlUrl":"https://github.com/coala/corobo/pull/576","comments":[{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5ODQ2MjQ2Nw==","url":"https://github.com/coala/corobo/pull/576#discussion_r198462467","bodyText":"trailing comma.","diffHunk":"@@ -71,6 +71,17 @@ def TEAMS(self):\n     def TEAMS(self, new):\n         self._teams = new\n \n+    def team_mapping(self):\n+        return {\n+            'newcomers': self.TEAMS[self.GH_ORG_NAME + ' newcomers'],\n+            'developers': self.TEAMS[self.GH_ORG_NAME + ' developers'],\n+            'maintainers': self.TEAMS[self.GH_ORG_NAME + ' maintainers']","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNTY4MTAwMg==","createdAt":"2018-06-27T13:20:24Z","content":"THUMBS_UP","user":{"login":"nvzard","name":"Nitanshu"}}],"createdAt":"2018-06-27T11:43:34Z","lastEditedAt":null,"updatedAt":"2018-06-27T11:43:34Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5ODQ2MjY0OQ==","url":"https://github.com/coala/corobo/pull/576#discussion_r198462649","bodyText":"trailing comma","diffHunk":"@@ -111,6 +111,8 @@ def test_is_room_member(self):\n     def test_hello_world_callback(self):\n         teams = {\n             'coala newcomers': self.mock_team,\n+            'coala developers': self.mock_team,\n+            'coala maintainers': self.mock_team","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNTY4MTAwMQ==","createdAt":"2018-06-27T13:20:22Z","content":"THUMBS_UP","user":{"login":"nvzard","name":"Nitanshu"}}],"createdAt":"2018-06-27T11:44:25Z","lastEditedAt":null,"updatedAt":"2018-06-27T11:44:25Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5ODQ2MzUwNw==","url":"https://github.com/coala/corobo/pull/576#discussion_r198463507","bodyText":"keep the function, change what it does.\nthat is less disruptive to existing code, making it easier to read&review the changes","diffHunk":"@@ -89,40 +100,28 @@ def invite_cmd(self, msg, match):\n         team = 'newcomers' if match.group(2) is None else match.group(2)\n         team = team.lower()\n \n-        is_developer = self.TEAMS[self.GH_ORG_NAME +\n-                                  ' developers'].is_member(inviter)\n-        is_maintainer = self.TEAMS[self.GH_ORG_NAME +\n-                                   ' maintainers'].is_member(inviter)\n+        is_developer = self.is_team_member(inviter, 'developers')\n+        is_maintainer = self.is_team_member(inviter, 'maintainers')\n \n         self.log.info('{} invited {} to {}'.format(inviter, invitee, team))\n \n-        valid_teams = ['newcomers', 'developers', 'maintainers']\n-        if team not in valid_teams:\n+        if team not in self.team_mapping():\n             return 'Please select from one of the valid teams: ' + ', '.join(\n-                    valid_teams)\n-\n-        def invite(invitee, team):","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNTY4MDk5OQ==","createdAt":"2018-06-27T13:20:21Z","content":"THUMBS_UP","user":{"login":"nvzard","name":"Nitanshu"}}],"createdAt":"2018-06-27T11:47:46Z","lastEditedAt":null,"updatedAt":"2018-06-27T11:47:46Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5ODQ2MzY0MQ==","url":"https://github.com/coala/corobo/pull/576#discussion_r198463641","bodyText":"valid_teams = elf.team_mapping() will require less changes to existing lines, and be more efficient.","diffHunk":"@@ -89,40 +100,28 @@ def invite_cmd(self, msg, match):\n         team = 'newcomers' if match.group(2) is None else match.group(2)\n         team = team.lower()\n \n-        is_developer = self.TEAMS[self.GH_ORG_NAME +\n-                                  ' developers'].is_member(inviter)\n-        is_maintainer = self.TEAMS[self.GH_ORG_NAME +\n-                                   ' maintainers'].is_member(inviter)\n+        is_developer = self.is_team_member(inviter, 'developers')\n+        is_maintainer = self.is_team_member(inviter, 'maintainers')\n \n         self.log.info('{} invited {} to {}'.format(inviter, invitee, team))\n \n-        valid_teams = ['newcomers', 'developers', 'maintainers']","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNTY4MDk5OA==","createdAt":"2018-06-27T13:20:21Z","content":"THUMBS_UP","user":{"login":"nvzard","name":"Nitanshu"}}],"createdAt":"2018-06-27T11:48:16Z","lastEditedAt":null,"updatedAt":"2018-06-27T11:48:16Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwMDYzMDYxMg==","url":"https://github.com/coala/corobo/pull/576#issuecomment-400630612","bodyText":"Unblocks #552","diffHunk":null,"author":{"login":"nvzard","avatarUrl":"https://avatars0.githubusercontent.com/u/19310512?v=4","name":"Nitanshu"},"reactions":[],"createdAt":"2018-06-27T10:51:13Z","lastEditedAt":null,"updatedAt":"2018-06-27T10:51:13Z"}]}}},{"repoOwner":"coala","repoName":"corobo","updatedAtMs":1533496971000,"issue":{"htmlUrl":"https://github.com/coala/corobo/pull/577","number":577,"title":"[WIP] LabHub: Use activate and configuration templates","body":"__init__ is executed at load time and\nand any issue in the plugin will lead\nto it not showing up.\nLifeCycle: __init__->configured->enable\nAdapts to the DefaultConfigMixin and\nmigrated to using configuration templates.\nCloses #554\nCloses #382","comments":15,"createdAt":"2018-07-04T12:02:27Z","updatedAt":"2018-08-05T19:22:51Z","closedAt":null,"state":"open","user":{"login":"nvzard","avatarUrl":"https://avatars0.githubusercontent.com/u/19310512?v=4"},"owner":{"login":"nvzard","avatarUrl":"https://avatars0.githubusercontent.com/u/19310512?v=4"},"assignee":{"login":"nvzard","avatarUrl":"https://avatars0.githubusercontent.com/u/19310512?v=4"},"labels":[{"name":"area/config","color":"60a1db"},{"name":"area/labhub","color":"63ccf9"},{"name":"difficulty/medium","color":"0052cc"},{"name":"enhancement","color":"84b6eb"},{"name":"importance/low","color":"f9d0c4"},{"name":"importance/medium","color":"ddba61"},{"name":"process/wip","color":"fbca04"},{"name":"size/XS","color":"ededed"}],"pullRequest":{"htmlUrl":"https://github.com/coala/corobo/pull/577","comments":[{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzU5NjU1Nw==","url":"https://github.com/coala/corobo/pull/577#discussion_r207596557","bodyText":"shouldnt these be None, and the presense of None used to deactivate the plugin ?\nuseless values are useless.\nthe plugin will fail.","diffHunk":"@@ -33,47 +32,54 @@ def wrapper(*args, **kwargs):\n     return wrapper\n \n \n-class LabHub(BotPlugin):\n+class LabHub(BotPlugin, DefaultConfigMixin):\n     \"\"\"GitHub and GitLab utilities\"\"\"  # Ignore QuotesBear\n \n-    GH_ORG_NAME = constants.GH_ORG_NAME\n-    GL_ORG_NAME = constants.GL_ORG_NAME\n+    CONFIG_TEMPLATE = {\n+        'GH_ORG_NAME': 'org_name',","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-08-03T16:16:53Z","lastEditedAt":null,"updatedAt":"2018-08-03T16:16:53Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzU5Njc5Mw==","url":"https://github.com/coala/corobo/pull/577#discussion_r207596793","bodyText":"we had coverage of this.  Add tests which cover this.","diffHunk":"@@ -33,47 +32,54 @@ def wrapper(*args, **kwargs):\n     return wrapper\n \n \n-class LabHub(BotPlugin):\n+class LabHub(BotPlugin, DefaultConfigMixin):\n     \"\"\"GitHub and GitLab utilities\"\"\"  # Ignore QuotesBear\n \n-    GH_ORG_NAME = constants.GH_ORG_NAME\n-    GL_ORG_NAME = constants.GL_ORG_NAME\n+    CONFIG_TEMPLATE = {\n+        'GH_ORG_NAME': 'org_name',\n+        'GH_TOKEN': 'token',\n+        'GL_ORG_NAME': 'org_name',\n+        'GL_TOKEN': 'token',\n+    }\n \n-    def __init__(self, bot, name=None):\n-        super().__init__(bot, name)\n+    def get_configuration_template(self):\n+        DefaultConfigMixin.get_configuration_template(self)\n+\n+    def activate(self):\n+        BotPlugin.activate(self)\n \n         teams = dict()\n         try:\n-            gh = github3.login(token=os.environ.get('GH_TOKEN'))\n+            gh = github3.login(token=self.config['GH_TOKEN'])\n             assert gh is not None\n-        except AssertionError:\n+        except AssertionError:  # pragma: no cover, for logging","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNzQ1NDY5OA==","createdAt":"2018-08-04T17:10:31Z","content":"THUMBS_UP","user":{"login":"nvzard","name":"Nitanshu"}}],"createdAt":"2018-08-03T16:17:45Z","lastEditedAt":null,"updatedAt":"2018-08-03T16:17:45Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzY4NDkxNg==","url":"https://github.com/coala/corobo/pull/577#discussion_r207684916","bodyText":"The order must be consistent for all plugins.\nDefaultConfigMixin first.\nIf that causes problems during testing, you need to enhance DefaultConfigMixin and/or BotPlugin.","diffHunk":"@@ -33,47 +32,54 @@ def wrapper(*args, **kwargs):\n     return wrapper\n \n \n-class LabHub(BotPlugin):\n+class LabHub(BotPlugin, DefaultConfigMixin):","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-08-03T22:53:48Z","lastEditedAt":null,"updatedAt":"2018-08-03T22:53:48Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzY4NTIyMA==","url":"https://github.com/coala/corobo/pull/577#discussion_r207685220","bodyText":"This should not be here. Caused by wrong order of base classes.","diffHunk":"@@ -33,47 +32,54 @@ def wrapper(*args, **kwargs):\n     return wrapper\n \n \n-class LabHub(BotPlugin):\n+class LabHub(BotPlugin, DefaultConfigMixin):\n     \"\"\"GitHub and GitLab utilities\"\"\"  # Ignore QuotesBear\n \n-    GH_ORG_NAME = constants.GH_ORG_NAME\n-    GL_ORG_NAME = constants.GL_ORG_NAME\n+    CONFIG_TEMPLATE = {\n+        'GH_ORG_NAME': 'org_name',\n+        'GH_TOKEN': 'token',\n+        'GL_ORG_NAME': 'org_name',\n+        'GL_TOKEN': 'token',\n+    }\n \n-    def __init__(self, bot, name=None):\n-        super().__init__(bot, name)\n+    def get_configuration_template(self):\n+        DefaultConfigMixin.get_configuration_template(self)","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-08-03T22:56:21Z","lastEditedAt":null,"updatedAt":"2018-08-03T22:56:21Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzY4NTQ3MA==","url":"https://github.com/coala/corobo/pull/577#discussion_r207685470","bodyText":"Use super().activate() with the bases classes set up properly.","diffHunk":"@@ -33,47 +32,54 @@ def wrapper(*args, **kwargs):\n     return wrapper\n \n \n-class LabHub(BotPlugin):\n+class LabHub(BotPlugin, DefaultConfigMixin):\n     \"\"\"GitHub and GitLab utilities\"\"\"  # Ignore QuotesBear\n \n-    GH_ORG_NAME = constants.GH_ORG_NAME\n-    GL_ORG_NAME = constants.GL_ORG_NAME\n+    CONFIG_TEMPLATE = {\n+        'GH_ORG_NAME': 'org_name',\n+        'GH_TOKEN': 'token',\n+        'GL_ORG_NAME': 'org_name',\n+        'GL_TOKEN': 'token',\n+    }\n \n-    def __init__(self, bot, name=None):\n-        super().__init__(bot, name)\n+    def get_configuration_template(self):\n+        DefaultConfigMixin.get_configuration_template(self)\n+\n+    def activate(self):\n+        BotPlugin.activate(self)","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-08-03T22:58:06Z","lastEditedAt":null,"updatedAt":"2018-08-03T22:58:06Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzcyMzI5MA==","url":"https://github.com/coala/corobo/pull/577#discussion_r207723290","bodyText":"re-create self.GH_ORG_NAME and self.GL_ORG_NAME as properties that access the config so that your patch is less noisy.","diffHunk":"@@ -33,47 +32,51 @@ def wrapper(*args, **kwargs):\n     return wrapper\n \n \n-class LabHub(BotPlugin):\n+class LabHub(DefaultConfigMixin, BotPlugin):\n     \"\"\"GitHub and GitLab utilities\"\"\"  # Ignore QuotesBear\n \n-    GH_ORG_NAME = constants.GH_ORG_NAME\n-    GL_ORG_NAME = constants.GL_ORG_NAME\n+    CONFIG_TEMPLATE = {\n+        'GH_ORG_NAME': None,\n+        'GH_TOKEN': None,\n+        'GL_ORG_NAME': None,\n+        'GL_TOKEN': None,\n+    }\n \n-    def __init__(self, bot, name=None):\n-        super().__init__(bot, name)\n+    def activate(self):\n+        super().activate()\n \n         teams = dict()\n         try:\n-            gh = github3.login(token=os.environ.get('GH_TOKEN'))\n+            gh = github3.login(token=self.config['GH_TOKEN'])\n             assert gh is not None\n-        except AssertionError:\n+        except AssertionError:  # pragma: no cover, for logging\n             self.log.error('Cannot create github object, please check GH_TOKEN')\n         else:\n-            self.GH3_ORG = gh.organization(self.GH_ORG_NAME)\n+            self.GH3_ORG = gh.organization(self.config['GH_ORG_NAME'])\n             for team in self.GH3_ORG.teams():\n                 teams[team.name] = team\n \n         self._teams = teams\n \n-        self.IGH = GitHub(GitHubToken(os.environ.get('GH_TOKEN')))\n-        self.IGL = GitLab(GitLabPrivateToken(os.environ.get('GL_TOKEN')))\n+        self.IGH = GitHub(GitHubToken(self.config['GH_TOKEN']))\n+        self.IGL = GitLab(GitLabPrivateToken(self.config['GL_TOKEN']))\n \n         self.REPOS = dict()\n \n         try:\n             self.gh_repos = {repo.full_name.split('/')[-1]: repo for repo in\n                              filter(lambda x: (x.full_name.split('/')[0] ==\n-                                               self.GH_ORG_NAME),\n+                                               self.config['GH_ORG_NAME']),\n                                     self.IGH.write_repositories)}\n-        except RuntimeError:\n+        except RuntimeError:  # pragma: no cover, for logging\n             self.log.exception('Something went wrong in fetching github repos.')\n         else:\n             self.REPOS.update(self.gh_repos)\n \n         try:\n             self.gl_repos = {repo.full_name.split('/')[-1]: repo for repo in\n                              filter(lambda x: (x.full_name.split('/')[0] ==\n-                                               self.GL_ORG_NAME),\n+                                               self.config['GL_ORG_NAME']),","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-08-05T01:55:06Z","lastEditedAt":null,"updatedAt":"2018-08-05T01:55:06Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzcyMzk1MQ==","url":"https://github.com/coala/corobo/pull/577#discussion_r207723951","bodyText":"note #572 (comment)\nYou probably need a separate test method for this.\nAnd that is not a newcomer problem --it is a test coverage problem which you need to sort out in your project.","diffHunk":"@@ -72,8 +78,6 @@ def test_invite_cmd(self):\n         self.inject_mocks('LabHub', mock_dict)\n         testbot = self\n \n-        plugins.labhub.os.environ['GH_TOKEN'] = 'patched?'","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-08-05T02:58:56Z","lastEditedAt":null,"updatedAt":"2018-08-05T02:58:56Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwNTM3MzYxMg==","url":"https://github.com/coala/corobo/pull/577#issuecomment-405373612","bodyText":"Blocked until corobotestcase in plugins is implemented.","diffHunk":null,"author":{"login":"nvzard","avatarUrl":"https://avatars0.githubusercontent.com/u/19310512?v=4","name":"Nitanshu"},"reactions":[],"createdAt":"2018-07-16T20:36:12Z","lastEditedAt":"2018-08-02T07:57:09Z","updatedAt":"2018-08-02T07:57:09Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwNjgxNzA5MQ==","url":"https://github.com/coala/corobo/pull/577#issuecomment-406817091","bodyText":"Still relevant?","diffHunk":null,"author":{"login":"meetmangukiya","avatarUrl":"https://avatars0.githubusercontent.com/u/7620533?v=4","name":"Meet Mangukiya"},"reactions":[],"createdAt":"2018-07-21T19:03:26Z","lastEditedAt":null,"updatedAt":"2018-07-21T19:03:26Z"}]}}},{"repoOwner":"coala","repoName":"corobo","updatedAtMs":1531403288000,"issue":{"htmlUrl":"https://github.com/coala/corobo/pull/580","number":580,"title":"searchdocs_test: change http to https","body":"Closes #579\nReviewers Checklist\n\n Appropriate logging is done.\n Appropriate error responses.\n Handle every possible exception.\n Make sure there is a docstring in the command functions. Hint: Lookout for\nbotcmd and re_botcmd decorators.\n See that 100% coverage is there.\n See to it that mocking is not done where it is not necessary.","comments":5,"createdAt":"2018-07-11T13:43:42Z","updatedAt":"2018-07-12T13:48:08Z","closedAt":null,"state":"open","user":{"login":"ankitb073","avatarUrl":"https://avatars2.githubusercontent.com/u/38665863?v=4"},"owner":{"login":"ankitb073","avatarUrl":"https://avatars2.githubusercontent.com/u/38665863?v=4"},"labels":[{"name":"area/tests","color":"5facd8"},{"name":"difficulty/newcomer","color":"65c8ff"},{"name":"process/wip","color":"fbca04"},{"name":"size/XS","color":"ededed"}],"pullRequest":{"htmlUrl":"https://github.com/coala/corobo/pull/580","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQwNDE3NTkxMQ==","url":"https://github.com/coala/corobo/pull/580#issuecomment-404175911","bodyText":"Can anyone help me to rectify what is wrong with this?","diffHunk":null,"author":{"login":"ankitb073","avatarUrl":"https://avatars2.githubusercontent.com/u/38665863?v=4","name":null},"reactions":[],"createdAt":"2018-07-11T13:48:17Z","lastEditedAt":null,"updatedAt":"2018-07-11T13:48:17Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwNDIxNDUwNA==","url":"https://github.com/coala/corobo/pull/580#issuecomment-404214504","bodyText":"@ankitb073 It might look overwhelming, but go through the logs once and check where the test's fails.\nAlso, check the searchdocs plugin and make the changes required to return a https link. :)","diffHunk":null,"author":{"login":"nvzard","avatarUrl":"https://avatars0.githubusercontent.com/u/19310512?v=4","name":"Nitanshu"},"reactions":[],"createdAt":"2018-07-11T15:36:35Z","lastEditedAt":null,"updatedAt":"2018-07-11T15:36:35Z"}]}}},{"repoOwner":"coala","repoName":"corobo","updatedAtMs":1533152658000,"issue":{"htmlUrl":"https://github.com/coala/corobo/pull/506","number":506,"title":"config.py : Add channel list","body":"Add all the channel to the default channel list.\nUpdated config.py.\n\"coala/\" prefix removed as mentioned.\ncloses #412\nReviewers Checklist\n\n Appropriate logging is done.\n Appropriate error responses.\n Handle every possible exception.\n Make sure there is a docstring in the command functions. Hint: Lookout for\nbotcmd and re_botcmd decorators.\n See that 100% coverage is there.\n See to it that mocking is not done where it is not necessary.","comments":7,"createdAt":"2018-02-13T19:17:26Z","updatedAt":"2018-08-01T19:44:18Z","closedAt":null,"state":"open","user":{"login":"sanket-mali","avatarUrl":"https://avatars0.githubusercontent.com/u/5902517?v=4"},"owner":{"login":"sanket-mali","avatarUrl":"https://avatars0.githubusercontent.com/u/5902517?v=4"},"assignee":{"login":"sanket-mali","avatarUrl":"https://avatars0.githubusercontent.com/u/5902517?v=4"},"labels":[{"name":"area/config","color":"60a1db"},{"name":"difficulty/low","color":"207de5"},{"name":"process/wip","color":"fbca04"},{"name":"size/XS","color":"ededed"}],"pullRequest":{"htmlUrl":"https://github.com/coala/corobo/pull/506","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM2NTg2NTIyNg==","url":"https://github.com/coala/corobo/pull/506#issuecomment-365865226","bodyText":"I need little help here.","diffHunk":null,"author":{"login":"sanket-mali","avatarUrl":"https://avatars0.githubusercontent.com/u/5902517?v=4","name":"Sanket Kumar Mali"},"createdAt":"2018-02-15T09:07:08Z","lastEditedAt":null,"updatedAt":"2018-02-15T09:07:08Z"},{"id":"MDEyOklzc3VlQ29tbWVudDM4NTg2NTU0Ng==","url":"https://github.com/coala/corobo/pull/506#issuecomment-385865546","bodyText":"Squash your commits.","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-05-02T05:01:49Z","lastEditedAt":null,"updatedAt":"2018-05-02T05:01:49Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwOTY5Nzg0MA==","url":"https://github.com/coala/corobo/pull/506#issuecomment-409697840","bodyText":"That is not how you squash commits as requested at #506 (comment)\nAsk for help on https://coala.io/chat\nOtherwise this PR will be close and you will be unassigned from the task.","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-08-01T19:44:02Z","lastEditedAt":null,"updatedAt":"2018-08-01T19:44:02Z"}]}}},{"repoOwner":"coala","repoName":"corobo","updatedAtMs":1533429504000,"issue":{"htmlUrl":"https://github.com/coala/corobo/pull/443","number":443,"title":"git_stats: Do not subclass LabHub","body":"Use proper plugin dependency system.\nFixes #441\nReviewers Checklist\n\n Appropriate logging is done.\n Appropriate error responses.\n Handle every possible exception.\n Make sure there is a docstring in the command functions. Hint: Lookout for\nbotcmd and re_botcmd decorators.\n See that 100% coverage is there.\n See to it that mocking is not done where it is not necessary.","comments":4,"createdAt":"2017-12-02T03:16:59Z","updatedAt":"2018-08-05T00:38:24Z","closedAt":"2018-08-05T00:38:23Z","state":"closed","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"assignee":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"bug","color":"ee0701"},{"name":"difficulty/medium","color":"0052cc"},{"name":"importance/medium","color":"ddba61"},{"name":"process/wip","color":"fbca04"},{"name":"size/XS","color":"ededed"},{"name":"status/STALE","color":"ededed"}],"pullRequest":{"htmlUrl":"https://github.com/coala/corobo/pull/443","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQxMDQ4Njc0MA==","url":"https://github.com/coala/corobo/pull/443#issuecomment-410486740","bodyText":"Duplicate of #598","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-08-05T00:38:23Z","lastEditedAt":null,"updatedAt":"2018-08-05T00:38:23Z"}]}}},{"repoOwner":"coala","repoName":"corobo","updatedAtMs":1533433386000,"issue":{"htmlUrl":"https://github.com/coala/corobo/pull/483","number":483,"title":"pitchfork.py: Limit pitchfork to developers","body":"Limits the use of pitchfork command to developers\nCloses #358\nReviewers Checklist\n\n Appropriate logging is done.\n Appropriate error responses.\n Handle every possible exception.\n Make sure there is a docstring in the command functions. Hint: Lookout for\nbotcmd and re_botcmd decorators.\n See that 100% coverage is there.\n See to it that mocking is not done where it is not necessary.","comments":17,"createdAt":"2017-12-15T22:02:23Z","updatedAt":"2018-08-05T01:43:06Z","closedAt":"2018-08-05T01:43:06Z","state":"closed","user":{"login":"aashraybhandar1","avatarUrl":"https://avatars0.githubusercontent.com/u/12982393?v=4"},"owner":{"login":"aashraybhandar1","avatarUrl":"https://avatars0.githubusercontent.com/u/12982393?v=4"},"assignee":{"login":"aashraybhandar1","avatarUrl":"https://avatars0.githubusercontent.com/u/12982393?v=4"},"labels":[{"name":"area/security","color":"fc6805"},{"name":"area/ui","color":"dd02cf"},{"name":"difficulty/low","color":"207de5"},{"name":"importance/critical","color":"b60205"},{"name":"size/XS","color":"ededed"},{"name":"status/blocked","color":"b60205"}],"pullRequest":{"htmlUrl":"https://github.com/coala/corobo/pull/483","comments":[{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NzMzNzI1MA==","url":"https://github.com/coala/corobo/pull/483#discussion_r157337250","bodyText":"\"invier\" -> \"inviter\" ?","diffHunk":"@@ -17,7 +18,11 @@ def pitchfork(self, msg, arg):\n         \"\"\"\n         match = re.match(r'@?([\\w-]+)(?:\\s+(?:down\\s+)?to\\s+(.+))?$',\n                          arg)\n-        if match:\n+        labhub_util = LabHub(\"bot\")\n+        inviter = msg.frm.nick\n+\n+        if match and labhub_util.Teams[labhub_util.GH_ORG_NAME +\n+                                       ' developers'].is_member(invier):","author":{"login":"prnvdixit","avatarUrl":"https://avatars2.githubusercontent.com/u/24798215?v=4","name":"Pranav Dixit"},"reactions":[],"createdAt":"2017-12-16T08:22:29Z","lastEditedAt":"2017-12-16T08:24:04Z","updatedAt":"2017-12-16T08:24:04Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NzMzNzUxMw==","url":"https://github.com/coala/corobo/pull/483#discussion_r157337513","bodyText":"No need to create a object here, just use dependency like explained here. Use what variables you want from Labhub","diffHunk":"@@ -17,7 +18,11 @@ def pitchfork(self, msg, arg):\n         \"\"\"\n         match = re.match(r'@?([\\w-]+)(?:\\s+(?:down\\s+)?to\\s+(.+))?$',\n                          arg)\n-        if match:\n+        labhub_util = LabHub(\"bot\")","author":{"login":"Vamshi99","avatarUrl":"https://avatars2.githubusercontent.com/u/20969586?v=4","name":"Vamshi Krishna"},"reactions":[],"createdAt":"2017-12-16T08:39:52Z","lastEditedAt":null,"updatedAt":"2017-12-16T08:39:52Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NzMzNzU0MA==","url":"https://github.com/coala/corobo/pull/483#discussion_r157337540","bodyText":"It should not be in a single if statement, it should be nested if-else statements. give some message if command user is not a developer.","diffHunk":"@@ -17,7 +18,11 @@ def pitchfork(self, msg, arg):\n         \"\"\"\n         match = re.match(r'@?([\\w-]+)(?:\\s+(?:down\\s+)?to\\s+(.+))?$',\n                          arg)\n-        if match:\n+        labhub_util = LabHub(\"bot\")\n+        inviter = msg.frm.nick\n+\n+        if match and labhub_util.Teams[labhub_util.GH_ORG_NAME +","author":{"login":"Vamshi99","avatarUrl":"https://avatars2.githubusercontent.com/u/20969586?v=4","name":"Vamshi Krishna"},"reactions":[],"createdAt":"2017-12-16T08:42:17Z","lastEditedAt":null,"updatedAt":"2017-12-16T08:42:17Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NzMzNzU4MA==","url":"https://github.com/coala/corobo/pull/483#discussion_r157337580","bodyText":"inviter is not a proper variable name here, give a suitable variable name for this command.","diffHunk":"@@ -17,7 +18,11 @@ def pitchfork(self, msg, arg):\n         \"\"\"\n         match = re.match(r'@?([\\w-]+)(?:\\s+(?:down\\s+)?to\\s+(.+))?$',\n                          arg)\n-        if match:\n+        labhub_util = LabHub(\"bot\")\n+        inviter = msg.frm.nick","author":{"login":"Vamshi99","avatarUrl":"https://avatars2.githubusercontent.com/u/20969586?v=4","name":"Vamshi Krishna"},"reactions":[],"createdAt":"2017-12-16T08:45:09Z","lastEditedAt":null,"updatedAt":"2017-12-16T08:45:09Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1OTQyOTQ4MQ==","url":"https://github.com/coala/corobo/pull/483#discussion_r159429481","bodyText":"is this supposed to create 💩 emoji? I don't think you should be doing that 😦","diffHunk":"@@ -17,23 +17,31 @@ def pitchfork(self, msg, arg):\n         \"\"\"\n         match = re.match(r'@?([\\w-]+)(?:\\s+(?:down\\s+)?to\\s+(.+))?$',\n                          arg)\n+        GH_ORG_NAME = self.get_plugin('LabHub').GH_ORG_NAME\n+        teams = self.get_plugin('LabHub').TEAMS()\n+        issuer = msg.frm.nick\n         if match:\n-            user = match.group(1)\n-            place = match.group(2) if match.group(2) else 'offtopic'\n-            return textwrap.dedent((\n-                string.Template(\"\"\"\n-                    @$user, you are being pitchforked down to $place\n-                    ```\n-                                                          .+====----->\n-                                                           \\('\n-                    =====================================<%{%{%{>>+===---> $user\n-                                                           /(,\n-                                                          .+====----->\n-                    ```\n-                \"\"\").substitute(user=user,\n-                                place=('[offtopic]('\n-                                       'https://gitter.im/coala/coala/offtopic)'\n-                                       if place == 'offtopic' else place))\n-                ))\n+            if teams[GH_ORG_NAME + ' developers'].is_member(issuer):\n+                user = match.group(1)\n+                place = match.group(2) if match.group(2) else 'offtopic'\n+                return textwrap.dedent((\n+                    string.Template(\"\"\"\n+                        @$user, you are being pitchforked down to $place\n+                        ```\n+                                                              .+====----->\n+                                                               \\('\n+                        ================================<%{%{%{>>+===---> $user\n+                                                               /(,\n+                                                              .+====----->\n+                        ```\n+                    \"\"\").substitute(user=user,\n+                                    place=('[offtopic]('\n+                                           'https://gitter.im/coala/'\n+                                           'coala/offtopic)'\n+                                           if place == 'offtopic' else place))\n+                    ))\n+            else:\n+                return ('@{}, you are not a developer, only developers can'\n+                        ' invite other people. Nice try :poop:'.format(issuer))","author":{"login":"ishanSrt","avatarUrl":"https://avatars2.githubusercontent.com/u/29859362?v=4","name":"Ishan Srivastava"},"reactions":[],"createdAt":"2018-01-03T13:55:01Z","lastEditedAt":null,"updatedAt":"2018-01-03T13:55:01Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1OTQzMjMzOA==","url":"https://github.com/coala/corobo/pull/483#discussion_r159432338","bodyText":"Haha yeah this message i copied from the LabHub.py when the invite command is being issued by someone who is a newcomer and isn't authorized to do so :p","diffHunk":"@@ -17,23 +17,31 @@ def pitchfork(self, msg, arg):\n         \"\"\"\n         match = re.match(r'@?([\\w-]+)(?:\\s+(?:down\\s+)?to\\s+(.+))?$',\n                          arg)\n+        GH_ORG_NAME = self.get_plugin('LabHub').GH_ORG_NAME\n+        teams = self.get_plugin('LabHub').TEAMS()\n+        issuer = msg.frm.nick\n         if match:\n-            user = match.group(1)\n-            place = match.group(2) if match.group(2) else 'offtopic'\n-            return textwrap.dedent((\n-                string.Template(\"\"\"\n-                    @$user, you are being pitchforked down to $place\n-                    ```\n-                                                          .+====----->\n-                                                           \\('\n-                    =====================================<%{%{%{>>+===---> $user\n-                                                           /(,\n-                                                          .+====----->\n-                    ```\n-                \"\"\").substitute(user=user,\n-                                place=('[offtopic]('\n-                                       'https://gitter.im/coala/coala/offtopic)'\n-                                       if place == 'offtopic' else place))\n-                ))\n+            if teams[GH_ORG_NAME + ' developers'].is_member(issuer):\n+                user = match.group(1)\n+                place = match.group(2) if match.group(2) else 'offtopic'\n+                return textwrap.dedent((\n+                    string.Template(\"\"\"\n+                        @$user, you are being pitchforked down to $place\n+                        ```\n+                                                              .+====----->\n+                                                               \\('\n+                        ================================<%{%{%{>>+===---> $user\n+                                                               /(,\n+                                                              .+====----->\n+                        ```\n+                    \"\"\").substitute(user=user,\n+                                    place=('[offtopic]('\n+                                           'https://gitter.im/coala/'\n+                                           'coala/offtopic)'\n+                                           if place == 'offtopic' else place))\n+                    ))\n+            else:\n+                return ('@{}, you are not a developer, only developers can'\n+                        ' invite other people. Nice try :poop:'.format(issuer))","author":{"login":"aashraybhandar1","avatarUrl":"https://avatars0.githubusercontent.com/u/12982393?v=4","name":null},"reactions":[],"createdAt":"2018-01-03T14:09:53Z","lastEditedAt":null,"updatedAt":"2018-01-03T14:09:53Z"},{"id":"MDEyOklzc3VlQ29tbWVudDM1MjIxMTczMg==","url":"https://github.com/coala/corobo/pull/483#issuecomment-352211732","bodyText":"@Vamshi99  @prnvdixit  Do you guys have any idea why the seamaphoreci is failing ?? It's not showing any error in particular to the change I have made","diffHunk":null,"author":{"login":"aashraybhandar1","avatarUrl":"https://avatars0.githubusercontent.com/u/12982393?v=4","name":null},"reactions":[],"createdAt":"2017-12-16T21:04:59Z","lastEditedAt":null,"updatedAt":"2017-12-16T21:04:59Z"},{"id":"MDEyOklzc3VlQ29tbWVudDM1MjIzOTUwNA==","url":"https://github.com/coala/corobo/pull/483#issuecomment-352239504","bodyText":"@aashraybhandar1 No idea 😕","diffHunk":null,"author":{"login":"Vamshi99","avatarUrl":"https://avatars2.githubusercontent.com/u/20969586?v=4","name":"Vamshi Krishna"},"reactions":[],"createdAt":"2017-12-17T08:16:31Z","lastEditedAt":null,"updatedAt":"2017-12-17T08:16:31Z"},{"id":"MDEyOklzc3VlQ29tbWVudDM1Mjk0NTcwNg==","url":"https://github.com/coala/corobo/pull/483#issuecomment-352945706","bodyText":"@aashraybhandar1 , @Vamshi99 , Read the log.","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2017-12-20T02:20:28Z","lastEditedAt":null,"updatedAt":"2017-12-20T02:20:28Z"},{"id":"MDEyOklzc3VlQ29tbWVudDM1Mjk3NTM4Mw==","url":"https://github.com/coala/corobo/pull/483#issuecomment-352975383","bodyText":"@jayvdb @Vamshi99  One of the errors it's showing is that it's not able to load the LabHub plugin due to error while it's trying to do init ... I imported the plugin according to   this , can you help me how to overcome it? It's currently not able to load GH_ORG_NAME","diffHunk":null,"author":{"login":"aashraybhandar1","avatarUrl":"https://avatars0.githubusercontent.com/u/12982393?v=4","name":null},"reactions":[],"createdAt":"2017-12-20T06:18:06Z","lastEditedAt":"2017-12-20T15:15:19Z","updatedAt":"2017-12-20T15:15:19Z"},{"id":"MDEyOklzc3VlQ29tbWVudDM1NDE1NDM0MQ==","url":"https://github.com/coala/corobo/pull/483#issuecomment-354154341","bodyText":"@jayvdb any suggestions? I'm stuck","diffHunk":null,"author":{"login":"aashraybhandar1","avatarUrl":"https://avatars0.githubusercontent.com/u/12982393?v=4","name":null},"reactions":[],"createdAt":"2017-12-27T18:21:19Z","lastEditedAt":null,"updatedAt":"2017-12-27T18:21:19Z"},{"id":"MDEyOklzc3VlQ29tbWVudDM1NTAwNjA0Nw==","url":"https://github.com/coala/corobo/pull/483#issuecomment-355006047","bodyText":"@aashraybhandar1 your log says\n=================================== FAILURES ===================================\n_____________________________________ test _____________________________________\n\ntestbot = <errbot.backends.test.TestBot object at 0x7fa81cf86208>\n\n    def test(testbot):\n>       testbot.assertCommand('!pitchfork @meet', 'being pitchforked')\n\ntests/pitchfork_test.py:5: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <errbot.backends.test.TestBot object at 0x7fa81cf86208>\ncommand = '!pitchfork @meet', response = 'being pitchforked', timeout = 5\n\n    def assertCommand(self, command, response, timeout=5):\n        \"\"\"Assert the given command returns the given response\"\"\"\n        self.bot.push_message(command)\n        msg = self.bot.pop_message(timeout)\n>       assert response in msg, \"'{}' not in '{}'\".format(response, msg)\nE       AssertionError: 'being pitchforked' not in 'Command \"pitchfork\" / \"pitchfork @meet\" not found.'\n\n../.pyenv/3.6/lib/python3.6/site-packages/errbot/backends/test.py:457: AssertionError\n\nSo there is an Assertion error at pitchfork_test.py due to the changes you made. Check why its failing.","diffHunk":null,"author":{"login":"ishanSrt","avatarUrl":"https://avatars2.githubusercontent.com/u/29859362?v=4","name":"Ishan Srivastava"},"reactions":[],"createdAt":"2018-01-03T12:58:13Z","lastEditedAt":null,"updatedAt":"2018-01-03T12:58:13Z"},{"id":"MDEyOklzc3VlQ29tbWVudDM1NTAxMDA4Ng==","url":"https://github.com/coala/corobo/pull/483#issuecomment-355010086","bodyText":"@ishanSrt  yes the error is occurring coz the LabHub plugin which is used to determine the group in which the issuer of the command belongs to . The initialization of the plugin is not successful do to some reason which I'm not able to figure out why. I imported the plugin according to link","diffHunk":null,"author":{"login":"aashraybhandar1","avatarUrl":"https://avatars0.githubusercontent.com/u/12982393?v=4","name":null},"reactions":[],"createdAt":"2018-01-03T13:20:37Z","lastEditedAt":null,"updatedAt":"2018-01-03T13:20:37Z"},{"id":"MDEyOklzc3VlQ29tbWVudDM1NTAxMTY5NA==","url":"https://github.com/coala/corobo/pull/483#issuecomment-355011694","bodyText":"@aashraybhandar1 won't you need to do something like\nfrom errbot import Labhub\n\nin pitchfork.py as mentioned in your link?\nnot sure though","diffHunk":null,"author":{"login":"ishanSrt","avatarUrl":"https://avatars2.githubusercontent.com/u/29859362?v=4","name":"Ishan Srivastava"},"reactions":[],"createdAt":"2018-01-03T13:29:25Z","lastEditedAt":"2018-01-03T13:31:31Z","updatedAt":"2018-01-03T13:31:31Z"},{"id":"MDEyOklzc3VlQ29tbWVudDM1NTAxMjMzOQ==","url":"https://github.com/coala/corobo/pull/483#issuecomment-355012339","bodyText":"and I think you need to make one more file like labhub.plug as mentioned in errbotio/errbot#1086","diffHunk":null,"author":{"login":"ishanSrt","avatarUrl":"https://avatars2.githubusercontent.com/u/29859362?v=4","name":"Ishan Srivastava"},"reactions":[],"createdAt":"2018-01-03T13:32:32Z","lastEditedAt":null,"updatedAt":"2018-01-03T13:32:32Z"},{"id":"MDEyOklzc3VlQ29tbWVudDM1NTAxMjg2OQ==","url":"https://github.com/coala/corobo/pull/483#issuecomment-355012869","bodyText":"and I think you will need to import it in https://github.com/coala/corobo/blob/master/tests/pitchfork_test.py too\nAgain not sure on this","diffHunk":null,"author":{"login":"ishanSrt","avatarUrl":"https://avatars2.githubusercontent.com/u/29859362?v=4","name":"Ishan Srivastava"},"reactions":[],"createdAt":"2018-01-03T13:35:14Z","lastEditedAt":null,"updatedAt":"2018-01-03T13:35:14Z"},{"id":"MDEyOklzc3VlQ29tbWVudDM1NTAxMzk3MA==","url":"https://github.com/coala/corobo/pull/483#issuecomment-355013970","bodyText":"Also the assertion error says:\nAssertionError: 'being pitchforked' not in 'Command \"pitchfork\" / \"pitchfork @meet\" not found.'\n\nHow did you conclude that the initialisation of plugin wasn't successful?\nAlso from the assertion error, try printing what all commands are there in pitchfork @meet before and after you made the changes, and then try to understand why does 'being pitchforked' goes away after you make changes","diffHunk":null,"author":{"login":"ishanSrt","avatarUrl":"https://avatars2.githubusercontent.com/u/29859362?v=4","name":"Ishan Srivastava"},"reactions":[],"createdAt":"2018-01-03T13:40:38Z","lastEditedAt":"2018-01-03T13:41:57Z","updatedAt":"2018-01-03T13:41:57Z"},{"id":"MDEyOklzc3VlQ29tbWVudDM1NTAyMDA1NA==","url":"https://github.com/coala/corobo/pull/483#issuecomment-355020054","bodyText":"2017-12-16 20:56:47,811 DEBUG errbot.plugin_manager pitchfork depends on LabHub and LabHub is not activated. Activating it ... 2017-12-16 20:56:47,815 ERROR errbot.plugin_manager Error loading pitchfork Traceback (most recent call last): File \"/usr/local/lib/python3.6/site-packages/errbot/plugin_manager.py\", line 524, in activate_non_started_plugins self.activate_plugin_with_version_check(pluginInfo) File \"/usr/local/lib/python3.6/site-packages/errbot/plugin_manager.py\", line 291, in activate_plugin_with_version_check depends_on = self._activate_plugin_dependencies(plugin_info, dep_track) File \"/usr/local/lib/python3.6/site-packages/errbot/plugin_manager.py\", line 335, in _activate_plugin_dependencies self._activate_plugin(dep_name, dep_track) File \"/usr/local/lib/python3.6/site-packages/errbot/plugin_manager.py\", line 569, in _activate_plugin raise PluginActivationException(\"I don't know this %s plugin\" % name) errbot.plugin_manager.PluginActivationException: I don't know this LabHub plugin\nThis is the error in the logs which states that it's not able to activate the plugin LabHub and the error is being coz of that. There are two ways to use the plugin as mentioned in .Either by writing an activate function or by accessing variables using\nself.get_plugin('DependentPlugin').variable_name\nI used this later approach and there is no need to import the plugin labhub as if you see the sample code mentioned in the document no where is the dependent plugin being imported it's just being mentioned in the .plug file and then accessed using the methods mentioned above. I know there are error in the test files which need to be resolved but the first task of loading the plugin itself is not being successful :/","diffHunk":null,"author":{"login":"aashraybhandar1","avatarUrl":"https://avatars0.githubusercontent.com/u/12982393?v=4","name":null},"reactions":[],"createdAt":"2018-01-03T14:08:54Z","lastEditedAt":null,"updatedAt":"2018-01-03T14:08:54Z"},{"id":"MDEyOklzc3VlQ29tbWVudDM1NTAyMjgyMA==","url":"https://github.com/coala/corobo/pull/483#issuecomment-355022820","bodyText":"I am no expert on errbot so I can only suggest you ways in which you can read and try to understand your problem more, since it says I don't know this LabHub plugin you should read on how to using it. Pretty sure corobo is not the only one using errbot. maybe you stumble upon a code where LabHub is being used correctly. or you can see this too #483 (comment)\nor try the other way as in:\n\nThere are two ways to use the plugin as mentioned in","diffHunk":null,"author":{"login":"ishanSrt","avatarUrl":"https://avatars2.githubusercontent.com/u/29859362?v=4","name":"Ishan Srivastava"},"reactions":[],"createdAt":"2018-01-03T14:20:47Z","lastEditedAt":"2018-01-03T14:22:18Z","updatedAt":"2018-01-03T14:22:18Z"},{"id":"MDEyOklzc3VlQ29tbWVudDM1NTAyMzk2Mw==","url":"https://github.com/coala/corobo/pull/483#issuecomment-355023963","bodyText":"also don't leave the failed test, you may solve your problem while fixing that\n\nAlso from the assertion error, try printing what all commands are there in pitchfork @meet before and after you made the changes, and then try to understand why does 'being pitchforked' goes away after you make changes","diffHunk":null,"author":{"login":"ishanSrt","avatarUrl":"https://avatars2.githubusercontent.com/u/29859362?v=4","name":"Ishan Srivastava"},"reactions":[],"createdAt":"2018-01-03T14:25:36Z","lastEditedAt":null,"updatedAt":"2018-01-03T14:25:36Z"},{"id":"MDEyOklzc3VlQ29tbWVudDM1NTAyNTkyNA==","url":"https://github.com/coala/corobo/pull/483#issuecomment-355025924","bodyText":"Sure I'll proceed in that direction and try to solve it . Thanks a lot @ishanSrt  😄  If you find out anything else relevant please ping here that would be really helpful.","diffHunk":null,"author":{"login":"aashraybhandar1","avatarUrl":"https://avatars0.githubusercontent.com/u/12982393?v=4","name":null},"reactions":[],"createdAt":"2018-01-03T14:33:35Z","lastEditedAt":null,"updatedAt":"2018-01-03T14:33:35Z"},{"id":"MDEyOklzc3VlQ29tbWVudDM4MzMwMzAyMg==","url":"https://github.com/coala/corobo/pull/483#issuecomment-383303022","bodyText":"Problem needs to be fixed in errbot","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[{"id":"MDg6UmVhY3Rpb24yMzEzODM0MQ==","createdAt":"2018-05-03T10:06:26Z","content":"THUMBS_UP","user":{"login":"nvzard","name":"Nitanshu"}}],"createdAt":"2018-04-21T14:55:20Z","lastEditedAt":null,"updatedAt":"2018-04-21T14:55:20Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQxMDQ4OTMxNQ==","url":"https://github.com/coala/corobo/pull/483#issuecomment-410489315","bodyText":"This needs to be implemented as a filter to prevent access to any command based on configuration.","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-08-05T01:43:06Z","lastEditedAt":null,"updatedAt":"2018-08-05T01:43:06Z"}]}}},{"repoOwner":"coala","repoName":"gci-leaders","updatedAtMs":1533597124000,"issue":{"htmlUrl":"https://github.com/coala/gci-leaders/pull/142","number":142,"title":"Main.css: Fix broken social link Fixes https://github.com/coala/gci-leaders/issues/73","body":"Fixes #73 using @wisn suggestion.","comments":12,"createdAt":"2018-02-03T03:47:52Z","updatedAt":"2018-08-06T23:12:04Z","closedAt":"2018-02-06T12:20:18Z","state":"merged","user":{"login":"mvinoba","avatarUrl":"https://avatars0.githubusercontent.com/u/19884360?v=4"},"owner":{"login":"mvinoba","avatarUrl":"https://avatars0.githubusercontent.com/u/19884360?v=4"},"labels":[{"name":"area/ui","color":"442cf7"},{"name":"bug","color":"ee0701"},{"name":"difficulty/newcomer","color":"ffcce2"},{"name":"initiatives/gci","color":"98e9f9"},{"name":"process/approved","color":"0e8a16"},{"name":"size/XS","color":"ededed"}],"pullRequest":{"htmlUrl":"https://github.com/coala/gci-leaders/pull/142","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM2MjgyNTU3OQ==","url":"https://github.com/coala/gci-leaders/pull/142#issuecomment-362825579","bodyText":"@newbazz What would be the appropriate changes to the commit? This is my first PR, I apologise any mistake on common guidelines.","diffHunk":null,"author":{"login":"mvinoba","avatarUrl":"https://avatars0.githubusercontent.com/u/19884360?v=4","name":"Vinícius Figueiredo"},"reactions":[],"createdAt":"2018-02-03T15:56:41Z","lastEditedAt":null,"updatedAt":"2018-02-03T15:56:41Z"},{"id":"MDEyOklzc3VlQ29tbWVudDM2MjgyNjU2Ng==","url":"https://github.com/coala/gci-leaders/pull/142#issuecomment-362826566","bodyText":"You forgot to put Fixes https://github.com/coala/gci-leaders/issues/73 on your commit body","diffHunk":null,"author":{"login":"blazeu","avatarUrl":"https://avatars0.githubusercontent.com/u/1438859?v=4","name":"Surya Widi"},"reactions":[],"createdAt":"2018-02-03T16:04:12Z","lastEditedAt":null,"updatedAt":"2018-02-03T16:04:12Z"},{"id":"MDEyOklzc3VlQ29tbWVudDM2MjgzMTc1Nw==","url":"https://github.com/coala/gci-leaders/pull/142#issuecomment-362831757","bodyText":"@newbazz Not sure if it's done right now or if it should be just #73 to reference the issue on commit message.","diffHunk":null,"author":{"login":"mvinoba","avatarUrl":"https://avatars0.githubusercontent.com/u/19884360?v=4","name":"Vinícius Figueiredo"},"reactions":[],"createdAt":"2018-02-03T16:43:51Z","lastEditedAt":null,"updatedAt":"2018-02-03T16:43:51Z"},{"id":"MDEyOklzc3VlQ29tbWVudDM2Mjg0NzM1Ng==","url":"https://github.com/coala/gci-leaders/pull/142#issuecomment-362847356","bodyText":"in two different line","diffHunk":null,"author":{"login":"newbazz","avatarUrl":"https://avatars1.githubusercontent.com/u/25884863?v=4","name":null},"reactions":[],"createdAt":"2018-02-03T19:29:44Z","lastEditedAt":null,"updatedAt":"2018-02-03T19:29:44Z"},{"id":"MDEyOklzc3VlQ29tbWVudDM2Mjg0OTM2Nw==","url":"https://github.com/coala/gci-leaders/pull/142#issuecomment-362849367","bodyText":"@newbazz Thanks! Please check if it's correct now, apparently I mistook the PR title with the commit message.","diffHunk":null,"author":{"login":"mvinoba","avatarUrl":"https://avatars0.githubusercontent.com/u/19884360?v=4","name":"Vinícius Figueiredo"},"reactions":[],"createdAt":"2018-02-03T19:56:10Z","lastEditedAt":null,"updatedAt":"2018-02-03T19:56:10Z"},{"id":"MDEyOklzc3VlQ29tbWVudDM2MjkxMjI1Ng==","url":"https://github.com/coala/gci-leaders/pull/142#issuecomment-362912256","bodyText":"coala says:\n|    | [NORMAL] GitCommitBear:\n|    | No newline found between shortlog and body at HEAD commit. Please add one.\n\nYour commit needs to be like this\nMain.css: Fix broken social link\n\nFixes https://github.com/coala/gci-leaders/issues/73\n\n1 newline between shortlog and body.","diffHunk":null,"author":{"login":"blazeu","avatarUrl":"https://avatars0.githubusercontent.com/u/1438859?v=4","name":"Surya Widi"},"reactions":[{"id":"MDg6UmVhY3Rpb24xOTE0NDcyNw==","createdAt":"2018-02-05T05:40:04Z","content":"THUMBS_UP","user":{"login":"mvinoba","name":"Vinícius Figueiredo"}}],"createdAt":"2018-02-04T14:53:15Z","lastEditedAt":null,"updatedAt":"2018-02-04T14:53:15Z"},{"id":"MDEyOklzc3VlQ29tbWVudDM2MzE5NTM3Mw==","url":"https://github.com/coala/gci-leaders/pull/142#issuecomment-363195373","bodyText":"@newbazz It should be ok now, GitCommitBear ran without warnings.","diffHunk":null,"author":{"login":"mvinoba","avatarUrl":"https://avatars0.githubusercontent.com/u/19884360?v=4","name":"Vinícius Figueiredo"},"reactions":[],"createdAt":"2018-02-05T19:31:53Z","lastEditedAt":null,"updatedAt":"2018-02-05T19:31:53Z"},{"id":"MDEyOklzc3VlQ29tbWVudDM2MzMyNzQ3OA==","url":"https://github.com/coala/gci-leaders/pull/142#issuecomment-363327478","bodyText":"I implemented wisn's suggestion, the one that made the issue a newcomer one, but perhaps there are better ways to solve this issue.","diffHunk":null,"author":{"login":"mvinoba","avatarUrl":"https://avatars0.githubusercontent.com/u/19884360?v=4","name":"Vinícius Figueiredo"},"reactions":[{"id":"MDg6UmVhY3Rpb24xOTE5OTYwMw==","createdAt":"2018-02-06T06:52:29Z","content":"THUMBS_UP","user":{"login":"newbazz","name":null}}],"createdAt":"2018-02-06T06:49:20Z","lastEditedAt":null,"updatedAt":"2018-02-06T06:49:20Z"}]}}},{"repoOwner":"coala","repoName":"gh-board","updatedAtMs":1533430736000,"issue":{"htmlUrl":"https://github.com/coala/gh-board/pull/150","number":150,"title":"Fix review fetch ignore settings","body":"Add Travisbuddy as an ignore author,\nfix ack & unack in ignore content.\nFixes #149","comments":4,"createdAt":"2018-08-04T08:24:23Z","updatedAt":"2018-08-05T00:58:56Z","closedAt":"2018-08-05T00:26:23Z","state":"merged","user":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4"},"owner":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4"},"assignee":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4"},"labels":[{"name":"enhancement","color":"84b6eb"},{"name":"importance/medium","color":"65f23e"},{"name":"process/pending review","color":"ededed"},{"name":"size/XS","color":"ededed"}],"pullRequest":{"htmlUrl":"https://github.com/coala/gh-board/pull/150","comments":[]}}},{"repoOwner":"coala","repoName":"gh-board","updatedAtMs":1533185940000,"issue":{"htmlUrl":"https://github.com/coala/gh-board/pull/144","number":144,"title":".travis.yml: Remove duplicate before_install","body":"333717b added two before_install sections.\nRelated to #28","comments":4,"createdAt":"2018-08-02T02:20:09Z","updatedAt":"2018-08-02T04:59:00Z","closedAt":"2018-08-02T04:58:46Z","state":"merged","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"size/XS","color":"ededed"}],"pullRequest":{"htmlUrl":"https://github.com/coala/gh-board/pull/144","comments":[]}}},{"repoOwner":"coala","repoName":"gh-board","updatedAtMs":1533650094000,"issue":{"htmlUrl":"https://github.com/coala/gh-board/pull/147","number":147,"title":"Add reaction mutation functionality","body":"Users can do meta-reviews directly on the gh-board.\nCloses #146","comments":2,"createdAt":"2018-08-04T02:50:29Z","updatedAt":"2018-08-07T13:54:54Z","closedAt":null,"state":"open","user":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4"},"owner":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4"},"labels":[{"name":"enhancement","color":"84b6eb"},{"name":"process/pending review","color":"ededed"},{"name":"size/L","color":"ededed"}],"pullRequest":{"htmlUrl":"https://github.com/coala/gh-board/pull/147","comments":[{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzcwMzEzOQ==","url":"https://github.com/coala/gh-board/pull/147#discussion_r207703139","bodyText":"Should have a new Component subclass which handles the login event in a standard manner","diffHunk":"@@ -11,109 +14,156 @@ import ReviewBlurb from './review-blurb';\n import IssueOrPullRequestBlurb from './issue-blurb';\n import Reactions from './reactions';\n \n-function ReviewCard(props) {\n-  const {card, primaryRepoName} = props;\n-  const {repoOwner, repoName, number, id, bodyText, reactions, url} = card;\n-\n-  const key = `${repoOwner}/${repoName}#${number}-${id}`;\n-\n-  // comment updatedAt is updated when comment content is edited.\n-  // Note that the default `updatedAt` field of review comment\n-  // provided by GraphQL API is inaccurate. Thus, we use our custom\n-  // updatedAt, defined by `lastEditedAt` and `createdAt` time if never edited.\n-  const updatedAt = card.updatedAt;\n-\n-  const user = card.author;\n-  const assignedAvatar = (\n-    <Link to={getFilters().toggleUserName(user.login).url()}>\n-      <img\n-        key='avatar'\n-        className='avatar-image'\n-        title={'Click to filter on ' + user.login}\n-        src={user.avatarUrl}/>\n-    </Link>\n-  );\n-  // stop highlighting after 5min\n-  const isUpdated = Date.now() - Date.parse(updatedAt) < 2 * 60 * 1000;\n-\n-  // put the corresponding pull request as related card\n-  const issueCard = IssueStore.issueNumberToCard(repoOwner, repoName, number);\n-  const relatedCards = [issueCard].map((issueCard) => {\n-    let title;\n-    if (issueCard.issue) {\n-      title = (\n-        <span className='related-issue-title'>{issueCard.issue.title}</span>\n+class ReviewCard extends Component {","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-08-04T08:20:43Z","lastEditedAt":null,"updatedAt":"2018-08-04T08:20:43Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzcwMzE2Mw==","url":"https://github.com/coala/gh-board/pull/147#discussion_r207703163","bodyText":"avoid moving this around.\nif it must be moved, make sure you move it to a place where it wont need to be moved again for any reason.","diffHunk":"@@ -1,45 +1,180 @@\n+import {Component} from 'react';\n import * as BS from 'react-bootstrap';\n \n-function Reactions({stat}) {\n-  // use null when count is zero because we don't want to display\n-  // number zero on frontend\n-  const reactions = [\n-    {\n-      emoji: '👍',\n-      count: stat.THUMBS_UP || null,\n-      name: 'THUMBS_UP'\n-    },\n-    {\n-      emoji: '👎',\n-      count: stat.THUMBS_DOWN || null,\n-      name: 'THUMBS_DOWN'\n-    },\n-    {\n-      emoji: '😄',\n-      count: stat.LAUGH || null,\n-      name: 'LAUGH'\n-    },\n-    {\n-      emoji: '🎉',\n-      count: stat.HOORAY || null,\n-      name: 'HOORAY'\n-    },\n-    {\n-      emoji: '😕',\n-      count: stat.CONFUSED || null,\n-      name: 'CONFUSED'\n-    },\n-    {\n-      emoji: '❤️',\n-      count: stat.HEART || null,\n-      name: 'HEART'\n+import Client from '../github-client';\n+\n+class Reactions extends Component {\n+  constructor(props) {\n+    super(props);\n+    this.state = {\n+      canAdd: {},\n+      // use cache to reflect reaction count on frontend\n+      // if we fetch up-to-date reaction count after mutation,\n+      // we have to refetch the whole pull request which wastes\n+      // a lot of API hits (there is no way to fetch single review\n+      // comment at the moment)\n+      cacheCount: {\n+        THUMBS_UP: 0,\n+        THUMBS_DOWN: 0,\n+        LAUGH: 0,\n+        HOORAY: 0,\n+        CONFUSED: 0,\n+        HEART: 0\n+      }\n+    };\n+  }\n+\n+  async onClick(id, content) {\n+    const canAdd = this.state.canAdd[content];\n+    let result, msg;\n+    if (canAdd) {\n+      ({ result, msg } = await Client.getGraphQLClient().addReaction(\n+        {id, content}\n+      ));\n+    } else {\n+      ({ result, msg } = await Client.getGraphQLClient().removeReaction(\n+        {id, content}\n+      ));\n+    }\n+    if (result) {\n+      if (canAdd) {\n+        // reaction creation succeeds\n+\n+        // Note that if it is already meta-reviewed by the user but not via gh-board,\n+        // action (add reaction) will fail, but GitHub won't return any error/warning.\n+        // The good news is that user won't be annoyed because the frontend behavior\n+        // is they add reactions successfully.\n+\n+        // A side note is that gh-board will not update accordingly if user does\n+        // meta-review directly on GitHub web page instead of on gh-board. This is\n+        // because the `updatedBy` attribute of the pull request won't get changed\n+        // due to meta-review.\n+\n+        this.setState((prevState) => {\n+          let newState = prevState;\n+          newState.canAdd[content] = false;\n+          // update cache\n+          newState.cacheCount[content] += 1;\n+          return newState;\n+        });\n+      } else {\n+        // reaction removal succeeds\n+        this.setState((prevState) => {\n+          let newState = prevState;\n+          newState.canAdd[content] = true;\n+          // update cache\n+          newState.cacheCount[content] -= 1;\n+          return newState;\n+        });\n+      }\n+    } else {\n+      if (canAdd) {\n+        // reaction creation fails\n+        console.log('add', content, 'to comment id', id, 'failed.',\n+          'message: ', msg);\n+      } else {\n+        console.log('remove', content, 'from comment id', id, 'failed',\n+          'message:', msg);\n+        // reaction removal fails\n+        if (msg && msg.length && msg[0].type === 'FORBIDDEN') {\n+          console.log('reaction removal failed due to permission error.',\n+            'This is probably because user has done meta-review somewhere out',\n+            'of gh-board.');\n+          this.setState((prevState) => {\n+            let newState = prevState;\n+            newState.canAdd[content] = true;\n+            // clean cache\n+            newState.cacheCount[content] = 0;\n+            return newState;\n+          });\n+          this.syncReview();\n+        }\n+      }\n     }\n-  ];\n-  return reactions.map(reaction => (\n-      <BS.Button bsClass=\"reaction-btn\">\n-        {reaction.emoji} {reaction.count}\n-      </BS.Button>\n-  ));\n+  }\n+\n+  render() {\n+    // id is the global identifier for the corresponding review comment\n+    const {id, stat, hasLogin, noReactionByMe} = this.props;\n+\n+    if (noReactionByMe && !Object.keys(this.state.canAdd).length) {\n+      // use deep copy for canAdd instead of reference so that we can\n+      // we deliberately only copy them once\n+      this.state.canAdd = {\n+        THUMBS_UP: noReactionByMe.THUMBS_UP,\n+        THUMBS_DOWN: noReactionByMe.THUMBS_DOWN,\n+        LAUGH: noReactionByMe.LAUGH,\n+        HOORAY: noReactionByMe.HOORAY,\n+        CONFUSED: noReactionByMe.CONFUSED,\n+        HEART: noReactionByMe.HEART\n+      };\n+    }\n+\n+    // props reflect real status of reactions, but may be out of date\n+    // we need to update cached information (this.state) accordingly\n+    if (noReactionByMe && this.state.canAdd) {\n+      const contents = ['THUMBS_UP', 'THUMBS_DOWN', 'LAUGH', 'HOORAY', 'CONFUSED', 'HEART'];\n+      for (const content of contents) {\n+        if (!noReactionByMe[content] && !this.state.canAdd[content]\n+          && this.state.cacheCount[content] === 1) {\n+          // our action (reaction creation) is now correctly reflected by props\n+          // need to flush cache, otherwise reaction count would be wrong\n+          console.log('flush creation cache of content', content);\n+          this.state.cacheCount[content] = 0;\n+        }\n+        if (noReactionByMe[content] && this.state.canAdd[content]\n+          && this.state.cacheCount[content] === -1) {\n+          // our action (reaction removal) is now correctly reflected by props\n+          // need to flush cache, otherwise reaction count would be wrong\n+          console.log('flush removal cache of content', content);\n+          this.state.cacheCount[content] = 0;\n+        }\n+      }\n+    }\n+\n+    // use null when count is zero because we don't want to display\n+    // number zero on frontend\n+    const reactions = [","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-08-04T08:21:48Z","lastEditedAt":null,"updatedAt":"2018-08-04T08:21:48Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzcwMzE3NQ==","url":"https://github.com/coala/gh-board/pull/147#discussion_r207703175","bodyText":"my own +1 are saved to github (yay), show in the UI, but are not shown when I reload.","diffHunk":"@@ -1,45 +1,180 @@\n+import {Component} from 'react';\n import * as BS from 'react-bootstrap';\n \n-function Reactions({stat}) {\n-  // use null when count is zero because we don't want to display\n-  // number zero on frontend\n-  const reactions = [\n-    {\n-      emoji: '👍',\n-      count: stat.THUMBS_UP || null,\n-      name: 'THUMBS_UP'\n-    },\n-    {\n-      emoji: '👎',\n-      count: stat.THUMBS_DOWN || null,\n-      name: 'THUMBS_DOWN'\n-    },\n-    {\n-      emoji: '😄',\n-      count: stat.LAUGH || null,\n-      name: 'LAUGH'\n-    },\n-    {\n-      emoji: '🎉',\n-      count: stat.HOORAY || null,\n-      name: 'HOORAY'\n-    },\n-    {\n-      emoji: '😕',\n-      count: stat.CONFUSED || null,\n-      name: 'CONFUSED'\n-    },\n-    {\n-      emoji: '❤️',\n-      count: stat.HEART || null,\n-      name: 'HEART'\n+import Client from '../github-client';\n+\n+class Reactions extends Component {\n+  constructor(props) {\n+    super(props);\n+    this.state = {\n+      canAdd: {},\n+      // use cache to reflect reaction count on frontend\n+      // if we fetch up-to-date reaction count after mutation,\n+      // we have to refetch the whole pull request which wastes\n+      // a lot of API hits (there is no way to fetch single review\n+      // comment at the moment)\n+      cacheCount: {\n+        THUMBS_UP: 0,\n+        THUMBS_DOWN: 0,\n+        LAUGH: 0,\n+        HOORAY: 0,\n+        CONFUSED: 0,\n+        HEART: 0\n+      }\n+    };\n+  }\n+\n+  async onClick(id, content) {\n+    const canAdd = this.state.canAdd[content];\n+    let result, msg;\n+    if (canAdd) {\n+      ({ result, msg } = await Client.getGraphQLClient().addReaction(\n+        {id, content}\n+      ));\n+    } else {\n+      ({ result, msg } = await Client.getGraphQLClient().removeReaction(\n+        {id, content}\n+      ));\n+    }\n+    if (result) {\n+      if (canAdd) {\n+        // reaction creation succeeds\n+\n+        // Note that if it is already meta-reviewed by the user but not via gh-board,\n+        // action (add reaction) will fail, but GitHub won't return any error/warning.\n+        // The good news is that user won't be annoyed because the frontend behavior\n+        // is they add reactions successfully.\n+\n+        // A side note is that gh-board will not update accordingly if user does\n+        // meta-review directly on GitHub web page instead of on gh-board. This is\n+        // because the `updatedBy` attribute of the pull request won't get changed\n+        // due to meta-review.\n+\n+        this.setState((prevState) => {\n+          let newState = prevState;\n+          newState.canAdd[content] = false;\n+          // update cache\n+          newState.cacheCount[content] += 1;\n+          return newState;\n+        });\n+      } else {\n+        // reaction removal succeeds\n+        this.setState((prevState) => {\n+          let newState = prevState;\n+          newState.canAdd[content] = true;\n+          // update cache\n+          newState.cacheCount[content] -= 1;\n+          return newState;\n+        });\n+      }\n+    } else {\n+      if (canAdd) {\n+        // reaction creation fails\n+        console.log('add', content, 'to comment id', id, 'failed.',\n+          'message: ', msg);\n+      } else {\n+        console.log('remove', content, 'from comment id', id, 'failed',\n+          'message:', msg);\n+        // reaction removal fails\n+        if (msg && msg.length && msg[0].type === 'FORBIDDEN') {\n+          console.log('reaction removal failed due to permission error.',\n+            'This is probably because user has done meta-review somewhere out',\n+            'of gh-board.');\n+          this.setState((prevState) => {\n+            let newState = prevState;\n+            newState.canAdd[content] = true;\n+            // clean cache\n+            newState.cacheCount[content] = 0;\n+            return newState;\n+          });\n+          this.syncReview();\n+        }\n+      }\n     }\n-  ];\n-  return reactions.map(reaction => (\n-      <BS.Button bsClass=\"reaction-btn\">\n-        {reaction.emoji} {reaction.count}\n-      </BS.Button>\n-  ));\n+  }\n+\n+  render() {\n+    // id is the global identifier for the corresponding review comment\n+    const {id, stat, hasLogin, noReactionByMe} = this.props;\n+\n+    if (noReactionByMe && !Object.keys(this.state.canAdd).length) {\n+      // use deep copy for canAdd instead of reference so that we can\n+      // we deliberately only copy them once\n+      this.state.canAdd = {\n+        THUMBS_UP: noReactionByMe.THUMBS_UP,\n+        THUMBS_DOWN: noReactionByMe.THUMBS_DOWN,\n+        LAUGH: noReactionByMe.LAUGH,\n+        HOORAY: noReactionByMe.HOORAY,\n+        CONFUSED: noReactionByMe.CONFUSED,\n+        HEART: noReactionByMe.HEART\n+      };\n+    }\n+\n+    // props reflect real status of reactions, but may be out of date\n+    // we need to update cached information (this.state) accordingly\n+    if (noReactionByMe && this.state.canAdd) {\n+      const contents = ['THUMBS_UP', 'THUMBS_DOWN', 'LAUGH', 'HOORAY', 'CONFUSED', 'HEART'];\n+      for (const content of contents) {\n+        if (!noReactionByMe[content] && !this.state.canAdd[content]\n+          && this.state.cacheCount[content] === 1) {\n+          // our action (reaction creation) is now correctly reflected by props\n+          // need to flush cache, otherwise reaction count would be wrong\n+          console.log('flush creation cache of content', content);\n+          this.state.cacheCount[content] = 0;","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-08-04T08:22:29Z","lastEditedAt":null,"updatedAt":"2018-08-04T08:22:29Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzcwMzM0Ng==","url":"https://github.com/coala/gh-board/pull/147#discussion_r207703346","bodyText":"I should save it to indexdb apart from keeping it in the memory.","diffHunk":"@@ -1,45 +1,180 @@\n+import {Component} from 'react';\n import * as BS from 'react-bootstrap';\n \n-function Reactions({stat}) {\n-  // use null when count is zero because we don't want to display\n-  // number zero on frontend\n-  const reactions = [\n-    {\n-      emoji: '👍',\n-      count: stat.THUMBS_UP || null,\n-      name: 'THUMBS_UP'\n-    },\n-    {\n-      emoji: '👎',\n-      count: stat.THUMBS_DOWN || null,\n-      name: 'THUMBS_DOWN'\n-    },\n-    {\n-      emoji: '😄',\n-      count: stat.LAUGH || null,\n-      name: 'LAUGH'\n-    },\n-    {\n-      emoji: '🎉',\n-      count: stat.HOORAY || null,\n-      name: 'HOORAY'\n-    },\n-    {\n-      emoji: '😕',\n-      count: stat.CONFUSED || null,\n-      name: 'CONFUSED'\n-    },\n-    {\n-      emoji: '❤️',\n-      count: stat.HEART || null,\n-      name: 'HEART'\n+import Client from '../github-client';\n+\n+class Reactions extends Component {\n+  constructor(props) {\n+    super(props);\n+    this.state = {\n+      canAdd: {},\n+      // use cache to reflect reaction count on frontend\n+      // if we fetch up-to-date reaction count after mutation,\n+      // we have to refetch the whole pull request which wastes\n+      // a lot of API hits (there is no way to fetch single review\n+      // comment at the moment)\n+      cacheCount: {\n+        THUMBS_UP: 0,\n+        THUMBS_DOWN: 0,\n+        LAUGH: 0,\n+        HOORAY: 0,\n+        CONFUSED: 0,\n+        HEART: 0\n+      }\n+    };\n+  }\n+\n+  async onClick(id, content) {\n+    const canAdd = this.state.canAdd[content];\n+    let result, msg;\n+    if (canAdd) {\n+      ({ result, msg } = await Client.getGraphQLClient().addReaction(\n+        {id, content}\n+      ));\n+    } else {\n+      ({ result, msg } = await Client.getGraphQLClient().removeReaction(\n+        {id, content}\n+      ));\n+    }\n+    if (result) {\n+      if (canAdd) {\n+        // reaction creation succeeds\n+\n+        // Note that if it is already meta-reviewed by the user but not via gh-board,\n+        // action (add reaction) will fail, but GitHub won't return any error/warning.\n+        // The good news is that user won't be annoyed because the frontend behavior\n+        // is they add reactions successfully.\n+\n+        // A side note is that gh-board will not update accordingly if user does\n+        // meta-review directly on GitHub web page instead of on gh-board. This is\n+        // because the `updatedBy` attribute of the pull request won't get changed\n+        // due to meta-review.\n+\n+        this.setState((prevState) => {\n+          let newState = prevState;\n+          newState.canAdd[content] = false;\n+          // update cache\n+          newState.cacheCount[content] += 1;\n+          return newState;\n+        });\n+      } else {\n+        // reaction removal succeeds\n+        this.setState((prevState) => {\n+          let newState = prevState;\n+          newState.canAdd[content] = true;\n+          // update cache\n+          newState.cacheCount[content] -= 1;\n+          return newState;\n+        });\n+      }\n+    } else {\n+      if (canAdd) {\n+        // reaction creation fails\n+        console.log('add', content, 'to comment id', id, 'failed.',\n+          'message: ', msg);\n+      } else {\n+        console.log('remove', content, 'from comment id', id, 'failed',\n+          'message:', msg);\n+        // reaction removal fails\n+        if (msg && msg.length && msg[0].type === 'FORBIDDEN') {\n+          console.log('reaction removal failed due to permission error.',\n+            'This is probably because user has done meta-review somewhere out',\n+            'of gh-board.');\n+          this.setState((prevState) => {\n+            let newState = prevState;\n+            newState.canAdd[content] = true;\n+            // clean cache\n+            newState.cacheCount[content] = 0;\n+            return newState;\n+          });\n+          this.syncReview();\n+        }\n+      }\n     }\n-  ];\n-  return reactions.map(reaction => (\n-      <BS.Button bsClass=\"reaction-btn\">\n-        {reaction.emoji} {reaction.count}\n-      </BS.Button>\n-  ));\n+  }\n+\n+  render() {\n+    // id is the global identifier for the corresponding review comment\n+    const {id, stat, hasLogin, noReactionByMe} = this.props;\n+\n+    if (noReactionByMe && !Object.keys(this.state.canAdd).length) {\n+      // use deep copy for canAdd instead of reference so that we can\n+      // we deliberately only copy them once\n+      this.state.canAdd = {\n+        THUMBS_UP: noReactionByMe.THUMBS_UP,\n+        THUMBS_DOWN: noReactionByMe.THUMBS_DOWN,\n+        LAUGH: noReactionByMe.LAUGH,\n+        HOORAY: noReactionByMe.HOORAY,\n+        CONFUSED: noReactionByMe.CONFUSED,\n+        HEART: noReactionByMe.HEART\n+      };\n+    }\n+\n+    // props reflect real status of reactions, but may be out of date\n+    // we need to update cached information (this.state) accordingly\n+    if (noReactionByMe && this.state.canAdd) {\n+      const contents = ['THUMBS_UP', 'THUMBS_DOWN', 'LAUGH', 'HOORAY', 'CONFUSED', 'HEART'];\n+      for (const content of contents) {\n+        if (!noReactionByMe[content] && !this.state.canAdd[content]\n+          && this.state.cacheCount[content] === 1) {\n+          // our action (reaction creation) is now correctly reflected by props\n+          // need to flush cache, otherwise reaction count would be wrong\n+          console.log('flush creation cache of content', content);\n+          this.state.cacheCount[content] = 0;","author":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4","name":"Boxuan Li"},"reactions":[],"createdAt":"2018-08-04T08:33:14Z","lastEditedAt":null,"updatedAt":"2018-08-04T08:33:14Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzcwMzQyOA==","url":"https://github.com/coala/gh-board/pull/147#discussion_r207703428","bodyText":"This is not just moving. I actually changed the content.","diffHunk":"@@ -1,45 +1,180 @@\n+import {Component} from 'react';\n import * as BS from 'react-bootstrap';\n \n-function Reactions({stat}) {\n-  // use null when count is zero because we don't want to display\n-  // number zero on frontend\n-  const reactions = [\n-    {\n-      emoji: '👍',\n-      count: stat.THUMBS_UP || null,\n-      name: 'THUMBS_UP'\n-    },\n-    {\n-      emoji: '👎',\n-      count: stat.THUMBS_DOWN || null,\n-      name: 'THUMBS_DOWN'\n-    },\n-    {\n-      emoji: '😄',\n-      count: stat.LAUGH || null,\n-      name: 'LAUGH'\n-    },\n-    {\n-      emoji: '🎉',\n-      count: stat.HOORAY || null,\n-      name: 'HOORAY'\n-    },\n-    {\n-      emoji: '😕',\n-      count: stat.CONFUSED || null,\n-      name: 'CONFUSED'\n-    },\n-    {\n-      emoji: '❤️',\n-      count: stat.HEART || null,\n-      name: 'HEART'\n+import Client from '../github-client';\n+\n+class Reactions extends Component {\n+  constructor(props) {\n+    super(props);\n+    this.state = {\n+      canAdd: {},\n+      // use cache to reflect reaction count on frontend\n+      // if we fetch up-to-date reaction count after mutation,\n+      // we have to refetch the whole pull request which wastes\n+      // a lot of API hits (there is no way to fetch single review\n+      // comment at the moment)\n+      cacheCount: {\n+        THUMBS_UP: 0,\n+        THUMBS_DOWN: 0,\n+        LAUGH: 0,\n+        HOORAY: 0,\n+        CONFUSED: 0,\n+        HEART: 0\n+      }\n+    };\n+  }\n+\n+  async onClick(id, content) {\n+    const canAdd = this.state.canAdd[content];\n+    let result, msg;\n+    if (canAdd) {\n+      ({ result, msg } = await Client.getGraphQLClient().addReaction(\n+        {id, content}\n+      ));\n+    } else {\n+      ({ result, msg } = await Client.getGraphQLClient().removeReaction(\n+        {id, content}\n+      ));\n+    }\n+    if (result) {\n+      if (canAdd) {\n+        // reaction creation succeeds\n+\n+        // Note that if it is already meta-reviewed by the user but not via gh-board,\n+        // action (add reaction) will fail, but GitHub won't return any error/warning.\n+        // The good news is that user won't be annoyed because the frontend behavior\n+        // is they add reactions successfully.\n+\n+        // A side note is that gh-board will not update accordingly if user does\n+        // meta-review directly on GitHub web page instead of on gh-board. This is\n+        // because the `updatedBy` attribute of the pull request won't get changed\n+        // due to meta-review.\n+\n+        this.setState((prevState) => {\n+          let newState = prevState;\n+          newState.canAdd[content] = false;\n+          // update cache\n+          newState.cacheCount[content] += 1;\n+          return newState;\n+        });\n+      } else {\n+        // reaction removal succeeds\n+        this.setState((prevState) => {\n+          let newState = prevState;\n+          newState.canAdd[content] = true;\n+          // update cache\n+          newState.cacheCount[content] -= 1;\n+          return newState;\n+        });\n+      }\n+    } else {\n+      if (canAdd) {\n+        // reaction creation fails\n+        console.log('add', content, 'to comment id', id, 'failed.',\n+          'message: ', msg);\n+      } else {\n+        console.log('remove', content, 'from comment id', id, 'failed',\n+          'message:', msg);\n+        // reaction removal fails\n+        if (msg && msg.length && msg[0].type === 'FORBIDDEN') {\n+          console.log('reaction removal failed due to permission error.',\n+            'This is probably because user has done meta-review somewhere out',\n+            'of gh-board.');\n+          this.setState((prevState) => {\n+            let newState = prevState;\n+            newState.canAdd[content] = true;\n+            // clean cache\n+            newState.cacheCount[content] = 0;\n+            return newState;\n+          });\n+          this.syncReview();\n+        }\n+      }\n     }\n-  ];\n-  return reactions.map(reaction => (\n-      <BS.Button bsClass=\"reaction-btn\">\n-        {reaction.emoji} {reaction.count}\n-      </BS.Button>\n-  ));\n+  }\n+\n+  render() {\n+    // id is the global identifier for the corresponding review comment\n+    const {id, stat, hasLogin, noReactionByMe} = this.props;\n+\n+    if (noReactionByMe && !Object.keys(this.state.canAdd).length) {\n+      // use deep copy for canAdd instead of reference so that we can\n+      // we deliberately only copy them once\n+      this.state.canAdd = {\n+        THUMBS_UP: noReactionByMe.THUMBS_UP,\n+        THUMBS_DOWN: noReactionByMe.THUMBS_DOWN,\n+        LAUGH: noReactionByMe.LAUGH,\n+        HOORAY: noReactionByMe.HOORAY,\n+        CONFUSED: noReactionByMe.CONFUSED,\n+        HEART: noReactionByMe.HEART\n+      };\n+    }\n+\n+    // props reflect real status of reactions, but may be out of date\n+    // we need to update cached information (this.state) accordingly\n+    if (noReactionByMe && this.state.canAdd) {\n+      const contents = ['THUMBS_UP', 'THUMBS_DOWN', 'LAUGH', 'HOORAY', 'CONFUSED', 'HEART'];\n+      for (const content of contents) {\n+        if (!noReactionByMe[content] && !this.state.canAdd[content]\n+          && this.state.cacheCount[content] === 1) {\n+          // our action (reaction creation) is now correctly reflected by props\n+          // need to flush cache, otherwise reaction count would be wrong\n+          console.log('flush creation cache of content', content);\n+          this.state.cacheCount[content] = 0;\n+        }\n+        if (noReactionByMe[content] && this.state.canAdd[content]\n+          && this.state.cacheCount[content] === -1) {\n+          // our action (reaction removal) is now correctly reflected by props\n+          // need to flush cache, otherwise reaction count would be wrong\n+          console.log('flush removal cache of content', content);\n+          this.state.cacheCount[content] = 0;\n+        }\n+      }\n+    }\n+\n+    // use null when count is zero because we don't want to display\n+    // number zero on frontend\n+    const reactions = [","author":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4","name":"Boxuan Li"},"reactions":[],"createdAt":"2018-08-04T08:36:09Z","lastEditedAt":null,"updatedAt":"2018-08-04T08:36:09Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzcwMzQ2MQ==","url":"https://github.com/coala/gh-board/pull/147#discussion_r207703461","bodyText":"Hmm, would you mind elaborating it? You mean the login event is handled separately in many components ...?","diffHunk":"@@ -11,109 +14,156 @@ import ReviewBlurb from './review-blurb';\n import IssueOrPullRequestBlurb from './issue-blurb';\n import Reactions from './reactions';\n \n-function ReviewCard(props) {\n-  const {card, primaryRepoName} = props;\n-  const {repoOwner, repoName, number, id, bodyText, reactions, url} = card;\n-\n-  const key = `${repoOwner}/${repoName}#${number}-${id}`;\n-\n-  // comment updatedAt is updated when comment content is edited.\n-  // Note that the default `updatedAt` field of review comment\n-  // provided by GraphQL API is inaccurate. Thus, we use our custom\n-  // updatedAt, defined by `lastEditedAt` and `createdAt` time if never edited.\n-  const updatedAt = card.updatedAt;\n-\n-  const user = card.author;\n-  const assignedAvatar = (\n-    <Link to={getFilters().toggleUserName(user.login).url()}>\n-      <img\n-        key='avatar'\n-        className='avatar-image'\n-        title={'Click to filter on ' + user.login}\n-        src={user.avatarUrl}/>\n-    </Link>\n-  );\n-  // stop highlighting after 5min\n-  const isUpdated = Date.now() - Date.parse(updatedAt) < 2 * 60 * 1000;\n-\n-  // put the corresponding pull request as related card\n-  const issueCard = IssueStore.issueNumberToCard(repoOwner, repoName, number);\n-  const relatedCards = [issueCard].map((issueCard) => {\n-    let title;\n-    if (issueCard.issue) {\n-      title = (\n-        <span className='related-issue-title'>{issueCard.issue.title}</span>\n+class ReviewCard extends Component {","author":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4","name":"Boxuan Li"},"reactions":[],"createdAt":"2018-08-04T08:38:27Z","lastEditedAt":null,"updatedAt":"2018-08-04T08:38:27Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzcwNjg5Mw==","url":"https://github.com/coala/gh-board/pull/147#discussion_r207706893","bodyText":"Please don't use subclass, it's an antipattern in React. Instead, extract the logic into separate component or use HOC","diffHunk":"@@ -11,109 +14,156 @@ import ReviewBlurb from './review-blurb';\n import IssueOrPullRequestBlurb from './issue-blurb';\n import Reactions from './reactions';\n \n-function ReviewCard(props) {\n-  const {card, primaryRepoName} = props;\n-  const {repoOwner, repoName, number, id, bodyText, reactions, url} = card;\n-\n-  const key = `${repoOwner}/${repoName}#${number}-${id}`;\n-\n-  // comment updatedAt is updated when comment content is edited.\n-  // Note that the default `updatedAt` field of review comment\n-  // provided by GraphQL API is inaccurate. Thus, we use our custom\n-  // updatedAt, defined by `lastEditedAt` and `createdAt` time if never edited.\n-  const updatedAt = card.updatedAt;\n-\n-  const user = card.author;\n-  const assignedAvatar = (\n-    <Link to={getFilters().toggleUserName(user.login).url()}>\n-      <img\n-        key='avatar'\n-        className='avatar-image'\n-        title={'Click to filter on ' + user.login}\n-        src={user.avatarUrl}/>\n-    </Link>\n-  );\n-  // stop highlighting after 5min\n-  const isUpdated = Date.now() - Date.parse(updatedAt) < 2 * 60 * 1000;\n-\n-  // put the corresponding pull request as related card\n-  const issueCard = IssueStore.issueNumberToCard(repoOwner, repoName, number);\n-  const relatedCards = [issueCard].map((issueCard) => {\n-    let title;\n-    if (issueCard.issue) {\n-      title = (\n-        <span className='related-issue-title'>{issueCard.issue.title}</span>\n+class ReviewCard extends Component {","author":{"login":"blazeu","avatarUrl":"https://avatars0.githubusercontent.com/u/1438859?v=4","name":"Surya Widi"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNzQ1MDc4MQ==","createdAt":"2018-08-04T12:00:39Z","content":"THUMBS_UP","user":{"login":"jayvdb","name":"John Vandenberg"}}],"createdAt":"2018-08-04T11:50:22Z","lastEditedAt":null,"updatedAt":"2018-08-04T11:50:22Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzcwNjkyNw==","url":"https://github.com/coala/gh-board/pull/147#discussion_r207706927","bodyText":"Remember to use onClick = () => {} in class method so it autobinds.","diffHunk":"@@ -1,45 +1,180 @@\n+import {Component} from 'react';\n import * as BS from 'react-bootstrap';\n \n-function Reactions({stat}) {\n-  // use null when count is zero because we don't want to display\n-  // number zero on frontend\n-  const reactions = [\n-    {\n-      emoji: '👍',\n-      count: stat.THUMBS_UP || null,\n-      name: 'THUMBS_UP'\n-    },\n-    {\n-      emoji: '👎',\n-      count: stat.THUMBS_DOWN || null,\n-      name: 'THUMBS_DOWN'\n-    },\n-    {\n-      emoji: '😄',\n-      count: stat.LAUGH || null,\n-      name: 'LAUGH'\n-    },\n-    {\n-      emoji: '🎉',\n-      count: stat.HOORAY || null,\n-      name: 'HOORAY'\n-    },\n-    {\n-      emoji: '😕',\n-      count: stat.CONFUSED || null,\n-      name: 'CONFUSED'\n-    },\n-    {\n-      emoji: '❤️',\n-      count: stat.HEART || null,\n-      name: 'HEART'\n+import Client from '../github-client';\n+\n+class Reactions extends Component {\n+  constructor(props) {\n+    super(props);\n+    this.state = {\n+      canAdd: {},\n+      // use cache to reflect reaction count on frontend\n+      // if we fetch up-to-date reaction count after mutation,\n+      // we have to refetch the whole pull request which wastes\n+      // a lot of API hits (there is no way to fetch single review\n+      // comment at the moment)\n+      cacheCount: {\n+        THUMBS_UP: 0,\n+        THUMBS_DOWN: 0,\n+        LAUGH: 0,\n+        HOORAY: 0,\n+        CONFUSED: 0,\n+        HEART: 0\n+      }\n+    };\n+  }\n+\n+  async onClick(id, content) {\n+    const canAdd = this.state.canAdd[content];\n+    let result, msg;\n+    if (canAdd) {\n+      ({ result, msg } = await Client.getGraphQLClient().addReaction(\n+        {id, content}\n+      ));\n+    } else {\n+      ({ result, msg } = await Client.getGraphQLClient().removeReaction(\n+        {id, content}\n+      ));\n+    }\n+    if (result) {\n+      if (canAdd) {\n+        // reaction creation succeeds\n+\n+        // Note that if it is already meta-reviewed by the user but not via gh-board,\n+        // action (add reaction) will fail, but GitHub won't return any error/warning.\n+        // The good news is that user won't be annoyed because the frontend behavior\n+        // is they add reactions successfully.\n+\n+        // A side note is that gh-board will not update accordingly if user does\n+        // meta-review directly on GitHub web page instead of on gh-board. This is\n+        // because the `updatedBy` attribute of the pull request won't get changed\n+        // due to meta-review.\n+\n+        this.setState((prevState) => {\n+          let newState = prevState;\n+          newState.canAdd[content] = false;\n+          // update cache\n+          newState.cacheCount[content] += 1;\n+          return newState;\n+        });\n+      } else {\n+        // reaction removal succeeds\n+        this.setState((prevState) => {\n+          let newState = prevState;\n+          newState.canAdd[content] = true;\n+          // update cache\n+          newState.cacheCount[content] -= 1;\n+          return newState;\n+        });\n+      }\n+    } else {\n+      if (canAdd) {\n+        // reaction creation fails\n+        console.log('add', content, 'to comment id', id, 'failed.',\n+          'message: ', msg);\n+      } else {\n+        console.log('remove', content, 'from comment id', id, 'failed',\n+          'message:', msg);\n+        // reaction removal fails\n+        if (msg && msg.length && msg[0].type === 'FORBIDDEN') {\n+          console.log('reaction removal failed due to permission error.',\n+            'This is probably because user has done meta-review somewhere out',\n+            'of gh-board.');\n+          this.setState((prevState) => {\n+            let newState = prevState;\n+            newState.canAdd[content] = true;\n+            // clean cache\n+            newState.cacheCount[content] = 0;\n+            return newState;\n+          });\n+          this.syncReview();\n+        }\n+      }\n     }\n-  ];\n-  return reactions.map(reaction => (\n-      <BS.Button bsClass=\"reaction-btn\">\n-        {reaction.emoji} {reaction.count}\n-      </BS.Button>\n-  ));\n+  }\n+\n+  render() {\n+    // id is the global identifier for the corresponding review comment\n+    const {id, stat, hasLogin, noReactionByMe} = this.props;\n+\n+    if (noReactionByMe && !Object.keys(this.state.canAdd).length) {\n+      // use deep copy for canAdd instead of reference so that we can\n+      // we deliberately only copy them once\n+      this.state.canAdd = {\n+        THUMBS_UP: noReactionByMe.THUMBS_UP,\n+        THUMBS_DOWN: noReactionByMe.THUMBS_DOWN,\n+        LAUGH: noReactionByMe.LAUGH,\n+        HOORAY: noReactionByMe.HOORAY,\n+        CONFUSED: noReactionByMe.CONFUSED,\n+        HEART: noReactionByMe.HEART\n+      };\n+    }\n+\n+    // props reflect real status of reactions, but may be out of date\n+    // we need to update cached information (this.state) accordingly\n+    if (noReactionByMe && this.state.canAdd) {\n+      const contents = ['THUMBS_UP', 'THUMBS_DOWN', 'LAUGH', 'HOORAY', 'CONFUSED', 'HEART'];\n+      for (const content of contents) {\n+        if (!noReactionByMe[content] && !this.state.canAdd[content]\n+          && this.state.cacheCount[content] === 1) {\n+          // our action (reaction creation) is now correctly reflected by props\n+          // need to flush cache, otherwise reaction count would be wrong\n+          console.log('flush creation cache of content', content);\n+          this.state.cacheCount[content] = 0;\n+        }\n+        if (noReactionByMe[content] && this.state.canAdd[content]\n+          && this.state.cacheCount[content] === -1) {\n+          // our action (reaction removal) is now correctly reflected by props\n+          // need to flush cache, otherwise reaction count would be wrong\n+          console.log('flush removal cache of content', content);\n+          this.state.cacheCount[content] = 0;\n+        }\n+      }\n+    }\n+\n+    // use null when count is zero because we don't want to display\n+    // number zero on frontend\n+    const reactions = [\n+      {\n+        emoji: '👍',\n+        count: stat.THUMBS_UP + this.state.cacheCount.THUMBS_UP || null,\n+        name: 'THUMBS_UP'\n+      },\n+      {\n+        emoji: '👎',\n+        count: stat.THUMBS_DOWN + this.state.cacheCount.THUMBS_DOWN || null,\n+        name: 'THUMBS_DOWN'\n+      },\n+      {\n+        emoji: '😄',\n+        count: stat.LAUGH + this.state.cacheCount.LAUGH || null,\n+        name: 'LAUGH'\n+      },\n+      {\n+        emoji: '🎉',\n+        count: stat.HOORAY + this.state.cacheCount.HOORAY || null,\n+        name: 'HOORAY'\n+      },\n+      {\n+        emoji: '😕',\n+        count: stat.CONFUSED + this.state.cacheCount.CONFUSED || null,\n+        name: 'CONFUSED'\n+      },\n+      {\n+        emoji: '❤️',\n+        count: stat.HEART + this.state.cacheCount.HEART || null,\n+        name: 'HEART'\n+      }\n+    ];\n+    return reactions.map(reaction => (\n+        <BS.Button\n+          bsClass=\"reaction-btn\"\n+          onClick={this.onClick.bind(this, id, reaction.name)}","author":{"login":"blazeu","avatarUrl":"https://avatars0.githubusercontent.com/u/1438859?v=4","name":"Surya Widi"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNzQ2NjM1Mw==","createdAt":"2018-08-05T13:51:06Z","content":"THUMBS_UP","user":{"login":"li-boxuan","name":"Boxuan Li"}}],"createdAt":"2018-08-04T11:52:33Z","lastEditedAt":null,"updatedAt":"2018-08-04T11:52:33Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzcwNjk3MA==","url":"https://github.com/coala/gh-board/pull/147#discussion_r207706970","bodyText":"Did GitHub sent 2xx status even if there's an error? and that causes it to not being catched?\nWhat kind of error fall into this?","diffHunk":"@@ -148,6 +150,48 @@ class GraphQLClient {\n     return this;\n   }\n \n+  // first type of mutations: add reaction\n+  // return boolean value indicating result of action\n+  async addReaction({id, content}) {\n+    if (DEBUG) {\n+      console.log('add reaction for id', id, 'with content', content);\n+    }\n+    let data, errors;\n+    try {\n+      ({ data, errors } = await this.client.query(\n+        GITHUB_REACTION_ADD_MUTATION,\n+        {id, content}\n+      ));\n+    } catch (error) {\n+      return {result: false, msg: error};\n+    }\n+    if (!data || errors) {\n+      return {result: false, msg: errors};\n+    }\n+    return {result: true, msg: data};\n+  }\n+\n+  // second type of mutations: remove reaction\n+  // return boolean value indicating result of action\n+  async removeReaction({id, content}) {\n+    if (DEBUG) {\n+      console.log('remove reaction for id', id, 'with content', content);\n+    }\n+    let errors;\n+    try {\n+      ({ errors } = await this.client.query(\n+        GITHUB_REACTION_REMOVE_MUTATION,\n+        {id, content}\n+      ));\n+    } catch (error) {\n+      return {result: false, msg: error};\n+    }\n+    if (errors) {\n+      return {result: false, msg: errors};","author":{"login":"blazeu","avatarUrl":"https://avatars0.githubusercontent.com/u/1438859?v=4","name":"Surya Widi"},"reactions":[],"createdAt":"2018-08-04T11:55:22Z","lastEditedAt":null,"updatedAt":"2018-08-04T11:55:22Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzcwNzA0Mg==","url":"https://github.com/coala/gh-board/pull/147#discussion_r207707042","bodyText":"should be data here. Didn't notice it.","diffHunk":"@@ -148,6 +150,48 @@ class GraphQLClient {\n     return this;\n   }\n \n+  // first type of mutations: add reaction\n+  // return boolean value indicating result of action\n+  async addReaction({id, content}) {\n+    if (DEBUG) {\n+      console.log('add reaction for id', id, 'with content', content);\n+    }\n+    let data, errors;\n+    try {\n+      ({ data, errors } = await this.client.query(\n+        GITHUB_REACTION_ADD_MUTATION,\n+        {id, content}\n+      ));\n+    } catch (error) {\n+      return {result: false, msg: error};\n+    }\n+    if (!data || errors) {\n+      return {result: false, msg: errors};\n+    }\n+    return {result: true, msg: data};\n+  }\n+\n+  // second type of mutations: remove reaction\n+  // return boolean value indicating result of action\n+  async removeReaction({id, content}) {\n+    if (DEBUG) {\n+      console.log('remove reaction for id', id, 'with content', content);\n+    }\n+    let errors;\n+    try {\n+      ({ errors } = await this.client.query(\n+        GITHUB_REACTION_REMOVE_MUTATION,\n+        {id, content}\n+      ));\n+    } catch (error) {\n+      return {result: false, msg: error};\n+    }\n+    if (errors) {\n+      return {result: false, msg: errors};\n+    }\n+    return {result: true, msg: errors};","author":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4","name":"Boxuan Li"},"reactions":[],"createdAt":"2018-08-04T12:01:53Z","lastEditedAt":null,"updatedAt":"2018-08-04T12:01:53Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzcwNzExNw==","url":"https://github.com/coala/gh-board/pull/147#discussion_r207707117","bodyText":"When you try to remove a reaction from a comment you've never reacted before, GitHub will return a failure message.","diffHunk":"@@ -148,6 +150,48 @@ class GraphQLClient {\n     return this;\n   }\n \n+  // first type of mutations: add reaction\n+  // return boolean value indicating result of action\n+  async addReaction({id, content}) {\n+    if (DEBUG) {\n+      console.log('add reaction for id', id, 'with content', content);\n+    }\n+    let data, errors;\n+    try {\n+      ({ data, errors } = await this.client.query(\n+        GITHUB_REACTION_ADD_MUTATION,\n+        {id, content}\n+      ));\n+    } catch (error) {\n+      return {result: false, msg: error};\n+    }\n+    if (!data || errors) {\n+      return {result: false, msg: errors};\n+    }\n+    return {result: true, msg: data};\n+  }\n+\n+  // second type of mutations: remove reaction\n+  // return boolean value indicating result of action\n+  async removeReaction({id, content}) {\n+    if (DEBUG) {\n+      console.log('remove reaction for id', id, 'with content', content);\n+    }\n+    let errors;\n+    try {\n+      ({ errors } = await this.client.query(\n+        GITHUB_REACTION_REMOVE_MUTATION,\n+        {id, content}\n+      ));\n+    } catch (error) {\n+      return {result: false, msg: error};\n+    }\n+    if (errors) {\n+      return {result: false, msg: errors};","author":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4","name":"Boxuan Li"},"reactions":[],"createdAt":"2018-08-04T12:06:24Z","lastEditedAt":"2018-08-04T12:06:44Z","updatedAt":"2018-08-04T12:06:44Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzcwNzg4MA==","url":"https://github.com/coala/gh-board/pull/147#discussion_r207707880","bodyText":"Component approach can be done by making a component that takes a children as a function or a render prop that gives back data. i.e.\nconst Auth = ({ children }) => {\n  return children(loginInfo) // get loginInfo from somewhere (componentDidMount?)\n}\n\n// or with render prop\n\nconst Auth = ({ render }) => {\n  return render(loginInfo)\n}\nusage:\n<Auth>\n{loginInfo => {\n  ... add logic here or render component\n}}\n</Auth>\n\n// or\n\n<Auth render={{loginInfo => { ... }}} />\nHOC is just a function that wraps other component, gives it extra prop, and returns it\nfunction withAuth(WrapperComponent) {\n  return class WithAuth extends Component {\n    render() {\n      return <WrapperComponent {...this.props} loginInfo={this.loginInfo} />\n    }\n  }\n}\nHOC usage:\nconst ReviewCard = ({ loginInfo }) => <div>{loginInfo.something}</div>\n\nexport default withAuth(ReviewCard)\nhttps://reactjs.org/docs/render-props.html\nhttps://reactjs.org/docs/higher-order-components.html","diffHunk":"@@ -11,109 +14,156 @@ import ReviewBlurb from './review-blurb';\n import IssueOrPullRequestBlurb from './issue-blurb';\n import Reactions from './reactions';\n \n-function ReviewCard(props) {\n-  const {card, primaryRepoName} = props;\n-  const {repoOwner, repoName, number, id, bodyText, reactions, url} = card;\n-\n-  const key = `${repoOwner}/${repoName}#${number}-${id}`;\n-\n-  // comment updatedAt is updated when comment content is edited.\n-  // Note that the default `updatedAt` field of review comment\n-  // provided by GraphQL API is inaccurate. Thus, we use our custom\n-  // updatedAt, defined by `lastEditedAt` and `createdAt` time if never edited.\n-  const updatedAt = card.updatedAt;\n-\n-  const user = card.author;\n-  const assignedAvatar = (\n-    <Link to={getFilters().toggleUserName(user.login).url()}>\n-      <img\n-        key='avatar'\n-        className='avatar-image'\n-        title={'Click to filter on ' + user.login}\n-        src={user.avatarUrl}/>\n-    </Link>\n-  );\n-  // stop highlighting after 5min\n-  const isUpdated = Date.now() - Date.parse(updatedAt) < 2 * 60 * 1000;\n-\n-  // put the corresponding pull request as related card\n-  const issueCard = IssueStore.issueNumberToCard(repoOwner, repoName, number);\n-  const relatedCards = [issueCard].map((issueCard) => {\n-    let title;\n-    if (issueCard.issue) {\n-      title = (\n-        <span className='related-issue-title'>{issueCard.issue.title}</span>\n+class ReviewCard extends Component {","author":{"login":"blazeu","avatarUrl":"https://avatars0.githubusercontent.com/u/1438859?v=4","name":"Surya Widi"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNzQ1MTMxOA==","createdAt":"2018-08-04T12:45:21Z","content":"THUMBS_UP","user":{"login":"li-boxuan","name":"Boxuan Li"}}],"createdAt":"2018-08-04T12:44:10Z","lastEditedAt":"2018-08-04T12:47:54Z","updatedAt":"2018-08-04T12:47:54Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzcwODUzMw==","url":"https://github.com/coala/gh-board/pull/147#discussion_r207708533","bodyText":"But with 2xx error code, as in success?","diffHunk":"@@ -148,6 +150,48 @@ class GraphQLClient {\n     return this;\n   }\n \n+  // first type of mutations: add reaction\n+  // return boolean value indicating result of action\n+  async addReaction({id, content}) {\n+    if (DEBUG) {\n+      console.log('add reaction for id', id, 'with content', content);\n+    }\n+    let data, errors;\n+    try {\n+      ({ data, errors } = await this.client.query(\n+        GITHUB_REACTION_ADD_MUTATION,\n+        {id, content}\n+      ));\n+    } catch (error) {\n+      return {result: false, msg: error};\n+    }\n+    if (!data || errors) {\n+      return {result: false, msg: errors};\n+    }\n+    return {result: true, msg: data};\n+  }\n+\n+  // second type of mutations: remove reaction\n+  // return boolean value indicating result of action\n+  async removeReaction({id, content}) {\n+    if (DEBUG) {\n+      console.log('remove reaction for id', id, 'with content', content);\n+    }\n+    let errors;\n+    try {\n+      ({ errors } = await this.client.query(\n+        GITHUB_REACTION_REMOVE_MUTATION,\n+        {id, content}\n+      ));\n+    } catch (error) {\n+      return {result: false, msg: error};\n+    }\n+    if (errors) {\n+      return {result: false, msg: errors};","author":{"login":"blazeu","avatarUrl":"https://avatars0.githubusercontent.com/u/1438859?v=4","name":"Surya Widi"},"reactions":[],"createdAt":"2018-08-04T13:17:19Z","lastEditedAt":null,"updatedAt":"2018-08-04T13:17:19Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzcwODYwNA==","url":"https://github.com/coala/gh-board/pull/147#discussion_r207708604","bodyText":"Yep. Actually, GitHub always returns 200, no matter whether your request is valid or not. To see that, you can go to https://developer.github.com/v4/explorer/ and send whatever request ;)","diffHunk":"@@ -148,6 +150,48 @@ class GraphQLClient {\n     return this;\n   }\n \n+  // first type of mutations: add reaction\n+  // return boolean value indicating result of action\n+  async addReaction({id, content}) {\n+    if (DEBUG) {\n+      console.log('add reaction for id', id, 'with content', content);\n+    }\n+    let data, errors;\n+    try {\n+      ({ data, errors } = await this.client.query(\n+        GITHUB_REACTION_ADD_MUTATION,\n+        {id, content}\n+      ));\n+    } catch (error) {\n+      return {result: false, msg: error};\n+    }\n+    if (!data || errors) {\n+      return {result: false, msg: errors};\n+    }\n+    return {result: true, msg: data};\n+  }\n+\n+  // second type of mutations: remove reaction\n+  // return boolean value indicating result of action\n+  async removeReaction({id, content}) {\n+    if (DEBUG) {\n+      console.log('remove reaction for id', id, 'with content', content);\n+    }\n+    let errors;\n+    try {\n+      ({ errors } = await this.client.query(\n+        GITHUB_REACTION_REMOVE_MUTATION,\n+        {id, content}\n+      ));\n+    } catch (error) {\n+      return {result: false, msg: error};\n+    }\n+    if (errors) {\n+      return {result: false, msg: errors};","author":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4","name":"Boxuan Li"},"reactions":[],"createdAt":"2018-08-04T13:22:33Z","lastEditedAt":null,"updatedAt":"2018-08-04T13:22:33Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzc1NzAyMg==","url":"https://github.com/coala/gh-board/pull/147#discussion_r207757022","bodyText":"I'd still prefer the reference data part of this (keys emoji / name) were stored in a more static form, e.g. a new emoji.js with related functions nearby.\nBut it is only six members, so I'll accept this for the moment.","diffHunk":"@@ -1,45 +1,180 @@\n+import {Component} from 'react';\n import * as BS from 'react-bootstrap';\n \n-function Reactions({stat}) {\n-  // use null when count is zero because we don't want to display\n-  // number zero on frontend\n-  const reactions = [\n-    {\n-      emoji: '👍',\n-      count: stat.THUMBS_UP || null,\n-      name: 'THUMBS_UP'\n-    },\n-    {\n-      emoji: '👎',\n-      count: stat.THUMBS_DOWN || null,\n-      name: 'THUMBS_DOWN'\n-    },\n-    {\n-      emoji: '😄',\n-      count: stat.LAUGH || null,\n-      name: 'LAUGH'\n-    },\n-    {\n-      emoji: '🎉',\n-      count: stat.HOORAY || null,\n-      name: 'HOORAY'\n-    },\n-    {\n-      emoji: '😕',\n-      count: stat.CONFUSED || null,\n-      name: 'CONFUSED'\n-    },\n-    {\n-      emoji: '❤️',\n-      count: stat.HEART || null,\n-      name: 'HEART'\n+import Client from '../github-client';\n+\n+class Reactions extends Component {\n+  constructor(props) {\n+    super(props);\n+    this.state = {\n+      canAdd: {},\n+      // use cache to reflect reaction count on frontend\n+      // if we fetch up-to-date reaction count after mutation,\n+      // we have to refetch the whole pull request which wastes\n+      // a lot of API hits (there is no way to fetch single review\n+      // comment at the moment)\n+      cacheCount: {\n+        THUMBS_UP: 0,\n+        THUMBS_DOWN: 0,\n+        LAUGH: 0,\n+        HOORAY: 0,\n+        CONFUSED: 0,\n+        HEART: 0\n+      }\n+    };\n+  }\n+\n+  async onClick(id, content) {\n+    const canAdd = this.state.canAdd[content];\n+    let result, msg;\n+    if (canAdd) {\n+      ({ result, msg } = await Client.getGraphQLClient().addReaction(\n+        {id, content}\n+      ));\n+    } else {\n+      ({ result, msg } = await Client.getGraphQLClient().removeReaction(\n+        {id, content}\n+      ));\n+    }\n+    if (result) {\n+      if (canAdd) {\n+        // reaction creation succeeds\n+\n+        // Note that if it is already meta-reviewed by the user but not via gh-board,\n+        // action (add reaction) will fail, but GitHub won't return any error/warning.\n+        // The good news is that user won't be annoyed because the frontend behavior\n+        // is they add reactions successfully.\n+\n+        // A side note is that gh-board will not update accordingly if user does\n+        // meta-review directly on GitHub web page instead of on gh-board. This is\n+        // because the `updatedBy` attribute of the pull request won't get changed\n+        // due to meta-review.\n+\n+        this.setState((prevState) => {\n+          let newState = prevState;\n+          newState.canAdd[content] = false;\n+          // update cache\n+          newState.cacheCount[content] += 1;\n+          return newState;\n+        });\n+      } else {\n+        // reaction removal succeeds\n+        this.setState((prevState) => {\n+          let newState = prevState;\n+          newState.canAdd[content] = true;\n+          // update cache\n+          newState.cacheCount[content] -= 1;\n+          return newState;\n+        });\n+      }\n+    } else {\n+      if (canAdd) {\n+        // reaction creation fails\n+        console.log('add', content, 'to comment id', id, 'failed.',\n+          'message: ', msg);\n+      } else {\n+        console.log('remove', content, 'from comment id', id, 'failed',\n+          'message:', msg);\n+        // reaction removal fails\n+        if (msg && msg.length && msg[0].type === 'FORBIDDEN') {\n+          console.log('reaction removal failed due to permission error.',\n+            'This is probably because user has done meta-review somewhere out',\n+            'of gh-board.');\n+          this.setState((prevState) => {\n+            let newState = prevState;\n+            newState.canAdd[content] = true;\n+            // clean cache\n+            newState.cacheCount[content] = 0;\n+            return newState;\n+          });\n+          this.syncReview();\n+        }\n+      }\n     }\n-  ];\n-  return reactions.map(reaction => (\n-      <BS.Button bsClass=\"reaction-btn\">\n-        {reaction.emoji} {reaction.count}\n-      </BS.Button>\n-  ));\n+  }\n+\n+  render() {\n+    // id is the global identifier for the corresponding review comment\n+    const {id, stat, hasLogin, noReactionByMe} = this.props;\n+\n+    if (noReactionByMe && !Object.keys(this.state.canAdd).length) {\n+      // use deep copy for canAdd instead of reference so that we can\n+      // we deliberately only copy them once\n+      this.state.canAdd = {\n+        THUMBS_UP: noReactionByMe.THUMBS_UP,\n+        THUMBS_DOWN: noReactionByMe.THUMBS_DOWN,\n+        LAUGH: noReactionByMe.LAUGH,\n+        HOORAY: noReactionByMe.HOORAY,\n+        CONFUSED: noReactionByMe.CONFUSED,\n+        HEART: noReactionByMe.HEART\n+      };\n+    }\n+\n+    // props reflect real status of reactions, but may be out of date\n+    // we need to update cached information (this.state) accordingly\n+    if (noReactionByMe && this.state.canAdd) {\n+      const contents = ['THUMBS_UP', 'THUMBS_DOWN', 'LAUGH', 'HOORAY', 'CONFUSED', 'HEART'];\n+      for (const content of contents) {\n+        if (!noReactionByMe[content] && !this.state.canAdd[content]\n+          && this.state.cacheCount[content] === 1) {\n+          // our action (reaction creation) is now correctly reflected by props\n+          // need to flush cache, otherwise reaction count would be wrong\n+          console.log('flush creation cache of content', content);\n+          this.state.cacheCount[content] = 0;\n+        }\n+        if (noReactionByMe[content] && this.state.canAdd[content]\n+          && this.state.cacheCount[content] === -1) {\n+          // our action (reaction removal) is now correctly reflected by props\n+          // need to flush cache, otherwise reaction count would be wrong\n+          console.log('flush removal cache of content', content);\n+          this.state.cacheCount[content] = 0;\n+        }\n+      }\n+    }\n+\n+    // use null when count is zero because we don't want to display\n+    // number zero on frontend\n+    const reactions = [","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-08-06T01:19:39Z","lastEditedAt":null,"updatedAt":"2018-08-06T01:19:39Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzc1NzE5OQ==","url":"https://github.com/coala/gh-board/pull/147#discussion_r207757199","bodyText":"withAuth() should be used for the existing components which need it, i.e. dashboard and kanban board where you added it for the filters.","diffHunk":"@@ -1,125 +1,186 @@\n+import {Component} from 'react';\n import * as BS from 'react-bootstrap';\n import classnames from 'classnames';\n import {Link} from 'react-router';\n \n import {getFilters} from '../route-utils';\n import IssueStore from '../issue-store';\n+import Database from '../database';\n \n import GithubFlavoredMarkdown from './gfm';\n import Time from './time';\n import ReviewBlurb from './review-blurb';\n import IssueOrPullRequestBlurb from './issue-blurb';\n import Reactions from './reactions';\n+import withAuth from './login-auth';\n \n-function ReviewCard(props) {\n-  const {card, primaryRepoName} = props;\n-  const {repoOwner, repoName, number, id, bodyText, reactions, url} = card;\n-\n-  const key = `${repoOwner}/${repoName}#${number}-${id}`;\n-\n-  // comment updatedAt is updated when comment content is edited.\n-  // Note that the default `updatedAt` field of review comment\n-  // provided by GraphQL API is inaccurate. Thus, we use our custom\n-  // updatedAt, defined by `lastEditedAt` and `createdAt` time if never edited.\n-  const updatedAt = card.updatedAt;\n-\n-  const user = card.author;\n-  const assignedAvatar = (\n-    <Link to={getFilters().toggleUserName(user.login).url()}>\n-      <img\n-        key='avatar'\n-        className='avatar-image'\n-        title={'Click to filter on ' + user.login}\n-        src={user.avatarUrl}/>\n-    </Link>\n-  );\n-  // stop highlighting after 5min\n-  const isUpdated = Date.now() - Date.parse(updatedAt) < 2 * 60 * 1000;\n-\n-  // put the corresponding pull request as related card\n-  const issueCard = IssueStore.issueNumberToCard(repoOwner, repoName, number);\n-  const relatedCards = [issueCard].map((issueCard) => {\n-    let title;\n-    if (issueCard.issue) {\n-      title = (\n-        <span className='related-issue-title'>{issueCard.issue.title}</span>\n+class ReviewCard extends Component {\n+  saveToDatabase = (content, isAdd) => {\n+    // reviewCard is just part of issueCard\n+    const {card, loginInfo} = this.props;\n+    const {repoOwner, repoName, number} = card;\n+    const {login} = loginInfo;\n+    if (isAdd) {\n+      // add a new reaction\n+      if (!card.reactions) card.reactions = [];\n+      card.reactions.push({\n+        content,\n+        user: {\n+          login,\n+        },\n+      });\n+    } else {\n+      // remove an existing reaction\n+      card.reactions = card.reactions.filter((reaction) => {\n+        return !(reaction.user.login === login && reaction.content === content);\n+      });\n+    }\n+    // find the corresponding issueCard\n+    const issueCard = IssueStore.issueNumberToCard(repoOwner, repoName, number);\n+    // update corresponding issueCard\n+    issueCard.issue.pullRequest.comments.forEach(reviewCard => {\n+      if (reviewCard.id === card.id) {\n+        reviewCard = card;\n+      }\n+    });\n+    Database.putCards([issueCard]);\n+  }\n+\n+  render() {\n+    const {card, primaryRepoName, loginInfo} = this.props;\n+    const {repoOwner, repoName, number, id, bodyText, reactions, url} = card;\n+    const key = `${repoOwner}/${repoName}#${number}-${id}`;\n+\n+    // comment updatedAt is updated when comment content is edited.\n+    // Note that the default `updatedAt` field of review comment\n+    // provided by GraphQL API is inaccurate. Thus, we use our custom\n+    // updatedAt, defined by `lastEditedAt` and `createdAt` time if never edited.\n+    const updatedAt = card.updatedAt;\n+\n+    const user = card.author;\n+    const assignedAvatar = (\n+      <Link to={getFilters().toggleUserName(user.login).url()}>\n+        <img\n+          key='avatar'\n+          className='avatar-image'\n+          title={'Click to filter on ' + user.login}\n+          src={user.avatarUrl}/>\n+      </Link>\n+    );\n+    // stop highlighting after 5min\n+    const isUpdated = Date.now() - Date.parse(updatedAt) < 2 * 60 * 1000;\n+\n+    // put the corresponding pull request as related card\n+    const issueCard = IssueStore.issueNumberToCard(repoOwner, repoName, number);\n+    const relatedCards = [issueCard].map((issueCard) => {\n+      let title;\n+      if (issueCard.issue) {\n+        title = (\n+          <span className='related-issue-title'>{issueCard.issue.title}</span>\n+        );\n+      }\n+      return (\n+        <div key={issueCard.key()} className='related-issue'>\n+          <IssueOrPullRequestBlurb\n+            card={issueCard}\n+            primaryRepoName={card.repoName}/>\n+          {title}\n+        </div>\n       );\n+    });\n+\n+    const classes = {\n+      'review': true,\n+      'is-updated': isUpdated,\n+    };\n+\n+    const header = [\n+      <ReviewBlurb key='review-blurb'\n+        card={card}\n+        primaryRepoName={primaryRepoName} />,\n+    ];\n+\n+    let reactionsStat = {\n+      THUMBS_UP: 0,\n+      THUMBS_DOWN: 0,\n+      LAUGH: 0,\n+      HOORAY: 0,\n+      HEART: 0,\n+      CONFUSED: 0\n+    };\n+    if (reactions) {\n+      reactions.forEach(reaction => reactionsStat[reaction.content]++);\n     }\n+\n+    let noReactionByMe;\n+    let hasLogin = false;\n+    if (loginInfo) {\n+      hasLogin = true;\n+      noReactionByMe = {\n+        THUMBS_UP: true,\n+        THUMBS_DOWN: true,\n+        LAUGH: true,\n+        HOORAY: true,\n+        HEART: true,\n+        CONFUSED: true\n+      };\n+      if (reactions) {\n+        reactions.forEach(reaction => {\n+          if (reaction.user && reaction.user.login === loginInfo.login) {\n+            noReactionByMe[reaction.content] = false;\n+          }\n+        });\n+      }\n+    }\n+\n     return (\n-      <div key={issueCard.key()} className='related-issue'>\n-        <IssueOrPullRequestBlurb\n-          card={issueCard}\n-          primaryRepoName={card.repoName}/>\n-        {title}\n-      </div>\n-    );\n-  });\n-\n-  const classes = {\n-    'review': true,\n-    'is-updated': isUpdated,\n-  };\n-\n-  const header = [\n-    <ReviewBlurb key='review-blurb'\n-      card={card}\n-      primaryRepoName={primaryRepoName} />,\n-  ];\n-\n-  let reactionsStat = {\n-    THUMBS_UP: 0,\n-    THUMBS_DOWN: 0,\n-    LAUGH: 0,\n-    HOORAY: 0,\n-    HEART: 0,\n-    CONFUSED: 0\n-  };\n-  if (reactions) {\n-    reactions.forEach(reaction => reactionsStat[reaction.content]++);\n-  }\n+      <div className='-card-and-related'>\n+        <BS.ListGroupItem\n+          key={key}\n+          header={header}\n+          className={classnames(classes)}>\n \n-  return (\n-    <div className='-card-and-related'>\n-      <BS.ListGroupItem\n-        key={key}\n-        header={header}\n-        className={classnames(classes)}>\n-\n-        <span className='-extra-span-for-inline-popover'>\n-          <a\n-            key='link'\n-            className='review-title'\n-            target='_blank'\n-            href={url}>\n-              <GithubFlavoredMarkdown\n-                inline\n-                repoOwner={repoOwner}\n-                repoName={repoName}\n-                text={bodyText}/>\n-          </a>\n-        </span>\n-\n-        <span key='footer' className='review-footer'>\n-          <span key='left-footer' className='comment-reactions'>\n-            <Reactions stat={reactionsStat}/>\n+          <span className='-extra-span-for-inline-popover'>\n+            <a\n+              key='link'\n+              className='review-title'\n+              target='_blank'\n+              href={url}>\n+                <GithubFlavoredMarkdown\n+                  inline\n+                  repoOwner={repoOwner}\n+                  repoName={repoName}\n+                  text={bodyText}/>\n+            </a>\n           </span>\n-          <span key='right-footer' className='review-time-and-user'>\n-            <Time key='time' className='updated-at' dateTime={updatedAt}/>\n-            {assignedAvatar}\n+\n+          <span key='footer' className='review-footer'>\n+            <span key='left-footer' className='comment-reactions'>\n+              <Reactions\n+                id={id}\n+                stat={reactionsStat}\n+                noReactionByMe={noReactionByMe}\n+                hasLogin={hasLogin}\n+                saveCallBack={this.saveToDatabase}/>\n+            </span>\n+            <span key='right-footer' className='review-time-and-user'>\n+              <Time key='time' className='updated-at' dateTime={updatedAt}/>\n+              {assignedAvatar}\n+            </span>\n           </span>\n-        </span>\n-      </BS.ListGroupItem>\n-      <div key='related' className='related-issues'>\n-        {relatedCards}\n+        </BS.ListGroupItem>\n+        <div key='related' className='related-issues'>\n+          {relatedCards}\n+        </div>\n       </div>\n-    </div>\n-  );\n+    );\n+  }\n }\n \n-function Review({review}) {\n+function Review({review, loginInfo}) {\n   return (\n-    <ReviewCard card={review}/>\n+    <ReviewCard card={review} loginInfo={loginInfo}/>\n   );\n }\n \n-export default Review;\n+export default withAuth(Review);","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-08-06T01:22:58Z","lastEditedAt":null,"updatedAt":"2018-08-06T01:22:58Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzg4Nzg0Ng==","url":"https://github.com/coala/gh-board/pull/147#discussion_r207887846","bodyText":"The logic for dashboard is actually different... See \n  \n    \n      gh-board/src/components/dashboard.jsx\n    \n    \n         Line 351\n      in\n      38a94ce\n    \n    \n    \n    \n\n        \n          \n                   return Client.dbPromise().then(() => Client.getOcto().user.repos.fetchAll());","diffHunk":"@@ -1,125 +1,186 @@\n+import {Component} from 'react';\n import * as BS from 'react-bootstrap';\n import classnames from 'classnames';\n import {Link} from 'react-router';\n \n import {getFilters} from '../route-utils';\n import IssueStore from '../issue-store';\n+import Database from '../database';\n \n import GithubFlavoredMarkdown from './gfm';\n import Time from './time';\n import ReviewBlurb from './review-blurb';\n import IssueOrPullRequestBlurb from './issue-blurb';\n import Reactions from './reactions';\n+import withAuth from './login-auth';\n \n-function ReviewCard(props) {\n-  const {card, primaryRepoName} = props;\n-  const {repoOwner, repoName, number, id, bodyText, reactions, url} = card;\n-\n-  const key = `${repoOwner}/${repoName}#${number}-${id}`;\n-\n-  // comment updatedAt is updated when comment content is edited.\n-  // Note that the default `updatedAt` field of review comment\n-  // provided by GraphQL API is inaccurate. Thus, we use our custom\n-  // updatedAt, defined by `lastEditedAt` and `createdAt` time if never edited.\n-  const updatedAt = card.updatedAt;\n-\n-  const user = card.author;\n-  const assignedAvatar = (\n-    <Link to={getFilters().toggleUserName(user.login).url()}>\n-      <img\n-        key='avatar'\n-        className='avatar-image'\n-        title={'Click to filter on ' + user.login}\n-        src={user.avatarUrl}/>\n-    </Link>\n-  );\n-  // stop highlighting after 5min\n-  const isUpdated = Date.now() - Date.parse(updatedAt) < 2 * 60 * 1000;\n-\n-  // put the corresponding pull request as related card\n-  const issueCard = IssueStore.issueNumberToCard(repoOwner, repoName, number);\n-  const relatedCards = [issueCard].map((issueCard) => {\n-    let title;\n-    if (issueCard.issue) {\n-      title = (\n-        <span className='related-issue-title'>{issueCard.issue.title}</span>\n+class ReviewCard extends Component {\n+  saveToDatabase = (content, isAdd) => {\n+    // reviewCard is just part of issueCard\n+    const {card, loginInfo} = this.props;\n+    const {repoOwner, repoName, number} = card;\n+    const {login} = loginInfo;\n+    if (isAdd) {\n+      // add a new reaction\n+      if (!card.reactions) card.reactions = [];\n+      card.reactions.push({\n+        content,\n+        user: {\n+          login,\n+        },\n+      });\n+    } else {\n+      // remove an existing reaction\n+      card.reactions = card.reactions.filter((reaction) => {\n+        return !(reaction.user.login === login && reaction.content === content);\n+      });\n+    }\n+    // find the corresponding issueCard\n+    const issueCard = IssueStore.issueNumberToCard(repoOwner, repoName, number);\n+    // update corresponding issueCard\n+    issueCard.issue.pullRequest.comments.forEach(reviewCard => {\n+      if (reviewCard.id === card.id) {\n+        reviewCard = card;\n+      }\n+    });\n+    Database.putCards([issueCard]);\n+  }\n+\n+  render() {\n+    const {card, primaryRepoName, loginInfo} = this.props;\n+    const {repoOwner, repoName, number, id, bodyText, reactions, url} = card;\n+    const key = `${repoOwner}/${repoName}#${number}-${id}`;\n+\n+    // comment updatedAt is updated when comment content is edited.\n+    // Note that the default `updatedAt` field of review comment\n+    // provided by GraphQL API is inaccurate. Thus, we use our custom\n+    // updatedAt, defined by `lastEditedAt` and `createdAt` time if never edited.\n+    const updatedAt = card.updatedAt;\n+\n+    const user = card.author;\n+    const assignedAvatar = (\n+      <Link to={getFilters().toggleUserName(user.login).url()}>\n+        <img\n+          key='avatar'\n+          className='avatar-image'\n+          title={'Click to filter on ' + user.login}\n+          src={user.avatarUrl}/>\n+      </Link>\n+    );\n+    // stop highlighting after 5min\n+    const isUpdated = Date.now() - Date.parse(updatedAt) < 2 * 60 * 1000;\n+\n+    // put the corresponding pull request as related card\n+    const issueCard = IssueStore.issueNumberToCard(repoOwner, repoName, number);\n+    const relatedCards = [issueCard].map((issueCard) => {\n+      let title;\n+      if (issueCard.issue) {\n+        title = (\n+          <span className='related-issue-title'>{issueCard.issue.title}</span>\n+        );\n+      }\n+      return (\n+        <div key={issueCard.key()} className='related-issue'>\n+          <IssueOrPullRequestBlurb\n+            card={issueCard}\n+            primaryRepoName={card.repoName}/>\n+          {title}\n+        </div>\n       );\n+    });\n+\n+    const classes = {\n+      'review': true,\n+      'is-updated': isUpdated,\n+    };\n+\n+    const header = [\n+      <ReviewBlurb key='review-blurb'\n+        card={card}\n+        primaryRepoName={primaryRepoName} />,\n+    ];\n+\n+    let reactionsStat = {\n+      THUMBS_UP: 0,\n+      THUMBS_DOWN: 0,\n+      LAUGH: 0,\n+      HOORAY: 0,\n+      HEART: 0,\n+      CONFUSED: 0\n+    };\n+    if (reactions) {\n+      reactions.forEach(reaction => reactionsStat[reaction.content]++);\n     }\n+\n+    let noReactionByMe;\n+    let hasLogin = false;\n+    if (loginInfo) {\n+      hasLogin = true;\n+      noReactionByMe = {\n+        THUMBS_UP: true,\n+        THUMBS_DOWN: true,\n+        LAUGH: true,\n+        HOORAY: true,\n+        HEART: true,\n+        CONFUSED: true\n+      };\n+      if (reactions) {\n+        reactions.forEach(reaction => {\n+          if (reaction.user && reaction.user.login === loginInfo.login) {\n+            noReactionByMe[reaction.content] = false;\n+          }\n+        });\n+      }\n+    }\n+\n     return (\n-      <div key={issueCard.key()} className='related-issue'>\n-        <IssueOrPullRequestBlurb\n-          card={issueCard}\n-          primaryRepoName={card.repoName}/>\n-        {title}\n-      </div>\n-    );\n-  });\n-\n-  const classes = {\n-    'review': true,\n-    'is-updated': isUpdated,\n-  };\n-\n-  const header = [\n-    <ReviewBlurb key='review-blurb'\n-      card={card}\n-      primaryRepoName={primaryRepoName} />,\n-  ];\n-\n-  let reactionsStat = {\n-    THUMBS_UP: 0,\n-    THUMBS_DOWN: 0,\n-    LAUGH: 0,\n-    HOORAY: 0,\n-    HEART: 0,\n-    CONFUSED: 0\n-  };\n-  if (reactions) {\n-    reactions.forEach(reaction => reactionsStat[reaction.content]++);\n-  }\n+      <div className='-card-and-related'>\n+        <BS.ListGroupItem\n+          key={key}\n+          header={header}\n+          className={classnames(classes)}>\n \n-  return (\n-    <div className='-card-and-related'>\n-      <BS.ListGroupItem\n-        key={key}\n-        header={header}\n-        className={classnames(classes)}>\n-\n-        <span className='-extra-span-for-inline-popover'>\n-          <a\n-            key='link'\n-            className='review-title'\n-            target='_blank'\n-            href={url}>\n-              <GithubFlavoredMarkdown\n-                inline\n-                repoOwner={repoOwner}\n-                repoName={repoName}\n-                text={bodyText}/>\n-          </a>\n-        </span>\n-\n-        <span key='footer' className='review-footer'>\n-          <span key='left-footer' className='comment-reactions'>\n-            <Reactions stat={reactionsStat}/>\n+          <span className='-extra-span-for-inline-popover'>\n+            <a\n+              key='link'\n+              className='review-title'\n+              target='_blank'\n+              href={url}>\n+                <GithubFlavoredMarkdown\n+                  inline\n+                  repoOwner={repoOwner}\n+                  repoName={repoName}\n+                  text={bodyText}/>\n+            </a>\n           </span>\n-          <span key='right-footer' className='review-time-and-user'>\n-            <Time key='time' className='updated-at' dateTime={updatedAt}/>\n-            {assignedAvatar}\n+\n+          <span key='footer' className='review-footer'>\n+            <span key='left-footer' className='comment-reactions'>\n+              <Reactions\n+                id={id}\n+                stat={reactionsStat}\n+                noReactionByMe={noReactionByMe}\n+                hasLogin={hasLogin}\n+                saveCallBack={this.saveToDatabase}/>\n+            </span>\n+            <span key='right-footer' className='review-time-and-user'>\n+              <Time key='time' className='updated-at' dateTime={updatedAt}/>\n+              {assignedAvatar}\n+            </span>\n           </span>\n-        </span>\n-      </BS.ListGroupItem>\n-      <div key='related' className='related-issues'>\n-        {relatedCards}\n+        </BS.ListGroupItem>\n+        <div key='related' className='related-issues'>\n+          {relatedCards}\n+        </div>\n       </div>\n-    </div>\n-  );\n+    );\n+  }\n }\n \n-function Review({review}) {\n+function Review({review, loginInfo}) {\n   return (\n-    <ReviewCard card={review}/>\n+    <ReviewCard card={review} loginInfo={loginInfo}/>\n   );\n }\n \n-export default Review;\n+export default withAuth(Review);","author":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4","name":"Boxuan Li"},"reactions":[],"createdAt":"2018-08-06T13:18:53Z","lastEditedAt":null,"updatedAt":"2018-08-06T13:18:53Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzkyMjIyOA==","url":"https://github.com/coala/gh-board/pull/147#discussion_r207922228","bodyText":"I meant to say WrappedComponent in my example just like in React doc\nAlso, the convention is, function name should start with with","diffHunk":"@@ -0,0 +1,34 @@\n+import {Component} from 'react';\n+\n+import CurrentUserStore from '../user-store';\n+import Client from '../github-client';\n+\n+function loginAuth(WrapperComponent) {","author":{"login":"blazeu","avatarUrl":"https://avatars0.githubusercontent.com/u/1438859?v=4","name":"Surya Widi"},"reactions":[],"createdAt":"2018-08-06T14:57:21Z","lastEditedAt":null,"updatedAt":"2018-08-06T14:57:21Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzkyOTUxMQ==","url":"https://github.com/coala/gh-board/pull/147#discussion_r207929511","bodyText":"I think it would've been possible to chain onChangeToken if it's component with render prop instead of HOC\nclass Dashboard extends Component {\n  onChangeToken() {\n    ...\n  }\n  \n  renderDashboard(loginInfo) {\n    return (...)\n  }\n  \n  render() {\n    return (\n      <Auth\n        onChangeToken={this.onChangeToken}\n        render={this.renderDashboard}\n      />\n    )\n  }\n}\nThe onChangeToken in Auth component (currently withAuth HOC) should also call this.props.onChangeToken, after setting its own state.\nYou could also pass Client down with this.props.onChangeToken so it's not leaking (although I'm not so sure, is Client related to auth?)","diffHunk":"@@ -1,125 +1,186 @@\n+import {Component} from 'react';\n import * as BS from 'react-bootstrap';\n import classnames from 'classnames';\n import {Link} from 'react-router';\n \n import {getFilters} from '../route-utils';\n import IssueStore from '../issue-store';\n+import Database from '../database';\n \n import GithubFlavoredMarkdown from './gfm';\n import Time from './time';\n import ReviewBlurb from './review-blurb';\n import IssueOrPullRequestBlurb from './issue-blurb';\n import Reactions from './reactions';\n+import withAuth from './login-auth';\n \n-function ReviewCard(props) {\n-  const {card, primaryRepoName} = props;\n-  const {repoOwner, repoName, number, id, bodyText, reactions, url} = card;\n-\n-  const key = `${repoOwner}/${repoName}#${number}-${id}`;\n-\n-  // comment updatedAt is updated when comment content is edited.\n-  // Note that the default `updatedAt` field of review comment\n-  // provided by GraphQL API is inaccurate. Thus, we use our custom\n-  // updatedAt, defined by `lastEditedAt` and `createdAt` time if never edited.\n-  const updatedAt = card.updatedAt;\n-\n-  const user = card.author;\n-  const assignedAvatar = (\n-    <Link to={getFilters().toggleUserName(user.login).url()}>\n-      <img\n-        key='avatar'\n-        className='avatar-image'\n-        title={'Click to filter on ' + user.login}\n-        src={user.avatarUrl}/>\n-    </Link>\n-  );\n-  // stop highlighting after 5min\n-  const isUpdated = Date.now() - Date.parse(updatedAt) < 2 * 60 * 1000;\n-\n-  // put the corresponding pull request as related card\n-  const issueCard = IssueStore.issueNumberToCard(repoOwner, repoName, number);\n-  const relatedCards = [issueCard].map((issueCard) => {\n-    let title;\n-    if (issueCard.issue) {\n-      title = (\n-        <span className='related-issue-title'>{issueCard.issue.title}</span>\n+class ReviewCard extends Component {\n+  saveToDatabase = (content, isAdd) => {\n+    // reviewCard is just part of issueCard\n+    const {card, loginInfo} = this.props;\n+    const {repoOwner, repoName, number} = card;\n+    const {login} = loginInfo;\n+    if (isAdd) {\n+      // add a new reaction\n+      if (!card.reactions) card.reactions = [];\n+      card.reactions.push({\n+        content,\n+        user: {\n+          login,\n+        },\n+      });\n+    } else {\n+      // remove an existing reaction\n+      card.reactions = card.reactions.filter((reaction) => {\n+        return !(reaction.user.login === login && reaction.content === content);\n+      });\n+    }\n+    // find the corresponding issueCard\n+    const issueCard = IssueStore.issueNumberToCard(repoOwner, repoName, number);\n+    // update corresponding issueCard\n+    issueCard.issue.pullRequest.comments.forEach(reviewCard => {\n+      if (reviewCard.id === card.id) {\n+        reviewCard = card;\n+      }\n+    });\n+    Database.putCards([issueCard]);\n+  }\n+\n+  render() {\n+    const {card, primaryRepoName, loginInfo} = this.props;\n+    const {repoOwner, repoName, number, id, bodyText, reactions, url} = card;\n+    const key = `${repoOwner}/${repoName}#${number}-${id}`;\n+\n+    // comment updatedAt is updated when comment content is edited.\n+    // Note that the default `updatedAt` field of review comment\n+    // provided by GraphQL API is inaccurate. Thus, we use our custom\n+    // updatedAt, defined by `lastEditedAt` and `createdAt` time if never edited.\n+    const updatedAt = card.updatedAt;\n+\n+    const user = card.author;\n+    const assignedAvatar = (\n+      <Link to={getFilters().toggleUserName(user.login).url()}>\n+        <img\n+          key='avatar'\n+          className='avatar-image'\n+          title={'Click to filter on ' + user.login}\n+          src={user.avatarUrl}/>\n+      </Link>\n+    );\n+    // stop highlighting after 5min\n+    const isUpdated = Date.now() - Date.parse(updatedAt) < 2 * 60 * 1000;\n+\n+    // put the corresponding pull request as related card\n+    const issueCard = IssueStore.issueNumberToCard(repoOwner, repoName, number);\n+    const relatedCards = [issueCard].map((issueCard) => {\n+      let title;\n+      if (issueCard.issue) {\n+        title = (\n+          <span className='related-issue-title'>{issueCard.issue.title}</span>\n+        );\n+      }\n+      return (\n+        <div key={issueCard.key()} className='related-issue'>\n+          <IssueOrPullRequestBlurb\n+            card={issueCard}\n+            primaryRepoName={card.repoName}/>\n+          {title}\n+        </div>\n       );\n+    });\n+\n+    const classes = {\n+      'review': true,\n+      'is-updated': isUpdated,\n+    };\n+\n+    const header = [\n+      <ReviewBlurb key='review-blurb'\n+        card={card}\n+        primaryRepoName={primaryRepoName} />,\n+    ];\n+\n+    let reactionsStat = {\n+      THUMBS_UP: 0,\n+      THUMBS_DOWN: 0,\n+      LAUGH: 0,\n+      HOORAY: 0,\n+      HEART: 0,\n+      CONFUSED: 0\n+    };\n+    if (reactions) {\n+      reactions.forEach(reaction => reactionsStat[reaction.content]++);\n     }\n+\n+    let noReactionByMe;\n+    let hasLogin = false;\n+    if (loginInfo) {\n+      hasLogin = true;\n+      noReactionByMe = {\n+        THUMBS_UP: true,\n+        THUMBS_DOWN: true,\n+        LAUGH: true,\n+        HOORAY: true,\n+        HEART: true,\n+        CONFUSED: true\n+      };\n+      if (reactions) {\n+        reactions.forEach(reaction => {\n+          if (reaction.user && reaction.user.login === loginInfo.login) {\n+            noReactionByMe[reaction.content] = false;\n+          }\n+        });\n+      }\n+    }\n+\n     return (\n-      <div key={issueCard.key()} className='related-issue'>\n-        <IssueOrPullRequestBlurb\n-          card={issueCard}\n-          primaryRepoName={card.repoName}/>\n-        {title}\n-      </div>\n-    );\n-  });\n-\n-  const classes = {\n-    'review': true,\n-    'is-updated': isUpdated,\n-  };\n-\n-  const header = [\n-    <ReviewBlurb key='review-blurb'\n-      card={card}\n-      primaryRepoName={primaryRepoName} />,\n-  ];\n-\n-  let reactionsStat = {\n-    THUMBS_UP: 0,\n-    THUMBS_DOWN: 0,\n-    LAUGH: 0,\n-    HOORAY: 0,\n-    HEART: 0,\n-    CONFUSED: 0\n-  };\n-  if (reactions) {\n-    reactions.forEach(reaction => reactionsStat[reaction.content]++);\n-  }\n+      <div className='-card-and-related'>\n+        <BS.ListGroupItem\n+          key={key}\n+          header={header}\n+          className={classnames(classes)}>\n \n-  return (\n-    <div className='-card-and-related'>\n-      <BS.ListGroupItem\n-        key={key}\n-        header={header}\n-        className={classnames(classes)}>\n-\n-        <span className='-extra-span-for-inline-popover'>\n-          <a\n-            key='link'\n-            className='review-title'\n-            target='_blank'\n-            href={url}>\n-              <GithubFlavoredMarkdown\n-                inline\n-                repoOwner={repoOwner}\n-                repoName={repoName}\n-                text={bodyText}/>\n-          </a>\n-        </span>\n-\n-        <span key='footer' className='review-footer'>\n-          <span key='left-footer' className='comment-reactions'>\n-            <Reactions stat={reactionsStat}/>\n+          <span className='-extra-span-for-inline-popover'>\n+            <a\n+              key='link'\n+              className='review-title'\n+              target='_blank'\n+              href={url}>\n+                <GithubFlavoredMarkdown\n+                  inline\n+                  repoOwner={repoOwner}\n+                  repoName={repoName}\n+                  text={bodyText}/>\n+            </a>\n           </span>\n-          <span key='right-footer' className='review-time-and-user'>\n-            <Time key='time' className='updated-at' dateTime={updatedAt}/>\n-            {assignedAvatar}\n+\n+          <span key='footer' className='review-footer'>\n+            <span key='left-footer' className='comment-reactions'>\n+              <Reactions\n+                id={id}\n+                stat={reactionsStat}\n+                noReactionByMe={noReactionByMe}\n+                hasLogin={hasLogin}\n+                saveCallBack={this.saveToDatabase}/>\n+            </span>\n+            <span key='right-footer' className='review-time-and-user'>\n+              <Time key='time' className='updated-at' dateTime={updatedAt}/>\n+              {assignedAvatar}\n+            </span>\n           </span>\n-        </span>\n-      </BS.ListGroupItem>\n-      <div key='related' className='related-issues'>\n-        {relatedCards}\n+        </BS.ListGroupItem>\n+        <div key='related' className='related-issues'>\n+          {relatedCards}\n+        </div>\n       </div>\n-    </div>\n-  );\n+    );\n+  }\n }\n \n-function Review({review}) {\n+function Review({review, loginInfo}) {\n   return (\n-    <ReviewCard card={review}/>\n+    <ReviewCard card={review} loginInfo={loginInfo}/>\n   );\n }\n \n-export default Review;\n+export default withAuth(Review);","author":{"login":"blazeu","avatarUrl":"https://avatars0.githubusercontent.com/u/1438859?v=4","name":"Surya Widi"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNzUyNjkyMQ==","createdAt":"2018-08-06T21:46:13Z","content":"THUMBS_UP","user":{"login":"jayvdb","name":"John Vandenberg"}}],"createdAt":"2018-08-06T15:17:49Z","lastEditedAt":"2018-08-06T15:23:46Z","updatedAt":"2018-08-06T15:23:46Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODIzMDg3Mw==","url":"https://github.com/coala/gh-board/pull/147#discussion_r208230873","bodyText":"Use component with render prop looks nice, but I want to reuse the onChangeToken logic. I changed dashboard logic a bit, so it's not a problem anymore.","diffHunk":"@@ -1,125 +1,186 @@\n+import {Component} from 'react';\n import * as BS from 'react-bootstrap';\n import classnames from 'classnames';\n import {Link} from 'react-router';\n \n import {getFilters} from '../route-utils';\n import IssueStore from '../issue-store';\n+import Database from '../database';\n \n import GithubFlavoredMarkdown from './gfm';\n import Time from './time';\n import ReviewBlurb from './review-blurb';\n import IssueOrPullRequestBlurb from './issue-blurb';\n import Reactions from './reactions';\n+import withAuth from './login-auth';\n \n-function ReviewCard(props) {\n-  const {card, primaryRepoName} = props;\n-  const {repoOwner, repoName, number, id, bodyText, reactions, url} = card;\n-\n-  const key = `${repoOwner}/${repoName}#${number}-${id}`;\n-\n-  // comment updatedAt is updated when comment content is edited.\n-  // Note that the default `updatedAt` field of review comment\n-  // provided by GraphQL API is inaccurate. Thus, we use our custom\n-  // updatedAt, defined by `lastEditedAt` and `createdAt` time if never edited.\n-  const updatedAt = card.updatedAt;\n-\n-  const user = card.author;\n-  const assignedAvatar = (\n-    <Link to={getFilters().toggleUserName(user.login).url()}>\n-      <img\n-        key='avatar'\n-        className='avatar-image'\n-        title={'Click to filter on ' + user.login}\n-        src={user.avatarUrl}/>\n-    </Link>\n-  );\n-  // stop highlighting after 5min\n-  const isUpdated = Date.now() - Date.parse(updatedAt) < 2 * 60 * 1000;\n-\n-  // put the corresponding pull request as related card\n-  const issueCard = IssueStore.issueNumberToCard(repoOwner, repoName, number);\n-  const relatedCards = [issueCard].map((issueCard) => {\n-    let title;\n-    if (issueCard.issue) {\n-      title = (\n-        <span className='related-issue-title'>{issueCard.issue.title}</span>\n+class ReviewCard extends Component {\n+  saveToDatabase = (content, isAdd) => {\n+    // reviewCard is just part of issueCard\n+    const {card, loginInfo} = this.props;\n+    const {repoOwner, repoName, number} = card;\n+    const {login} = loginInfo;\n+    if (isAdd) {\n+      // add a new reaction\n+      if (!card.reactions) card.reactions = [];\n+      card.reactions.push({\n+        content,\n+        user: {\n+          login,\n+        },\n+      });\n+    } else {\n+      // remove an existing reaction\n+      card.reactions = card.reactions.filter((reaction) => {\n+        return !(reaction.user.login === login && reaction.content === content);\n+      });\n+    }\n+    // find the corresponding issueCard\n+    const issueCard = IssueStore.issueNumberToCard(repoOwner, repoName, number);\n+    // update corresponding issueCard\n+    issueCard.issue.pullRequest.comments.forEach(reviewCard => {\n+      if (reviewCard.id === card.id) {\n+        reviewCard = card;\n+      }\n+    });\n+    Database.putCards([issueCard]);\n+  }\n+\n+  render() {\n+    const {card, primaryRepoName, loginInfo} = this.props;\n+    const {repoOwner, repoName, number, id, bodyText, reactions, url} = card;\n+    const key = `${repoOwner}/${repoName}#${number}-${id}`;\n+\n+    // comment updatedAt is updated when comment content is edited.\n+    // Note that the default `updatedAt` field of review comment\n+    // provided by GraphQL API is inaccurate. Thus, we use our custom\n+    // updatedAt, defined by `lastEditedAt` and `createdAt` time if never edited.\n+    const updatedAt = card.updatedAt;\n+\n+    const user = card.author;\n+    const assignedAvatar = (\n+      <Link to={getFilters().toggleUserName(user.login).url()}>\n+        <img\n+          key='avatar'\n+          className='avatar-image'\n+          title={'Click to filter on ' + user.login}\n+          src={user.avatarUrl}/>\n+      </Link>\n+    );\n+    // stop highlighting after 5min\n+    const isUpdated = Date.now() - Date.parse(updatedAt) < 2 * 60 * 1000;\n+\n+    // put the corresponding pull request as related card\n+    const issueCard = IssueStore.issueNumberToCard(repoOwner, repoName, number);\n+    const relatedCards = [issueCard].map((issueCard) => {\n+      let title;\n+      if (issueCard.issue) {\n+        title = (\n+          <span className='related-issue-title'>{issueCard.issue.title}</span>\n+        );\n+      }\n+      return (\n+        <div key={issueCard.key()} className='related-issue'>\n+          <IssueOrPullRequestBlurb\n+            card={issueCard}\n+            primaryRepoName={card.repoName}/>\n+          {title}\n+        </div>\n       );\n+    });\n+\n+    const classes = {\n+      'review': true,\n+      'is-updated': isUpdated,\n+    };\n+\n+    const header = [\n+      <ReviewBlurb key='review-blurb'\n+        card={card}\n+        primaryRepoName={primaryRepoName} />,\n+    ];\n+\n+    let reactionsStat = {\n+      THUMBS_UP: 0,\n+      THUMBS_DOWN: 0,\n+      LAUGH: 0,\n+      HOORAY: 0,\n+      HEART: 0,\n+      CONFUSED: 0\n+    };\n+    if (reactions) {\n+      reactions.forEach(reaction => reactionsStat[reaction.content]++);\n     }\n+\n+    let noReactionByMe;\n+    let hasLogin = false;\n+    if (loginInfo) {\n+      hasLogin = true;\n+      noReactionByMe = {\n+        THUMBS_UP: true,\n+        THUMBS_DOWN: true,\n+        LAUGH: true,\n+        HOORAY: true,\n+        HEART: true,\n+        CONFUSED: true\n+      };\n+      if (reactions) {\n+        reactions.forEach(reaction => {\n+          if (reaction.user && reaction.user.login === loginInfo.login) {\n+            noReactionByMe[reaction.content] = false;\n+          }\n+        });\n+      }\n+    }\n+\n     return (\n-      <div key={issueCard.key()} className='related-issue'>\n-        <IssueOrPullRequestBlurb\n-          card={issueCard}\n-          primaryRepoName={card.repoName}/>\n-        {title}\n-      </div>\n-    );\n-  });\n-\n-  const classes = {\n-    'review': true,\n-    'is-updated': isUpdated,\n-  };\n-\n-  const header = [\n-    <ReviewBlurb key='review-blurb'\n-      card={card}\n-      primaryRepoName={primaryRepoName} />,\n-  ];\n-\n-  let reactionsStat = {\n-    THUMBS_UP: 0,\n-    THUMBS_DOWN: 0,\n-    LAUGH: 0,\n-    HOORAY: 0,\n-    HEART: 0,\n-    CONFUSED: 0\n-  };\n-  if (reactions) {\n-    reactions.forEach(reaction => reactionsStat[reaction.content]++);\n-  }\n+      <div className='-card-and-related'>\n+        <BS.ListGroupItem\n+          key={key}\n+          header={header}\n+          className={classnames(classes)}>\n \n-  return (\n-    <div className='-card-and-related'>\n-      <BS.ListGroupItem\n-        key={key}\n-        header={header}\n-        className={classnames(classes)}>\n-\n-        <span className='-extra-span-for-inline-popover'>\n-          <a\n-            key='link'\n-            className='review-title'\n-            target='_blank'\n-            href={url}>\n-              <GithubFlavoredMarkdown\n-                inline\n-                repoOwner={repoOwner}\n-                repoName={repoName}\n-                text={bodyText}/>\n-          </a>\n-        </span>\n-\n-        <span key='footer' className='review-footer'>\n-          <span key='left-footer' className='comment-reactions'>\n-            <Reactions stat={reactionsStat}/>\n+          <span className='-extra-span-for-inline-popover'>\n+            <a\n+              key='link'\n+              className='review-title'\n+              target='_blank'\n+              href={url}>\n+                <GithubFlavoredMarkdown\n+                  inline\n+                  repoOwner={repoOwner}\n+                  repoName={repoName}\n+                  text={bodyText}/>\n+            </a>\n           </span>\n-          <span key='right-footer' className='review-time-and-user'>\n-            <Time key='time' className='updated-at' dateTime={updatedAt}/>\n-            {assignedAvatar}\n+\n+          <span key='footer' className='review-footer'>\n+            <span key='left-footer' className='comment-reactions'>\n+              <Reactions\n+                id={id}\n+                stat={reactionsStat}\n+                noReactionByMe={noReactionByMe}\n+                hasLogin={hasLogin}\n+                saveCallBack={this.saveToDatabase}/>\n+            </span>\n+            <span key='right-footer' className='review-time-and-user'>\n+              <Time key='time' className='updated-at' dateTime={updatedAt}/>\n+              {assignedAvatar}\n+            </span>\n           </span>\n-        </span>\n-      </BS.ListGroupItem>\n-      <div key='related' className='related-issues'>\n-        {relatedCards}\n+        </BS.ListGroupItem>\n+        <div key='related' className='related-issues'>\n+          {relatedCards}\n+        </div>\n       </div>\n-    </div>\n-  );\n+    );\n+  }\n }\n \n-function Review({review}) {\n+function Review({review, loginInfo}) {\n   return (\n-    <ReviewCard card={review}/>\n+    <ReviewCard card={review} loginInfo={loginInfo}/>\n   );\n }\n \n-export default Review;\n+export default withAuth(Review);","author":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4","name":"Boxuan Li"},"reactions":[],"createdAt":"2018-08-07T13:32:55Z","lastEditedAt":null,"updatedAt":"2018-08-07T13:32:55Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODIzMjM4OA==","url":"https://github.com/coala/gh-board/pull/147#discussion_r208232388","bodyText":"WrapperComponent -> WrappedComponent","diffHunk":"@@ -0,0 +1,34 @@\n+import {Component} from 'react';\n+\n+import CurrentUserStore from '../user-store';\n+import Client from '../github-client';\n+\n+function withAuth(WrapperComponent) {","author":{"login":"blazeu","avatarUrl":"https://avatars0.githubusercontent.com/u/1438859?v=4","name":"Surya Widi"},"reactions":[],"createdAt":"2018-08-07T13:37:13Z","lastEditedAt":null,"updatedAt":"2018-08-07T13:37:13Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODIzMjkyMw==","url":"https://github.com/coala/gh-board/pull/147#discussion_r208232923","bodyText":"missing key property\nhttps://reactjs.org/docs/lists-and-keys.html","diffHunk":"@@ -1,45 +1,185 @@\n+import {Component} from 'react';\n import * as BS from 'react-bootstrap';\n \n-function Reactions({stat}) {\n-  // use null when count is zero because we don't want to display\n-  // number zero on frontend\n-  const reactions = [\n-    {\n-      emoji: '👍',\n-      count: stat.THUMBS_UP || null,\n-      name: 'THUMBS_UP'\n-    },\n-    {\n-      emoji: '👎',\n-      count: stat.THUMBS_DOWN || null,\n-      name: 'THUMBS_DOWN'\n-    },\n-    {\n-      emoji: '😄',\n-      count: stat.LAUGH || null,\n-      name: 'LAUGH'\n-    },\n-    {\n-      emoji: '🎉',\n-      count: stat.HOORAY || null,\n-      name: 'HOORAY'\n-    },\n-    {\n-      emoji: '😕',\n-      count: stat.CONFUSED || null,\n-      name: 'CONFUSED'\n-    },\n-    {\n-      emoji: '❤️',\n-      count: stat.HEART || null,\n-      name: 'HEART'\n+import Client from '../github-client';\n+\n+class Reactions extends Component {\n+  constructor(props) {\n+    super(props);\n+    this.state = {\n+      canAdd: {},\n+      // use cache to reflect reaction count on frontend\n+      // if we fetch up-to-date reaction count after mutation,\n+      // we have to refetch the whole pull request which wastes\n+      // a lot of API hits (there is no way to fetch single review\n+      // comment at the moment)\n+      cacheCount: {\n+        THUMBS_UP: 0,\n+        THUMBS_DOWN: 0,\n+        LAUGH: 0,\n+        HOORAY: 0,\n+        CONFUSED: 0,\n+        HEART: 0\n+      }\n+    };\n+  }\n+\n+  onClick = async (id, content) => {\n+    const canAdd = this.state.canAdd[content];\n+    const saveToDatabase = this.props.saveCallBack;\n+    let result, msg;\n+    if (canAdd) {\n+      ({ result, msg } = await Client.getGraphQLClient().addReaction(\n+        {id, content}\n+      ));\n+    } else {\n+      ({ result, msg } = await Client.getGraphQLClient().removeReaction(\n+        {id, content}\n+      ));\n+    }\n+    if (result) {\n+      if (canAdd) {\n+        // reaction creation succeeds\n+\n+        // Note that if it is already meta-reviewed by the user but not via gh-board,\n+        // action (add reaction) will fail, but GitHub won't return any error/warning.\n+        // The good news is that user won't be annoyed because the frontend behavior\n+        // is they add reactions successfully.\n+\n+        // A side note is that gh-board will not update accordingly if user does\n+        // meta-review directly on GitHub web page instead of on gh-board. This is\n+        // because the `updatedBy` attribute of the pull request won't get changed\n+        // due to meta-review.\n+\n+        this.setState((prevState) => {\n+          let newState = prevState;\n+          newState.canAdd[content] = false;\n+          // update cache\n+          newState.cacheCount[content] += 1;\n+          return newState;\n+        });\n+\n+        saveToDatabase(content, true);\n+      } else {\n+        // reaction removal succeeds\n+        this.setState((prevState) => {\n+          let newState = prevState;\n+          newState.canAdd[content] = true;\n+          // update cache\n+          newState.cacheCount[content] -= 1;\n+          return newState;\n+        });\n+\n+        saveToDatabase(content, false);\n+      }\n+    } else {\n+      if (canAdd) {\n+        // reaction creation fails\n+        console.log('add', content, 'to comment id', id, 'failed.',\n+          'message: ', msg);\n+      } else {\n+        console.log('remove', content, 'from comment id', id, 'failed',\n+          'message:', msg);\n+        // reaction removal fails\n+        if (msg && msg.length && msg[0].type === 'FORBIDDEN') {\n+          console.log('reaction removal failed due to permission error.',\n+            'This is probably because user has done meta-review somewhere out',\n+            'of gh-board.');\n+          this.setState((prevState) => {\n+            let newState = prevState;\n+            newState.canAdd[content] = true;\n+            // clean cache\n+            newState.cacheCount[content] = 0;\n+            return newState;\n+          });\n+          this.syncReview();\n+        }\n+      }\n+    }\n+  }\n+\n+  render() {\n+    // id is the global identifier for the corresponding review comment\n+    const {id, stat, hasLogin, noReactionByMe} = this.props;\n+\n+    if (noReactionByMe && !Object.keys(this.state.canAdd).length) {\n+      // use deep copy for canAdd instead of reference so that we can\n+      // we deliberately only copy them once\n+      this.state.canAdd = {\n+        THUMBS_UP: noReactionByMe.THUMBS_UP,\n+        THUMBS_DOWN: noReactionByMe.THUMBS_DOWN,\n+        LAUGH: noReactionByMe.LAUGH,\n+        HOORAY: noReactionByMe.HOORAY,\n+        CONFUSED: noReactionByMe.CONFUSED,\n+        HEART: noReactionByMe.HEART\n+      };\n     }\n-  ];\n-  return reactions.map(reaction => (\n-      <BS.Button bsClass=\"reaction-btn\">\n-        {reaction.emoji} {reaction.count}\n-      </BS.Button>\n-  ));\n+\n+    // props reflect real status of reactions, but may be out of date\n+    // we need to update cached information (this.state) accordingly\n+    if (noReactionByMe && this.state.canAdd) {\n+      const contents = ['THUMBS_UP', 'THUMBS_DOWN', 'LAUGH', 'HOORAY', 'CONFUSED', 'HEART'];\n+      for (const content of contents) {\n+        if (!noReactionByMe[content] && !this.state.canAdd[content]\n+          && this.state.cacheCount[content] === 1) {\n+          // our action (reaction creation) is now correctly reflected by props\n+          // need to flush cache, otherwise reaction count would be wrong\n+          console.log('flush creation cache of content', content);\n+          this.state.cacheCount[content] = 0;\n+        }\n+        if (noReactionByMe[content] && this.state.canAdd[content]\n+          && this.state.cacheCount[content] === -1) {\n+          // our action (reaction removal) is now correctly reflected by props\n+          // need to flush cache, otherwise reaction count would be wrong\n+          console.log('flush removal cache of content', content);\n+          this.state.cacheCount[content] = 0;\n+        }\n+      }\n+    }\n+\n+    // use null when count is zero because we don't want to display\n+    // number zero on frontend\n+    const reactions = [\n+      {\n+        emoji: '👍',\n+        count: stat.THUMBS_UP + this.state.cacheCount.THUMBS_UP || null,\n+        name: 'THUMBS_UP'\n+      },\n+      {\n+        emoji: '👎',\n+        count: stat.THUMBS_DOWN + this.state.cacheCount.THUMBS_DOWN || null,\n+        name: 'THUMBS_DOWN'\n+      },\n+      {\n+        emoji: '😄',\n+        count: stat.LAUGH + this.state.cacheCount.LAUGH || null,\n+        name: 'LAUGH'\n+      },\n+      {\n+        emoji: '🎉',\n+        count: stat.HOORAY + this.state.cacheCount.HOORAY || null,\n+        name: 'HOORAY'\n+      },\n+      {\n+        emoji: '😕',\n+        count: stat.CONFUSED + this.state.cacheCount.CONFUSED || null,\n+        name: 'CONFUSED'\n+      },\n+      {\n+        emoji: '❤️',\n+        count: stat.HEART + this.state.cacheCount.HEART || null,\n+        name: 'HEART'\n+      }\n+    ];\n+    return reactions.map(reaction => (\n+        <BS.Button\n+          bsClass=\"reaction-btn\"\n+          onClick={() => this.onClick(id, reaction.name)}\n+          disabled={!hasLogin}>","author":{"login":"blazeu","avatarUrl":"https://avatars0.githubusercontent.com/u/1438859?v=4","name":"Surya Widi"},"reactions":[],"createdAt":"2018-08-07T13:38:34Z","lastEditedAt":null,"updatedAt":"2018-08-07T13:38:34Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODIzMzE2Nw==","url":"https://github.com/coala/gh-board/pull/147#discussion_r208233167","bodyText":"^ Seems like the old one doesn't have it either, React should've warned about this.","diffHunk":"@@ -1,45 +1,185 @@\n+import {Component} from 'react';\n import * as BS from 'react-bootstrap';\n \n-function Reactions({stat}) {\n-  // use null when count is zero because we don't want to display\n-  // number zero on frontend\n-  const reactions = [\n-    {\n-      emoji: '👍',\n-      count: stat.THUMBS_UP || null,\n-      name: 'THUMBS_UP'\n-    },\n-    {\n-      emoji: '👎',\n-      count: stat.THUMBS_DOWN || null,\n-      name: 'THUMBS_DOWN'\n-    },\n-    {\n-      emoji: '😄',\n-      count: stat.LAUGH || null,\n-      name: 'LAUGH'\n-    },\n-    {\n-      emoji: '🎉',\n-      count: stat.HOORAY || null,\n-      name: 'HOORAY'\n-    },\n-    {\n-      emoji: '😕',\n-      count: stat.CONFUSED || null,\n-      name: 'CONFUSED'\n-    },\n-    {\n-      emoji: '❤️',\n-      count: stat.HEART || null,\n-      name: 'HEART'\n+import Client from '../github-client';\n+\n+class Reactions extends Component {\n+  constructor(props) {\n+    super(props);\n+    this.state = {\n+      canAdd: {},\n+      // use cache to reflect reaction count on frontend\n+      // if we fetch up-to-date reaction count after mutation,\n+      // we have to refetch the whole pull request which wastes\n+      // a lot of API hits (there is no way to fetch single review\n+      // comment at the moment)\n+      cacheCount: {\n+        THUMBS_UP: 0,\n+        THUMBS_DOWN: 0,\n+        LAUGH: 0,\n+        HOORAY: 0,\n+        CONFUSED: 0,\n+        HEART: 0\n+      }\n+    };\n+  }\n+\n+  onClick = async (id, content) => {\n+    const canAdd = this.state.canAdd[content];\n+    const saveToDatabase = this.props.saveCallBack;\n+    let result, msg;\n+    if (canAdd) {\n+      ({ result, msg } = await Client.getGraphQLClient().addReaction(\n+        {id, content}\n+      ));\n+    } else {\n+      ({ result, msg } = await Client.getGraphQLClient().removeReaction(\n+        {id, content}\n+      ));\n+    }\n+    if (result) {\n+      if (canAdd) {\n+        // reaction creation succeeds\n+\n+        // Note that if it is already meta-reviewed by the user but not via gh-board,\n+        // action (add reaction) will fail, but GitHub won't return any error/warning.\n+        // The good news is that user won't be annoyed because the frontend behavior\n+        // is they add reactions successfully.\n+\n+        // A side note is that gh-board will not update accordingly if user does\n+        // meta-review directly on GitHub web page instead of on gh-board. This is\n+        // because the `updatedBy` attribute of the pull request won't get changed\n+        // due to meta-review.\n+\n+        this.setState((prevState) => {\n+          let newState = prevState;\n+          newState.canAdd[content] = false;\n+          // update cache\n+          newState.cacheCount[content] += 1;\n+          return newState;\n+        });\n+\n+        saveToDatabase(content, true);\n+      } else {\n+        // reaction removal succeeds\n+        this.setState((prevState) => {\n+          let newState = prevState;\n+          newState.canAdd[content] = true;\n+          // update cache\n+          newState.cacheCount[content] -= 1;\n+          return newState;\n+        });\n+\n+        saveToDatabase(content, false);\n+      }\n+    } else {\n+      if (canAdd) {\n+        // reaction creation fails\n+        console.log('add', content, 'to comment id', id, 'failed.',\n+          'message: ', msg);\n+      } else {\n+        console.log('remove', content, 'from comment id', id, 'failed',\n+          'message:', msg);\n+        // reaction removal fails\n+        if (msg && msg.length && msg[0].type === 'FORBIDDEN') {\n+          console.log('reaction removal failed due to permission error.',\n+            'This is probably because user has done meta-review somewhere out',\n+            'of gh-board.');\n+          this.setState((prevState) => {\n+            let newState = prevState;\n+            newState.canAdd[content] = true;\n+            // clean cache\n+            newState.cacheCount[content] = 0;\n+            return newState;\n+          });\n+          this.syncReview();\n+        }\n+      }\n+    }\n+  }\n+\n+  render() {\n+    // id is the global identifier for the corresponding review comment\n+    const {id, stat, hasLogin, noReactionByMe} = this.props;\n+\n+    if (noReactionByMe && !Object.keys(this.state.canAdd).length) {\n+      // use deep copy for canAdd instead of reference so that we can\n+      // we deliberately only copy them once\n+      this.state.canAdd = {\n+        THUMBS_UP: noReactionByMe.THUMBS_UP,\n+        THUMBS_DOWN: noReactionByMe.THUMBS_DOWN,\n+        LAUGH: noReactionByMe.LAUGH,\n+        HOORAY: noReactionByMe.HOORAY,\n+        CONFUSED: noReactionByMe.CONFUSED,\n+        HEART: noReactionByMe.HEART\n+      };\n     }\n-  ];\n-  return reactions.map(reaction => (\n-      <BS.Button bsClass=\"reaction-btn\">\n-        {reaction.emoji} {reaction.count}\n-      </BS.Button>\n-  ));\n+\n+    // props reflect real status of reactions, but may be out of date\n+    // we need to update cached information (this.state) accordingly\n+    if (noReactionByMe && this.state.canAdd) {\n+      const contents = ['THUMBS_UP', 'THUMBS_DOWN', 'LAUGH', 'HOORAY', 'CONFUSED', 'HEART'];\n+      for (const content of contents) {\n+        if (!noReactionByMe[content] && !this.state.canAdd[content]\n+          && this.state.cacheCount[content] === 1) {\n+          // our action (reaction creation) is now correctly reflected by props\n+          // need to flush cache, otherwise reaction count would be wrong\n+          console.log('flush creation cache of content', content);\n+          this.state.cacheCount[content] = 0;\n+        }\n+        if (noReactionByMe[content] && this.state.canAdd[content]\n+          && this.state.cacheCount[content] === -1) {\n+          // our action (reaction removal) is now correctly reflected by props\n+          // need to flush cache, otherwise reaction count would be wrong\n+          console.log('flush removal cache of content', content);\n+          this.state.cacheCount[content] = 0;\n+        }\n+      }\n+    }\n+\n+    // use null when count is zero because we don't want to display\n+    // number zero on frontend\n+    const reactions = [\n+      {\n+        emoji: '👍',\n+        count: stat.THUMBS_UP + this.state.cacheCount.THUMBS_UP || null,\n+        name: 'THUMBS_UP'\n+      },\n+      {\n+        emoji: '👎',\n+        count: stat.THUMBS_DOWN + this.state.cacheCount.THUMBS_DOWN || null,\n+        name: 'THUMBS_DOWN'\n+      },\n+      {\n+        emoji: '😄',\n+        count: stat.LAUGH + this.state.cacheCount.LAUGH || null,\n+        name: 'LAUGH'\n+      },\n+      {\n+        emoji: '🎉',\n+        count: stat.HOORAY + this.state.cacheCount.HOORAY || null,\n+        name: 'HOORAY'\n+      },\n+      {\n+        emoji: '😕',\n+        count: stat.CONFUSED + this.state.cacheCount.CONFUSED || null,\n+        name: 'CONFUSED'\n+      },\n+      {\n+        emoji: '❤️',\n+        count: stat.HEART + this.state.cacheCount.HEART || null,\n+        name: 'HEART'\n+      }\n+    ];\n+    return reactions.map(reaction => (\n+        <BS.Button\n+          bsClass=\"reaction-btn\"\n+          onClick={() => this.onClick(id, reaction.name)}\n+          disabled={!hasLogin}>","author":{"login":"blazeu","avatarUrl":"https://avatars0.githubusercontent.com/u/1438859?v=4","name":"Surya Widi"},"reactions":[],"createdAt":"2018-08-07T13:39:05Z","lastEditedAt":"2018-08-07T13:39:42Z","updatedAt":"2018-08-07T13:39:42Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQxMDkyMzAwMQ==","url":"https://github.com/coala/gh-board/pull/147#issuecomment-410923001","bodyText":"If using still like using HOC, you can make HOC from component with render prop, and use HOC if you only need to pass data props down and use component if only needed. i.e. in Dashboard component.","diffHunk":null,"author":{"login":"blazeu","avatarUrl":"https://avatars0.githubusercontent.com/u/1438859?v=4","name":"Surya Widi"},"reactions":[],"createdAt":"2018-08-07T03:38:41Z","lastEditedAt":"2018-08-07T03:39:33Z","updatedAt":"2018-08-07T03:39:33Z"}]}}},{"repoOwner":"coala","repoName":"gh-board","updatedAtMs":1533021300000,"issue":{"htmlUrl":"https://github.com/coala/gh-board/pull/132","number":132,"title":"dashboard.jsx: Load repos automatically after login","body":"Closes #131","comments":7,"createdAt":"2018-07-29T08:17:34Z","updatedAt":"2018-07-31T07:15:00Z","closedAt":"2018-07-29T15:22:57Z","state":"merged","user":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4"},"owner":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4"},"assignee":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4"},"labels":[{"name":"bug","color":"ee0701"},{"name":"enhancement","color":"84b6eb"},{"name":"process/approved","color":"ededed"},{"name":"size/XS","color":"ededed"}],"pullRequest":{"htmlUrl":"https://github.com/coala/gh-board/pull/132","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQwODY3NTM5Ng==","url":"https://github.com/coala/gh-board/pull/132#issuecomment-408675396","bodyText":"I may have confused the bot.\nIf it doesnt rebase soon, pls rebase manually when you get the chance.","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-07-29T12:43:45Z","lastEditedAt":null,"updatedAt":"2018-07-29T12:43:45Z"}]}}},{"repoOwner":"coala","repoName":"gh-board","updatedAtMs":1532868030000,"issue":{"htmlUrl":"https://github.com/coala/gh-board/pull/135","number":135,"title":"Fix /dashboard routing","body":"Fixes #134","comments":4,"createdAt":"2018-07-29T10:14:46Z","updatedAt":"2018-07-29T12:40:30Z","closedAt":"2018-07-29T11:48:07Z","state":"merged","user":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4"},"owner":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4"},"assignee":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4"},"labels":[{"name":"process/approved","color":"ededed"},{"name":"size/XS","color":"ededed"}],"pullRequest":{"htmlUrl":"https://github.com/coala/gh-board/pull/135","comments":[]}}},{"repoOwner":"coala","repoName":"gh-board","updatedAtMs":1533256807000,"issue":{"htmlUrl":"https://github.com/coala/gh-board/pull/139","number":139,"title":"Refactor pre-fetching","body":"Closes #138","comments":11,"createdAt":"2018-07-29T14:36:53Z","updatedAt":"2018-08-03T00:40:07Z","closedAt":"2018-08-03T00:00:43Z","state":"merged","user":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4"},"owner":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4"},"labels":[{"name":"enhancement","color":"84b6eb"},{"name":"importance/medium","color":"65f23e"},{"name":"process/approved","color":"ededed"},{"name":"size/XXL","color":"ededed"}],"pullRequest":{"htmlUrl":"https://github.com/coala/gh-board/pull/139","comments":[{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk5NTEzOA==","url":"https://github.com/coala/gh-board/pull/139#discussion_r205995138","bodyText":"plural -> fetchPullRequests","diffHunk":"@@ -63,305 +49,53 @@ if (!repo) {\n const repoOwner = repo.split(':')[0];\n const repoNames = repo.substring(repo.indexOf(':') + 1).split('|');\n \n-console.log('Fetching issues data for', repoOwner, repoNames);\n-\n-async function fetchReactionsOfPR(owner, name, number, reviewCnt,\n-  maxCommentsPerReview, commentCnt) {\n-  let data, errors;\n-  try {\n-    ({ data, errors } = await client.query(\n-      GITHUB_REACTION_INFO_QUERY,\n-      {owner, name, number, reviewCnt, maxCommentsPerReview, commentCnt}\n-    ));\n-  } catch (error) {\n-    console.log('fetch reactions of pr failed, owner:', owner,\n-      'name:', name, 'number:', number, 'error:', error);\n-  }\n-\n-  let rawComments = null;\n-  if (data) {\n-    // collect review comments\n-    rawComments = data.repository.pullRequest.reviews.nodes.map(\n-      node => node.comments.nodes);\n-    rawComments = [].concat.apply([], rawComments);\n-    // collect issue comments\n-    rawComments = rawComments.concat(\n-      data.repository.pullRequest.comments.nodes);\n-  } else {\n-    console.log('warning: no available reaction data!',\n-      'owner:', owner, 'name:', name, 'pull request number:', number,\n-      'reviewCnt:', reviewCnt, 'maxCommentsPerReview', maxCommentsPerReview,\n-      'commentCnt', commentCnt, 'error:', errors);\n-  }\n-  // reactions are wrapped by corresponding comment\n-  return rawComments;\n-};\n-\n-async function fetchNextPage(owner, name, isIssue, data, cursor,\n-  pageCount, warningCnt) {\n-  // fetch data of next page\n-  console.log('owner:', owner, 'name:', name, 'isIssue:', isIssue,\n-    'cursor:', cursor, 'page count:', pageCount);\n-\n-  let nextData = null, hasPreviousPage = false, reachDateThreshold = false;\n-  let errors = null;\n-  try {\n-    if (isIssue) {\n-      ({ data: nextData, errors } = await client.query(\n-        GITHUB_ISSUE_INFO_QUERY,\n-        {owner, name, before: cursor}\n-      ));\n-    } else {\n-      ({ data: nextData, errors } = await client.query(\n-        GITHUB_PR_INFO_QUERY,\n-        {owner, name, before: cursor}\n-      ));\n-    }\n-  } catch (error) {\n-    console.log('owner:', owner, 'name:', name, 'isIssue:', isIssue,\n-      'cursor:', cursor, 'error:', error);\n-  }\n-  if (nextData && nextData.repository) {\n-    pageCount++;\n-    let nodes = [];\n-    if (isIssue) {\n-      ({ nodes, pageInfo } = nextData.repository.issues);\n-    } else {\n-      ({ nodes, pageInfo } = nextData.repository.pullRequests);\n-    }\n-    cursor = pageInfo.startCursor;\n-    hasPreviousPage = pageInfo.hasPreviousPage;\n-    const result = await Promise.all(nodes.map(async node => {\n-      let user, assignee, milestone;\n-      if (getTime(node.createdAt) < getTime(earliestDate)) {\n-        reachDateThreshold = true;\n-      }\n-\n-      if (node.author) {\n-        user = {\n-          login: node.author.login,\n-          avatarUrl: node.author.avatarUrl\n-        };\n-      } else {\n-        user = {\n-          login: null,\n-          avatarUrl: null\n-        };\n-      }\n-\n-      if (node.assignees.nodes && node.assignees.nodes.length) {\n-        assignee = {\n-          login: node.assignees.nodes[0].login,\n-          avatarUrl: node.assignees.nodes[0].avatarUrl\n-        };\n-      } else {\n-        assignee = null;\n-      }\n-\n-      if (node.milestone) {\n-        milestone = {\n-          title: node.milestone.title,\n-          createdAt: node.milestone.createdAt,\n-          dueOn: node.milestone.dueOn,\n-          state: node.milestone.state.toLowerCase(),\n-          htmlUrl: node.milestone.url,\n-          description: node.milestone.description\n-        };\n-      } else {\n-        milestone = {\n-          title: null,\n-          createdAt: null,\n-          dueOn: null,\n-          state: null,\n-          htmlUrl: null,\n-          description: null\n-        };\n-      }\n-\n-      let info = {\n-        repoOwner: owner,\n-        repoName: name,\n-        updatedAtMs: getTime(node.updatedAt),\n-        issue: {\n-          htmlUrl: node.url,\n-          number: node.number,\n-          title: node.title,\n-          body: node.bodyText,\n-          comments: node.comments.totalCount,\n-          createdAt: node.createdAt,\n-          updatedAt: node.updatedAt,\n-          closedAt: node.closedAt,\n-          state: node.state.toLowerCase(),\n-          user: user,\n-          owner: user,\n-          assignee: assignee,\n-          milestone: milestone,\n-          labels: node.labels.nodes.map(label => ({\n-            name: label.name,\n-            color: label.color\n-          }))\n-        }\n-      };\n-      if (!isIssue) {\n-        let rawComments, comments;\n-        // collect review comments\n-        rawComments = node.reviews.nodes.map(node => node.comments.nodes);\n-        rawComments = [].concat.apply([], rawComments);\n-        // collect issue comments\n-        rawComments = rawComments.concat(node.comments.nodes);\n-\n-        // fetch reactions only if there are reactions within that PR\n-        // to reduce API hits.\n-        // trick: a comment has received reaction(s) iff\n-        // reactionGroup.createdAt attribute is not null\n-        const hasReactions = rawComments.reduce((has, rawComment) => {\n-          return has || rawComment.reactionGroups.reduce((flag, node) => {\n-            return (flag || node.createdAt) ? true : false;\n-          }, false);\n-        }, false);\n-\n-        if (hasReactions) {\n-          console.log('pull request has reactions. repoOwner:', owner,\n-            'repoName:', name, 'pullRequest number:', node.number);\n-          const number = node.number;\n-          const reviewCnt = Math.min(node.reviews.totalCount, 20);\n-          const maxCommentsPerReview = Math.min(\n-            node.reviews.nodes.reduce(\n-              (max, review) => Math.max(max, review.comments.totalCount), 0),\n-            100);\n-          const commentCnt = Math.min(node.comments.totalCount, 100);\n-          const commentsWithReactions = await fetchReactionsOfPR(owner, name,\n-            number, reviewCnt, maxCommentsPerReview, commentCnt);\n-\n-          // merge rawComments with commentsWithReactions\n-          if (commentsWithReactions && commentsWithReactions.length) {\n-            rawComments.forEach((comment, index) => {\n-              if (comment.id !== commentsWithReactions[index].id) {\n-                console.log('warning: comments and reactions do not fit!',\n-                  'pr number:', number, 'comment.id:', comment.id,\n-                  'comment with reactions id:', commentsWithReactions[index].id);\n-              } else {\n-                comment.reactions = commentsWithReactions[index].reactions;\n-              }\n-            });\n-          }\n-        }\n+console.log('Fetching data for', repoOwner, repoNames);\n \n-        // filter out useless reviews\n-        rawComments = rawComments.filter(node => {\n-          let flag = true;\n-          // filter comments that don't need meta-reviews\n-          for (const ignoreContent of ignoreReviewContent.split(' ')) {\n-            if (node.bodyText.match(ignoreContent)) {\n-              // filter reviews with specific content\n-              flag = false;\n-            }\n-          }\n-          for (const ignoreAuthor of ignoreReviewAuthor.split(' ')) {\n-            if (node.author && node.author.login === ignoreAuthor) {\n-              // filter reviews done by specific authors\n-              flag = false;\n-            }\n-          }\n-          return flag;\n-        });\n-\n-        comments = rawComments.map(node => {\n-          let commentAuthor, reactions;\n-\n-          if (node.author) {\n-            commentAuthor = {\n-              login: node.author.login,\n-              avatarUrl: node.author.avatarUrl,\n-              name: node.author.name\n-            };\n-          } else {\n-            commentAuthor = {\n-              login: null,\n-              avatarUrl: null\n-            };\n-          }\n-\n-          if (node.reactions) reactions = node.reactions.nodes;\n-\n-          return {\n-            id: node.id,\n-            url: node.url,\n-            bodyText: node.bodyText,\n-            diffHunk: node.diffHunk ? node.diffHunk : null,\n-            author: commentAuthor,\n-            reactions,\n-            createdAt: node.createdAt,\n-            lastEditedAt: node.lastEditedAt,\n-            updatedAt: node.lastEditedAt ? node.lastEditedAt : node.createdAt\n-          };\n-        });\n-        info.issue.pullRequest = {\n-          htmlUrl: node.url,\n-          comments\n-        };\n-      }\n-      return info;\n-    }));\n-    data = data.concat(result);\n-    if (hasPreviousPage && !reachDateThreshold &&\n-       (pageCount < pageThreshold || pageThreshold == -1)) {\n-      return fetchNextPage(owner, name, isIssue, data,\n-        cursor, pageCount, 0);\n-    } else {\n-      return data;\n-    }\n-  } else {\n-    console.log('Warning: no available data. owner:', owner, 'name:', name,\n-      'isIssue:', isIssue, 'pageCount:', pageCount, 'error message:', errors);\n-    warningCnt += 1;\n-    sleep.sleep(3);\n-    if (warningCnt < 15) {\n-      console.log('warning count:', warningCnt);\n-      return fetchNextPage(owner, name, isIssue, data, cursor, pageCount, warningCnt);\n-    } else {\n-      console.log('number of warning exceeds threshold (15), stop fetching on this repo');\n-      return data;\n+async function fetchIssue(owner, names) {\n+  let result = [];\n+  const config = {earliestDate};\n+  for (const name of names) {\n+    try {\n+      result = result.concat(\n+        await getClient().repo(owner, name).issues(config).fetchAll()\n+      );\n+    } catch (error) {\n+      console.log('fetch issue failed, repo owner:', owner,\n+        'repo name:', name, 'error:', error);\n     }\n   }\n+  return result;\n }\n \n-async function fetchIssue(owner, names, isIssue) {\n+async function fetchPullRequest(owner, names) {","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-30T01:04:24Z","lastEditedAt":null,"updatedAt":"2018-07-30T01:04:24Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk5NTE1Nw==","url":"https://github.com/coala/gh-board/pull/139#discussion_r205995157","bodyText":"plural -> fetchIssues","diffHunk":"@@ -63,305 +49,53 @@ if (!repo) {\n const repoOwner = repo.split(':')[0];\n const repoNames = repo.substring(repo.indexOf(':') + 1).split('|');\n \n-console.log('Fetching issues data for', repoOwner, repoNames);\n-\n-async function fetchReactionsOfPR(owner, name, number, reviewCnt,\n-  maxCommentsPerReview, commentCnt) {\n-  let data, errors;\n-  try {\n-    ({ data, errors } = await client.query(\n-      GITHUB_REACTION_INFO_QUERY,\n-      {owner, name, number, reviewCnt, maxCommentsPerReview, commentCnt}\n-    ));\n-  } catch (error) {\n-    console.log('fetch reactions of pr failed, owner:', owner,\n-      'name:', name, 'number:', number, 'error:', error);\n-  }\n-\n-  let rawComments = null;\n-  if (data) {\n-    // collect review comments\n-    rawComments = data.repository.pullRequest.reviews.nodes.map(\n-      node => node.comments.nodes);\n-    rawComments = [].concat.apply([], rawComments);\n-    // collect issue comments\n-    rawComments = rawComments.concat(\n-      data.repository.pullRequest.comments.nodes);\n-  } else {\n-    console.log('warning: no available reaction data!',\n-      'owner:', owner, 'name:', name, 'pull request number:', number,\n-      'reviewCnt:', reviewCnt, 'maxCommentsPerReview', maxCommentsPerReview,\n-      'commentCnt', commentCnt, 'error:', errors);\n-  }\n-  // reactions are wrapped by corresponding comment\n-  return rawComments;\n-};\n-\n-async function fetchNextPage(owner, name, isIssue, data, cursor,\n-  pageCount, warningCnt) {\n-  // fetch data of next page\n-  console.log('owner:', owner, 'name:', name, 'isIssue:', isIssue,\n-    'cursor:', cursor, 'page count:', pageCount);\n-\n-  let nextData = null, hasPreviousPage = false, reachDateThreshold = false;\n-  let errors = null;\n-  try {\n-    if (isIssue) {\n-      ({ data: nextData, errors } = await client.query(\n-        GITHUB_ISSUE_INFO_QUERY,\n-        {owner, name, before: cursor}\n-      ));\n-    } else {\n-      ({ data: nextData, errors } = await client.query(\n-        GITHUB_PR_INFO_QUERY,\n-        {owner, name, before: cursor}\n-      ));\n-    }\n-  } catch (error) {\n-    console.log('owner:', owner, 'name:', name, 'isIssue:', isIssue,\n-      'cursor:', cursor, 'error:', error);\n-  }\n-  if (nextData && nextData.repository) {\n-    pageCount++;\n-    let nodes = [];\n-    if (isIssue) {\n-      ({ nodes, pageInfo } = nextData.repository.issues);\n-    } else {\n-      ({ nodes, pageInfo } = nextData.repository.pullRequests);\n-    }\n-    cursor = pageInfo.startCursor;\n-    hasPreviousPage = pageInfo.hasPreviousPage;\n-    const result = await Promise.all(nodes.map(async node => {\n-      let user, assignee, milestone;\n-      if (getTime(node.createdAt) < getTime(earliestDate)) {\n-        reachDateThreshold = true;\n-      }\n-\n-      if (node.author) {\n-        user = {\n-          login: node.author.login,\n-          avatarUrl: node.author.avatarUrl\n-        };\n-      } else {\n-        user = {\n-          login: null,\n-          avatarUrl: null\n-        };\n-      }\n-\n-      if (node.assignees.nodes && node.assignees.nodes.length) {\n-        assignee = {\n-          login: node.assignees.nodes[0].login,\n-          avatarUrl: node.assignees.nodes[0].avatarUrl\n-        };\n-      } else {\n-        assignee = null;\n-      }\n-\n-      if (node.milestone) {\n-        milestone = {\n-          title: node.milestone.title,\n-          createdAt: node.milestone.createdAt,\n-          dueOn: node.milestone.dueOn,\n-          state: node.milestone.state.toLowerCase(),\n-          htmlUrl: node.milestone.url,\n-          description: node.milestone.description\n-        };\n-      } else {\n-        milestone = {\n-          title: null,\n-          createdAt: null,\n-          dueOn: null,\n-          state: null,\n-          htmlUrl: null,\n-          description: null\n-        };\n-      }\n-\n-      let info = {\n-        repoOwner: owner,\n-        repoName: name,\n-        updatedAtMs: getTime(node.updatedAt),\n-        issue: {\n-          htmlUrl: node.url,\n-          number: node.number,\n-          title: node.title,\n-          body: node.bodyText,\n-          comments: node.comments.totalCount,\n-          createdAt: node.createdAt,\n-          updatedAt: node.updatedAt,\n-          closedAt: node.closedAt,\n-          state: node.state.toLowerCase(),\n-          user: user,\n-          owner: user,\n-          assignee: assignee,\n-          milestone: milestone,\n-          labels: node.labels.nodes.map(label => ({\n-            name: label.name,\n-            color: label.color\n-          }))\n-        }\n-      };\n-      if (!isIssue) {\n-        let rawComments, comments;\n-        // collect review comments\n-        rawComments = node.reviews.nodes.map(node => node.comments.nodes);\n-        rawComments = [].concat.apply([], rawComments);\n-        // collect issue comments\n-        rawComments = rawComments.concat(node.comments.nodes);\n-\n-        // fetch reactions only if there are reactions within that PR\n-        // to reduce API hits.\n-        // trick: a comment has received reaction(s) iff\n-        // reactionGroup.createdAt attribute is not null\n-        const hasReactions = rawComments.reduce((has, rawComment) => {\n-          return has || rawComment.reactionGroups.reduce((flag, node) => {\n-            return (flag || node.createdAt) ? true : false;\n-          }, false);\n-        }, false);\n-\n-        if (hasReactions) {\n-          console.log('pull request has reactions. repoOwner:', owner,\n-            'repoName:', name, 'pullRequest number:', node.number);\n-          const number = node.number;\n-          const reviewCnt = Math.min(node.reviews.totalCount, 20);\n-          const maxCommentsPerReview = Math.min(\n-            node.reviews.nodes.reduce(\n-              (max, review) => Math.max(max, review.comments.totalCount), 0),\n-            100);\n-          const commentCnt = Math.min(node.comments.totalCount, 100);\n-          const commentsWithReactions = await fetchReactionsOfPR(owner, name,\n-            number, reviewCnt, maxCommentsPerReview, commentCnt);\n-\n-          // merge rawComments with commentsWithReactions\n-          if (commentsWithReactions && commentsWithReactions.length) {\n-            rawComments.forEach((comment, index) => {\n-              if (comment.id !== commentsWithReactions[index].id) {\n-                console.log('warning: comments and reactions do not fit!',\n-                  'pr number:', number, 'comment.id:', comment.id,\n-                  'comment with reactions id:', commentsWithReactions[index].id);\n-              } else {\n-                comment.reactions = commentsWithReactions[index].reactions;\n-              }\n-            });\n-          }\n-        }\n+console.log('Fetching data for', repoOwner, repoNames);\n \n-        // filter out useless reviews\n-        rawComments = rawComments.filter(node => {\n-          let flag = true;\n-          // filter comments that don't need meta-reviews\n-          for (const ignoreContent of ignoreReviewContent.split(' ')) {\n-            if (node.bodyText.match(ignoreContent)) {\n-              // filter reviews with specific content\n-              flag = false;\n-            }\n-          }\n-          for (const ignoreAuthor of ignoreReviewAuthor.split(' ')) {\n-            if (node.author && node.author.login === ignoreAuthor) {\n-              // filter reviews done by specific authors\n-              flag = false;\n-            }\n-          }\n-          return flag;\n-        });\n-\n-        comments = rawComments.map(node => {\n-          let commentAuthor, reactions;\n-\n-          if (node.author) {\n-            commentAuthor = {\n-              login: node.author.login,\n-              avatarUrl: node.author.avatarUrl,\n-              name: node.author.name\n-            };\n-          } else {\n-            commentAuthor = {\n-              login: null,\n-              avatarUrl: null\n-            };\n-          }\n-\n-          if (node.reactions) reactions = node.reactions.nodes;\n-\n-          return {\n-            id: node.id,\n-            url: node.url,\n-            bodyText: node.bodyText,\n-            diffHunk: node.diffHunk ? node.diffHunk : null,\n-            author: commentAuthor,\n-            reactions,\n-            createdAt: node.createdAt,\n-            lastEditedAt: node.lastEditedAt,\n-            updatedAt: node.lastEditedAt ? node.lastEditedAt : node.createdAt\n-          };\n-        });\n-        info.issue.pullRequest = {\n-          htmlUrl: node.url,\n-          comments\n-        };\n-      }\n-      return info;\n-    }));\n-    data = data.concat(result);\n-    if (hasPreviousPage && !reachDateThreshold &&\n-       (pageCount < pageThreshold || pageThreshold == -1)) {\n-      return fetchNextPage(owner, name, isIssue, data,\n-        cursor, pageCount, 0);\n-    } else {\n-      return data;\n-    }\n-  } else {\n-    console.log('Warning: no available data. owner:', owner, 'name:', name,\n-      'isIssue:', isIssue, 'pageCount:', pageCount, 'error message:', errors);\n-    warningCnt += 1;\n-    sleep.sleep(3);\n-    if (warningCnt < 15) {\n-      console.log('warning count:', warningCnt);\n-      return fetchNextPage(owner, name, isIssue, data, cursor, pageCount, warningCnt);\n-    } else {\n-      console.log('number of warning exceeds threshold (15), stop fetching on this repo');\n-      return data;\n+async function fetchIssue(owner, names) {","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-30T01:04:45Z","lastEditedAt":null,"updatedAt":"2018-07-30T01:04:45Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk5NTE5NQ==","url":"https://github.com/coala/gh-board/pull/139#discussion_r205995195","bodyText":"plural -> fetchLabels","diffHunk":"@@ -63,305 +49,53 @@ if (!repo) {\n const repoOwner = repo.split(':')[0];\n const repoNames = repo.substring(repo.indexOf(':') + 1).split('|');\n \n-console.log('Fetching issues data for', repoOwner, repoNames);\n-\n-async function fetchReactionsOfPR(owner, name, number, reviewCnt,\n-  maxCommentsPerReview, commentCnt) {\n-  let data, errors;\n-  try {\n-    ({ data, errors } = await client.query(\n-      GITHUB_REACTION_INFO_QUERY,\n-      {owner, name, number, reviewCnt, maxCommentsPerReview, commentCnt}\n-    ));\n-  } catch (error) {\n-    console.log('fetch reactions of pr failed, owner:', owner,\n-      'name:', name, 'number:', number, 'error:', error);\n-  }\n-\n-  let rawComments = null;\n-  if (data) {\n-    // collect review comments\n-    rawComments = data.repository.pullRequest.reviews.nodes.map(\n-      node => node.comments.nodes);\n-    rawComments = [].concat.apply([], rawComments);\n-    // collect issue comments\n-    rawComments = rawComments.concat(\n-      data.repository.pullRequest.comments.nodes);\n-  } else {\n-    console.log('warning: no available reaction data!',\n-      'owner:', owner, 'name:', name, 'pull request number:', number,\n-      'reviewCnt:', reviewCnt, 'maxCommentsPerReview', maxCommentsPerReview,\n-      'commentCnt', commentCnt, 'error:', errors);\n-  }\n-  // reactions are wrapped by corresponding comment\n-  return rawComments;\n-};\n-\n-async function fetchNextPage(owner, name, isIssue, data, cursor,\n-  pageCount, warningCnt) {\n-  // fetch data of next page\n-  console.log('owner:', owner, 'name:', name, 'isIssue:', isIssue,\n-    'cursor:', cursor, 'page count:', pageCount);\n-\n-  let nextData = null, hasPreviousPage = false, reachDateThreshold = false;\n-  let errors = null;\n-  try {\n-    if (isIssue) {\n-      ({ data: nextData, errors } = await client.query(\n-        GITHUB_ISSUE_INFO_QUERY,\n-        {owner, name, before: cursor}\n-      ));\n-    } else {\n-      ({ data: nextData, errors } = await client.query(\n-        GITHUB_PR_INFO_QUERY,\n-        {owner, name, before: cursor}\n-      ));\n-    }\n-  } catch (error) {\n-    console.log('owner:', owner, 'name:', name, 'isIssue:', isIssue,\n-      'cursor:', cursor, 'error:', error);\n-  }\n-  if (nextData && nextData.repository) {\n-    pageCount++;\n-    let nodes = [];\n-    if (isIssue) {\n-      ({ nodes, pageInfo } = nextData.repository.issues);\n-    } else {\n-      ({ nodes, pageInfo } = nextData.repository.pullRequests);\n-    }\n-    cursor = pageInfo.startCursor;\n-    hasPreviousPage = pageInfo.hasPreviousPage;\n-    const result = await Promise.all(nodes.map(async node => {\n-      let user, assignee, milestone;\n-      if (getTime(node.createdAt) < getTime(earliestDate)) {\n-        reachDateThreshold = true;\n-      }\n-\n-      if (node.author) {\n-        user = {\n-          login: node.author.login,\n-          avatarUrl: node.author.avatarUrl\n-        };\n-      } else {\n-        user = {\n-          login: null,\n-          avatarUrl: null\n-        };\n-      }\n-\n-      if (node.assignees.nodes && node.assignees.nodes.length) {\n-        assignee = {\n-          login: node.assignees.nodes[0].login,\n-          avatarUrl: node.assignees.nodes[0].avatarUrl\n-        };\n-      } else {\n-        assignee = null;\n-      }\n-\n-      if (node.milestone) {\n-        milestone = {\n-          title: node.milestone.title,\n-          createdAt: node.milestone.createdAt,\n-          dueOn: node.milestone.dueOn,\n-          state: node.milestone.state.toLowerCase(),\n-          htmlUrl: node.milestone.url,\n-          description: node.milestone.description\n-        };\n-      } else {\n-        milestone = {\n-          title: null,\n-          createdAt: null,\n-          dueOn: null,\n-          state: null,\n-          htmlUrl: null,\n-          description: null\n-        };\n-      }\n-\n-      let info = {\n-        repoOwner: owner,\n-        repoName: name,\n-        updatedAtMs: getTime(node.updatedAt),\n-        issue: {\n-          htmlUrl: node.url,\n-          number: node.number,\n-          title: node.title,\n-          body: node.bodyText,\n-          comments: node.comments.totalCount,\n-          createdAt: node.createdAt,\n-          updatedAt: node.updatedAt,\n-          closedAt: node.closedAt,\n-          state: node.state.toLowerCase(),\n-          user: user,\n-          owner: user,\n-          assignee: assignee,\n-          milestone: milestone,\n-          labels: node.labels.nodes.map(label => ({\n-            name: label.name,\n-            color: label.color\n-          }))\n-        }\n-      };\n-      if (!isIssue) {\n-        let rawComments, comments;\n-        // collect review comments\n-        rawComments = node.reviews.nodes.map(node => node.comments.nodes);\n-        rawComments = [].concat.apply([], rawComments);\n-        // collect issue comments\n-        rawComments = rawComments.concat(node.comments.nodes);\n-\n-        // fetch reactions only if there are reactions within that PR\n-        // to reduce API hits.\n-        // trick: a comment has received reaction(s) iff\n-        // reactionGroup.createdAt attribute is not null\n-        const hasReactions = rawComments.reduce((has, rawComment) => {\n-          return has || rawComment.reactionGroups.reduce((flag, node) => {\n-            return (flag || node.createdAt) ? true : false;\n-          }, false);\n-        }, false);\n-\n-        if (hasReactions) {\n-          console.log('pull request has reactions. repoOwner:', owner,\n-            'repoName:', name, 'pullRequest number:', node.number);\n-          const number = node.number;\n-          const reviewCnt = Math.min(node.reviews.totalCount, 20);\n-          const maxCommentsPerReview = Math.min(\n-            node.reviews.nodes.reduce(\n-              (max, review) => Math.max(max, review.comments.totalCount), 0),\n-            100);\n-          const commentCnt = Math.min(node.comments.totalCount, 100);\n-          const commentsWithReactions = await fetchReactionsOfPR(owner, name,\n-            number, reviewCnt, maxCommentsPerReview, commentCnt);\n-\n-          // merge rawComments with commentsWithReactions\n-          if (commentsWithReactions && commentsWithReactions.length) {\n-            rawComments.forEach((comment, index) => {\n-              if (comment.id !== commentsWithReactions[index].id) {\n-                console.log('warning: comments and reactions do not fit!',\n-                  'pr number:', number, 'comment.id:', comment.id,\n-                  'comment with reactions id:', commentsWithReactions[index].id);\n-              } else {\n-                comment.reactions = commentsWithReactions[index].reactions;\n-              }\n-            });\n-          }\n-        }\n+console.log('Fetching data for', repoOwner, repoNames);\n \n-        // filter out useless reviews\n-        rawComments = rawComments.filter(node => {\n-          let flag = true;\n-          // filter comments that don't need meta-reviews\n-          for (const ignoreContent of ignoreReviewContent.split(' ')) {\n-            if (node.bodyText.match(ignoreContent)) {\n-              // filter reviews with specific content\n-              flag = false;\n-            }\n-          }\n-          for (const ignoreAuthor of ignoreReviewAuthor.split(' ')) {\n-            if (node.author && node.author.login === ignoreAuthor) {\n-              // filter reviews done by specific authors\n-              flag = false;\n-            }\n-          }\n-          return flag;\n-        });\n-\n-        comments = rawComments.map(node => {\n-          let commentAuthor, reactions;\n-\n-          if (node.author) {\n-            commentAuthor = {\n-              login: node.author.login,\n-              avatarUrl: node.author.avatarUrl,\n-              name: node.author.name\n-            };\n-          } else {\n-            commentAuthor = {\n-              login: null,\n-              avatarUrl: null\n-            };\n-          }\n-\n-          if (node.reactions) reactions = node.reactions.nodes;\n-\n-          return {\n-            id: node.id,\n-            url: node.url,\n-            bodyText: node.bodyText,\n-            diffHunk: node.diffHunk ? node.diffHunk : null,\n-            author: commentAuthor,\n-            reactions,\n-            createdAt: node.createdAt,\n-            lastEditedAt: node.lastEditedAt,\n-            updatedAt: node.lastEditedAt ? node.lastEditedAt : node.createdAt\n-          };\n-        });\n-        info.issue.pullRequest = {\n-          htmlUrl: node.url,\n-          comments\n-        };\n-      }\n-      return info;\n-    }));\n-    data = data.concat(result);\n-    if (hasPreviousPage && !reachDateThreshold &&\n-       (pageCount < pageThreshold || pageThreshold == -1)) {\n-      return fetchNextPage(owner, name, isIssue, data,\n-        cursor, pageCount, 0);\n-    } else {\n-      return data;\n-    }\n-  } else {\n-    console.log('Warning: no available data. owner:', owner, 'name:', name,\n-      'isIssue:', isIssue, 'pageCount:', pageCount, 'error message:', errors);\n-    warningCnt += 1;\n-    sleep.sleep(3);\n-    if (warningCnt < 15) {\n-      console.log('warning count:', warningCnt);\n-      return fetchNextPage(owner, name, isIssue, data, cursor, pageCount, warningCnt);\n-    } else {\n-      console.log('number of warning exceeds threshold (15), stop fetching on this repo');\n-      return data;\n+async function fetchIssue(owner, names) {\n+  let result = [];\n+  const config = {earliestDate};\n+  for (const name of names) {\n+    try {\n+      result = result.concat(\n+        await getClient().repo(owner, name).issues(config).fetchAll()\n+      );\n+    } catch (error) {\n+      console.log('fetch issue failed, repo owner:', owner,\n+        'repo name:', name, 'error:', error);\n     }\n   }\n+  return result;\n }\n \n-async function fetchIssue(owner, names, isIssue) {\n+async function fetchPullRequest(owner, names) {\n   let result = [];\n+  const config = {earliestDate};\n   for (const name of names) {\n     try {\n       result = result.concat(\n-        await fetchNextPage(owner, name, isIssue, [], null, 0, 0));\n+        await getClient().repo(owner, name).pullRequests(config).fetchAll()\n+      );\n     } catch (error) {\n-      console.log('repo owner:', owner, 'repo name:', name,\n-        'is issue:', isIssue, 'error:', error);\n+      console.log('fetch pull request failed, repo owner:', owner,\n+        'repo name:', name, 'error:', error);\n     }\n   }\n   return result;\n }\n \n-function fetchLabel(owner, names) {\n-  return Promise.all(names.map(async name => {\n+async function fetchLabel(owner, names) {","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-30T01:05:23Z","lastEditedAt":null,"updatedAt":"2018-07-30T01:05:23Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk5NjA4Ng==","url":"https://github.com/coala/gh-board/pull/139#discussion_r205996086","bodyText":"is it necessary to change this?\nwe could make newcomer issues for things like this ... bringing in much needed help.  Especially during GCI.\nAlso, it sounds like babel doesnt really import only the named symbols.\nMight want to try https://bitbucket.org/amctheatres/babel-transform-imports","diffHunk":"@@ -1,33 +1,13 @@\n-const fs = require('fs');\n-const moment = require('moment');\n-const GraphQL = require('graphql-client');\n-const sleep = require('sleep');\n+import { writeFile } from 'fs';","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-30T01:19:13Z","lastEditedAt":null,"updatedAt":"2018-07-30T01:19:13Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk5NjI3MA==","url":"https://github.com/coala/gh-board/pull/139#discussion_r205996270","bodyText":"storing .graphql files inside a .js file isnt ideal.\ncant we load these files as const's ?\nSomething like https://github.com/ahalimkara/babel-plugin-import-static-files","diffHunk":"@@ -1,13 +0,0 @@\n-query($owner: String!, $name: String!) {","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNzE2MDY0MA==","createdAt":"2018-07-30T11:44:02Z","content":"THUMBS_UP","user":{"login":"blazeu","name":"Surya Widi"}}],"createdAt":"2018-07-30T01:22:33Z","lastEditedAt":null,"updatedAt":"2018-07-30T01:22:33Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjE3MzE0Mw==","url":"https://github.com/coala/gh-board/pull/139#discussion_r206173143","bodyText":"This is not necessary, let me roll back.","diffHunk":"@@ -1,33 +1,13 @@\n-const fs = require('fs');\n-const moment = require('moment');\n-const GraphQL = require('graphql-client');\n-const sleep = require('sleep');\n+import { writeFile } from 'fs';","author":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4","name":"Boxuan Li"},"reactions":[],"createdAt":"2018-07-30T14:55:39Z","lastEditedAt":null,"updatedAt":"2018-07-30T14:55:39Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjE5MjMxMw==","url":"https://github.com/coala/gh-board/pull/139#discussion_r206192313","bodyText":"Seems that plugin provides us with a string uri ... I don't see how it helps. Say, now we have\nconst github_label_info = 'http://your.cdn.address/assets/github_label_info.graphql';\nBut how could we load that into browser? fs module cannot be used in web browser...","diffHunk":"@@ -1,13 +0,0 @@\n-query($owner: String!, $name: String!) {","author":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4","name":"Boxuan Li"},"reactions":[],"createdAt":"2018-07-30T15:17:54Z","lastEditedAt":null,"updatedAt":"2018-07-30T15:17:54Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjM2NzQwMg==","url":"https://github.com/coala/gh-board/pull/139#discussion_r206367402","bodyText":"However,\nimport GraphQLClient from '../src/github-graphql';\nthis is necessary, otherwise there would be error:\nTypeError: GraphQLClient is not a constructor\nNot sure about the reason though...","diffHunk":"@@ -1,33 +1,13 @@\n-const fs = require('fs');\n-const moment = require('moment');\n-const GraphQL = require('graphql-client');\n-const sleep = require('sleep');\n+import { writeFile } from 'fs';","author":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4","name":"Boxuan Li"},"reactions":[],"createdAt":"2018-07-31T01:00:26Z","lastEditedAt":null,"updatedAt":"2018-07-31T01:00:26Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjQ5NTUxOQ==","url":"https://github.com/coala/gh-board/pull/139#discussion_r206495519","bodyText":"Use https://www.npmjs.com/package/babel-plugin-inline-import","diffHunk":"@@ -1,13 +0,0 @@\n-query($owner: String!, $name: String!) {","author":{"login":"blazeu","avatarUrl":"https://avatars0.githubusercontent.com/u/1438859?v=4","name":"Surya Widi"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNzIyOTAzNg==","createdAt":"2018-07-31T13:29:56Z","content":"THUMBS_UP","user":{"login":"li-boxuan","name":"Boxuan Li"}}],"createdAt":"2018-07-31T11:50:30Z","lastEditedAt":null,"updatedAt":"2018-07-31T11:50:30Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjczMDM4Mg==","url":"https://github.com/coala/gh-board/pull/139#discussion_r206730382","bodyText":"trailing blank line! :(","diffHunk":"@@ -0,0 +1,13 @@\n+{\n+  presets: [\n+    'react',\n+    'env',\n+  ],\n+  plugins: [\n+    'react-require',\n+    'transform-object-rest-spread',\n+    'transform-class-properties',\n+    'babel-plugin-inline-import',\n+  ],\n+}\n+","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-08-01T01:24:53Z","lastEditedAt":null,"updatedAt":"2018-08-01T01:24:53Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjkyNzEwMw==","url":"https://github.com/coala/gh-board/pull/139#discussion_r206927103","bodyText":"four space indents","diffHunk":"@@ -1,8 +1,10 @@\n-const fs = require('fs');\n-const loadQuery = name =>\n-  fs.readFileSync(`${__dirname}/${name}.graphql`).toString();\n-\n-module.exports.GITHUB_ISSUE_INFO_QUERY = loadQuery('github_issue_info');\n-module.exports.GITHUB_PR_INFO_QUERY = loadQuery('github_pr_info');\n-module.exports.GITHUB_LABEL_INFO_QUERY = loadQuery('github_label_info');\n-module.exports.GITHUB_REACTION_INFO_QUERY = loadQuery('github_reaction_info');\n+import GITHUB_ISSUE_INFO_QUERY from './github_issue_info.graphql';\n+import GITHUB_PR_INFO_QUERY from './github_pr_info.graphql';\n+import GITHUB_LABEL_INFO_QUERY from './github_label_info.graphql';\n+import GITHUB_REACTION_INFO_QUERY from './github_reaction_info.graphql';\n+export {\n+    GITHUB_ISSUE_INFO_QUERY,","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-08-01T15:31:14Z","lastEditedAt":null,"updatedAt":"2018-08-01T15:31:14Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzA4MTYzMg==","url":"https://github.com/coala/gh-board/pull/139#discussion_r207081632","bodyText":"Do we really need to repeat what's already in .babelrc?","diffHunk":"@@ -3,4 +3,4 @@\n set -e -x\n \n npm run build\n-node ./script/fetch-issues.js\n+NODE_ENV=development npx babel-node --presets env --plugins transform-class-properties script/fetch-issues.js","author":{"login":"blazeu","avatarUrl":"https://avatars0.githubusercontent.com/u/1438859?v=4","name":"Surya Widi"},"reactions":[],"createdAt":"2018-08-02T01:52:24Z","lastEditedAt":null,"updatedAt":"2018-08-02T01:52:24Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzA4MTc2MA==","url":"https://github.com/coala/gh-board/pull/139#discussion_r207081760","bodyText":"Can be a string instead of object","diffHunk":"@@ -24,20 +24,12 @@ module.exports = {\n       {\n         test: /\\.jsx?$/,\n         exclude: [/node_modules/, /octokat\\.js/],\n-        use: {\n-          loader: 'babel-loader',\n-          options: {\n-            presets: [\n-              'react',\n-              'env'\n-            ],\n-            plugins: [\n-              'react-require',\n-              'transform-object-rest-spread',\n-              'transform-class-properties'\n-            ],\n-          }\n-        },\n+        use: [\n+          'babel-inline-import-loader',\n+          {\n+            loader: 'babel-loader',","author":{"login":"blazeu","avatarUrl":"https://avatars0.githubusercontent.com/u/1438859?v=4","name":"Surya Widi"},"reactions":[],"createdAt":"2018-08-02T01:53:27Z","lastEditedAt":null,"updatedAt":"2018-08-02T01:53:27Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwOTQxODQ4Ng==","url":"https://github.com/coala/gh-board/pull/139#issuecomment-409418486","bodyText":"And there is still some bug with it... You can see Netlify preview website has no pre-fetched data. Let me try to fix it today.","diffHunk":null,"author":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4","name":"Boxuan Li"},"reactions":[],"createdAt":"2018-08-01T01:25:15Z","lastEditedAt":null,"updatedAt":"2018-08-01T01:25:15Z"}]}}},{"repoOwner":"coala","repoName":"gh-board","updatedAtMs":1533263364000,"issue":{"htmlUrl":"https://github.com/coala/gh-board/pull/142","number":142,"title":"Netlify build: Verify pre-fetched files exist","body":"Closes #140","comments":8,"createdAt":"2018-08-01T16:00:44Z","updatedAt":"2018-08-03T02:29:24Z","closedAt":"2018-08-03T02:29:16Z","state":"merged","user":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4"},"owner":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4"},"assignee":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4"},"labels":[{"name":"importance/medium","color":"65f23e"},{"name":"process/pending review","color":"ededed"},{"name":"size/XS","color":"ededed"},{"name":"type/feature","color":"0052cc"}],"pullRequest":{"htmlUrl":"https://github.com/coala/gh-board/pull/142","comments":[{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjk5NDM0Mw==","url":"https://github.com/coala/gh-board/pull/142#discussion_r206994343","bodyText":"I think Netlify already runs npm","diffHunk":"@@ -0,0 +1,3 @@\n+[build]\n+  publish = \".\"\n+  command = \"npm install && script/build.sh && script/verify_files.sh\"","author":{"login":"blazeu","avatarUrl":"https://avatars0.githubusercontent.com/u/1438859?v=4","name":"Surya Widi"},"createdAt":"2018-08-01T18:55:10Z","lastEditedAt":null,"updatedAt":"2018-08-01T18:55:10Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwOTY4MTYzMQ==","url":"https://github.com/coala/gh-board/pull/142#issuecomment-409681631","bodyText":"commit message","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-08-01T18:47:01Z","lastEditedAt":null,"updatedAt":"2018-08-01T18:47:01Z"}]}}},{"repoOwner":"coala","repoName":"gh-board","updatedAtMs":1532868153000,"issue":{"htmlUrl":"https://github.com/coala/gh-board/pull/81","number":81,"title":"dashboard.jsx: Add environment REPOSITORIES","body":"Closes #3","comments":6,"createdAt":"2018-07-20T14:38:19Z","updatedAt":"2018-07-29T12:42:33Z","closedAt":"2018-07-25T23:13:32Z","state":"merged","user":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4"},"owner":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4"},"assignee":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4"},"labels":[{"name":"difficulty/low","color":"07eded"},{"name":"process/approved","color":"ededed"},{"name":"size/XS","color":"ededed"}],"pullRequest":{"htmlUrl":"https://github.com/coala/gh-board/pull/81","comments":[{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDIzNTgyNA==","url":"https://github.com/coala/gh-board/pull/81#discussion_r204235824","bodyText":"You don't need to change this to let since you still could do push. Also, uppercase words in a variable name must be use const.","diffHunk":"@@ -12,12 +12,24 @@ import CurrentUserStore from '../user-store';\n import AsyncButton from './async-button';\n import Time from './time';\n \n-const SAMPLE_REPOS = [\n+let SAMPLE_REPOS = [","author":{"login":"wisn","avatarUrl":"https://avatars1.githubusercontent.com/u/8147926?v=4","name":"Wisnu Adi Nurcahyo"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNjc5ODMwOQ==","createdAt":"2018-07-22T11:48:10Z","content":"THUMBS_UP","user":{"login":"li-boxuan","name":"Boxuan Li"}}],"createdAt":"2018-07-22T10:51:25Z","lastEditedAt":null,"updatedAt":"2018-07-22T10:51:25Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDIzNTg5MQ==","url":"https://github.com/coala/gh-board/pull/81#discussion_r204235891","bodyText":"Give a new line space for readability.","diffHunk":"@@ -304,7 +316,6 @@ class ExamplesPanel extends Component {\n         {' Example Boards of GitHub Repositories'}\n       </span>\n     );\n-","author":{"login":"wisn","avatarUrl":"https://avatars1.githubusercontent.com/u/8147926?v=4","name":"Wisnu Adi Nurcahyo"},"reactions":[],"createdAt":"2018-07-22T10:53:31Z","lastEditedAt":null,"updatedAt":"2018-07-22T10:53:31Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDIzNTkyMw==","url":"https://github.com/coala/gh-board/pull/81#discussion_r204235923","bodyText":"Use double negation characters !!repos to convert it to a boolean. This is much safer.","diffHunk":"@@ -12,12 +12,24 @@ import CurrentUserStore from '../user-store';\n import AsyncButton from './async-button';\n import Time from './time';\n \n-const SAMPLE_REPOS = [\n+let SAMPLE_REPOS = [\n   {repoOwner: 'huboard', repoName: 'huboard'},\n   {repoOwner: 'openstax', repoNames: ['tutor-js', 'tutor-server'], comment: ' (multiple repositories)'},\n   {repoOwner: 'jquery', repoName: 'jquery'}\n ];\n \n+try {\n+  const repos = REPOSITORIES;\n+  if (repos) {","author":{"login":"wisn","avatarUrl":"https://avatars1.githubusercontent.com/u/8147926?v=4","name":"Wisnu Adi Nurcahyo"},"reactions":[],"createdAt":"2018-07-22T10:54:47Z","lastEditedAt":null,"updatedAt":"2018-07-22T10:54:47Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDIzNTk3Ng==","url":"https://github.com/coala/gh-board/pull/81#discussion_r204235976","bodyText":"Give a single whitespace after warning:.","diffHunk":"@@ -12,12 +12,24 @@ import CurrentUserStore from '../user-store';\n import AsyncButton from './async-button';\n import Time from './time';\n \n-const SAMPLE_REPOS = [\n+let SAMPLE_REPOS = [\n   {repoOwner: 'huboard', repoName: 'huboard'},\n   {repoOwner: 'openstax', repoNames: ['tutor-js', 'tutor-server'], comment: ' (multiple repositories)'},\n   {repoOwner: 'jquery', repoName: 'jquery'}\n ];\n \n+try {\n+  const repos = REPOSITORIES;\n+  if (repos) {\n+    const repoOwner = repos.split(':')[0];\n+    const repoNames = repos.substring(repos.indexOf(':') + 1).split('|');\n+    SAMPLE_REPOS.push({\n+      repoOwner, repoNames\n+    });\n+  };\n+} catch (error) {\n+  console.log('warning:', error);","author":{"login":"wisn","avatarUrl":"https://avatars1.githubusercontent.com/u/8147926?v=4","name":"Wisnu Adi Nurcahyo"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNjc5ODQxNQ==","createdAt":"2018-07-22T11:57:51Z","content":"CONFUSED","user":{"login":"li-boxuan","name":"Boxuan Li"}}],"createdAt":"2018-07-22T10:56:10Z","lastEditedAt":null,"updatedAt":"2018-07-22T10:56:10Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDIzNzYxNQ==","url":"https://github.com/coala/gh-board/pull/81#discussion_r204237615","bodyText":"Hmm, It makes code harder to read and understand, and it is not used anywhere in the original project.","diffHunk":"@@ -12,12 +12,24 @@ import CurrentUserStore from '../user-store';\n import AsyncButton from './async-button';\n import Time from './time';\n \n-const SAMPLE_REPOS = [\n+let SAMPLE_REPOS = [\n   {repoOwner: 'huboard', repoName: 'huboard'},\n   {repoOwner: 'openstax', repoNames: ['tutor-js', 'tutor-server'], comment: ' (multiple repositories)'},\n   {repoOwner: 'jquery', repoName: 'jquery'}\n ];\n \n+try {\n+  const repos = REPOSITORIES;\n+  if (repos) {","author":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4","name":"Boxuan Li"},"reactions":[],"createdAt":"2018-07-22T11:54:58Z","lastEditedAt":null,"updatedAt":"2018-07-22T11:54:58Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDIzNzY4OA==","url":"https://github.com/coala/gh-board/pull/81#discussion_r204237688","bodyText":"Isn't that done by console.log automatically?","diffHunk":"@@ -12,12 +12,24 @@ import CurrentUserStore from '../user-store';\n import AsyncButton from './async-button';\n import Time from './time';\n \n-const SAMPLE_REPOS = [\n+let SAMPLE_REPOS = [\n   {repoOwner: 'huboard', repoName: 'huboard'},\n   {repoOwner: 'openstax', repoNames: ['tutor-js', 'tutor-server'], comment: ' (multiple repositories)'},\n   {repoOwner: 'jquery', repoName: 'jquery'}\n ];\n \n+try {\n+  const repos = REPOSITORIES;\n+  if (repos) {\n+    const repoOwner = repos.split(':')[0];\n+    const repoNames = repos.substring(repos.indexOf(':') + 1).split('|');\n+    SAMPLE_REPOS.push({\n+      repoOwner, repoNames\n+    });\n+  };\n+} catch (error) {\n+  console.log('warning:', error);","author":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4","name":"Boxuan Li"},"reactions":[],"createdAt":"2018-07-22T11:57:49Z","lastEditedAt":null,"updatedAt":"2018-07-22T11:57:49Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDIzODk0MQ==","url":"https://github.com/coala/gh-board/pull/81#discussion_r204238941","bodyText":"Ah, you were right. I just see it passed on the second parameter.","diffHunk":"@@ -12,12 +12,24 @@ import CurrentUserStore from '../user-store';\n import AsyncButton from './async-button';\n import Time from './time';\n \n-const SAMPLE_REPOS = [\n+let SAMPLE_REPOS = [\n   {repoOwner: 'huboard', repoName: 'huboard'},\n   {repoOwner: 'openstax', repoNames: ['tutor-js', 'tutor-server'], comment: ' (multiple repositories)'},\n   {repoOwner: 'jquery', repoName: 'jquery'}\n ];\n \n+try {\n+  const repos = REPOSITORIES;\n+  if (repos) {\n+    const repoOwner = repos.split(':')[0];\n+    const repoNames = repos.substring(repos.indexOf(':') + 1).split('|');\n+    SAMPLE_REPOS.push({\n+      repoOwner, repoNames\n+    });\n+  };\n+} catch (error) {\n+  console.log('warning:', error);","author":{"login":"wisn","avatarUrl":"https://avatars1.githubusercontent.com/u/8147926?v=4","name":"Wisnu Adi Nurcahyo"},"reactions":[],"createdAt":"2018-07-22T12:47:20Z","lastEditedAt":null,"updatedAt":"2018-07-22T12:47:20Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDIzODk1Mg==","url":"https://github.com/coala/gh-board/pull/81#discussion_r204238952","bodyText":"Well, if you are fine with it then ok.","diffHunk":"@@ -12,12 +12,24 @@ import CurrentUserStore from '../user-store';\n import AsyncButton from './async-button';\n import Time from './time';\n \n-const SAMPLE_REPOS = [\n+let SAMPLE_REPOS = [\n   {repoOwner: 'huboard', repoName: 'huboard'},\n   {repoOwner: 'openstax', repoNames: ['tutor-js', 'tutor-server'], comment: ' (multiple repositories)'},\n   {repoOwner: 'jquery', repoName: 'jquery'}\n ];\n \n+try {\n+  const repos = REPOSITORIES;\n+  if (repos) {","author":{"login":"wisn","avatarUrl":"https://avatars1.githubusercontent.com/u/8147926?v=4","name":"Wisnu Adi Nurcahyo"},"reactions":[],"createdAt":"2018-07-22T12:47:44Z","lastEditedAt":null,"updatedAt":"2018-07-22T12:47:44Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDI2ODY1MA==","url":"https://github.com/coala/gh-board/pull/81#discussion_r204268650","bodyText":"Unnecessary semicolon","diffHunk":"@@ -18,6 +18,18 @@ const SAMPLE_REPOS = [\n   {repoOwner: 'jquery', repoName: 'jquery'}\n ];\n \n+try {\n+  const repos = REPOSITORIES;\n+  if (repos) {\n+    const repoOwner = repos.split(':')[0];\n+    const repoNames = repos.substring(repos.indexOf(':') + 1).split('|');\n+    SAMPLE_REPOS.push({\n+      repoOwner, repoNames\n+    });\n+  };","author":{"login":"andrewda","avatarUrl":"https://avatars1.githubusercontent.com/u/10191084?v=4","name":"Andrew Dassonville"},"reactions":[],"createdAt":"2018-07-23T02:19:04Z","lastEditedAt":null,"updatedAt":"2018-07-23T02:19:04Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDI2ODgxNw==","url":"https://github.com/coala/gh-board/pull/81#discussion_r204268817","bodyText":"What causes this code to require a try/catch?","diffHunk":"@@ -18,6 +18,18 @@ const SAMPLE_REPOS = [\n   {repoOwner: 'jquery', repoName: 'jquery'}\n ];\n \n+try {","author":{"login":"andrewda","avatarUrl":"https://avatars1.githubusercontent.com/u/10191084?v=4","name":"Andrew Dassonville"},"reactions":[],"createdAt":"2018-07-23T02:21:25Z","lastEditedAt":null,"updatedAt":"2018-07-23T02:21:25Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDI2OTM5MA==","url":"https://github.com/coala/gh-board/pull/81#discussion_r204269390","bodyText":"console.warn to get colored output.","diffHunk":"@@ -12,12 +12,24 @@ import CurrentUserStore from '../user-store';\n import AsyncButton from './async-button';\n import Time from './time';\n \n-const SAMPLE_REPOS = [\n+let SAMPLE_REPOS = [\n   {repoOwner: 'huboard', repoName: 'huboard'},\n   {repoOwner: 'openstax', repoNames: ['tutor-js', 'tutor-server'], comment: ' (multiple repositories)'},\n   {repoOwner: 'jquery', repoName: 'jquery'}\n ];\n \n+try {\n+  const repos = REPOSITORIES;\n+  if (repos) {\n+    const repoOwner = repos.split(':')[0];\n+    const repoNames = repos.substring(repos.indexOf(':') + 1).split('|');\n+    SAMPLE_REPOS.push({\n+      repoOwner, repoNames\n+    });\n+  };\n+} catch (error) {\n+  console.log('warning:', error);","author":{"login":"blazeu","avatarUrl":"https://avatars0.githubusercontent.com/u/1438859?v=4","name":"Surya Widi"},"reactions":[],"createdAt":"2018-07-23T02:28:24Z","lastEditedAt":null,"updatedAt":"2018-07-23T02:28:24Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDI4OTI5MA==","url":"https://github.com/coala/gh-board/pull/81#discussion_r204289290","bodyText":"When not in production mode, REPOSITORIES will be undefined, leading to an exception.\nMaybe I should change that logic a bit in webpack.config.js?","diffHunk":"@@ -18,6 +18,18 @@ const SAMPLE_REPOS = [\n   {repoOwner: 'jquery', repoName: 'jquery'}\n ];\n \n+try {","author":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4","name":"Boxuan Li"},"reactions":[],"createdAt":"2018-07-23T06:05:54Z","lastEditedAt":null,"updatedAt":"2018-07-23T06:05:54Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDI5NDg3MQ==","url":"https://github.com/coala/gh-board/pull/81#discussion_r204294871","bodyText":"You have all your code wrapped in an if statement, though, so none of the code will be run if REPOSITORIES is undefined, right?","diffHunk":"@@ -18,6 +18,18 @@ const SAMPLE_REPOS = [\n   {repoOwner: 'jquery', repoName: 'jquery'}\n ];\n \n+try {","author":{"login":"andrewda","avatarUrl":"https://avatars1.githubusercontent.com/u/10191084?v=4","name":"Andrew Dassonville"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNjgxNTg1MQ==","createdAt":"2018-07-23T07:04:40Z","content":"THUMBS_UP","user":{"login":"wisn","name":"Wisnu Adi Nurcahyo"}},{"id":"MDg6UmVhY3Rpb24yNjgyNDUxNg==","createdAt":"2018-07-23T10:06:21Z","content":"THUMBS_UP","user":{"login":"blazeu","name":"Surya Widi"}}],"createdAt":"2018-07-23T06:43:09Z","lastEditedAt":null,"updatedAt":"2018-07-23T06:43:09Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDM3NzA5Nw==","url":"https://github.com/coala/gh-board/pull/81#discussion_r204377097","bodyText":"Check for the type instead, typeof REPOSITORIES !== 'undefined'","diffHunk":"@@ -18,6 +18,18 @@ const SAMPLE_REPOS = [\n   {repoOwner: 'jquery', repoName: 'jquery'}\n ];\n \n+try {","author":{"login":"blazeu","avatarUrl":"https://avatars0.githubusercontent.com/u/1438859?v=4","name":"Surya Widi"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNjgzMTcyMw==","createdAt":"2018-07-23T12:55:35Z","content":"THUMBS_UP","user":{"login":"li-boxuan","name":"Boxuan Li"}},{"id":"MDg6UmVhY3Rpb24yNjgzNDgyMQ==","createdAt":"2018-07-23T13:50:33Z","content":"THUMBS_UP","user":{"login":"wisn","name":"Wisnu Adi Nurcahyo"}},{"id":"MDg6UmVhY3Rpb24yNjg1MTQxNg==","createdAt":"2018-07-23T18:25:47Z","content":"THUMBS_UP","user":{"login":"andrewda","name":"Andrew Dassonville"}}],"createdAt":"2018-07-23T12:09:47Z","lastEditedAt":"2018-07-23T12:10:31Z","updatedAt":"2018-07-23T12:10:31Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDQ3MTA0Mw==","url":"https://github.com/coala/gh-board/pull/81#discussion_r204471043","bodyText":"Can you also add comment: ' (from prefetch config)'\nor comment: ' (repositories config)' hmm..","diffHunk":"@@ -18,6 +18,14 @@ const SAMPLE_REPOS = [\n   {repoOwner: 'jquery', repoName: 'jquery'}\n ];\n \n+if (typeof REPOSITORIES !== 'undefined') {\n+  const repos = REPOSITORIES;\n+  const repoOwner = repos.split(':')[0];\n+  const repoNames = repos.substring(repos.indexOf(':') + 1).split('|');\n+  SAMPLE_REPOS.push({\n+    repoOwner, repoNames","author":{"login":"blazeu","avatarUrl":"https://avatars0.githubusercontent.com/u/1438859?v=4","name":"Surya Widi"},"reactions":[],"createdAt":"2018-07-23T16:28:20Z","lastEditedAt":null,"updatedAt":"2018-07-23T16:28:20Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDYwMTcyNg==","url":"https://github.com/coala/gh-board/pull/81#discussion_r204601726","bodyText":"Done","diffHunk":"@@ -18,6 +18,14 @@ const SAMPLE_REPOS = [\n   {repoOwner: 'jquery', repoName: 'jquery'}\n ];\n \n+if (typeof REPOSITORIES !== 'undefined') {\n+  const repos = REPOSITORIES;\n+  const repoOwner = repos.split(':')[0];\n+  const repoNames = repos.substring(repos.indexOf(':') + 1).split('|');\n+  SAMPLE_REPOS.push({\n+    repoOwner, repoNames","author":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4","name":"Boxuan Li"},"reactions":[],"createdAt":"2018-07-24T01:41:07Z","lastEditedAt":null,"updatedAt":"2018-07-24T01:41:07Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDYzMTg3Mg==","url":"https://github.com/coala/gh-board/pull/81#discussion_r204631872","bodyText":"err, i mean comment property :p\nsee the original SAMPLE_REPOS","diffHunk":"@@ -18,6 +18,14 @@ const SAMPLE_REPOS = [\n   {repoOwner: 'jquery', repoName: 'jquery'}\n ];\n \n+if (typeof REPOSITORIES !== 'undefined') {\n+  const repos = REPOSITORIES;\n+  const repoOwner = repos.split(':')[0];\n+  const repoNames = repos.substring(repos.indexOf(':') + 1).split('|');\n+  SAMPLE_REPOS.push({\n+    repoOwner, repoNames","author":{"login":"blazeu","avatarUrl":"https://avatars0.githubusercontent.com/u/1438859?v=4","name":"Surya Widi"},"reactions":[],"createdAt":"2018-07-24T06:00:59Z","lastEditedAt":null,"updatedAt":"2018-07-24T06:00:59Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDk0NDMyOA==","url":"https://github.com/coala/gh-board/pull/81#discussion_r204944328","bodyText":"Done :p","diffHunk":"@@ -18,6 +18,14 @@ const SAMPLE_REPOS = [\n   {repoOwner: 'jquery', repoName: 'jquery'}\n ];\n \n+if (typeof REPOSITORIES !== 'undefined') {\n+  const repos = REPOSITORIES;\n+  const repoOwner = repos.split(':')[0];\n+  const repoNames = repos.substring(repos.indexOf(':') + 1).split('|');\n+  SAMPLE_REPOS.push({\n+    repoOwner, repoNames","author":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4","name":"Boxuan Li"},"reactions":[],"createdAt":"2018-07-24T23:39:10Z","lastEditedAt":null,"updatedAt":"2018-07-24T23:39:10Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwNjg2NDI3NQ==","url":"https://github.com/coala/gh-board/pull/81#issuecomment-406864275","bodyText":"@jayvdb ready to be merged. Who the one that responsible for this repo, someone with write access that good in JavaScript?","diffHunk":null,"author":{"login":"wisn","avatarUrl":"https://avatars1.githubusercontent.com/u/8147926?v=4","name":"Wisnu Adi Nurcahyo"},"reactions":[],"createdAt":"2018-07-22T12:49:51Z","lastEditedAt":null,"updatedAt":"2018-07-22T12:49:51Z"}]}}},{"repoOwner":"coala","repoName":"gh-board","updatedAtMs":1533129541000,"issue":{"htmlUrl":"https://github.com/coala/gh-board/pull/83","number":83,"title":"Add review filters functionality","body":"Closes #82","comments":15,"createdAt":"2018-07-21T15:05:11Z","updatedAt":"2018-08-01T13:19:01Z","closedAt":"2018-08-01T04:51:00Z","state":"merged","user":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4"},"owner":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4"},"assignee":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4"},"labels":[{"name":"enhancement","color":"84b6eb"},{"name":"size/S","color":"ededed"}],"pullRequest":{"htmlUrl":"https://github.com/coala/gh-board/pull/83","comments":[{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk2MTIxOA==","url":"https://github.com/coala/gh-board/pull/83#discussion_r205961218","bodyText":"this part can be moved to a new easy PR for #131","diffHunk":"@@ -91,11 +92,28 @@ function ReviewColumn(props) {\n }\n \n class KanbanRepo extends Component {\n+  state = {login: null};\n+\n   componentDidMount() {\n     const repoTitle = titlecaps(this.props.repoInfos[0].repoName);\n     document.title = `${repoTitle} Kanban Board`;\n+    Client.on('changeToken', this.onChangeToken);","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-29T05:25:25Z","lastEditedAt":null,"updatedAt":"2018-07-29T05:25:25Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk2NDk0OQ==","url":"https://github.com/coala/gh-board/pull/83#discussion_r205964949","bodyText":"Yeah, this can also be used in #131, but not moved.","diffHunk":"@@ -91,11 +92,28 @@ function ReviewColumn(props) {\n }\n \n class KanbanRepo extends Component {\n+  state = {login: null};\n+\n   componentDidMount() {\n     const repoTitle = titlecaps(this.props.repoInfos[0].repoName);\n     document.title = `${repoTitle} Kanban Board`;\n+    Client.on('changeToken', this.onChangeToken);","author":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4","name":"Boxuan Li"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNzEzMDc2Mw==","createdAt":"2018-07-29T12:28:47Z","content":"THUMBS_UP","user":{"login":"jayvdb","name":"John Vandenberg"}}],"createdAt":"2018-07-29T08:14:35Z","lastEditedAt":null,"updatedAt":"2018-07-29T08:14:35Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjEwMzMwOA==","url":"https://github.com/coala/gh-board/pull/83#discussion_r206103308","bodyText":"Use array.some or array.every ?","diffHunk":"@@ -350,3 +357,58 @@ export function filterCardsByFilter(cards, filter) {\n     return true;\n   });\n }\n+\n+// Filters the list of reviews by the criteria set in the URL.\n+// Note this happens after `issues/prs` get filtered. A review is\n+// just a part of a pull request, so this would only take effect\n+// if its corresponding issue is not filtered out.\n+// Used by FilterStore.filterAndSortReviews()\n+export function filterReviewsByFilter(reviews, filter, user) {\n+  filter = filter || getFilters();\n+  const {reviews: reviewOptions} = filter.getState();\n+\n+  let myReviews, reviewsUnderMyPr, myMetaReviews, others;\n+  for (const reviewOption of reviewOptions) {\n+    switch (reviewOption) {\n+    case 'my-reviews':\n+      myReviews = true;\n+      break;\n+    case 'reviews-under-my-pr':\n+      reviewsUnderMyPr = true;\n+      break;\n+    case 'my-meta-reviews':\n+      myMetaReviews = true;\n+      break;\n+    case 'others':\n+      others = true;\n+      break;\n+    default:\n+      throw new Error('Review filter is invalid!');\n+    }\n+  }\n+\n+  return reviews.filter(review => {\n+    const isMyReview = review.author && review.author.login && review.author.login === user;\n+    const isReviewUnderMyPr = review.prAuthor === user;\n+    const hasMyMetaReview = (() => {","author":{"login":"blazeu","avatarUrl":"https://avatars0.githubusercontent.com/u/1438859?v=4","name":"Surya Widi"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNzE3MDY5OA==","createdAt":"2018-07-30T14:43:56Z","content":"THUMBS_UP","user":{"login":"li-boxuan","name":"Boxuan Li"}}],"createdAt":"2018-07-30T11:47:47Z","lastEditedAt":null,"updatedAt":"2018-07-30T11:47:47Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjEyMjkxMg==","url":"https://github.com/coala/gh-board/pull/83#discussion_r206122912","bodyText":"split into multiple lines?\nalso noting that these methods are horribly repetitive. (i.e. renderTypes / renderStates / etc), but that should get fixed in a separate PR before or after this one, maybe by someone else ;-)","diffHunk":"@@ -243,6 +243,17 @@ class FilterDropdown extends Component {\n     return (<FilterCategory noSearch items={items}/>);\n   };\n \n+  renderReviews = () => {\n+    const filters = getFilters();\n+    const {reviews} = filters.getState();\n+\n+    const items = ['my-reviews', 'reviews-under-my-pr', 'my-meta-reviews', 'others'].map((review) => {\n+      return {text: review, isSelected: reviews.indexOf(review) >= 0, toggleHref: filters.toggleReviews(review).url() };","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNzE3MDc4OA==","createdAt":"2018-07-30T14:45:20Z","content":"HOORAY","user":{"login":"li-boxuan","name":"Boxuan Li"}}],"createdAt":"2018-07-30T12:59:08Z","lastEditedAt":null,"updatedAt":"2018-07-30T12:59:08Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwNjgwMjU1Nw==","url":"https://github.com/coala/gh-board/pull/83#issuecomment-406802557","bodyText":"aaf747c and 3bab083 are from #65. Will remove them when #65 is merged.\nUPDATE: removed","diffHunk":null,"author":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4","name":"Boxuan Li"},"reactions":[],"createdAt":"2018-07-21T15:06:04Z","lastEditedAt":"2018-07-26T00:31:02Z","updatedAt":"2018-07-26T00:31:02Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwODU4NzQ3OA==","url":"https://github.com/coala/gh-board/pull/83#issuecomment-408587478","bodyText":"Travis was failing for some weird reason: sh: 1: eslint: not found and many other similar stuff.\nWhen I add commit 81e6c54, Travis passed.","diffHunk":null,"author":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4","name":"Boxuan Li"},"reactions":[],"createdAt":"2018-07-28T06:49:02Z","lastEditedAt":"2018-07-28T11:03:45Z","updatedAt":"2018-07-28T11:03:45Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwODY1MjgzNQ==","url":"https://github.com/coala/gh-board/pull/83#issuecomment-408652835","bodyText":"When I enable only \"Reviews under my PRs\" and \"others\", I still see my own comments, which I shouldnt be meta-reviewing ;-)","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-29T05:19:30Z","lastEditedAt":null,"updatedAt":"2018-07-29T05:19:30Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwODY2MTAzNg==","url":"https://github.com/coala/gh-board/pull/83#issuecomment-408661036","bodyText":"When I enable only \"Reviews under my PRs\" and \"others\", I still see my own comments, which I shouldnt be meta-reviewing ;-)\n\nThis is the expected behavior, because once you select reviews under my PRs, it will display all reviews under your pr, no matter if they are your own comments or not. The relationship between filters is OR, that is, if you select every filter, you will see everything. There is no way to achieve 'reviews under my prs && !my reviews' using binary select boxes.","diffHunk":null,"author":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4","name":"Boxuan Li"},"reactions":[],"createdAt":"2018-07-29T08:33:19Z","lastEditedAt":null,"updatedAt":"2018-07-29T08:33:19Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwODY3NTI5NA==","url":"https://github.com/coala/gh-board/pull/83#issuecomment-408675294","bodyText":"But \"!not my reviews\" is the main filter which is needed -- It should be default to not show the user their own comments, unless they explicitly request it.","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-29T12:41:42Z","lastEditedAt":null,"updatedAt":"2018-07-29T12:41:42Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwODc0MjM2OQ==","url":"https://github.com/coala/gh-board/pull/83#issuecomment-408742369","bodyText":"Maybe we add a separate set of filters, or a checkbox, for \"include mine\", default disabled.","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-30T04:19:07Z","lastEditedAt":null,"updatedAt":"2018-07-30T04:19:07Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwODg5MDEzOQ==","url":"https://github.com/coala/gh-board/pull/83#issuecomment-408890139","bodyText":"Maybe we add a separate set of filters, or a checkbox, for \"include mine\", default disabled.\n\n@jayvdb Could you please elaborate on that? I don't quite get this point: \"include mine\"","diffHunk":null,"author":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4","name":"Boxuan Li"},"reactions":[],"createdAt":"2018-07-30T14:48:42Z","lastEditedAt":null,"updatedAt":"2018-07-30T14:48:42Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwODkxNTY5Nw==","url":"https://github.com/coala/gh-board/pull/83#issuecomment-408915697","bodyText":"A filter to hide the users own actions/content is a general setting which would apply to most 'detail' components.  Issues and PRs and Review comments, etc.  The only exception is when a users PR passes, but generally the user has other notifications for that event anyway.\nThe user doesnt need another notification for their own actions.  It should be not shown by default , but the user can enable it of course.\nAnyways, I can see how it isnt relevant to this PR. And after we can use gh-board interactively maybe I will have a different perspective on this.","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNzE5OTYwMA==","createdAt":"2018-07-31T00:53:39Z","content":"HOORAY","user":{"login":"li-boxuan","name":"Boxuan Li"}}],"createdAt":"2018-07-30T15:59:35Z","lastEditedAt":null,"updatedAt":"2018-07-30T15:59:35Z"}]}}},{"repoOwner":"coala","repoName":"gh-board","updatedAtMs":1532848566000,"issue":{"htmlUrl":"https://github.com/coala/gh-board/pull/85","number":85,"title":"script/: Set -x -e on shell scripts","body":"","comments":4,"createdAt":"2018-07-25T23:09:44Z","updatedAt":"2018-07-29T07:16:06Z","closedAt":"2018-07-29T05:31:51Z","state":"merged","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"process/approved","color":"ededed"},{"name":"size/XS","color":"ededed"}],"pullRequest":{"htmlUrl":"https://github.com/coala/gh-board/pull/85","comments":[]}}},{"repoOwner":"coala","repoName":"gh-board","updatedAtMs":1533156061000,"issue":{"htmlUrl":"https://github.com/coala/gh-board/pull/87","number":87,"title":"package-lock.json: Include only non-optional packages","body":"Closes #28","comments":7,"createdAt":"2018-07-26T03:31:39Z","updatedAt":"2018-08-01T20:41:01Z","closedAt":"2018-08-01T20:23:15Z","state":"merged","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"process/approved","color":"ededed"},{"name":"size/XXL","color":"ededed"}],"pullRequest":{"htmlUrl":"https://github.com/coala/gh-board/pull/87","comments":[{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTQyNzQ1Mg==","url":"https://github.com/coala/gh-board/pull/87#discussion_r205427452","bodyText":"Why is this in package.json if we're going to install it via npm install in Travis anyway?\nThe proper way to specify version is still in engines key, whether that works in Travis or not, isn't relevant. https://docs.npmjs.com/files/package.json#engines","diffHunk":"@@ -48,6 +48,7 @@\n     \"json-loader\": \"^0.5.4\",\n     \"less\": \"^2.7.1\",\n     \"less-loader\": \"^4.0.5\",\n+    \"npm\": \"^5.8.0\",","author":{"login":"blazeu","avatarUrl":"https://avatars0.githubusercontent.com/u/1438859?v=4","name":"Surya Widi"},"reactions":[],"createdAt":"2018-07-26T11:53:34Z","lastEditedAt":"2018-07-26T11:55:30Z","updatedAt":"2018-07-26T11:55:30Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTQyODM1NA==","url":"https://github.com/coala/gh-board/pull/87#discussion_r205428354","bodyText":"... if Travis is using this, then why is npm install npm necessary?","diffHunk":"@@ -48,6 +48,7 @@\n     \"json-loader\": \"^0.5.4\",\n     \"less\": \"^2.7.1\",\n     \"less-loader\": \"^4.0.5\",\n+    \"npm\": \"^5.8.0\",","author":{"login":"blazeu","avatarUrl":"https://avatars0.githubusercontent.com/u/1438859?v=4","name":"Surya Widi"},"reactions":[],"createdAt":"2018-07-26T11:57:33Z","lastEditedAt":null,"updatedAt":"2018-07-26T11:57:33Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTQzMDA5OA==","url":"https://github.com/coala/gh-board/pull/87#discussion_r205430098","bodyText":"It is in devDependencies, because developers need to use it when generating their package-lock.json , or they will generate a junky one which includes optional dependencies, even if --no-optional is used.\nAfter the first uncached build, npm 5.8 will be cached and used at the beginning of the next build.\nTravis' issue says there is a difference of meaning with engines between \"install\" and \"build\".  Not sure how relevant that is in this type of repo.  The latest npm is usable to do an install -- it is only additions of new dependencies where the older version is needed.","diffHunk":"@@ -48,6 +48,7 @@\n     \"json-loader\": \"^0.5.4\",\n     \"less\": \"^2.7.1\",\n     \"less-loader\": \"^4.0.5\",\n+    \"npm\": \"^5.8.0\",","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-26T12:04:45Z","lastEditedAt":null,"updatedAt":"2018-07-26T12:04:45Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTQ2ODEzNA==","url":"https://github.com/coala/gh-board/pull/87#discussion_r205468134","bodyText":"Usage of the--devoption is deprecated. Use--only=devinstead.\nc.f. https://travis-ci.org/coala/gh-board/jobs/408440200#L458","diffHunk":"@@ -26,6 +26,12 @@ before_script:\n   - sh -e /etc/init.d/xvfb start\n   - sleep 3 # give xvfb some time to start\n \n+before_install:\n+  - npm install --no-save --no-optional --dev npm@5.8.0","author":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4","name":"Boxuan Li"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNzA3NjY5NA==","createdAt":"2018-07-27T11:33:04Z","content":"THUMBS_UP","user":{"login":"jayvdb","name":"John Vandenberg"}}],"createdAt":"2018-07-26T14:00:59Z","lastEditedAt":null,"updatedAt":"2018-07-26T14:00:59Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzAwMjk2Nw==","url":"https://github.com/coala/gh-board/pull/87#discussion_r207002967","bodyText":"Added to engines.","diffHunk":"@@ -48,6 +48,7 @@\n     \"json-loader\": \"^0.5.4\",\n     \"less\": \"^2.7.1\",\n     \"less-loader\": \"^4.0.5\",\n+    \"npm\": \"^5.8.0\",","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-08-01T19:24:58Z","lastEditedAt":null,"updatedAt":"2018-08-01T19:24:58Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzAwMzMyNw==","url":"https://github.com/coala/gh-board/pull/87#discussion_r207003327","bodyText":"Actually it isnt necessary because of --no-save, but I have kept it in so that it is explicit which type of dependency it is in package.json","diffHunk":"@@ -26,6 +26,12 @@ before_script:\n   - sh -e /etc/init.d/xvfb start\n   - sleep 3 # give xvfb some time to start\n \n+before_install:\n+  - npm install --no-save --no-optional --dev npm@5.8.0","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-08-01T19:26:24Z","lastEditedAt":null,"updatedAt":"2018-08-01T19:26:24Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwNzk2NTg4MA==","url":"https://github.com/coala/gh-board/pull/87#issuecomment-407965880","bodyText":"The fact that Travis CI auto-detects npm 5.8 and uses npm ci can be seen at https://travis-ci.org/jayvdb/gh-board/builds/408334773\nCompare with npm 5.5 being installed at last master build https://travis-ci.org/coala/gh-board/jobs/408287658\nThere is a bit of relevant Travis history at travis-ci/travis-ci#4653 , where engines.npm was briefly used, and then reverted.  I havent confirmed where Travis is using dependencies.npm , but ... it is somewhere.","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-26T03:35:26Z","lastEditedAt":"2018-07-26T03:39:13Z","updatedAt":"2018-07-26T03:39:13Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwODA3NTA4Mw==","url":"https://github.com/coala/gh-board/pull/87#issuecomment-408075083","bodyText":"I am getting a lot of failed builds with this PR and #85 ; not sure what is the problem.","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-26T12:06:28Z","lastEditedAt":null,"updatedAt":"2018-07-26T12:06:28Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwODA5NzgyMw==","url":"https://github.com/coala/gh-board/pull/87#issuecomment-408097823","bodyText":"I am getting a lot of failed builds with this PR and #85 ; not sure what is the problem.\n\nI checked the log. Those fail builds are due to the error element (\".modal-dialog button.close\") still not existing after 60000ms\nI am also facing this issue recently. The reason could be, syncing issues takes too much time, or the page isn't correctly loaded due to some unknown reason.\nI wonder if we should abandon the current integration test, which is instable and hard to report coverage, and start building unittests.","diffHunk":null,"author":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4","name":"Boxuan Li"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNzAyNzY4NA==","createdAt":"2018-07-26T14:42:24Z","content":"THUMBS_UP","user":{"login":"jayvdb","name":"John Vandenberg"}}],"createdAt":"2018-07-26T13:29:58Z","lastEditedAt":null,"updatedAt":"2018-07-26T13:29:58Z"}]}}},{"repoOwner":"coala","repoName":"gh-board","updatedAtMs":1532861229000,"issue":{"htmlUrl":"https://github.com/coala/gh-board/pull/124","number":124,"title":"README.md: Fix minor table of contents inconsistencies","body":"Move the Burnup Chart entry to correct place in table of contents.\nRename Issue Image --> Issue Images to fix link in contents link.\nChange the Issue Images heading to h3 to fit match other headings.\nCloses: #55","comments":10,"createdAt":"2018-07-27T11:25:25Z","updatedAt":"2018-07-29T10:47:09Z","closedAt":"2018-07-29T04:41:42Z","state":"merged","user":{"login":"domlobo","avatarUrl":"https://avatars1.githubusercontent.com/u/16255593?v=4"},"owner":{"login":"domlobo","avatarUrl":"https://avatars1.githubusercontent.com/u/16255593?v=4"},"labels":[{"name":"size/XS","color":"ededed"}],"pullRequest":{"htmlUrl":"https://github.com/coala/gh-board/pull/124","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQwODU5MjgwOA==","url":"https://github.com/coala/gh-board/pull/124#issuecomment-408592808","bodyText":"I hit the wrong button my bad","diffHunk":null,"author":{"login":"domlobo","avatarUrl":"https://avatars1.githubusercontent.com/u/16255593?v=4","name":null},"createdAt":"2018-07-28T08:41:21Z","lastEditedAt":null,"updatedAt":"2018-07-28T08:41:21Z"}]}}},{"repoOwner":"coala","repoName":"gh-board","updatedAtMs":1533165667000,"issue":{"htmlUrl":"https://github.com/coala/gh-board/pull/126","number":126,"title":"Hiroshis' Etherpad","body":"See #5","comments":9,"createdAt":"2018-07-27T14:47:43Z","updatedAt":"2018-08-01T23:21:07Z","closedAt":"2018-08-01T23:04:19Z","state":"merged","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"process/approved","color":"ededed"},{"name":"size/S","color":"ededed"}],"pullRequest":{"htmlUrl":"https://github.com/coala/gh-board/pull/126","comments":[{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTkyOTUwNA==","url":"https://github.com/coala/gh-board/pull/126#discussion_r205929504","bodyText":"Redundant blank line?","diffHunk":"@@ -275,11 +277,17 @@ class AppNav extends Component {\n               <SettingsItem key='gantt-chart' to={getFilters().setRouteName('gantt').url()}><GraphIcon/> Gantt Chart</SettingsItem>\n               <SettingsItem key='label-editing' to={getFilters().setRouteName('labels').url()}><TagIcon/> Label Editing</SettingsItem>\n               <BS.MenuItem key='reset-databases' onClick={this.promptAndResetDatabases}>Reset Local Cache...</BS.MenuItem>\n+","author":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4","name":"Boxuan Li"},"reactions":[],"createdAt":"2018-07-28T02:02:14Z","lastEditedAt":null,"updatedAt":"2018-07-28T02:02:14Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTkyOTkzMw==","url":"https://github.com/coala/gh-board/pull/126#discussion_r205929933","bodyText":"This class is not exported.\nexport default class Etherpad","diffHunk":"@@ -0,0 +1,94 @@\n+import {Component} from 'react';\n+import * as BS from 'react-bootstrap';\n+\n+class Etherpad extends Component {","author":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4","name":"Boxuan Li"},"reactions":[],"createdAt":"2018-07-28T02:20:46Z","lastEditedAt":null,"updatedAt":"2018-07-28T02:20:46Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTkzMDA5Mg==","url":"https://github.com/coala/gh-board/pull/126#discussion_r205930092","bodyText":"should be\nstatic displayName = 'Etherpad';\nBut anyway, not necessary since the name is the same as class name.\nc.f. #17 (comment)","diffHunk":"@@ -0,0 +1,94 @@\n+import {Component} from 'react';\n+import * as BS from 'react-bootstrap';\n+\n+class Etherpad extends Component {\n+  displayName: 'Etherpad'","author":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4","name":"Boxuan Li"},"reactions":[],"createdAt":"2018-07-28T02:28:57Z","lastEditedAt":null,"updatedAt":"2018-07-28T02:28:57Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTkzNDU2NA==","url":"https://github.com/coala/gh-board/pull/126#discussion_r205934564","bodyText":"Leading space in the object should be removed. And it'd make sense to remove the one above, too, in another commit.","diffHunk":"@@ -90,10 +91,11 @@ class AppNav extends Component {\n   render() {\n     let routeInfo = getFilters().getState();\n     let {repoInfos} = routeInfo;\n-    const {info, showModal} = this.state;\n+    const {info, showModal, showEPModal} = this.state;\n \n     // Note: The dashboard page does not have a list of repos\n     const close = () => this.setState({ showModal: false});\n+    const closeEP = () => this.setState({ showEPModal: false});","author":{"login":"andrewda","avatarUrl":"https://avatars1.githubusercontent.com/u/10191084?v=4","name":"Andrew Dassonville"},"reactions":[],"createdAt":"2018-07-28T06:18:31Z","lastEditedAt":null,"updatedAt":"2018-07-28T06:18:31Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTkzNDU4OQ==","url":"https://github.com/coala/gh-board/pull/126#discussion_r205934589","bodyText":"Whitespace before (","diffHunk":"@@ -30,16 +29,26 @@ const EtherpadInner = createReactClass({\n   },\n   poll() {\n     // Start polling\n-    Client.getAnonymousOcto().fromUrl(`${this.getUrl()}/export/txt`).read().then((text) => {\n-      this.setState({text});\n-      // This is the magic text inside a newly-created pad.\n-      // Defined in `etherpad-lite-heroku`'s settings file\n-      if (text.indexOf('Welcome to Etherpad!') >= 0) {\n-        this.loadIssueBody().then(() => {\n-          this.poll(); // Should be guaranteed to no longer be \"This is an empty pad\"\n-        });\n+    const etherpad = EtherpadClient.connect(\n+      this.getEtherpadInfo()\n+    );\n+    etherpad.getText({padID: this.props.padName}, (error, data) => {\n+      if(error) {","author":{"login":"andrewda","avatarUrl":"https://avatars1.githubusercontent.com/u/10191084?v=4","name":"Andrew Dassonville"},"reactions":[],"createdAt":"2018-07-28T06:20:18Z","lastEditedAt":null,"updatedAt":"2018-07-28T06:20:18Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTkzNDU5MA==","url":"https://github.com/coala/gh-board/pull/126#discussion_r205934590","bodyText":"Whitespace before (","diffHunk":"@@ -30,16 +29,26 @@ const EtherpadInner = createReactClass({\n   },\n   poll() {\n     // Start polling\n-    Client.getAnonymousOcto().fromUrl(`${this.getUrl()}/export/txt`).read().then((text) => {\n-      this.setState({text});\n-      // This is the magic text inside a newly-created pad.\n-      // Defined in `etherpad-lite-heroku`'s settings file\n-      if (text.indexOf('Welcome to Etherpad!') >= 0) {\n-        this.loadIssueBody().then(() => {\n-          this.poll(); // Should be guaranteed to no longer be \"This is an empty pad\"\n-        });\n+    const etherpad = EtherpadClient.connect(\n+      this.getEtherpadInfo()\n+    );\n+    etherpad.getText({padID: this.props.padName}, (error, data) => {\n+      if(error) {\n+        console.error('Error creating pad: ' + error.message);\n+        if(error.message === 'padID does not exist') {","author":{"login":"andrewda","avatarUrl":"https://avatars1.githubusercontent.com/u/10191084?v=4","name":"Andrew Dassonville"},"reactions":[],"createdAt":"2018-07-28T06:20:25Z","lastEditedAt":null,"updatedAt":"2018-07-28T06:20:25Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTkzNDYyMA==","url":"https://github.com/coala/gh-board/pull/126#discussion_r205934620","bodyText":"This could, technically, be shortened to:\nthis.loadIssueBody().then(this.poll)\nwhich is equally readable imo, but works fine as-is.","diffHunk":"@@ -30,16 +29,26 @@ const EtherpadInner = createReactClass({\n   },\n   poll() {\n     // Start polling\n-    Client.getAnonymousOcto().fromUrl(`${this.getUrl()}/export/txt`).read().then((text) => {\n-      this.setState({text});\n-      // This is the magic text inside a newly-created pad.\n-      // Defined in `etherpad-lite-heroku`'s settings file\n-      if (text.indexOf('Welcome to Etherpad!') >= 0) {\n-        this.loadIssueBody().then(() => {\n-          this.poll(); // Should be guaranteed to no longer be \"This is an empty pad\"\n-        });\n+    const etherpad = EtherpadClient.connect(\n+      this.getEtherpadInfo()\n+    );\n+    etherpad.getText({padID: this.props.padName}, (error, data) => {\n+      if(error) {\n+        console.error('Error creating pad: ' + error.message);\n+        if(error.message === 'padID does not exist') {\n+          this.loadIssueBody().then(() => {\n+            this.poll(); // Should be guaranteed to no longer be \"This is an empty pad\"\n+          });","author":{"login":"andrewda","avatarUrl":"https://avatars1.githubusercontent.com/u/10191084?v=4","name":"Andrew Dassonville"},"reactions":[],"createdAt":"2018-07-28T06:22:18Z","lastEditedAt":null,"updatedAt":"2018-07-28T06:22:18Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTkzNDYyNw==","url":"https://github.com/coala/gh-board/pull/126#discussion_r205934627","bodyText":"Whitespace before (","diffHunk":"@@ -52,18 +61,27 @@ const EtherpadInner = createReactClass({\n     // from https://github.com/ether/etherpad-lite-jquery-plugin/blob/master/js/etherpad.js\n     return `${hostName}/p/${padName}`;\n   },\n+  getEtherpadInfo() {\n+    const reg = /^(?:([^:\\/?#]+):)?(?:\\/\\/([^\\/?#]*):([0-9]+))?([^?#]*)(?:\\?([^#]*))?(?:#(.*))?/;\n+    let m = window.localStorage.getItem('ep-url').match(reg);\n+    if(m) {","author":{"login":"andrewda","avatarUrl":"https://avatars1.githubusercontent.com/u/10191084?v=4","name":"Andrew Dassonville"},"reactions":[],"createdAt":"2018-07-28T06:22:44Z","lastEditedAt":null,"updatedAt":"2018-07-28T06:22:44Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTkzNDYzNg==","url":"https://github.com/coala/gh-board/pull/126#discussion_r205934636","bodyText":"This might benefit from a more descriptive variable name.","diffHunk":"@@ -52,18 +61,27 @@ const EtherpadInner = createReactClass({\n     // from https://github.com/ether/etherpad-lite-jquery-plugin/blob/master/js/etherpad.js\n     return `${hostName}/p/${padName}`;\n   },\n+  getEtherpadInfo() {\n+    const reg = /^(?:([^:\\/?#]+):)?(?:\\/\\/([^\\/?#]*):([0-9]+))?([^?#]*)(?:\\?([^#]*))?(?:#(.*))?/;\n+    let m = window.localStorage.getItem('ep-url').match(reg);","author":{"login":"andrewda","avatarUrl":"https://avatars1.githubusercontent.com/u/10191084?v=4","name":"Andrew Dassonville"},"reactions":[],"createdAt":"2018-07-28T06:23:30Z","lastEditedAt":null,"updatedAt":"2018-07-28T06:23:30Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTkzNDY0Nw==","url":"https://github.com/coala/gh-board/pull/126#discussion_r205934647","bodyText":"Whitespace before (","diffHunk":"@@ -0,0 +1,96 @@\n+import {Component} from 'react';\n+import * as BS from 'react-bootstrap';\n+\n+class EtherpadModal extends Component {\n+  static displayName = 'Etherpad';\n+  onSave = () => {\n+    let serverURLVal = this._serverURL.value;\n+    if(serverURLVal) {\n+      serverURLVal = serverURLVal.trim();\n+    }\n+    this.setURLSettings(serverURLVal);\n+    let apikey = this._apikey.value;\n+    if(apikey) {\n+      apikey = apikey.trim();\n+    }\n+    this.setAPIkey(apikey);\n+    this.onCancel();\n+  }\n+  onClear = () => {\n+    this.setURLSettings(null);\n+    this.setAPIkey(null);\n+    this.setState({});\n+  }\n+  onCancel = () => {\n+    this.props.onHide();\n+  }\n+  getSettings = () => {\n+    return {\n+      serverURL: window.localStorage.getItem('ep-url'),\n+      apikey: window.localStorage.getItem('ep-apikey')\n+    };\n+  }\n+  setURLSettings = (url) => {\n+    if(url) {\n+      window.localStorage.setItem('ep-url', url);\n+    } else {\n+      window.localStorage.removeItem('ep-url');\n+    }\n+  }\n+  setAPIkey = (key) => {\n+    if(key) {","author":{"login":"andrewda","avatarUrl":"https://avatars1.githubusercontent.com/u/10191084?v=4","name":"Andrew Dassonville"},"reactions":[],"createdAt":"2018-07-28T06:24:29Z","lastEditedAt":null,"updatedAt":"2018-07-28T06:24:29Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTkzNDY0OA==","url":"https://github.com/coala/gh-board/pull/126#discussion_r205934648","bodyText":"Whitespace before (","diffHunk":"@@ -0,0 +1,96 @@\n+import {Component} from 'react';\n+import * as BS from 'react-bootstrap';\n+\n+class EtherpadModal extends Component {\n+  static displayName = 'Etherpad';\n+  onSave = () => {\n+    let serverURLVal = this._serverURL.value;\n+    if(serverURLVal) {\n+      serverURLVal = serverURLVal.trim();\n+    }\n+    this.setURLSettings(serverURLVal);\n+    let apikey = this._apikey.value;\n+    if(apikey) {\n+      apikey = apikey.trim();\n+    }\n+    this.setAPIkey(apikey);\n+    this.onCancel();\n+  }\n+  onClear = () => {\n+    this.setURLSettings(null);\n+    this.setAPIkey(null);\n+    this.setState({});\n+  }\n+  onCancel = () => {\n+    this.props.onHide();\n+  }\n+  getSettings = () => {\n+    return {\n+      serverURL: window.localStorage.getItem('ep-url'),\n+      apikey: window.localStorage.getItem('ep-apikey')\n+    };\n+  }\n+  setURLSettings = (url) => {\n+    if(url) {","author":{"login":"andrewda","avatarUrl":"https://avatars1.githubusercontent.com/u/10191084?v=4","name":"Andrew Dassonville"},"reactions":[],"createdAt":"2018-07-28T06:24:33Z","lastEditedAt":null,"updatedAt":"2018-07-28T06:24:33Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTkzNDY1NA==","url":"https://github.com/coala/gh-board/pull/126#discussion_r205934654","bodyText":"Whitespace before (","diffHunk":"@@ -0,0 +1,96 @@\n+import {Component} from 'react';\n+import * as BS from 'react-bootstrap';\n+\n+class EtherpadModal extends Component {\n+  static displayName = 'Etherpad';\n+  onSave = () => {\n+    let serverURLVal = this._serverURL.value;\n+    if(serverURLVal) {\n+      serverURLVal = serverURLVal.trim();\n+    }\n+    this.setURLSettings(serverURLVal);\n+    let apikey = this._apikey.value;\n+    if(apikey) {","author":{"login":"andrewda","avatarUrl":"https://avatars1.githubusercontent.com/u/10191084?v=4","name":"Andrew Dassonville"},"reactions":[],"createdAt":"2018-07-28T06:24:51Z","lastEditedAt":null,"updatedAt":"2018-07-28T06:24:51Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTkzNDY1Nw==","url":"https://github.com/coala/gh-board/pull/126#discussion_r205934657","bodyText":"Whitespace before (","diffHunk":"@@ -0,0 +1,96 @@\n+import {Component} from 'react';\n+import * as BS from 'react-bootstrap';\n+\n+class EtherpadModal extends Component {\n+  static displayName = 'Etherpad';\n+  onSave = () => {\n+    let serverURLVal = this._serverURL.value;\n+    if(serverURLVal) {","author":{"login":"andrewda","avatarUrl":"https://avatars1.githubusercontent.com/u/10191084?v=4","name":"Andrew Dassonville"},"reactions":[],"createdAt":"2018-07-28T06:25:04Z","lastEditedAt":null,"updatedAt":"2018-07-28T06:25:04Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk2MTU0OQ==","url":"https://github.com/coala/gh-board/pull/126#discussion_r205961549","bodyText":"I'll skip this one as then the comment has to move as well.\nI'm trying to get their code in with least amount of changes, but basic style consistency changes are doable.","diffHunk":"@@ -30,16 +29,26 @@ const EtherpadInner = createReactClass({\n   },\n   poll() {\n     // Start polling\n-    Client.getAnonymousOcto().fromUrl(`${this.getUrl()}/export/txt`).read().then((text) => {\n-      this.setState({text});\n-      // This is the magic text inside a newly-created pad.\n-      // Defined in `etherpad-lite-heroku`'s settings file\n-      if (text.indexOf('Welcome to Etherpad!') >= 0) {\n-        this.loadIssueBody().then(() => {\n-          this.poll(); // Should be guaranteed to no longer be \"This is an empty pad\"\n-        });\n+    const etherpad = EtherpadClient.connect(\n+      this.getEtherpadInfo()\n+    );\n+    etherpad.getText({padID: this.props.padName}, (error, data) => {\n+      if(error) {\n+        console.error('Error creating pad: ' + error.message);\n+        if(error.message === 'padID does not exist') {\n+          this.loadIssueBody().then(() => {\n+            this.poll(); // Should be guaranteed to no longer be \"This is an empty pad\"\n+          });","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNzEzNjUxNw==","createdAt":"2018-07-29T19:52:37Z","content":"THUMBS_UP","user":{"login":"andrewda","name":"Andrew Dassonville"}}],"createdAt":"2018-07-29T05:47:43Z","lastEditedAt":null,"updatedAt":"2018-07-29T05:47:43Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk2MTc3MQ==","url":"https://github.com/coala/gh-board/pull/126#discussion_r205961771","bodyText":"Agree, but that can happen when we do other bug fixes or enhancements to this component.\nThere will be lots more things to do here, especially deactivating etherpad in other components, especially when etherpad settings are missing, or the token fails, etc","diffHunk":"@@ -52,18 +61,27 @@ const EtherpadInner = createReactClass({\n     // from https://github.com/ether/etherpad-lite-jquery-plugin/blob/master/js/etherpad.js\n     return `${hostName}/p/${padName}`;\n   },\n+  getEtherpadInfo() {\n+    const reg = /^(?:([^:\\/?#]+):)?(?:\\/\\/([^\\/?#]*):([0-9]+))?([^?#]*)(?:\\?([^#]*))?(?:#(.*))?/;\n+    let m = window.localStorage.getItem('ep-url').match(reg);","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-29T06:00:02Z","lastEditedAt":null,"updatedAt":"2018-07-29T06:00:02Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk3MTcwMQ==","url":"https://github.com/coala/gh-board/pull/126#discussion_r205971701","bodyText":"If window.localStorage.getItem('ep-url') is undefined, this would lead to an error","diffHunk":"@@ -52,18 +61,27 @@ const EtherpadInner = createReactClass({\n     // from https://github.com/ether/etherpad-lite-jquery-plugin/blob/master/js/etherpad.js\n     return `${hostName}/p/${padName}`;\n   },\n+  getEtherpadInfo() {\n+    const reg = /^(?:([^:\\/?#]+):)?(?:\\/\\/([^\\/?#]*):([0-9]+))?([^?#]*)(?:\\?([^#]*))?(?:#(.*))?/;\n+    let m = window.localStorage.getItem('ep-url').match(reg);","author":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4","name":"Boxuan Li"},"reactions":[],"createdAt":"2018-07-29T12:24:05Z","lastEditedAt":null,"updatedAt":"2018-07-29T12:24:05Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk3NDk5MA==","url":"https://github.com/coala/gh-board/pull/126#discussion_r205974990","bodyText":"Yes, but we will need to prevent this component loading if it is not set correctly.  It is useless fixing this here.\nEtherpadClient.connect(self.getEtherpadInfo()) is going to fail if this doesnt return a valid connection metadata.\ne.g. if I put in foo as the URL setting.\nIdeally the validation of the user setting is moved to the modal.\nBut this PR gives credit where it is due, and lets us build on top.\nFirst step is disabling the editor everywhere if the setting is empty.\nThen the problems of this entire component are much less critical as the user cant encounter the problems in the first few clicks.","diffHunk":"@@ -52,18 +61,27 @@ const EtherpadInner = createReactClass({\n     // from https://github.com/ether/etherpad-lite-jquery-plugin/blob/master/js/etherpad.js\n     return `${hostName}/p/${padName}`;\n   },\n+  getEtherpadInfo() {\n+    const reg = /^(?:([^:\\/?#]+):)?(?:\\/\\/([^\\/?#]*):([0-9]+))?([^?#]*)(?:\\?([^#]*))?(?:#(.*))?/;\n+    let m = window.localStorage.getItem('ep-url').match(reg);","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNzI5MTg4Mw==","createdAt":"2018-08-01T13:13:43Z","content":"HOORAY","user":{"login":"li-boxuan","name":"Boxuan Li"}}],"createdAt":"2018-07-29T13:58:04Z","lastEditedAt":null,"updatedAt":"2018-07-29T13:58:04Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwODQ0NjEyOQ==","url":"https://github.com/coala/gh-board/pull/126#issuecomment-408446129","bodyText":"More modernising required..","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-27T15:03:41Z","lastEditedAt":null,"updatedAt":"2018-07-27T15:03:41Z"}]}}},{"repoOwner":"coala","repoName":"gh-board","updatedAtMs":1533430786000,"issue":{"htmlUrl":"https://github.com/coala/gh-board/pull/128","number":128,"title":"Enhance meta-review UI","body":"Related to #84","comments":15,"createdAt":"2018-07-28T07:15:50Z","updatedAt":"2018-08-05T00:59:46Z","closedAt":"2018-08-04T00:52:30Z","state":"merged","user":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4"},"owner":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4"},"labels":[{"name":"difficulty/low","color":"07eded"},{"name":"enhancement","color":"84b6eb"},{"name":"process/approved","color":"ededed"},{"name":"size/XS","color":"ededed"}],"pullRequest":{"htmlUrl":"https://github.com/coala/gh-board/pull/128","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQwODU4ODkzNg==","url":"https://github.com/coala/gh-board/pull/128#issuecomment-408588936","bodyText":"Regarding enhancement 2 mentioned in #84 (comment),\nthis would be handled later in a separate pr (ability to do meta-reviews directly on gh-board)","diffHunk":null,"author":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4","name":"Boxuan Li"},"createdAt":"2018-07-28T07:23:57Z","lastEditedAt":null,"updatedAt":"2018-07-28T07:23:57Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwODU5NjA0Mw==","url":"https://github.com/coala/gh-board/pull/128#issuecomment-408596043","bodyText":"Preview:","diffHunk":null,"author":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4","name":"Boxuan Li"},"createdAt":"2018-07-28T09:50:45Z","lastEditedAt":null,"updatedAt":"2018-07-28T09:50:45Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwODYzMjExNA==","url":"https://github.com/coala/gh-board/pull/128#issuecomment-408632114","bodyText":"Some space between the emoji button row and the \"Import igitt data\" div\n\n\n\nemoji size needs to grow a bit more","diffHunk":null,"author":{"login":"hemangsk","avatarUrl":"https://avatars3.githubusercontent.com/u/13018570?v=4","name":"Hemang Kumar"},"createdAt":"2018-07-28T20:10:21Z","lastEditedAt":null,"updatedAt":"2018-07-28T20:10:21Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwODY0OTU5Nw==","url":"https://github.com/coala/gh-board/pull/128#issuecomment-408649597","bodyText":"Preview after update:","diffHunk":null,"author":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4","name":"Boxuan Li"},"createdAt":"2018-07-29T03:38:23Z","lastEditedAt":null,"updatedAt":"2018-07-29T03:38:23Z"}]}}},{"repoOwner":"coala","repoName":"gh-board","updatedAtMs":1533305703000,"issue":{"htmlUrl":"https://github.com/coala/gh-board/pull/130","number":130,"title":"Setup jest","body":"Closes #45 & #129","comments":10,"createdAt":"2018-07-28T15:36:42Z","updatedAt":"2018-08-03T14:15:03Z","closedAt":"2018-08-03T01:59:12Z","state":"merged","user":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4"},"owner":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4"},"labels":[{"name":"difficulty/low","color":"07eded"},{"name":"importance/medium","color":"65f23e"},{"name":"process/approved","color":"ededed"},{"name":"size/XXL","color":"ededed"}],"pullRequest":{"htmlUrl":"https://github.com/coala/gh-board/pull/130","comments":[{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk2MTIyMg==","url":"https://github.com/coala/gh-board/pull/130#discussion_r205961222","bodyText":"env should cover for es2015 already\nhttp://babeljs.io/docs/en/env/","diffHunk":"@@ -37,18 +37,22 @@\n     \"babel-plugin-transform-class-properties\": \"^6.24.1\",\n     \"babel-plugin-transform-object-rest-spread\": \"^6.26.0\",\n     \"babel-preset-env\": \"^1.6.1\",\n+    \"babel-preset-es2015\": \"^6.24.1\",","author":{"login":"blazeu","avatarUrl":"https://avatars0.githubusercontent.com/u/1438859?v=4","name":"Surya Widi"},"reactions":[],"createdAt":"2018-07-29T05:25:51Z","lastEditedAt":null,"updatedAt":"2018-07-29T05:25:51Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk2MTIzOQ==","url":"https://github.com/coala/gh-board/pull/130#discussion_r205961239","bodyText":"Extract this fom webpack conf\n\n  \n    \n      gh-board/webpack.config.js\n    \n    \n        Lines 29 to 38\n      in\n      3c8b0e5\n    \n    \n    \n    \n\n        \n          \n           options: { \n        \n\n        \n          \n             presets: [ \n        \n\n        \n          \n               'react', \n        \n\n        \n          \n               'env' \n        \n\n        \n          \n             ], \n        \n\n        \n          \n             plugins: [ \n        \n\n        \n          \n               'react-require', \n        \n\n        \n          \n               'transform-object-rest-spread', \n        \n\n        \n          \n               'transform-class-properties' \n        \n\n        \n          \n             ], \n        \n    \n  \n\n\nbabel-loader will also read from .babelrc if it exists.","diffHunk":"@@ -0,0 +1,3 @@\n+{\n+  \"presets\": [\"es2015\", \"react\"]","author":{"login":"blazeu","avatarUrl":"https://avatars0.githubusercontent.com/u/1438859?v=4","name":"Surya Widi"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNzEyNjk2NQ==","createdAt":"2018-07-29T06:14:20Z","content":"THUMBS_UP","user":{"login":"li-boxuan","name":"Boxuan Li"}}],"createdAt":"2018-07-29T05:26:58Z","lastEditedAt":null,"updatedAt":"2018-07-29T05:26:58Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk3MTMwNQ==","url":"https://github.com/coala/gh-board/pull/130#discussion_r205971305","bodyText":"We don't need this now since we have the same config as webpack?","diffHunk":"@@ -1,3 +1,4 @@\n+import React from 'react';","author":{"login":"blazeu","avatarUrl":"https://avatars0.githubusercontent.com/u/1438859?v=4","name":"Surya Widi"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNzEzMDgzMA==","createdAt":"2018-07-29T12:37:09Z","content":"THUMBS_UP","user":{"login":"li-boxuan","name":"Boxuan Li"}}],"createdAt":"2018-07-29T12:11:22Z","lastEditedAt":null,"updatedAt":"2018-07-29T12:11:22Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjAyMDkyOA==","url":"https://github.com/coala/gh-board/pull/130#discussion_r206020928","bodyText":"This change is welcoming. Most of the text editors these days automatically pick up babelrc files and provide autocompletion features based on babel configuration.","diffHunk":"@@ -0,0 +1,11 @@\n+{","author":{"login":"nkprince007","avatarUrl":"https://avatars3.githubusercontent.com/u/17202890?v=4","name":"Naveen Kumar Sangi"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNzE2MDgxMQ==","createdAt":"2018-07-30T11:48:13Z","content":"THUMBS_UP","user":{"login":"jayvdb","name":"John Vandenberg"}}],"createdAt":"2018-07-30T05:54:08Z","lastEditedAt":null,"updatedAt":"2018-07-30T05:54:08Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjAyMDk5Mw==","url":"https://github.com/coala/gh-board/pull/130#discussion_r206020993","bodyText":"Like @jayvdb mentioned, we don't need a configuration to publish code coverage to codecov.","diffHunk":"@@ -0,0 +1,9 @@\n+comment: false","author":{"login":"nkprince007","avatarUrl":"https://avatars3.githubusercontent.com/u/17202890?v=4","name":"Naveen Kumar Sangi"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNzE2MDgyMA==","createdAt":"2018-07-30T11:48:21Z","content":"THUMBS_UP","user":{"login":"jayvdb","name":"John Vandenberg"}}],"createdAt":"2018-07-30T05:54:40Z","lastEditedAt":null,"updatedAt":"2018-07-30T05:54:40Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjcyNzAwMg==","url":"https://github.com/coala/gh-board/pull/130#discussion_r206727002","bodyText":"please add a disable_global variable like https://github.com/coala/git-task-list/blob/master/.travis.yml#L13 , so all extra jobs can re-use it.","diffHunk":"@@ -18,18 +20,33 @@ jobs:\n       before_script: false\n       script: .ci/check_moban.sh\n       after_success: false\n+      after_failure: false","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNzI5ODkzOA==","createdAt":"2018-08-01T14:53:39Z","content":"THUMBS_UP","user":{"login":"li-boxuan","name":"Boxuan Li"}}],"createdAt":"2018-08-01T00:55:44Z","lastEditedAt":null,"updatedAt":"2018-08-01T00:55:44Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNjczMDc2OQ==","url":"https://github.com/coala/gh-board/pull/130#discussion_r206730769","bodyText":"I am very surprised this works.\nPlease use a variable like we do in coala/coala repo for the job which is allowed to fail","diffHunk":"@@ -8,6 +8,8 @@ cache:\n # env forces jobs to be created from the top level settings\n env:\n jobs:\n+  allow_failures:\n+    - script: script/run-integration-test.sh","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-08-01T01:28:03Z","lastEditedAt":null,"updatedAt":"2018-08-01T01:28:03Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwODY3NTIxMg==","url":"https://github.com/coala/gh-board/pull/130#issuecomment-408675212","bodyText":"Some general thoughts:\nI believe .babelrc stuff can be put into package.json .. I prefer that, but what about other ppl?\ncodecov.yml is currently doing nothing, so isnt necessary.  Data can be sent to codecov without it, and the percentage will slowly rise.  until it gets to a decent percentage, tracking that isnt useful.\ntravis after_success/after_failure needs to be deactivated for the moban job.\njest.config.js - I am not a fan of checking in a large config file of comments about possible settings.  We know whether to find the docs if we want more settings.","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNzE2Nzg2OA==","createdAt":"2018-07-30T14:02:59Z","content":"THUMBS_UP","user":{"login":"li-boxuan","name":"Boxuan Li"}}],"createdAt":"2018-07-29T12:40:01Z","lastEditedAt":null,"updatedAt":"2018-07-29T12:40:01Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwODY5MTkwNA==","url":"https://github.com/coala/gh-board/pull/130#issuecomment-408691904","bodyText":"@jayvdb I would prefer .babelrc than package.json","diffHunk":null,"author":{"login":"wisn","avatarUrl":"https://avatars1.githubusercontent.com/u/8147926?v=4","name":"Wisnu Adi Nurcahyo"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNzE2MDQxOQ==","createdAt":"2018-07-30T11:39:09Z","content":"THUMBS_UP","user":{"login":"blazeu","name":"Surya Widi"}}],"createdAt":"2018-07-29T17:15:56Z","lastEditedAt":null,"updatedAt":"2018-07-29T17:15:56Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwODcxODc0OA==","url":"https://github.com/coala/gh-board/pull/130#issuecomment-408718748","bodyText":"@wisn, why?","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-30T00:51:18Z","lastEditedAt":null,"updatedAt":"2018-07-30T00:51:18Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwODczNTEyNw==","url":"https://github.com/coala/gh-board/pull/130#issuecomment-408735127","bodyText":"@jayvdb I knew that several peoples hate \"tiny\" file like .babelrc just for storing some configurations. If that's the case then we could merge Babel configuration to package.json. My reason to use .babelrc is to explicitly say that \"this application using Babel and here is the configuration\". Besides, package.json contains a lot of dependencies record already and I see it as a mess. Actually, based on this repo behavior and Babel lookup behavior, move Babel configuration to package.json would be good. Hence, we just need to make a deal since either way is literally the same.\nHow about you guys? @li-boxuan @andrewda @blazeu","diffHunk":null,"author":{"login":"wisn","avatarUrl":"https://avatars1.githubusercontent.com/u/8147926?v=4","name":"Wisnu Adi Nurcahyo"},"reactions":[],"createdAt":"2018-07-30T03:15:07Z","lastEditedAt":null,"updatedAt":"2018-07-30T03:15:07Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQxMDExNTY4MQ==","url":"https://github.com/coala/gh-board/pull/130#issuecomment-410115681","bodyText":"a SyntaxError with the integration test","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-08-03T01:24:38Z","lastEditedAt":null,"updatedAt":"2018-08-03T01:24:38Z"}]}}},{"repoOwner":"coala","repoName":"gh-board","updatedAtMs":1532868090000,"issue":{"htmlUrl":"https://github.com/coala/gh-board/pull/65","number":65,"title":"Setup meta review in need","body":"Create a new column, namely meta-review in need,\nwhich displays reviews that in need of meta-reviews.\nCloses #64","comments":6,"createdAt":"2018-06-23T14:35:38Z","updatedAt":"2018-07-29T12:41:30Z","closedAt":"2018-07-24T06:03:17Z","state":"merged","user":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4"},"owner":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4"},"labels":[{"name":"enhancement","color":"84b6eb"},{"name":"size/M","color":"ededed"}],"pullRequest":{"htmlUrl":"https://github.com/coala/gh-board/pull/65","comments":[{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NzYyOTY0Nw==","url":"https://github.com/coala/gh-board/pull/65#discussion_r197629647","bodyText":"Use paren instead of bracket to omit return.","diffHunk":"@@ -0,0 +1,48 @@\n+import * as BS from 'react-bootstrap';\n+\n+function Reactions(props) {\n+  const {stat} = props;\n+  // use null when count is zero because we don't want to display\n+  // number zero on frontend\n+  const reactions = [\n+    {\n+      emoji: '👍',\n+      count: stat.THUMBS_UP || null,\n+      name: 'THUMBS_UP'\n+    },\n+    {\n+      emoji: '👎',\n+      count: stat.THUMBS_DOWN || null,\n+      name: 'THUMBS_DOWN'\n+    },\n+    {\n+      emoji: '😄',\n+      count: stat.LAUGH || null,\n+      name: 'LAUGH'\n+    },\n+    {\n+      emoji: '🎉',\n+      count: stat.HOORAY || null,\n+      name: 'HOORAY'\n+    },\n+    {\n+      emoji: '😕',\n+      count: stat.HEART || null,\n+      name: 'HEART'\n+    },\n+    {\n+      emoji: '❤️',\n+      count: stat.CONFUSED || null,\n+      name: 'STAR'\n+    }\n+  ];\n+  return reactions.map(reaction => {","author":{"login":"blazeu","avatarUrl":"https://avatars0.githubusercontent.com/u/1438859?v=4","name":"Surya Widi"},"reactions":[],"createdAt":"2018-06-24T06:26:11Z","lastEditedAt":null,"updatedAt":"2018-06-24T06:26:11Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NzYyOTY5MQ==","url":"https://github.com/coala/gh-board/pull/65#discussion_r197629691","bodyText":"Use object destructuring {stat} in parameter is possible.","diffHunk":"@@ -0,0 +1,48 @@\n+import * as BS from 'react-bootstrap';\n+\n+function Reactions(props) {","author":{"login":"blazeu","avatarUrl":"https://avatars0.githubusercontent.com/u/1438859?v=4","name":"Surya Widi"},"reactions":[],"createdAt":"2018-06-24T06:28:08Z","lastEditedAt":null,"updatedAt":"2018-06-24T06:28:08Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NzYyOTgwMQ==","url":"https://github.com/coala/gh-board/pull/65#discussion_r197629801","bodyText":"This component could be simplified using arrow function and other techniques explained above.\nconst ReviewColumn = () => (\n  <div ...\n)","diffHunk":"@@ -68,6 +70,26 @@ function KanbanColumn(props) {\n   }\n }\n \n+function ReviewColumn(props) {\n+  const {reviews} = props;\n+\n+  const reviewComponents = _.map(reviews, (review) => {\n+    return (\n+      <Review\n+        review={review}\n+      />\n+    );\n+  });\n+\n+  return (\n+    <div className='kanban-board-column'>\n+      <ReviewList>\n+        {reviewComponents}","author":{"login":"blazeu","avatarUrl":"https://avatars0.githubusercontent.com/u/1438859?v=4","name":"Surya Widi"},"reactions":[],"createdAt":"2018-06-24T06:34:01Z","lastEditedAt":null,"updatedAt":"2018-06-24T06:34:01Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NzYyOTk4Nw==","url":"https://github.com/coala/gh-board/pull/65#discussion_r197629987","bodyText":"Do map instead of forEach.","diffHunk":"@@ -77,6 +99,27 @@ class KanbanRepo extends Component {\n   render() {\n     const {columnData, cards, repoInfos} = this.props;\n \n+    // Get review comments out of cards\n+    const reviews = cards.map((card) => {\n+      if (card.issue.pullRequest && card.issue.pullRequest.comments) {\n+        let comments = card.issue.pullRequest.comments;\n+        comments.forEach(comment => {\n+          comment.repoOwner = card.repoOwner;\n+          comment.repoName = card.repoName;\n+          comment.number = card.number;\n+        });\n+        return comments;","author":{"login":"blazeu","avatarUrl":"https://avatars0.githubusercontent.com/u/1438859?v=4","name":"Surya Widi"},"reactions":[],"createdAt":"2018-06-24T06:44:57Z","lastEditedAt":null,"updatedAt":"2018-06-24T06:44:57Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NzYzMDAzMQ==","url":"https://github.com/coala/gh-board/pull/65#discussion_r197630031","bodyText":"Remove brackets and return","diffHunk":"@@ -77,6 +99,27 @@ class KanbanRepo extends Component {\n   render() {\n     const {columnData, cards, repoInfos} = this.props;\n \n+    // Get review comments out of cards\n+    const reviews = cards.map((card) => {\n+      if (card.issue.pullRequest && card.issue.pullRequest.comments) {\n+        let comments = card.issue.pullRequest.comments;\n+        comments.forEach(comment => {\n+          comment.repoOwner = card.repoOwner;\n+          comment.repoName = card.repoName;\n+          comment.number = card.number;\n+        });\n+        return comments;\n+      } else {\n+        return [];\n+      }\n+    }).reduce((a, b) => {\n+      // flatten nested reviewCards\n+      return a.concat(b);","author":{"login":"blazeu","avatarUrl":"https://avatars0.githubusercontent.com/u/1438859?v=4","name":"Surya Widi"},"reactions":[],"createdAt":"2018-06-24T06:46:35Z","lastEditedAt":null,"updatedAt":"2018-06-24T06:46:35Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NzYzMDA5OQ==","url":"https://github.com/coala/gh-board/pull/65#discussion_r197630099","bodyText":"Just do 'review-blurb' ?","diffHunk":"@@ -0,0 +1,41 @@\n+import classnames from 'classnames';\n+import Database from '../database';\n+import Loadable from './loadable';\n+\n+function ReviewBlurb(props) {\n+  const {card} = props;\n+  const {url} = card;\n+\n+  const splitUrl = url.split('/');\n+  const reviewNumber = splitUrl[splitUrl.length - 1];\n+\n+  const classes = {\n+    'review-blurb': true\n+  };\n+\n+  return (\n+    <span className={classnames(classes)}>","author":{"login":"blazeu","avatarUrl":"https://avatars0.githubusercontent.com/u/1438859?v=4","name":"Surya Widi"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNTU2MjkxMQ==","createdAt":"2018-06-25T14:46:50Z","content":"THUMBS_UP","user":{"login":"li-boxuan","name":"Boxuan Li"}}],"createdAt":"2018-06-24T06:50:17Z","lastEditedAt":null,"updatedAt":"2018-06-24T06:50:17Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NzYzMDEwNw==","url":"https://github.com/coala/gh-board/pull/65#discussion_r197630107","bodyText":"{card: {url}}","diffHunk":"@@ -0,0 +1,41 @@\n+import classnames from 'classnames';\n+import Database from '../database';\n+import Loadable from './loadable';\n+\n+function ReviewBlurb(props) {","author":{"login":"blazeu","avatarUrl":"https://avatars0.githubusercontent.com/u/1438859?v=4","name":"Surya Widi"},"reactions":[],"createdAt":"2018-06-24T06:50:44Z","lastEditedAt":null,"updatedAt":"2018-06-24T06:50:44Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NzYzMDE1Mw==","url":"https://github.com/coala/gh-board/pull/65#discussion_r197630153","bodyText":"Hmm, I somehow forgot/misses this in modernize PR.","diffHunk":"@@ -0,0 +1,48 @@\n+import * as BS from 'react-bootstrap';\n+\n+function Reactions(props) {","author":{"login":"blazeu","avatarUrl":"https://avatars0.githubusercontent.com/u/1438859?v=4","name":"Surya Widi"},"reactions":[],"createdAt":"2018-06-24T06:53:20Z","lastEditedAt":null,"updatedAt":"2018-06-24T06:53:20Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NzYzMDE2NQ==","url":"https://github.com/coala/gh-board/pull/65#discussion_r197630165","bodyText":"split then pop returns the last element.","diffHunk":"@@ -0,0 +1,41 @@\n+import classnames from 'classnames';\n+import Database from '../database';\n+import Loadable from './loadable';\n+\n+function ReviewBlurb(props) {\n+  const {card} = props;\n+  const {url} = card;\n+\n+  const splitUrl = url.split('/');","author":{"login":"blazeu","avatarUrl":"https://avatars0.githubusercontent.com/u/1438859?v=4","name":"Surya Widi"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNTU2MzAwMw==","createdAt":"2018-06-25T14:48:09Z","content":"THUMBS_UP","user":{"login":"li-boxuan","name":"Boxuan Li"}}],"createdAt":"2018-06-24T06:54:32Z","lastEditedAt":null,"updatedAt":"2018-06-24T06:54:32Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NzYzMDkxOQ==","url":"https://github.com/coala/gh-board/pull/65#discussion_r197630919","bodyText":"Should be stateless functional component","diffHunk":"@@ -0,0 +1,130 @@\n+import {Component} from 'react';\n+import * as BS from 'react-bootstrap';\n+import classnames from 'classnames';\n+import {Link} from 'react-router';\n+\n+import {getFilters} from '../route-utils';\n+import IssueStore from '../issue-store';\n+\n+import GithubFlavoredMarkdown from './gfm';\n+import Time from './time';\n+import ReviewBlurb from './review-blurb';\n+import IssueOrPullRequestBlurb from './issue-blurb';\n+import Reactions from './reactions';\n+\n+function ReviewCard(props) {\n+  const {card, primaryRepoName} = props;\n+  const {repoOwner, repoName, number, id, bodyText, reactions, url} = card;\n+\n+  const key = `${repoOwner}/${repoName}#${number}-${id}`;\n+\n+  // comment updatedAt is updated when comment content is edited.\n+  // Note that the default `updatedAt` field of review comment\n+  // provided by GraphQL API is inaccurate. Thus, we use our custom\n+  // updatedAt, defined by `lastEditedAt` and `createdAt` time if never edited.\n+  const updatedAt = card.updatedAt;\n+\n+  const user = card.author;\n+  const assignedAvatar = (\n+    <Link to={getFilters().toggleUserName(user.login).url()}>\n+      <img\n+        key='avatar'\n+        className='avatar-image'\n+        title={'Click to filter on ' + user.login}\n+        src={user.avatarUrl}/>\n+    </Link>\n+  );\n+  // stop highlighting after 5min\n+  const isUpdated = Date.now() - Date.parse(updatedAt) < 2 * 60 * 1000;\n+\n+  // put the corresponding pull request as related card\n+  const issueCard = IssueStore.issueNumberToCard(repoOwner, repoName, number);\n+  const relatedCards = [issueCard].map((issueCard) => {\n+    let title;\n+    if (issueCard.issue) {\n+      title = (\n+        <span className='related-issue-title'>{issueCard.issue.title}</span>\n+      );\n+    }\n+    return (\n+      <div key={issueCard.key()} className='related-issue'>\n+        <IssueOrPullRequestBlurb\n+          card={issueCard}\n+          primaryRepoName={card.repoName}/>\n+        {title}\n+      </div>\n+    );\n+  });\n+\n+  const classes = {\n+    'review': true,\n+    'is-updated': isUpdated,\n+  };\n+\n+  const header = [\n+    <ReviewBlurb key='review-blurb'\n+      card={card}\n+      primaryRepoName={primaryRepoName} />,\n+  ];\n+\n+  let reactionsStat = {\n+    THUMBS_UP: 0,\n+    THUMBS_DOWN: 0,\n+    LAUGH: 0,\n+    HOORAY: 0,\n+    HEART: 0,\n+    CONFUSED: 0\n+  };\n+  if (reactions) {\n+    reactions.forEach(reaction => reactionsStat[reaction.content]++);\n+  }\n+\n+  return (\n+    <div className='-card-and-related'>\n+      <BS.ListGroupItem\n+        key={key}\n+        header={header}\n+        className={classnames(classes)}>\n+\n+        <span className='-extra-span-for-inline-popover'>\n+          <a\n+            key='link'\n+            className='review-title'\n+            target='_blank'\n+            href={url}>\n+              <GithubFlavoredMarkdown\n+                inline\n+                repoOwner={repoOwner}\n+                repoName={repoName}\n+                text={bodyText}/>\n+          </a>\n+        </span>\n+\n+        <span key='footer' className='review-footer'>\n+          <span key='left-footer' className='comment-reactions'>\n+            <Reactions stat={reactionsStat}/>\n+          </span>\n+          <span key='right-footer' className='review-time-and-user'>\n+            <Time key='time' className='updated-at' dateTime={updatedAt}/>\n+            {assignedAvatar}\n+          </span>\n+        </span>\n+      </BS.ListGroupItem>\n+      <div key='related' className='related-issues'>\n+        {relatedCards}\n+      </div>\n+    </div>\n+  );\n+}\n+\n+class Review extends Component {\n+  render() {","author":{"login":"blazeu","avatarUrl":"https://avatars0.githubusercontent.com/u/1438859?v=4","name":"Surya Widi"},"reactions":[],"createdAt":"2018-06-24T07:33:40Z","lastEditedAt":null,"updatedAt":"2018-06-24T07:33:40Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NzYzMDk0NQ==","url":"https://github.com/coala/gh-board/pull/65#discussion_r197630945","bodyText":"Commented code should be removed","diffHunk":"@@ -0,0 +1,105 @@\n+.review {\n+  cursor: default;\n+  padding-top: 0;\n+  padding-right: 0;\n+  padding-bottom: 0;\n+  padding-left: 0;\n+\n+  margin-top: 1rem;\n+  margin-left: 1rem;\n+  margin-right: 1rem;\n+  border-radius: 3px !important;\n+\n+  // When remotely updated since you last looked, mark the review as yellow\n+  &.is-updated { background-color: #fcfcd9; }\n+\n+  .review-title {\n+    display: block;\n+    // it's a link\n+    color: black;\n+    font-weight: normal;\n+    text-decoration: none;\n+\n+    .x-font-and-emoji(1.5rem);\n+    &:hover { text-decoration: none; }\n+  }\n+\n+  .list-group-item-text {\n+    // background-color: white;","author":{"login":"blazeu","avatarUrl":"https://avatars0.githubusercontent.com/u/1438859?v=4","name":"Surya Widi"},"reactions":[],"createdAt":"2018-06-24T07:34:54Z","lastEditedAt":null,"updatedAt":"2018-06-24T07:34:54Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NzYzMDk2Ng==","url":"https://github.com/coala/gh-board/pull/65#discussion_r197630966","bodyText":"Blank lines are really messy here.","diffHunk":"@@ -0,0 +1,105 @@\n+.review {\n+  cursor: default;\n+  padding-top: 0;\n+  padding-right: 0;\n+  padding-bottom: 0;\n+  padding-left: 0;\n+\n+  margin-top: 1rem;\n+  margin-left: 1rem;\n+  margin-right: 1rem;\n+  border-radius: 3px !important;\n+\n+  // When remotely updated since you last looked, mark the review as yellow\n+  &.is-updated { background-color: #fcfcd9; }\n+\n+  .review-title {\n+    display: block;\n+    // it's a link\n+    color: black;\n+    font-weight: normal;\n+    text-decoration: none;\n+\n+    .x-font-and-emoji(1.5rem);\n+    &:hover { text-decoration: none; }\n+  }\n+\n+  .list-group-item-text {\n+    // background-color: white;\n+    padding-left: 1rem;\n+    padding-right: 1rem;\n+    padding-bottom: 1rem;\n+\n+    font-size: 2rem;\n+\n+    .review-footer {\n+      display: block;\n+      min-height: 2rem;\n+      .comment-reactions {\n+        display: block;\n+        float: left;\n+        font-size: 1.4rem;\n+        white-space: nowrap;\n+        overflow-x: hidden;\n+      }\n+\n+      .review-time-and-user {\n+        display: block;\n+        float: right;\n+\n+        time.updated-at {\n+          font-size: 1.2rem;\n+          color: #999;\n+          padding-right: 1rem;\n+          display: inline-block;\n+          white-space: nowrap;\n+          vertical-align: middle;\n+          max-width: 9rem;\n+          overflow-x: hidden;\n+          text-overflow: ellipsis;\n+        }\n+\n+        .avatar-image { cursor: pointer; }\n+      }\n+    }\n+\n+  }\n+\n+\n+  // Elements that can occur anywhere in an issue\n+\n+  /* When a Pull Request is not mergeable then make the background a light gray with slashes */\n+  /* Default merge conflict color when no CI status */\n+  &.is-pull-request {\n+    // &:not(.is-mergeable) .list-group-item-heading .issue-blurb .blurb-icon { .x-stripes(#ccc; .8); }\n+    &.is-merge-conflict:not(.is-updated) { .x-stripes(#fcfcfc; .9); }\n+    &.is-merge-conflict.is-updated       { .x-stripes(#fcfcd9; .9); }\n+    &.is-merge-conflict.is-pull-request-to-different-branch { .x-stripes(#e9e9fc; .9); }\n+  }\n+\n+} /* End Issue */\n+\n+.related-issues {\n+  background-color: #e6e6e6;\n+  margin-top: 0;\n+  margin-left: 1rem;\n+  margin-right: 1rem;\n+  margin-bottom: 1rem;\n+  border-bottom-left-radius: 5px;\n+  border-bottom-right-radius: 5px;\n+\n+  padding-left: 1rem;\n+\n+  box-shadow: inset 0 2px 7px -5px #333;\n+\n+  .related-issue {\n+\n+    overflow: hidden;\n+    white-space: nowrap;\n+    // max-width: 100%;\n+    text-overflow: ellipsis;\n+\n+    .colored-icon { opacity: .5; }\n+","author":{"login":"blazeu","avatarUrl":"https://avatars0.githubusercontent.com/u/1438859?v=4","name":"Surya Widi"},"reactions":[],"createdAt":"2018-06-24T07:35:56Z","lastEditedAt":null,"updatedAt":"2018-06-24T07:35:56Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NzYzMDk4MQ==","url":"https://github.com/coala/gh-board/pull/65#discussion_r197630981","bodyText":"Hmm, what is _ ?\nLooks like lodash but the import isn't there\nEdit: it's underscore (library), weird.\nI wonder what causes the original author to use underscore, it's a fact that it's faster than native Array function, but for small collection it's unecessary and adds bloats, even for large operation sometimes it isn't worth it to trade small perf gain for bundle size.\nAlso, you aren't using it in other components, since it's already in the bundle, might as well use it, even for other operation such as flattening array.","diffHunk":"@@ -68,6 +70,26 @@ function KanbanColumn(props) {\n   }\n }\n \n+function ReviewColumn(props) {\n+  const {reviews} = props;\n+\n+  const reviewComponents = _.map(reviews, (review) => {","author":{"login":"blazeu","avatarUrl":"https://avatars0.githubusercontent.com/u/1438859?v=4","name":"Surya Widi"},"reactions":[],"createdAt":"2018-06-24T07:36:44Z","lastEditedAt":"2018-06-24T07:43:29Z","updatedAt":"2018-06-24T07:43:29Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NzYzMTU3OQ==","url":"https://github.com/coala/gh-board/pull/65#discussion_r197631579","bodyText":"in the future, I would love to see this turns into infinite list (automatically add more on scroll), since it doesn't load from the network anyway.\nAlso in the future, look at scrolling performance problem, it shouldn't happen now, but it might happen because there's thousands of DOM element being rendered (even the element outside the visible browser window).","diffHunk":"@@ -0,0 +1,79 @@\n+import {Component} from 'react';\n+import * as BS from 'react-bootstrap';\n+\n+import ColoredIcon from './colored-icon';\n+\n+const MIN_CHILDREN_TO_SHOW = 10;\n+\n+\n+class ReviewList extends Component {\n+  state = {morePressedCount: 0, showCSVModal: false};\n+\n+  showAllReviews = () => {\n+    this.setState({showAllReviews: true});\n+  };\n+\n+  onClickMore = () => {\n+    this.setState({morePressedCount: this.state.morePressedCount + 1});\n+  };\n+\n+  toggleCSVModal = () => {\n+    const {showCSVModal} = this.state;\n+    this.setState({showCSVModal: !showCSVModal});\n+  };\n+\n+  render() {\n+    const {icon, backgroundColor, children} = this.props;\n+    const {isOver} = this.props; // from the collector\n+    const {showAllReviews, morePressedCount} = this.state;\n+    const multiple = 25; // Add 25 results at a time\n+\n+    let className = 'column-title';\n+    if (icon) {\n+      className += ' has-icon';\n+    }\n+\n+    let iconEl;\n+    if (icon) {\n+      iconEl = (\n+        <ColoredIcon className='column-icon' color={backgroundColor}>{icon}</ColoredIcon>\n+      );\n+    }\n+\n+    const header = (\n+      <h2 className={className}>\n+        {iconEl}Meta-reviews in Need ({children.length})\n+      </h2>\n+    );\n+\n+    const classes = {\n+      'issue-list': true,\n+      'is-over': isOver\n+    };\n+\n+    let partialChildren;\n+    let moreButton;\n+    if (!showAllReviews && MIN_CHILDREN_TO_SHOW + (1 + morePressedCount) * multiple < children.length) {\n+      partialChildren = children.slice(0, MIN_CHILDREN_TO_SHOW + morePressedCount * multiple);\n+      moreButton = (\n+        <BS.Button onClick={this.onClickMore} className='list-group-item'>\n+          {children.length - (morePressedCount + 1) * multiple} more...","author":{"login":"blazeu","avatarUrl":"https://avatars0.githubusercontent.com/u/1438859?v=4","name":"Surya Widi"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNTU2NTAxMQ==","createdAt":"2018-06-25T15:18:06Z","content":"HOORAY","user":{"login":"li-boxuan","name":"Boxuan Li"}}],"createdAt":"2018-06-24T08:02:04Z","lastEditedAt":"2018-06-24T08:02:56Z","updatedAt":"2018-06-24T08:02:56Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NzgyMjk1OQ==","url":"https://github.com/coala/gh-board/pull/65#discussion_r197822959","bodyText":"Hmmm, any reason for that? What's the benefit of using map here?","diffHunk":"@@ -77,6 +99,27 @@ class KanbanRepo extends Component {\n   render() {\n     const {columnData, cards, repoInfos} = this.props;\n \n+    // Get review comments out of cards\n+    const reviews = cards.map((card) => {\n+      if (card.issue.pullRequest && card.issue.pullRequest.comments) {\n+        let comments = card.issue.pullRequest.comments;\n+        comments.forEach(comment => {\n+          comment.repoOwner = card.repoOwner;\n+          comment.repoName = card.repoName;\n+          comment.number = card.number;\n+        });\n+        return comments;","author":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4","name":"Boxuan Li"},"reactions":[],"createdAt":"2018-06-25T14:42:55Z","lastEditedAt":null,"updatedAt":"2018-06-25T14:42:55Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5Nzg2NTgxNQ==","url":"https://github.com/coala/gh-board/pull/65#discussion_r197865815","bodyText":"Nevermind, it's inside map, didn't saw that.\nBut this will mutate the prop, it's considered bad practice in React, and IMO a map shouldn't mutate because it's normally for creating a new array. This will not cause problem since we know it's only adding new property that isn't used elsewhere. But, best to stay away from bad practices. Spread syntax (...) is available for cloning objects.","diffHunk":"@@ -77,6 +99,27 @@ class KanbanRepo extends Component {\n   render() {\n     const {columnData, cards, repoInfos} = this.props;\n \n+    // Get review comments out of cards\n+    const reviews = cards.map((card) => {\n+      if (card.issue.pullRequest && card.issue.pullRequest.comments) {\n+        let comments = card.issue.pullRequest.comments;\n+        comments.forEach(comment => {\n+          comment.repoOwner = card.repoOwner;\n+          comment.repoName = card.repoName;\n+          comment.number = card.number;\n+        });\n+        return comments;","author":{"login":"blazeu","avatarUrl":"https://avatars0.githubusercontent.com/u/1438859?v=4","name":"Surya Widi"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNTg0NDkyOQ==","createdAt":"2018-07-01T08:11:09Z","content":"THUMBS_UP","user":{"login":"li-boxuan","name":"Boxuan Li"}}],"createdAt":"2018-06-25T16:49:25Z","lastEditedAt":"2018-06-25T17:07:25Z","updatedAt":"2018-06-25T17:07:25Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5Nzg2NjkyMQ==","url":"https://github.com/coala/gh-board/pull/65#discussion_r197866921","bodyText":"Do it like above component?\nAlso pull repoOwner and repoName only if it isn't too ugly.","diffHunk":"@@ -0,0 +1,32 @@\n+import Database from '../database';\n+import Loadable from './loadable';\n+\n+function ReviewBlurb({card: {url}}) {\n+  const reviewNumber = url.split('/').pop();\n+\n+  return (\n+    <span className='review-blurb'>\n+      <a className='blurb-number-link'\n+        target='_blank'\n+        href={url}\n+        >\n+        <span className='blurb-number'>{reviewNumber}</span>\n+      </a>\n+    </span>\n+  );\n+}\n+\n+function ReviewBlurbShell(props) {\n+  const {card, primaryRepoName, context} = props;","author":{"login":"blazeu","avatarUrl":"https://avatars0.githubusercontent.com/u/1438859?v=4","name":"Surya Widi"},"reactions":[],"createdAt":"2018-06-25T16:53:24Z","lastEditedAt":null,"updatedAt":"2018-06-25T16:53:24Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5ODE3MDQ3NQ==","url":"https://github.com/coala/gh-board/pull/65#discussion_r198170475","bodyText":"pull repoOwner and repoName that doesn't work since card is needed within the function.","diffHunk":"@@ -0,0 +1,32 @@\n+import Database from '../database';\n+import Loadable from './loadable';\n+\n+function ReviewBlurb({card: {url}}) {\n+  const reviewNumber = url.split('/').pop();\n+\n+  return (\n+    <span className='review-blurb'>\n+      <a className='blurb-number-link'\n+        target='_blank'\n+        href={url}\n+        >\n+        <span className='blurb-number'>{reviewNumber}</span>\n+      </a>\n+    </span>\n+  );\n+}\n+\n+function ReviewBlurbShell(props) {\n+  const {card, primaryRepoName, context} = props;","author":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4","name":"Boxuan Li"},"reactions":[],"createdAt":"2018-06-26T14:37:21Z","lastEditedAt":null,"updatedAt":"2018-06-26T14:37:21Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5ODI4MzQ4MA==","url":"https://github.com/coala/gh-board/pull/65#discussion_r198283480","bodyText":"Can you post a SS showing this styling?","diffHunk":"@@ -0,0 +1,92 @@\n+.review {","author":{"login":"hemangsk","avatarUrl":"https://avatars3.githubusercontent.com/u/13018570?v=4","name":"Hemang Kumar"},"reactions":[],"createdAt":"2018-06-26T20:18:59Z","lastEditedAt":null,"updatedAt":"2018-06-26T20:18:59Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5ODQ2NTYwOA==","url":"https://github.com/coala/gh-board/pull/65#discussion_r198465608","bodyText":"Here you go.\nhttps://deploy-preview-65--coala-gh-board.netlify.com/#/r/coala:coala%7Ccoala-bears%7Cdocumentation%7Cprojects%7Cdevops%7Ccorobo%7Ccommunity%7Cgci-leaders%7Cgh-board%7Ccoala-html%7Clanding-frontend%7CcoalaCSS/kanban","diffHunk":"@@ -0,0 +1,92 @@\n+.review {","author":{"login":"blazeu","avatarUrl":"https://avatars0.githubusercontent.com/u/1438859?v=4","name":"Surya Widi"},"reactions":[],"createdAt":"2018-06-27T11:55:29Z","lastEditedAt":null,"updatedAt":"2018-06-27T11:55:29Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5ODQ2NTkyMg==","url":"https://github.com/coala/gh-board/pull/65#discussion_r198465922","bodyText":"We need to fix #3 so people don't get confused.","diffHunk":"@@ -0,0 +1,92 @@\n+.review {","author":{"login":"blazeu","avatarUrl":"https://avatars0.githubusercontent.com/u/1438859?v=4","name":"Surya Widi"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNTY4NDI1Ng==","createdAt":"2018-06-27T14:12:13Z","content":"HOORAY","user":{"login":"li-boxuan","name":"Boxuan Li"}}],"createdAt":"2018-06-27T11:56:43Z","lastEditedAt":null,"updatedAt":"2018-06-27T11:56:43Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5ODUyMjY4OQ==","url":"https://github.com/coala/gh-board/pull/65#discussion_r198522689","bodyText":"","diffHunk":"@@ -0,0 +1,92 @@\n+.review {","author":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4","name":"Boxuan Li"},"reactions":[],"createdAt":"2018-06-27T14:45:27Z","lastEditedAt":null,"updatedAt":"2018-06-27T14:45:27Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMjAzNjY4Mw==","url":"https://github.com/coala/gh-board/pull/65#discussion_r202036683","bodyText":"padding: 0","diffHunk":"@@ -0,0 +1,92 @@\n+.review {\n+  cursor: default;\n+  padding-top: 0;\n+  padding-right: 0;\n+  padding-bottom: 0;\n+  padding-left: 0;","author":{"login":"blazeu","avatarUrl":"https://avatars0.githubusercontent.com/u/1438859?v=4","name":"Surya Widi"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNjM2NzMxNg==","createdAt":"2018-07-12T13:41:02Z","content":"THUMBS_UP","user":{"login":"li-boxuan","name":"Boxuan Li"}}],"createdAt":"2018-07-12T13:37:29Z","lastEditedAt":null,"updatedAt":"2018-07-12T13:37:29Z"},{"id":"MDEyOklzc3VlQ29tbWVudDM5OTY4MzU3MA==","url":"https://github.com/coala/gh-board/pull/65#issuecomment-399683570","bodyText":"A few side notes:\n\n\nReview context (diff hunk) functionality will be added later after this pr is approved/merged.\n\n\nTo beautify the UI is left for coding phase 3.\n\n\nFor now, all comments are displayed, no matter whether they have been meta-reviewed. In the future (coding phase 3), there will be a filter where viewers can specify meta-reviews they want to see. For example, a) whether the review has been meta-reviewed b) whether the review is created by the viewer c) whether the pull request is created by the viewer, etc.\n\n\nCurrently only reviews pre-fetched in recent-issues.json are loaded. Later in coding phase 2, this would be solved (review sync functionality will be added). This has been done after sync functionality is added.","diffHunk":null,"author":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4","name":"Boxuan Li"},"reactions":[],"createdAt":"2018-06-23T14:43:56Z","lastEditedAt":"2018-07-08T01:43:09Z","updatedAt":"2018-07-08T01:43:09Z"}]}}},{"repoOwner":"coala","repoName":"gh-board","updatedAtMs":1532787643000,"issue":{"htmlUrl":"https://github.com/coala/gh-board/pull/67","number":67,"title":"Setup GraphQL client","body":"Related to #26","comments":16,"createdAt":"2018-06-30T06:55:57Z","updatedAt":"2018-07-28T14:20:43Z","closedAt":"2018-07-28T14:19:55Z","state":"merged","user":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4"},"owner":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4"},"assignee":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4"},"labels":[{"name":"process/approved","color":"ededed"},{"name":"size/L","color":"ededed"}],"pullRequest":{"htmlUrl":"https://github.com/coala/gh-board/pull/67","comments":[{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTMyNTEwMw==","url":"https://github.com/coala/gh-board/pull/67#discussion_r199325103","bodyText":"space before & after equal","diffHunk":"@@ -0,0 +1,612 @@\n+import moment from 'moment';\n+import GraphQL from 'graphql-client';\n+\n+import {\n+  GITHUB_ISSUE_INFO_QUERY,\n+  GITHUB_PR_INFO_QUERY,\n+  GITHUB_LABEL_INFO_QUERY,\n+  GITHUB_REACTION_INFO_QUERY\n+} from '../script/queries';\n+\n+function getTime(timeString) {\n+  // parse timezone-aware time in string format to number\n+  // e.g. '2017-01-01T00:00:00Z' becomes 1483228800000\n+  // null means the earliest date\n+  if (timeString) {\n+    return moment(timeString).toDate().getTime();\n+  } else {\n+    return 0;\n+  }\n+}\n+\n+function sleep(s) {\n+  return new Promise(resolve => setTimeout(resolve, s * 1000));\n+}\n+\n+// A wrapper for GraphQL client that supports chainable methods.\n+// Concurrency is NOT supported.\n+// sample usages:\n+// 1. fetchAllIssues = await Client.getGraphQLClient()\n+//      .repo(repoOwner, repoName)\n+//      .issues({sort: 'UPDATED_AT'}).\n+//      .fetchAll({per_page: 100});\n+// 2. fetchAllReactions = await Client.getGraphQLClient()\n+//      .repo(repoOwner, repoName)\n+//      .reactions({pr_number, per_review: 20})\n+//      .fetchOne({per_page: 100});\n+\n+class GraphQLClientBase {\n+  constructor(token, debug=false, sleepTime=3, warningThreshold=15) {","author":{"login":"blazeu","avatarUrl":"https://avatars0.githubusercontent.com/u/1438859?v=4","name":"Surya Widi"},"reactions":[],"createdAt":"2018-06-30T15:24:31Z","lastEditedAt":null,"updatedAt":"2018-06-30T15:24:31Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTMyNTE4NQ==","url":"https://github.com/coala/gh-board/pull/67#discussion_r199325185","bodyText":"Also, probably use NODE_ENV === 'development' for debug value instead.","diffHunk":"@@ -0,0 +1,612 @@\n+import moment from 'moment';\n+import GraphQL from 'graphql-client';\n+\n+import {\n+  GITHUB_ISSUE_INFO_QUERY,\n+  GITHUB_PR_INFO_QUERY,\n+  GITHUB_LABEL_INFO_QUERY,\n+  GITHUB_REACTION_INFO_QUERY\n+} from '../script/queries';\n+\n+function getTime(timeString) {\n+  // parse timezone-aware time in string format to number\n+  // e.g. '2017-01-01T00:00:00Z' becomes 1483228800000\n+  // null means the earliest date\n+  if (timeString) {\n+    return moment(timeString).toDate().getTime();\n+  } else {\n+    return 0;\n+  }\n+}\n+\n+function sleep(s) {\n+  return new Promise(resolve => setTimeout(resolve, s * 1000));\n+}\n+\n+// A wrapper for GraphQL client that supports chainable methods.\n+// Concurrency is NOT supported.\n+// sample usages:\n+// 1. fetchAllIssues = await Client.getGraphQLClient()\n+//      .repo(repoOwner, repoName)\n+//      .issues({sort: 'UPDATED_AT'}).\n+//      .fetchAll({per_page: 100});\n+// 2. fetchAllReactions = await Client.getGraphQLClient()\n+//      .repo(repoOwner, repoName)\n+//      .reactions({pr_number, per_review: 20})\n+//      .fetchOne({per_page: 100});\n+\n+class GraphQLClientBase {\n+  constructor(token, debug=false, sleepTime=3, warningThreshold=15) {","author":{"login":"blazeu","avatarUrl":"https://avatars0.githubusercontent.com/u/1438859?v=4","name":"Surya Widi"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNTg1NzA1OQ==","createdAt":"2018-07-02T02:09:21Z","content":"THUMBS_UP","user":{"login":"li-boxuan","name":"Boxuan Li"}}],"createdAt":"2018-06-30T15:27:54Z","lastEditedAt":null,"updatedAt":"2018-06-30T15:27:54Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTMyNTI2NA==","url":"https://github.com/coala/gh-board/pull/67#discussion_r199325264","bodyText":"async _fetchReactions() didn't work?","diffHunk":"@@ -0,0 +1,612 @@\n+import moment from 'moment';\n+import GraphQL from 'graphql-client';\n+\n+import {\n+  GITHUB_ISSUE_INFO_QUERY,\n+  GITHUB_PR_INFO_QUERY,\n+  GITHUB_LABEL_INFO_QUERY,\n+  GITHUB_REACTION_INFO_QUERY\n+} from '../script/queries';\n+\n+function getTime(timeString) {\n+  // parse timezone-aware time in string format to number\n+  // e.g. '2017-01-01T00:00:00Z' becomes 1483228800000\n+  // null means the earliest date\n+  if (timeString) {\n+    return moment(timeString).toDate().getTime();\n+  } else {\n+    return 0;\n+  }\n+}\n+\n+function sleep(s) {\n+  return new Promise(resolve => setTimeout(resolve, s * 1000));\n+}\n+\n+// A wrapper for GraphQL client that supports chainable methods.\n+// Concurrency is NOT supported.\n+// sample usages:\n+// 1. fetchAllIssues = await Client.getGraphQLClient()\n+//      .repo(repoOwner, repoName)\n+//      .issues({sort: 'UPDATED_AT'}).\n+//      .fetchAll({per_page: 100});\n+// 2. fetchAllReactions = await Client.getGraphQLClient()\n+//      .repo(repoOwner, repoName)\n+//      .reactions({pr_number, per_review: 20})\n+//      .fetchOne({per_page: 100});\n+\n+class GraphQLClientBase {\n+  constructor(token, debug=false, sleepTime=3, warningThreshold=15) {\n+    this.token = token;\n+    this.GH_GQL_BASE = 'https://api.github.com/graphql';\n+    this.GH_GQL_OPTIONS = {\n+      url: this.GH_GQL_BASE,\n+      headers: token\n+        ? { Authorization: `bearer ${token}` }\n+        : {}\n+    };\n+    this.client = GraphQL(this.GH_GQL_OPTIONS);\n+\n+    // debug mode\n+    this.debug = debug;\n+\n+    // sleep time (sec) before timeout retry\n+    this.sleepTime = sleepTime;\n+\n+    // maximum number of warnings before stop fetching\n+    this.warningThreshold = warningThreshold;\n+\n+  }\n+\n+  repo(repoOwner, repoName) {\n+    this.repoOwner = repoOwner;\n+    this.repoName = repoName;\n+    if (this.debug) {\n+      console.log('repoOwner set:', repoOwner, 'repoName set:', repoName);\n+    }\n+    return this;\n+  }\n+\n+  // First type of queries: ISSUES\n+  issues(config) {\n+    const { sort, direction, earliestDate } = config || {};\n+    // There are three types of order\n+    // https://developer.github.com/v4/enum/issueorderfield/\n+    // COMMENTS, CREATED_AT (default), and UPDATED_AT\n+    this.orderBy = {\n+      field: sort || 'CREATED_AT',\n+      direction: direction || 'ASC'\n+    };\n+    this._fetch = this._fetchIssues;\n+    this.earliestDate = earliestDate;\n+    return this;\n+  }\n+\n+  // Second type of queries: PULLREQUESTS\n+  pullRequests(config) {\n+    const { sort, direction, earliestDate,\n+      ignoreAuthor, ignoreContent } = config || {};\n+    // order of pull requests and issues follow the same rule\n+    // see comment within `issues` method\n+    this.orderBy = {\n+      field: sort || 'CREATED_AT',\n+      direction: direction || 'ASC'\n+    };\n+    this._fetch = this._fetchPullRequests;\n+    this.earliestDate = earliestDate;\n+\n+    // review will be ignored if it matches any string specified here\n+    // it can be a literal or a regular expression\n+    // delimiter: space\n+    if (ignoreAuthor || ignoreAuthor === '') {\n+      this.ignoreAuthor = ignoreAuthor;\n+    } else {\n+      // default value\n+      this.ignoreAuthor = 'gitmate-bot rultor';\n+    }\n+\n+    // review will be ignored if it's written by any author specified here\n+    // delimiter: space\n+    if (ignoreContent || ignoreContent === '') {\n+      this.ignoreContent = ignoreContent;\n+    } else {\n+      // default value\n+      this.ignoreContent = '@gitmate-bot @rultor /^(unack|ack)/g';\n+    }\n+\n+    return this;\n+  }\n+\n+  // Third type of queries: LABELS\n+  labels() {\n+    this._fetch = this._fetchLabels;\n+    return this;\n+  }\n+\n+  // Fourth type of queries: REACTIONS\n+  reactions(config) {\n+    const { pr_number, reviews_count,\n+      comments_count, discussions_per_review } = config || {};\n+    this._fetch = this._fetchReactions;\n+    this.prNumber = pr_number;\n+    // number of comments to fetch per pull request\n+    this.reviewsCount = reviews_count || 20;\n+    // number of discussions to fetch per review\n+    this.discussionsPerReview = discussions_per_review || 10;\n+    // number of comments to fetch per pull request\n+    this.commentsCount = comments_count || 20;\n+    return this;\n+  }\n+\n+  async fetchAll(config) {\n+    const { per_page } = config || {};\n+    this.perPage = per_page || 100;\n+    this.cursor = null;\n+    this.pageCount = 0;\n+    this.fetchedData = null;\n+\n+    if (this._fetch === this._fetchLabels\n+      || this._fetch === this._fetchReactions) {\n+      console.log('warning: only ISSUES and PULL REQUESTS have `fetchAll` method.',\n+        'Will call `fetchOne()` instead.');\n+      return await this.fetchOne(config);\n+    }\n+\n+    // fetch data with pagination\n+    this.pagination = true;\n+    while (this.pagination) {\n+      // clear warning count before every fresh fetch\n+      this.warningCount = 0;\n+      await this._fetch(this.cursor);\n+    }\n+    if (this.debug) {\n+      console.log('owner:', this.repoOwner, 'name:', this.repoName,\n+        'pagination:', this.pagination, 'page count:',\n+        this.pageCount, 'fetching ends.');\n+    }\n+    return this.fetchedData;\n+  }\n+\n+  async fetchOne(config) {\n+    const { per_page } = config || {};\n+    this.perPage = per_page || 100;\n+    this.cursor = null;\n+    this.pageCount = 0;\n+    this.warningCount = 0;\n+    this.fetchedData = null;\n+    // fetch data without pagination\n+    await this._fetch();\n+    return this.fetchedData;\n+  }\n+\n+  _fetchReactions = async () => {","author":{"login":"blazeu","avatarUrl":"https://avatars0.githubusercontent.com/u/1438859?v=4","name":"Surya Widi"},"reactions":[],"createdAt":"2018-06-30T15:31:08Z","lastEditedAt":null,"updatedAt":"2018-06-30T15:31:08Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTMyNTcxMA==","url":"https://github.com/coala/gh-board/pull/67#discussion_r199325710","bodyText":"node.diffHunk || null","diffHunk":"@@ -0,0 +1,612 @@\n+import moment from 'moment';\n+import GraphQL from 'graphql-client';\n+\n+import {\n+  GITHUB_ISSUE_INFO_QUERY,\n+  GITHUB_PR_INFO_QUERY,\n+  GITHUB_LABEL_INFO_QUERY,\n+  GITHUB_REACTION_INFO_QUERY\n+} from '../script/queries';\n+\n+function getTime(timeString) {\n+  // parse timezone-aware time in string format to number\n+  // e.g. '2017-01-01T00:00:00Z' becomes 1483228800000\n+  // null means the earliest date\n+  if (timeString) {\n+    return moment(timeString).toDate().getTime();\n+  } else {\n+    return 0;\n+  }\n+}\n+\n+function sleep(s) {\n+  return new Promise(resolve => setTimeout(resolve, s * 1000));\n+}\n+\n+// A wrapper for GraphQL client that supports chainable methods.\n+// Concurrency is NOT supported.\n+// sample usages:\n+// 1. fetchAllIssues = await Client.getGraphQLClient()\n+//      .repo(repoOwner, repoName)\n+//      .issues({sort: 'UPDATED_AT'}).\n+//      .fetchAll({per_page: 100});\n+// 2. fetchAllReactions = await Client.getGraphQLClient()\n+//      .repo(repoOwner, repoName)\n+//      .reactions({pr_number, per_review: 20})\n+//      .fetchOne({per_page: 100});\n+\n+class GraphQLClientBase {\n+  constructor(token, debug=false, sleepTime=3, warningThreshold=15) {\n+    this.token = token;\n+    this.GH_GQL_BASE = 'https://api.github.com/graphql';\n+    this.GH_GQL_OPTIONS = {\n+      url: this.GH_GQL_BASE,\n+      headers: token\n+        ? { Authorization: `bearer ${token}` }\n+        : {}\n+    };\n+    this.client = GraphQL(this.GH_GQL_OPTIONS);\n+\n+    // debug mode\n+    this.debug = debug;\n+\n+    // sleep time (sec) before timeout retry\n+    this.sleepTime = sleepTime;\n+\n+    // maximum number of warnings before stop fetching\n+    this.warningThreshold = warningThreshold;\n+\n+  }\n+\n+  repo(repoOwner, repoName) {\n+    this.repoOwner = repoOwner;\n+    this.repoName = repoName;\n+    if (this.debug) {\n+      console.log('repoOwner set:', repoOwner, 'repoName set:', repoName);\n+    }\n+    return this;\n+  }\n+\n+  // First type of queries: ISSUES\n+  issues(config) {\n+    const { sort, direction, earliestDate } = config || {};\n+    // There are three types of order\n+    // https://developer.github.com/v4/enum/issueorderfield/\n+    // COMMENTS, CREATED_AT (default), and UPDATED_AT\n+    this.orderBy = {\n+      field: sort || 'CREATED_AT',\n+      direction: direction || 'ASC'\n+    };\n+    this._fetch = this._fetchIssues;\n+    this.earliestDate = earliestDate;\n+    return this;\n+  }\n+\n+  // Second type of queries: PULLREQUESTS\n+  pullRequests(config) {\n+    const { sort, direction, earliestDate,\n+      ignoreAuthor, ignoreContent } = config || {};\n+    // order of pull requests and issues follow the same rule\n+    // see comment within `issues` method\n+    this.orderBy = {\n+      field: sort || 'CREATED_AT',\n+      direction: direction || 'ASC'\n+    };\n+    this._fetch = this._fetchPullRequests;\n+    this.earliestDate = earliestDate;\n+\n+    // review will be ignored if it matches any string specified here\n+    // it can be a literal or a regular expression\n+    // delimiter: space\n+    if (ignoreAuthor || ignoreAuthor === '') {\n+      this.ignoreAuthor = ignoreAuthor;\n+    } else {\n+      // default value\n+      this.ignoreAuthor = 'gitmate-bot rultor';\n+    }\n+\n+    // review will be ignored if it's written by any author specified here\n+    // delimiter: space\n+    if (ignoreContent || ignoreContent === '') {\n+      this.ignoreContent = ignoreContent;\n+    } else {\n+      // default value\n+      this.ignoreContent = '@gitmate-bot @rultor /^(unack|ack)/g';\n+    }\n+\n+    return this;\n+  }\n+\n+  // Third type of queries: LABELS\n+  labels() {\n+    this._fetch = this._fetchLabels;\n+    return this;\n+  }\n+\n+  // Fourth type of queries: REACTIONS\n+  reactions(config) {\n+    const { pr_number, reviews_count,\n+      comments_count, discussions_per_review } = config || {};\n+    this._fetch = this._fetchReactions;\n+    this.prNumber = pr_number;\n+    // number of comments to fetch per pull request\n+    this.reviewsCount = reviews_count || 20;\n+    // number of discussions to fetch per review\n+    this.discussionsPerReview = discussions_per_review || 10;\n+    // number of comments to fetch per pull request\n+    this.commentsCount = comments_count || 20;\n+    return this;\n+  }\n+\n+  async fetchAll(config) {\n+    const { per_page } = config || {};\n+    this.perPage = per_page || 100;\n+    this.cursor = null;\n+    this.pageCount = 0;\n+    this.fetchedData = null;\n+\n+    if (this._fetch === this._fetchLabels\n+      || this._fetch === this._fetchReactions) {\n+      console.log('warning: only ISSUES and PULL REQUESTS have `fetchAll` method.',\n+        'Will call `fetchOne()` instead.');\n+      return await this.fetchOne(config);\n+    }\n+\n+    // fetch data with pagination\n+    this.pagination = true;\n+    while (this.pagination) {\n+      // clear warning count before every fresh fetch\n+      this.warningCount = 0;\n+      await this._fetch(this.cursor);\n+    }\n+    if (this.debug) {\n+      console.log('owner:', this.repoOwner, 'name:', this.repoName,\n+        'pagination:', this.pagination, 'page count:',\n+        this.pageCount, 'fetching ends.');\n+    }\n+    return this.fetchedData;\n+  }\n+\n+  async fetchOne(config) {\n+    const { per_page } = config || {};\n+    this.perPage = per_page || 100;\n+    this.cursor = null;\n+    this.pageCount = 0;\n+    this.warningCount = 0;\n+    this.fetchedData = null;\n+    // fetch data without pagination\n+    await this._fetch();\n+    return this.fetchedData;\n+  }\n+\n+  _fetchReactions = async () => {\n+    const owner = this.repoOwner;\n+    const name = this.repoName;\n+    const number = this.prNumber;\n+    const reviewsCount = this.reviewsCount ? this.reviewsCount : this.perPage;\n+    const commentsCount = this.commentsCount ? this.commentsCount : this.perPage;\n+    const discussionsPerReview = this.discussionsPerReview;\n+\n+    if (this.debug) {\n+      console.log('\\nfetch reactions, owner:', owner, 'name:', name,\n+        'pull request number', number);\n+    }\n+\n+    let data, errors;\n+    try {\n+      ({ data, errors } = await this.client.query(\n+        GITHUB_REACTION_INFO_QUERY,\n+        {owner, name, number, reviewsCount, discussionsPerReview, commentsCount}\n+      ));\n+    } catch (error) {\n+      console.log('fetch reactions of pr failed',\n+        'owner:', owner, 'name:', name, 'pull request number:', number,\n+        'reviewsCount:', reviewsCount, 'discussionsPerReview', discussionsPerReview,\n+        'commentsCount', commentsCount, 'error:', error);\n+    }\n+\n+    let rawComments;\n+    if (data) {\n+      // update rate limit\n+      this._updateRateLimit(data.rateLimit);\n+      // collect review comments\n+      rawComments = data.repository.pullRequest.reviews.nodes.map(\n+        node => node.comments.nodes);\n+      rawComments = [].concat.apply([], rawComments);\n+      // collect issue comments\n+      rawComments = rawComments.concat(\n+        data.repository.pullRequest.comments.nodes);\n+    } else {\n+      this.warningCount++;\n+      console.log('warning: no available reaction data!',\n+        'owner:', owner, 'name:', name, 'pull request number:', number,\n+        'error:', errors);\n+      return await this._handleWarning(this._fetchReactions);\n+    }\n+    // reactions are wrapped by corresponding comment\n+    this.fetchedData = rawComments;\n+  }\n+\n+  _fetchLabels = async () => {\n+    const owner = this.repoOwner;\n+    const name = this.repoName;\n+\n+    if (this.debug) {\n+      console.log('\\nfetch labels, owner:', owner, 'name:', name);\n+    }\n+\n+    let data, errors;\n+    try {\n+      ({ data, errors } = await this.client.query(\n+        GITHUB_LABEL_INFO_QUERY,\n+        {owner, name}\n+      ));\n+    } catch (error) {\n+      console.log('fetch labels failed',\n+        'owner:', owner, 'name:', name, 'error:', error);\n+    }\n+\n+    if (data && data.repository) {\n+      // update rate limit\n+      this._updateRateLimit(data.rateLimit);\n+\n+      const result = data.repository.labels.nodes.map(node => ({\n+        id: node.id,\n+        name: node.name,\n+        color: node.color,\n+        default: node.isDefault,\n+      }));\n+      this.fetchedData = {\n+        repoOwner: owner,\n+        repoName: name,\n+        labels: result\n+      };\n+    } else {\n+      this.warningCount++;\n+      console.log('warning: no available label data!',\n+        'owner:', owner, 'name:', name, 'error:', errors);\n+      return await this._handleWarning(this._fetchLabels);\n+    }\n+  }\n+\n+  _fetchIssues = async () => {\n+    const owner = this.repoOwner;\n+    const name = this.repoName;\n+    const perPage = this._slowStart();\n+    const cursor = this.cursor;\n+    const orderBy = this.orderBy;\n+    const pageCount = this.pageCount;\n+    const earliestDate = this.earliestDate;\n+\n+    if (this.debug) {\n+      console.log('\\nfetch issues, owner:', owner, 'name:', name,\n+        'cursor:', cursor, 'page count:', pageCount);\n+    }\n+\n+    let data, errors, hasPreviousPage = false, reachDateThreshold = false;\n+    try {\n+      ({ data, errors } = await this.client.query(\n+        GITHUB_ISSUE_INFO_QUERY,\n+        {owner, name, perPage, before: cursor, orderBy}\n+      ));\n+    } catch (error) {\n+      console.log('fetch issue fails, owner:', owner, 'name:', name,\n+        'cursor:', cursor, 'error:', error);\n+    }\n+    if (data && data.repository) {\n+      // update rate limit\n+      this._updateRateLimit(data.rateLimit);\n+\n+      this.pageCount++;\n+      const { nodes, pageInfo } = data.repository.issues;\n+      this.cursor = pageInfo.startCursor;\n+      hasPreviousPage = pageInfo.hasPreviousPage;\n+      const result = nodes.map(node => {\n+        if (getTime(node.updatedAt) < getTime(earliestDate)) {\n+          reachDateThreshold = true;\n+          return null;\n+        }\n+        return this._mapNodeToIssue(node);\n+      }).filter((node) => node);\n+\n+      // store fetched data within this page\n+      if (!this.fetchedData) {\n+        this.fetchedData = [];\n+      }\n+\n+      // if result === [null], skip it\n+      if (result && result.length && result[0]) {\n+        this.fetchedData = this.fetchedData.concat(result);\n+      }\n+\n+      if (!hasPreviousPage || reachDateThreshold) {\n+        // set pagination false to prevent further fetching\n+        this.pagination = false;\n+      }\n+    } else {\n+      this.warningCount += 1;\n+      console.log('Warning: no available data for issues. owner:', owner,\n+        'name:', name, 'pageCount:', pageCount, 'error message:', errors);\n+      return await this._handleWarning(this._fetchIssues);\n+    }\n+  }\n+\n+  _fetchPullRequests = async () => {\n+    const owner = this.repoOwner;\n+    const name = this.repoName;\n+    const perPage = this._slowStart();\n+    const cursor = this.cursor;\n+    const orderBy = this.orderBy;\n+    const pageCount = this.pageCount;\n+    const earliestDate = this.earliestDate;\n+\n+    if (this.debug) {\n+      console.log('\\nfetch pull requests, owner:', owner, 'name:', name,\n+        'cursor:', cursor, 'page count:', pageCount);\n+    }\n+\n+    let data, errors, hasPreviousPage = false, reachDateThreshold = false;\n+    try {\n+      ({ data, errors } = await this.client.query(\n+        GITHUB_PR_INFO_QUERY,\n+        {owner, name, perPage, before: cursor, orderBy}\n+      ));\n+    } catch (error) {\n+      console.log('fetch pull request fails, owner:', owner, 'name:', name,\n+        'cursor:', cursor, 'error:', error);\n+    }\n+    if (data && data.repository) {\n+      // update rate limit\n+      this._updateRateLimit(data.rateLimit);\n+\n+      this.pageCount++;\n+      const { nodes, pageInfo } = data.repository.pullRequests;\n+      this.cursor = pageInfo.startCursor;\n+      hasPreviousPage = pageInfo.hasPreviousPage;\n+      const result = await Promise.all(nodes.map(async node => {\n+        if (getTime(node.updatedAt) < getTime(earliestDate)) {\n+          reachDateThreshold = true;\n+          return null;\n+        }\n+        let info = this._mapNodeToIssue(node);\n+\n+        let rawComments, comments;\n+        // collect review comments\n+        rawComments = node.reviews.nodes.map(node => node.comments.nodes);\n+        rawComments = [].concat.apply([], rawComments);\n+        // collect issue comments\n+        rawComments = rawComments.concat(node.comments.nodes);\n+\n+        // fetch reactions only if there are reactions within that PR\n+        // to reduce API hits.\n+        // trick: a comment has received reaction(s) iff\n+        // reactionGroup.createdAt attribute is not null\n+        const hasReactions = rawComments.reduce((has, rawComment) => {\n+          return has || rawComment.reactionGroups.reduce((flag, node) => {\n+            return (flag || node.createdAt) ? true : false;\n+          }, false);\n+        }, false);\n+\n+        if (hasReactions) {\n+          if (this.debug) {\n+            console.log('pull request has reactions. repoOwner:', owner,\n+              'repoName:', name, 'pullRequest number:', node.number);\n+          }\n+          const number = node.number;\n+          const reviewsCount = Math.min(node.reviews.totalCount, 20);\n+          // max number of discussions within a review\n+          const discussionsPerReview = Math.min(\n+            node.reviews.nodes.reduce(\n+              (max, review) => Math.max(max, review.comments.totalCount), 0),\n+            100);\n+          const commentsCount = Math.min(node.comments.totalCount, 100);\n+\n+          const commentsWithReactions = await new GraphQLClientBase(this.token,\n+            this.debug, this.sleepTime, 3)\n+            .repo(this.repoOwner, this.repoName)\n+            .reactions({pr_number: number,\n+              reviews_count: reviewsCount,\n+              discussions_per_review: discussionsPerReview,\n+              comments_count: commentsCount})\n+            .fetchOne();\n+\n+          // merge rawComments with commentsWithReactions\n+          if (commentsWithReactions && commentsWithReactions.length) {\n+            rawComments.forEach((comment, index) => {\n+              if (comment.id !== commentsWithReactions[index].id) {\n+                console.log('warning: comments and reactions do not fit!',\n+                  'pr number:', number, 'comment.id:', comment.id,\n+                  'comment with reactions id:', commentsWithReactions[index].id);\n+              } else {\n+                comment.reactions = commentsWithReactions[index].reactions;\n+              }\n+            });\n+          }\n+        }\n+        // filter out useless reviews\n+        rawComments = rawComments.filter(node => {\n+          let flag = true;\n+          // filter comments that don't need meta-reviews\n+          for (const ignoreContent of this.ignoreContent.split(' ')) {\n+            if (node.bodyText.match(ignoreContent)) {\n+              // filter reviews with specific content\n+              flag = false;\n+            }\n+          }\n+          for (const ignoreAuthor of this.ignoreAuthor.split(' ')) {\n+            if (node.author && node.author.login === ignoreAuthor) {\n+              // filter reviews done by specific authors\n+              flag = false;\n+            }\n+          }\n+          return flag;\n+        });\n+\n+        comments = rawComments.map(node => {\n+          let commentAuthor, reactions;\n+\n+          if (node.author) {\n+            commentAuthor = {\n+              login: node.author.login,\n+              avatarUrl: node.author.avatarUrl,\n+              name: node.author.name\n+            };\n+          } else {\n+            commentAuthor = {\n+              login: null,\n+              avatarUrl: null\n+            };\n+          }\n+\n+          if (node.reactions) reactions = node.reactions.nodes;\n+\n+          return {\n+            id: node.id,\n+            url: node.url,\n+            bodyText: node.bodyText,\n+            diffHunk: node.diffHunk ? node.diffHunk : null,","author":{"login":"blazeu","avatarUrl":"https://avatars0.githubusercontent.com/u/1438859?v=4","name":"Surya Widi"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNTg1NzA3MQ==","createdAt":"2018-07-02T02:10:13Z","content":"THUMBS_UP","user":{"login":"li-boxuan","name":"Boxuan Li"}}],"createdAt":"2018-06-30T15:53:12Z","lastEditedAt":null,"updatedAt":"2018-06-30T15:53:12Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTMyNTcyNA==","url":"https://github.com/coala/gh-board/pull/67#discussion_r199325724","bodyText":"node.lastEditedAt || node.createdAt","diffHunk":"@@ -0,0 +1,612 @@\n+import moment from 'moment';\n+import GraphQL from 'graphql-client';\n+\n+import {\n+  GITHUB_ISSUE_INFO_QUERY,\n+  GITHUB_PR_INFO_QUERY,\n+  GITHUB_LABEL_INFO_QUERY,\n+  GITHUB_REACTION_INFO_QUERY\n+} from '../script/queries';\n+\n+function getTime(timeString) {\n+  // parse timezone-aware time in string format to number\n+  // e.g. '2017-01-01T00:00:00Z' becomes 1483228800000\n+  // null means the earliest date\n+  if (timeString) {\n+    return moment(timeString).toDate().getTime();\n+  } else {\n+    return 0;\n+  }\n+}\n+\n+function sleep(s) {\n+  return new Promise(resolve => setTimeout(resolve, s * 1000));\n+}\n+\n+// A wrapper for GraphQL client that supports chainable methods.\n+// Concurrency is NOT supported.\n+// sample usages:\n+// 1. fetchAllIssues = await Client.getGraphQLClient()\n+//      .repo(repoOwner, repoName)\n+//      .issues({sort: 'UPDATED_AT'}).\n+//      .fetchAll({per_page: 100});\n+// 2. fetchAllReactions = await Client.getGraphQLClient()\n+//      .repo(repoOwner, repoName)\n+//      .reactions({pr_number, per_review: 20})\n+//      .fetchOne({per_page: 100});\n+\n+class GraphQLClientBase {\n+  constructor(token, debug=false, sleepTime=3, warningThreshold=15) {\n+    this.token = token;\n+    this.GH_GQL_BASE = 'https://api.github.com/graphql';\n+    this.GH_GQL_OPTIONS = {\n+      url: this.GH_GQL_BASE,\n+      headers: token\n+        ? { Authorization: `bearer ${token}` }\n+        : {}\n+    };\n+    this.client = GraphQL(this.GH_GQL_OPTIONS);\n+\n+    // debug mode\n+    this.debug = debug;\n+\n+    // sleep time (sec) before timeout retry\n+    this.sleepTime = sleepTime;\n+\n+    // maximum number of warnings before stop fetching\n+    this.warningThreshold = warningThreshold;\n+\n+  }\n+\n+  repo(repoOwner, repoName) {\n+    this.repoOwner = repoOwner;\n+    this.repoName = repoName;\n+    if (this.debug) {\n+      console.log('repoOwner set:', repoOwner, 'repoName set:', repoName);\n+    }\n+    return this;\n+  }\n+\n+  // First type of queries: ISSUES\n+  issues(config) {\n+    const { sort, direction, earliestDate } = config || {};\n+    // There are three types of order\n+    // https://developer.github.com/v4/enum/issueorderfield/\n+    // COMMENTS, CREATED_AT (default), and UPDATED_AT\n+    this.orderBy = {\n+      field: sort || 'CREATED_AT',\n+      direction: direction || 'ASC'\n+    };\n+    this._fetch = this._fetchIssues;\n+    this.earliestDate = earliestDate;\n+    return this;\n+  }\n+\n+  // Second type of queries: PULLREQUESTS\n+  pullRequests(config) {\n+    const { sort, direction, earliestDate,\n+      ignoreAuthor, ignoreContent } = config || {};\n+    // order of pull requests and issues follow the same rule\n+    // see comment within `issues` method\n+    this.orderBy = {\n+      field: sort || 'CREATED_AT',\n+      direction: direction || 'ASC'\n+    };\n+    this._fetch = this._fetchPullRequests;\n+    this.earliestDate = earliestDate;\n+\n+    // review will be ignored if it matches any string specified here\n+    // it can be a literal or a regular expression\n+    // delimiter: space\n+    if (ignoreAuthor || ignoreAuthor === '') {\n+      this.ignoreAuthor = ignoreAuthor;\n+    } else {\n+      // default value\n+      this.ignoreAuthor = 'gitmate-bot rultor';\n+    }\n+\n+    // review will be ignored if it's written by any author specified here\n+    // delimiter: space\n+    if (ignoreContent || ignoreContent === '') {\n+      this.ignoreContent = ignoreContent;\n+    } else {\n+      // default value\n+      this.ignoreContent = '@gitmate-bot @rultor /^(unack|ack)/g';\n+    }\n+\n+    return this;\n+  }\n+\n+  // Third type of queries: LABELS\n+  labels() {\n+    this._fetch = this._fetchLabels;\n+    return this;\n+  }\n+\n+  // Fourth type of queries: REACTIONS\n+  reactions(config) {\n+    const { pr_number, reviews_count,\n+      comments_count, discussions_per_review } = config || {};\n+    this._fetch = this._fetchReactions;\n+    this.prNumber = pr_number;\n+    // number of comments to fetch per pull request\n+    this.reviewsCount = reviews_count || 20;\n+    // number of discussions to fetch per review\n+    this.discussionsPerReview = discussions_per_review || 10;\n+    // number of comments to fetch per pull request\n+    this.commentsCount = comments_count || 20;\n+    return this;\n+  }\n+\n+  async fetchAll(config) {\n+    const { per_page } = config || {};\n+    this.perPage = per_page || 100;\n+    this.cursor = null;\n+    this.pageCount = 0;\n+    this.fetchedData = null;\n+\n+    if (this._fetch === this._fetchLabels\n+      || this._fetch === this._fetchReactions) {\n+      console.log('warning: only ISSUES and PULL REQUESTS have `fetchAll` method.',\n+        'Will call `fetchOne()` instead.');\n+      return await this.fetchOne(config);\n+    }\n+\n+    // fetch data with pagination\n+    this.pagination = true;\n+    while (this.pagination) {\n+      // clear warning count before every fresh fetch\n+      this.warningCount = 0;\n+      await this._fetch(this.cursor);\n+    }\n+    if (this.debug) {\n+      console.log('owner:', this.repoOwner, 'name:', this.repoName,\n+        'pagination:', this.pagination, 'page count:',\n+        this.pageCount, 'fetching ends.');\n+    }\n+    return this.fetchedData;\n+  }\n+\n+  async fetchOne(config) {\n+    const { per_page } = config || {};\n+    this.perPage = per_page || 100;\n+    this.cursor = null;\n+    this.pageCount = 0;\n+    this.warningCount = 0;\n+    this.fetchedData = null;\n+    // fetch data without pagination\n+    await this._fetch();\n+    return this.fetchedData;\n+  }\n+\n+  _fetchReactions = async () => {\n+    const owner = this.repoOwner;\n+    const name = this.repoName;\n+    const number = this.prNumber;\n+    const reviewsCount = this.reviewsCount ? this.reviewsCount : this.perPage;\n+    const commentsCount = this.commentsCount ? this.commentsCount : this.perPage;\n+    const discussionsPerReview = this.discussionsPerReview;\n+\n+    if (this.debug) {\n+      console.log('\\nfetch reactions, owner:', owner, 'name:', name,\n+        'pull request number', number);\n+    }\n+\n+    let data, errors;\n+    try {\n+      ({ data, errors } = await this.client.query(\n+        GITHUB_REACTION_INFO_QUERY,\n+        {owner, name, number, reviewsCount, discussionsPerReview, commentsCount}\n+      ));\n+    } catch (error) {\n+      console.log('fetch reactions of pr failed',\n+        'owner:', owner, 'name:', name, 'pull request number:', number,\n+        'reviewsCount:', reviewsCount, 'discussionsPerReview', discussionsPerReview,\n+        'commentsCount', commentsCount, 'error:', error);\n+    }\n+\n+    let rawComments;\n+    if (data) {\n+      // update rate limit\n+      this._updateRateLimit(data.rateLimit);\n+      // collect review comments\n+      rawComments = data.repository.pullRequest.reviews.nodes.map(\n+        node => node.comments.nodes);\n+      rawComments = [].concat.apply([], rawComments);\n+      // collect issue comments\n+      rawComments = rawComments.concat(\n+        data.repository.pullRequest.comments.nodes);\n+    } else {\n+      this.warningCount++;\n+      console.log('warning: no available reaction data!',\n+        'owner:', owner, 'name:', name, 'pull request number:', number,\n+        'error:', errors);\n+      return await this._handleWarning(this._fetchReactions);\n+    }\n+    // reactions are wrapped by corresponding comment\n+    this.fetchedData = rawComments;\n+  }\n+\n+  _fetchLabels = async () => {\n+    const owner = this.repoOwner;\n+    const name = this.repoName;\n+\n+    if (this.debug) {\n+      console.log('\\nfetch labels, owner:', owner, 'name:', name);\n+    }\n+\n+    let data, errors;\n+    try {\n+      ({ data, errors } = await this.client.query(\n+        GITHUB_LABEL_INFO_QUERY,\n+        {owner, name}\n+      ));\n+    } catch (error) {\n+      console.log('fetch labels failed',\n+        'owner:', owner, 'name:', name, 'error:', error);\n+    }\n+\n+    if (data && data.repository) {\n+      // update rate limit\n+      this._updateRateLimit(data.rateLimit);\n+\n+      const result = data.repository.labels.nodes.map(node => ({\n+        id: node.id,\n+        name: node.name,\n+        color: node.color,\n+        default: node.isDefault,\n+      }));\n+      this.fetchedData = {\n+        repoOwner: owner,\n+        repoName: name,\n+        labels: result\n+      };\n+    } else {\n+      this.warningCount++;\n+      console.log('warning: no available label data!',\n+        'owner:', owner, 'name:', name, 'error:', errors);\n+      return await this._handleWarning(this._fetchLabels);\n+    }\n+  }\n+\n+  _fetchIssues = async () => {\n+    const owner = this.repoOwner;\n+    const name = this.repoName;\n+    const perPage = this._slowStart();\n+    const cursor = this.cursor;\n+    const orderBy = this.orderBy;\n+    const pageCount = this.pageCount;\n+    const earliestDate = this.earliestDate;\n+\n+    if (this.debug) {\n+      console.log('\\nfetch issues, owner:', owner, 'name:', name,\n+        'cursor:', cursor, 'page count:', pageCount);\n+    }\n+\n+    let data, errors, hasPreviousPage = false, reachDateThreshold = false;\n+    try {\n+      ({ data, errors } = await this.client.query(\n+        GITHUB_ISSUE_INFO_QUERY,\n+        {owner, name, perPage, before: cursor, orderBy}\n+      ));\n+    } catch (error) {\n+      console.log('fetch issue fails, owner:', owner, 'name:', name,\n+        'cursor:', cursor, 'error:', error);\n+    }\n+    if (data && data.repository) {\n+      // update rate limit\n+      this._updateRateLimit(data.rateLimit);\n+\n+      this.pageCount++;\n+      const { nodes, pageInfo } = data.repository.issues;\n+      this.cursor = pageInfo.startCursor;\n+      hasPreviousPage = pageInfo.hasPreviousPage;\n+      const result = nodes.map(node => {\n+        if (getTime(node.updatedAt) < getTime(earliestDate)) {\n+          reachDateThreshold = true;\n+          return null;\n+        }\n+        return this._mapNodeToIssue(node);\n+      }).filter((node) => node);\n+\n+      // store fetched data within this page\n+      if (!this.fetchedData) {\n+        this.fetchedData = [];\n+      }\n+\n+      // if result === [null], skip it\n+      if (result && result.length && result[0]) {\n+        this.fetchedData = this.fetchedData.concat(result);\n+      }\n+\n+      if (!hasPreviousPage || reachDateThreshold) {\n+        // set pagination false to prevent further fetching\n+        this.pagination = false;\n+      }\n+    } else {\n+      this.warningCount += 1;\n+      console.log('Warning: no available data for issues. owner:', owner,\n+        'name:', name, 'pageCount:', pageCount, 'error message:', errors);\n+      return await this._handleWarning(this._fetchIssues);\n+    }\n+  }\n+\n+  _fetchPullRequests = async () => {\n+    const owner = this.repoOwner;\n+    const name = this.repoName;\n+    const perPage = this._slowStart();\n+    const cursor = this.cursor;\n+    const orderBy = this.orderBy;\n+    const pageCount = this.pageCount;\n+    const earliestDate = this.earliestDate;\n+\n+    if (this.debug) {\n+      console.log('\\nfetch pull requests, owner:', owner, 'name:', name,\n+        'cursor:', cursor, 'page count:', pageCount);\n+    }\n+\n+    let data, errors, hasPreviousPage = false, reachDateThreshold = false;\n+    try {\n+      ({ data, errors } = await this.client.query(\n+        GITHUB_PR_INFO_QUERY,\n+        {owner, name, perPage, before: cursor, orderBy}\n+      ));\n+    } catch (error) {\n+      console.log('fetch pull request fails, owner:', owner, 'name:', name,\n+        'cursor:', cursor, 'error:', error);\n+    }\n+    if (data && data.repository) {\n+      // update rate limit\n+      this._updateRateLimit(data.rateLimit);\n+\n+      this.pageCount++;\n+      const { nodes, pageInfo } = data.repository.pullRequests;\n+      this.cursor = pageInfo.startCursor;\n+      hasPreviousPage = pageInfo.hasPreviousPage;\n+      const result = await Promise.all(nodes.map(async node => {\n+        if (getTime(node.updatedAt) < getTime(earliestDate)) {\n+          reachDateThreshold = true;\n+          return null;\n+        }\n+        let info = this._mapNodeToIssue(node);\n+\n+        let rawComments, comments;\n+        // collect review comments\n+        rawComments = node.reviews.nodes.map(node => node.comments.nodes);\n+        rawComments = [].concat.apply([], rawComments);\n+        // collect issue comments\n+        rawComments = rawComments.concat(node.comments.nodes);\n+\n+        // fetch reactions only if there are reactions within that PR\n+        // to reduce API hits.\n+        // trick: a comment has received reaction(s) iff\n+        // reactionGroup.createdAt attribute is not null\n+        const hasReactions = rawComments.reduce((has, rawComment) => {\n+          return has || rawComment.reactionGroups.reduce((flag, node) => {\n+            return (flag || node.createdAt) ? true : false;\n+          }, false);\n+        }, false);\n+\n+        if (hasReactions) {\n+          if (this.debug) {\n+            console.log('pull request has reactions. repoOwner:', owner,\n+              'repoName:', name, 'pullRequest number:', node.number);\n+          }\n+          const number = node.number;\n+          const reviewsCount = Math.min(node.reviews.totalCount, 20);\n+          // max number of discussions within a review\n+          const discussionsPerReview = Math.min(\n+            node.reviews.nodes.reduce(\n+              (max, review) => Math.max(max, review.comments.totalCount), 0),\n+            100);\n+          const commentsCount = Math.min(node.comments.totalCount, 100);\n+\n+          const commentsWithReactions = await new GraphQLClientBase(this.token,\n+            this.debug, this.sleepTime, 3)\n+            .repo(this.repoOwner, this.repoName)\n+            .reactions({pr_number: number,\n+              reviews_count: reviewsCount,\n+              discussions_per_review: discussionsPerReview,\n+              comments_count: commentsCount})\n+            .fetchOne();\n+\n+          // merge rawComments with commentsWithReactions\n+          if (commentsWithReactions && commentsWithReactions.length) {\n+            rawComments.forEach((comment, index) => {\n+              if (comment.id !== commentsWithReactions[index].id) {\n+                console.log('warning: comments and reactions do not fit!',\n+                  'pr number:', number, 'comment.id:', comment.id,\n+                  'comment with reactions id:', commentsWithReactions[index].id);\n+              } else {\n+                comment.reactions = commentsWithReactions[index].reactions;\n+              }\n+            });\n+          }\n+        }\n+        // filter out useless reviews\n+        rawComments = rawComments.filter(node => {\n+          let flag = true;\n+          // filter comments that don't need meta-reviews\n+          for (const ignoreContent of this.ignoreContent.split(' ')) {\n+            if (node.bodyText.match(ignoreContent)) {\n+              // filter reviews with specific content\n+              flag = false;\n+            }\n+          }\n+          for (const ignoreAuthor of this.ignoreAuthor.split(' ')) {\n+            if (node.author && node.author.login === ignoreAuthor) {\n+              // filter reviews done by specific authors\n+              flag = false;\n+            }\n+          }\n+          return flag;\n+        });\n+\n+        comments = rawComments.map(node => {\n+          let commentAuthor, reactions;\n+\n+          if (node.author) {\n+            commentAuthor = {\n+              login: node.author.login,\n+              avatarUrl: node.author.avatarUrl,\n+              name: node.author.name\n+            };\n+          } else {\n+            commentAuthor = {\n+              login: null,\n+              avatarUrl: null\n+            };\n+          }\n+\n+          if (node.reactions) reactions = node.reactions.nodes;\n+\n+          return {\n+            id: node.id,\n+            url: node.url,\n+            bodyText: node.bodyText,\n+            diffHunk: node.diffHunk ? node.diffHunk : null,\n+            author: commentAuthor,\n+            reactions,\n+            createdAt: node.createdAt,\n+            lastEditedAt: node.lastEditedAt,\n+            // the native `updatedAt` field of comment is inaccurate\n+            updatedAt: node.lastEditedAt ? node.lastEditedAt : node.createdAt","author":{"login":"blazeu","avatarUrl":"https://avatars0.githubusercontent.com/u/1438859?v=4","name":"Surya Widi"},"reactions":[],"createdAt":"2018-06-30T15:53:41Z","lastEditedAt":null,"updatedAt":"2018-06-30T15:53:41Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTMyNTg1Nw==","url":"https://github.com/coala/gh-board/pull/67#discussion_r199325857","bodyText":"Why bother setting the properties, if all of it is null?","diffHunk":"@@ -0,0 +1,612 @@\n+import moment from 'moment';\n+import GraphQL from 'graphql-client';\n+\n+import {\n+  GITHUB_ISSUE_INFO_QUERY,\n+  GITHUB_PR_INFO_QUERY,\n+  GITHUB_LABEL_INFO_QUERY,\n+  GITHUB_REACTION_INFO_QUERY\n+} from '../script/queries';\n+\n+function getTime(timeString) {\n+  // parse timezone-aware time in string format to number\n+  // e.g. '2017-01-01T00:00:00Z' becomes 1483228800000\n+  // null means the earliest date\n+  if (timeString) {\n+    return moment(timeString).toDate().getTime();\n+  } else {\n+    return 0;\n+  }\n+}\n+\n+function sleep(s) {\n+  return new Promise(resolve => setTimeout(resolve, s * 1000));\n+}\n+\n+// A wrapper for GraphQL client that supports chainable methods.\n+// Concurrency is NOT supported.\n+// sample usages:\n+// 1. fetchAllIssues = await Client.getGraphQLClient()\n+//      .repo(repoOwner, repoName)\n+//      .issues({sort: 'UPDATED_AT'}).\n+//      .fetchAll({per_page: 100});\n+// 2. fetchAllReactions = await Client.getGraphQLClient()\n+//      .repo(repoOwner, repoName)\n+//      .reactions({pr_number, per_review: 20})\n+//      .fetchOne({per_page: 100});\n+\n+class GraphQLClientBase {\n+  constructor(token, debug=false, sleepTime=3, warningThreshold=15) {\n+    this.token = token;\n+    this.GH_GQL_BASE = 'https://api.github.com/graphql';\n+    this.GH_GQL_OPTIONS = {\n+      url: this.GH_GQL_BASE,\n+      headers: token\n+        ? { Authorization: `bearer ${token}` }\n+        : {}\n+    };\n+    this.client = GraphQL(this.GH_GQL_OPTIONS);\n+\n+    // debug mode\n+    this.debug = debug;\n+\n+    // sleep time (sec) before timeout retry\n+    this.sleepTime = sleepTime;\n+\n+    // maximum number of warnings before stop fetching\n+    this.warningThreshold = warningThreshold;\n+\n+  }\n+\n+  repo(repoOwner, repoName) {\n+    this.repoOwner = repoOwner;\n+    this.repoName = repoName;\n+    if (this.debug) {\n+      console.log('repoOwner set:', repoOwner, 'repoName set:', repoName);\n+    }\n+    return this;\n+  }\n+\n+  // First type of queries: ISSUES\n+  issues(config) {\n+    const { sort, direction, earliestDate } = config || {};\n+    // There are three types of order\n+    // https://developer.github.com/v4/enum/issueorderfield/\n+    // COMMENTS, CREATED_AT (default), and UPDATED_AT\n+    this.orderBy = {\n+      field: sort || 'CREATED_AT',\n+      direction: direction || 'ASC'\n+    };\n+    this._fetch = this._fetchIssues;\n+    this.earliestDate = earliestDate;\n+    return this;\n+  }\n+\n+  // Second type of queries: PULLREQUESTS\n+  pullRequests(config) {\n+    const { sort, direction, earliestDate,\n+      ignoreAuthor, ignoreContent } = config || {};\n+    // order of pull requests and issues follow the same rule\n+    // see comment within `issues` method\n+    this.orderBy = {\n+      field: sort || 'CREATED_AT',\n+      direction: direction || 'ASC'\n+    };\n+    this._fetch = this._fetchPullRequests;\n+    this.earliestDate = earliestDate;\n+\n+    // review will be ignored if it matches any string specified here\n+    // it can be a literal or a regular expression\n+    // delimiter: space\n+    if (ignoreAuthor || ignoreAuthor === '') {\n+      this.ignoreAuthor = ignoreAuthor;\n+    } else {\n+      // default value\n+      this.ignoreAuthor = 'gitmate-bot rultor';\n+    }\n+\n+    // review will be ignored if it's written by any author specified here\n+    // delimiter: space\n+    if (ignoreContent || ignoreContent === '') {\n+      this.ignoreContent = ignoreContent;\n+    } else {\n+      // default value\n+      this.ignoreContent = '@gitmate-bot @rultor /^(unack|ack)/g';\n+    }\n+\n+    return this;\n+  }\n+\n+  // Third type of queries: LABELS\n+  labels() {\n+    this._fetch = this._fetchLabels;\n+    return this;\n+  }\n+\n+  // Fourth type of queries: REACTIONS\n+  reactions(config) {\n+    const { pr_number, reviews_count,\n+      comments_count, discussions_per_review } = config || {};\n+    this._fetch = this._fetchReactions;\n+    this.prNumber = pr_number;\n+    // number of comments to fetch per pull request\n+    this.reviewsCount = reviews_count || 20;\n+    // number of discussions to fetch per review\n+    this.discussionsPerReview = discussions_per_review || 10;\n+    // number of comments to fetch per pull request\n+    this.commentsCount = comments_count || 20;\n+    return this;\n+  }\n+\n+  async fetchAll(config) {\n+    const { per_page } = config || {};\n+    this.perPage = per_page || 100;\n+    this.cursor = null;\n+    this.pageCount = 0;\n+    this.fetchedData = null;\n+\n+    if (this._fetch === this._fetchLabels\n+      || this._fetch === this._fetchReactions) {\n+      console.log('warning: only ISSUES and PULL REQUESTS have `fetchAll` method.',\n+        'Will call `fetchOne()` instead.');\n+      return await this.fetchOne(config);\n+    }\n+\n+    // fetch data with pagination\n+    this.pagination = true;\n+    while (this.pagination) {\n+      // clear warning count before every fresh fetch\n+      this.warningCount = 0;\n+      await this._fetch(this.cursor);\n+    }\n+    if (this.debug) {\n+      console.log('owner:', this.repoOwner, 'name:', this.repoName,\n+        'pagination:', this.pagination, 'page count:',\n+        this.pageCount, 'fetching ends.');\n+    }\n+    return this.fetchedData;\n+  }\n+\n+  async fetchOne(config) {\n+    const { per_page } = config || {};\n+    this.perPage = per_page || 100;\n+    this.cursor = null;\n+    this.pageCount = 0;\n+    this.warningCount = 0;\n+    this.fetchedData = null;\n+    // fetch data without pagination\n+    await this._fetch();\n+    return this.fetchedData;\n+  }\n+\n+  _fetchReactions = async () => {\n+    const owner = this.repoOwner;\n+    const name = this.repoName;\n+    const number = this.prNumber;\n+    const reviewsCount = this.reviewsCount ? this.reviewsCount : this.perPage;\n+    const commentsCount = this.commentsCount ? this.commentsCount : this.perPage;\n+    const discussionsPerReview = this.discussionsPerReview;\n+\n+    if (this.debug) {\n+      console.log('\\nfetch reactions, owner:', owner, 'name:', name,\n+        'pull request number', number);\n+    }\n+\n+    let data, errors;\n+    try {\n+      ({ data, errors } = await this.client.query(\n+        GITHUB_REACTION_INFO_QUERY,\n+        {owner, name, number, reviewsCount, discussionsPerReview, commentsCount}\n+      ));\n+    } catch (error) {\n+      console.log('fetch reactions of pr failed',\n+        'owner:', owner, 'name:', name, 'pull request number:', number,\n+        'reviewsCount:', reviewsCount, 'discussionsPerReview', discussionsPerReview,\n+        'commentsCount', commentsCount, 'error:', error);\n+    }\n+\n+    let rawComments;\n+    if (data) {\n+      // update rate limit\n+      this._updateRateLimit(data.rateLimit);\n+      // collect review comments\n+      rawComments = data.repository.pullRequest.reviews.nodes.map(\n+        node => node.comments.nodes);\n+      rawComments = [].concat.apply([], rawComments);\n+      // collect issue comments\n+      rawComments = rawComments.concat(\n+        data.repository.pullRequest.comments.nodes);\n+    } else {\n+      this.warningCount++;\n+      console.log('warning: no available reaction data!',\n+        'owner:', owner, 'name:', name, 'pull request number:', number,\n+        'error:', errors);\n+      return await this._handleWarning(this._fetchReactions);\n+    }\n+    // reactions are wrapped by corresponding comment\n+    this.fetchedData = rawComments;\n+  }\n+\n+  _fetchLabels = async () => {\n+    const owner = this.repoOwner;\n+    const name = this.repoName;\n+\n+    if (this.debug) {\n+      console.log('\\nfetch labels, owner:', owner, 'name:', name);\n+    }\n+\n+    let data, errors;\n+    try {\n+      ({ data, errors } = await this.client.query(\n+        GITHUB_LABEL_INFO_QUERY,\n+        {owner, name}\n+      ));\n+    } catch (error) {\n+      console.log('fetch labels failed',\n+        'owner:', owner, 'name:', name, 'error:', error);\n+    }\n+\n+    if (data && data.repository) {\n+      // update rate limit\n+      this._updateRateLimit(data.rateLimit);\n+\n+      const result = data.repository.labels.nodes.map(node => ({\n+        id: node.id,\n+        name: node.name,\n+        color: node.color,\n+        default: node.isDefault,\n+      }));\n+      this.fetchedData = {\n+        repoOwner: owner,\n+        repoName: name,\n+        labels: result\n+      };\n+    } else {\n+      this.warningCount++;\n+      console.log('warning: no available label data!',\n+        'owner:', owner, 'name:', name, 'error:', errors);\n+      return await this._handleWarning(this._fetchLabels);\n+    }\n+  }\n+\n+  _fetchIssues = async () => {\n+    const owner = this.repoOwner;\n+    const name = this.repoName;\n+    const perPage = this._slowStart();\n+    const cursor = this.cursor;\n+    const orderBy = this.orderBy;\n+    const pageCount = this.pageCount;\n+    const earliestDate = this.earliestDate;\n+\n+    if (this.debug) {\n+      console.log('\\nfetch issues, owner:', owner, 'name:', name,\n+        'cursor:', cursor, 'page count:', pageCount);\n+    }\n+\n+    let data, errors, hasPreviousPage = false, reachDateThreshold = false;\n+    try {\n+      ({ data, errors } = await this.client.query(\n+        GITHUB_ISSUE_INFO_QUERY,\n+        {owner, name, perPage, before: cursor, orderBy}\n+      ));\n+    } catch (error) {\n+      console.log('fetch issue fails, owner:', owner, 'name:', name,\n+        'cursor:', cursor, 'error:', error);\n+    }\n+    if (data && data.repository) {\n+      // update rate limit\n+      this._updateRateLimit(data.rateLimit);\n+\n+      this.pageCount++;\n+      const { nodes, pageInfo } = data.repository.issues;\n+      this.cursor = pageInfo.startCursor;\n+      hasPreviousPage = pageInfo.hasPreviousPage;\n+      const result = nodes.map(node => {\n+        if (getTime(node.updatedAt) < getTime(earliestDate)) {\n+          reachDateThreshold = true;\n+          return null;\n+        }\n+        return this._mapNodeToIssue(node);\n+      }).filter((node) => node);\n+\n+      // store fetched data within this page\n+      if (!this.fetchedData) {\n+        this.fetchedData = [];\n+      }\n+\n+      // if result === [null], skip it\n+      if (result && result.length && result[0]) {\n+        this.fetchedData = this.fetchedData.concat(result);\n+      }\n+\n+      if (!hasPreviousPage || reachDateThreshold) {\n+        // set pagination false to prevent further fetching\n+        this.pagination = false;\n+      }\n+    } else {\n+      this.warningCount += 1;\n+      console.log('Warning: no available data for issues. owner:', owner,\n+        'name:', name, 'pageCount:', pageCount, 'error message:', errors);\n+      return await this._handleWarning(this._fetchIssues);\n+    }\n+  }\n+\n+  _fetchPullRequests = async () => {\n+    const owner = this.repoOwner;\n+    const name = this.repoName;\n+    const perPage = this._slowStart();\n+    const cursor = this.cursor;\n+    const orderBy = this.orderBy;\n+    const pageCount = this.pageCount;\n+    const earliestDate = this.earliestDate;\n+\n+    if (this.debug) {\n+      console.log('\\nfetch pull requests, owner:', owner, 'name:', name,\n+        'cursor:', cursor, 'page count:', pageCount);\n+    }\n+\n+    let data, errors, hasPreviousPage = false, reachDateThreshold = false;\n+    try {\n+      ({ data, errors } = await this.client.query(\n+        GITHUB_PR_INFO_QUERY,\n+        {owner, name, perPage, before: cursor, orderBy}\n+      ));\n+    } catch (error) {\n+      console.log('fetch pull request fails, owner:', owner, 'name:', name,\n+        'cursor:', cursor, 'error:', error);\n+    }\n+    if (data && data.repository) {\n+      // update rate limit\n+      this._updateRateLimit(data.rateLimit);\n+\n+      this.pageCount++;\n+      const { nodes, pageInfo } = data.repository.pullRequests;\n+      this.cursor = pageInfo.startCursor;\n+      hasPreviousPage = pageInfo.hasPreviousPage;\n+      const result = await Promise.all(nodes.map(async node => {\n+        if (getTime(node.updatedAt) < getTime(earliestDate)) {\n+          reachDateThreshold = true;\n+          return null;\n+        }\n+        let info = this._mapNodeToIssue(node);\n+\n+        let rawComments, comments;\n+        // collect review comments\n+        rawComments = node.reviews.nodes.map(node => node.comments.nodes);\n+        rawComments = [].concat.apply([], rawComments);\n+        // collect issue comments\n+        rawComments = rawComments.concat(node.comments.nodes);\n+\n+        // fetch reactions only if there are reactions within that PR\n+        // to reduce API hits.\n+        // trick: a comment has received reaction(s) iff\n+        // reactionGroup.createdAt attribute is not null\n+        const hasReactions = rawComments.reduce((has, rawComment) => {\n+          return has || rawComment.reactionGroups.reduce((flag, node) => {\n+            return (flag || node.createdAt) ? true : false;\n+          }, false);\n+        }, false);\n+\n+        if (hasReactions) {\n+          if (this.debug) {\n+            console.log('pull request has reactions. repoOwner:', owner,\n+              'repoName:', name, 'pullRequest number:', node.number);\n+          }\n+          const number = node.number;\n+          const reviewsCount = Math.min(node.reviews.totalCount, 20);\n+          // max number of discussions within a review\n+          const discussionsPerReview = Math.min(\n+            node.reviews.nodes.reduce(\n+              (max, review) => Math.max(max, review.comments.totalCount), 0),\n+            100);\n+          const commentsCount = Math.min(node.comments.totalCount, 100);\n+\n+          const commentsWithReactions = await new GraphQLClientBase(this.token,\n+            this.debug, this.sleepTime, 3)\n+            .repo(this.repoOwner, this.repoName)\n+            .reactions({pr_number: number,\n+              reviews_count: reviewsCount,\n+              discussions_per_review: discussionsPerReview,\n+              comments_count: commentsCount})\n+            .fetchOne();\n+\n+          // merge rawComments with commentsWithReactions\n+          if (commentsWithReactions && commentsWithReactions.length) {\n+            rawComments.forEach((comment, index) => {\n+              if (comment.id !== commentsWithReactions[index].id) {\n+                console.log('warning: comments and reactions do not fit!',\n+                  'pr number:', number, 'comment.id:', comment.id,\n+                  'comment with reactions id:', commentsWithReactions[index].id);\n+              } else {\n+                comment.reactions = commentsWithReactions[index].reactions;\n+              }\n+            });\n+          }\n+        }\n+        // filter out useless reviews\n+        rawComments = rawComments.filter(node => {\n+          let flag = true;\n+          // filter comments that don't need meta-reviews\n+          for (const ignoreContent of this.ignoreContent.split(' ')) {\n+            if (node.bodyText.match(ignoreContent)) {\n+              // filter reviews with specific content\n+              flag = false;\n+            }\n+          }\n+          for (const ignoreAuthor of this.ignoreAuthor.split(' ')) {\n+            if (node.author && node.author.login === ignoreAuthor) {\n+              // filter reviews done by specific authors\n+              flag = false;\n+            }\n+          }\n+          return flag;\n+        });\n+\n+        comments = rawComments.map(node => {\n+          let commentAuthor, reactions;\n+\n+          if (node.author) {\n+            commentAuthor = {\n+              login: node.author.login,\n+              avatarUrl: node.author.avatarUrl,\n+              name: node.author.name\n+            };\n+          } else {\n+            commentAuthor = {\n+              login: null,\n+              avatarUrl: null\n+            };\n+          }\n+\n+          if (node.reactions) reactions = node.reactions.nodes;\n+\n+          return {\n+            id: node.id,\n+            url: node.url,\n+            bodyText: node.bodyText,\n+            diffHunk: node.diffHunk ? node.diffHunk : null,\n+            author: commentAuthor,\n+            reactions,\n+            createdAt: node.createdAt,\n+            lastEditedAt: node.lastEditedAt,\n+            // the native `updatedAt` field of comment is inaccurate\n+            updatedAt: node.lastEditedAt ? node.lastEditedAt : node.createdAt\n+          };\n+        });\n+        info.issue.pullRequest = {\n+          htmlUrl: node.url,\n+          comments\n+        };\n+        return info;\n+      }).filter((node) => node));\n+\n+      // store fetched data within this page\n+      if (!this.fetchedData) {\n+        this.fetchedData = [];\n+      }\n+\n+      // if result === [null], skip it\n+      if (result && result.length && result[0]) {\n+        this.fetchedData = this.fetchedData.concat(result);\n+      }\n+\n+      if (!hasPreviousPage || reachDateThreshold) {\n+        // set pagination false to prevent further fetching\n+        this.pagination = false;\n+      }\n+    } else {\n+      this.warningCount += 1;\n+      console.log('Warning: no available data for pull request. owner:', owner,\n+        'name:', name, 'pageCount:', pageCount, 'error message:', errors);\n+      return await this._handleWarning(this._fetchPullRequests);\n+    }\n+  }\n+\n+  _mapNodeToIssue(node) {\n+    let user, assignee, milestone;\n+\n+    if (node.author) {\n+      user = {\n+        login: node.author.login,\n+        avatarUrl: node.author.avatarUrl\n+      };\n+    } else {\n+      user = {\n+        login: null,\n+        avatarUrl: null\n+      };\n+    }\n+\n+    if (node.assignees.nodes && node.assignees.nodes.length) {\n+      assignee = {\n+        login: node.assignees.nodes[0].login,\n+        avatarUrl: node.assignees.nodes[0].avatarUrl\n+      };\n+    } else {\n+      assignee = null;\n+    }\n+\n+    if (node.milestone) {\n+      milestone = {\n+        title: node.milestone.title,\n+        createdAt: node.milestone.createdAt,\n+        dueOn: node.milestone.dueOn,\n+        state: node.milestone.state.toLowerCase(),\n+        htmlUrl: node.milestone.url,\n+        description: node.milestone.description\n+      };\n+    } else {\n+      milestone = {\n+        title: null,\n+        createdAt: null,\n+        dueOn: null,\n+        state: null,\n+        htmlUrl: null,\n+        description: null\n+      };","author":{"login":"blazeu","avatarUrl":"https://avatars0.githubusercontent.com/u/1438859?v=4","name":"Surya Widi"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNTg1NzE0MA==","createdAt":"2018-07-02T02:13:44Z","content":"THUMBS_UP","user":{"login":"li-boxuan","name":"Boxuan Li"}}],"createdAt":"2018-06-30T15:59:57Z","lastEditedAt":null,"updatedAt":"2018-06-30T15:59:57Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTMyNTk0Mw==","url":"https://github.com/coala/gh-board/pull/67#discussion_r199325943","bodyText":"||","diffHunk":"@@ -0,0 +1,612 @@\n+import moment from 'moment';\n+import GraphQL from 'graphql-client';\n+\n+import {\n+  GITHUB_ISSUE_INFO_QUERY,\n+  GITHUB_PR_INFO_QUERY,\n+  GITHUB_LABEL_INFO_QUERY,\n+  GITHUB_REACTION_INFO_QUERY\n+} from '../script/queries';\n+\n+function getTime(timeString) {\n+  // parse timezone-aware time in string format to number\n+  // e.g. '2017-01-01T00:00:00Z' becomes 1483228800000\n+  // null means the earliest date\n+  if (timeString) {\n+    return moment(timeString).toDate().getTime();\n+  } else {\n+    return 0;\n+  }\n+}\n+\n+function sleep(s) {\n+  return new Promise(resolve => setTimeout(resolve, s * 1000));\n+}\n+\n+// A wrapper for GraphQL client that supports chainable methods.\n+// Concurrency is NOT supported.\n+// sample usages:\n+// 1. fetchAllIssues = await Client.getGraphQLClient()\n+//      .repo(repoOwner, repoName)\n+//      .issues({sort: 'UPDATED_AT'}).\n+//      .fetchAll({per_page: 100});\n+// 2. fetchAllReactions = await Client.getGraphQLClient()\n+//      .repo(repoOwner, repoName)\n+//      .reactions({pr_number, per_review: 20})\n+//      .fetchOne({per_page: 100});\n+\n+class GraphQLClientBase {\n+  constructor(token, debug=false, sleepTime=3, warningThreshold=15) {\n+    this.token = token;\n+    this.GH_GQL_BASE = 'https://api.github.com/graphql';\n+    this.GH_GQL_OPTIONS = {\n+      url: this.GH_GQL_BASE,\n+      headers: token\n+        ? { Authorization: `bearer ${token}` }\n+        : {}\n+    };\n+    this.client = GraphQL(this.GH_GQL_OPTIONS);\n+\n+    // debug mode\n+    this.debug = debug;\n+\n+    // sleep time (sec) before timeout retry\n+    this.sleepTime = sleepTime;\n+\n+    // maximum number of warnings before stop fetching\n+    this.warningThreshold = warningThreshold;\n+\n+  }\n+\n+  repo(repoOwner, repoName) {\n+    this.repoOwner = repoOwner;\n+    this.repoName = repoName;\n+    if (this.debug) {\n+      console.log('repoOwner set:', repoOwner, 'repoName set:', repoName);\n+    }\n+    return this;\n+  }\n+\n+  // First type of queries: ISSUES\n+  issues(config) {\n+    const { sort, direction, earliestDate } = config || {};\n+    // There are three types of order\n+    // https://developer.github.com/v4/enum/issueorderfield/\n+    // COMMENTS, CREATED_AT (default), and UPDATED_AT\n+    this.orderBy = {\n+      field: sort || 'CREATED_AT',\n+      direction: direction || 'ASC'\n+    };\n+    this._fetch = this._fetchIssues;\n+    this.earliestDate = earliestDate;\n+    return this;\n+  }\n+\n+  // Second type of queries: PULLREQUESTS\n+  pullRequests(config) {\n+    const { sort, direction, earliestDate,\n+      ignoreAuthor, ignoreContent } = config || {};\n+    // order of pull requests and issues follow the same rule\n+    // see comment within `issues` method\n+    this.orderBy = {\n+      field: sort || 'CREATED_AT',\n+      direction: direction || 'ASC'\n+    };\n+    this._fetch = this._fetchPullRequests;\n+    this.earliestDate = earliestDate;\n+\n+    // review will be ignored if it matches any string specified here\n+    // it can be a literal or a regular expression\n+    // delimiter: space\n+    if (ignoreAuthor || ignoreAuthor === '') {\n+      this.ignoreAuthor = ignoreAuthor;\n+    } else {\n+      // default value\n+      this.ignoreAuthor = 'gitmate-bot rultor';\n+    }\n+\n+    // review will be ignored if it's written by any author specified here\n+    // delimiter: space\n+    if (ignoreContent || ignoreContent === '') {\n+      this.ignoreContent = ignoreContent;\n+    } else {\n+      // default value\n+      this.ignoreContent = '@gitmate-bot @rultor /^(unack|ack)/g';\n+    }\n+\n+    return this;\n+  }\n+\n+  // Third type of queries: LABELS\n+  labels() {\n+    this._fetch = this._fetchLabels;\n+    return this;\n+  }\n+\n+  // Fourth type of queries: REACTIONS\n+  reactions(config) {\n+    const { pr_number, reviews_count,\n+      comments_count, discussions_per_review } = config || {};\n+    this._fetch = this._fetchReactions;\n+    this.prNumber = pr_number;\n+    // number of comments to fetch per pull request\n+    this.reviewsCount = reviews_count || 20;\n+    // number of discussions to fetch per review\n+    this.discussionsPerReview = discussions_per_review || 10;\n+    // number of comments to fetch per pull request\n+    this.commentsCount = comments_count || 20;\n+    return this;\n+  }\n+\n+  async fetchAll(config) {\n+    const { per_page } = config || {};\n+    this.perPage = per_page || 100;\n+    this.cursor = null;\n+    this.pageCount = 0;\n+    this.fetchedData = null;\n+\n+    if (this._fetch === this._fetchLabels\n+      || this._fetch === this._fetchReactions) {\n+      console.log('warning: only ISSUES and PULL REQUESTS have `fetchAll` method.',\n+        'Will call `fetchOne()` instead.');\n+      return await this.fetchOne(config);\n+    }\n+\n+    // fetch data with pagination\n+    this.pagination = true;\n+    while (this.pagination) {\n+      // clear warning count before every fresh fetch\n+      this.warningCount = 0;\n+      await this._fetch(this.cursor);\n+    }\n+    if (this.debug) {\n+      console.log('owner:', this.repoOwner, 'name:', this.repoName,\n+        'pagination:', this.pagination, 'page count:',\n+        this.pageCount, 'fetching ends.');\n+    }\n+    return this.fetchedData;\n+  }\n+\n+  async fetchOne(config) {\n+    const { per_page } = config || {};\n+    this.perPage = per_page || 100;\n+    this.cursor = null;\n+    this.pageCount = 0;\n+    this.warningCount = 0;\n+    this.fetchedData = null;\n+    // fetch data without pagination\n+    await this._fetch();\n+    return this.fetchedData;\n+  }\n+\n+  _fetchReactions = async () => {\n+    const owner = this.repoOwner;\n+    const name = this.repoName;\n+    const number = this.prNumber;\n+    const reviewsCount = this.reviewsCount ? this.reviewsCount : this.perPage;\n+    const commentsCount = this.commentsCount ? this.commentsCount : this.perPage;","author":{"login":"blazeu","avatarUrl":"https://avatars0.githubusercontent.com/u/1438859?v=4","name":"Surya Widi"},"reactions":[],"createdAt":"2018-06-30T16:04:36Z","lastEditedAt":null,"updatedAt":"2018-06-30T16:04:36Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTM1NDU2OA==","url":"https://github.com/coala/gh-board/pull/67#discussion_r199354568","bodyText":"remove newline","diffHunk":"@@ -0,0 +1,612 @@\n+import moment from 'moment';\n+import GraphQL from 'graphql-client';\n+\n+import {\n+  GITHUB_ISSUE_INFO_QUERY,\n+  GITHUB_PR_INFO_QUERY,\n+  GITHUB_LABEL_INFO_QUERY,\n+  GITHUB_REACTION_INFO_QUERY\n+} from '../script/queries';\n+\n+function getTime(timeString) {\n+  // parse timezone-aware time in string format to number\n+  // e.g. '2017-01-01T00:00:00Z' becomes 1483228800000\n+  // null means the earliest date\n+  if (timeString) {\n+    return moment(timeString).toDate().getTime();\n+  } else {\n+    return 0;\n+  }\n+}\n+\n+function sleep(s) {\n+  return new Promise(resolve => setTimeout(resolve, s * 1000));\n+}\n+\n+// A wrapper for GraphQL client that supports chainable methods.\n+// Concurrency is NOT supported.\n+// sample usages:\n+// 1. fetchAllIssues = await Client.getGraphQLClient()\n+//      .repo(repoOwner, repoName)\n+//      .issues({sort: 'UPDATED_AT'}).\n+//      .fetchAll({per_page: 100});\n+// 2. fetchAllReactions = await Client.getGraphQLClient()\n+//      .repo(repoOwner, repoName)\n+//      .reactions({pr_number, per_review: 20})\n+//      .fetchOne({per_page: 100});\n+\n+class GraphQLClientBase {\n+  constructor(token, debug=false, sleepTime=3, warningThreshold=15) {\n+    this.token = token;\n+    this.GH_GQL_BASE = 'https://api.github.com/graphql';\n+    this.GH_GQL_OPTIONS = {\n+      url: this.GH_GQL_BASE,\n+      headers: token\n+        ? { Authorization: `bearer ${token}` }\n+        : {}\n+    };\n+    this.client = GraphQL(this.GH_GQL_OPTIONS);\n+\n+    // debug mode\n+    this.debug = debug;\n+\n+    // sleep time (sec) before timeout retry\n+    this.sleepTime = sleepTime;\n+\n+    // maximum number of warnings before stop fetching\n+    this.warningThreshold = warningThreshold;\n+","author":{"login":"andrewda","avatarUrl":"https://avatars1.githubusercontent.com/u/10191084?v=4","name":"Andrew Dassonville"},"reactions":[],"createdAt":"2018-07-01T16:36:56Z","lastEditedAt":null,"updatedAt":"2018-07-01T16:36:56Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTM1NDY2OQ==","url":"https://github.com/coala/gh-board/pull/67#discussion_r199354669","bodyText":"Maybe check if commentsWithReactions is the same length as rawComments here because if not, you might have an error.","diffHunk":"@@ -0,0 +1,612 @@\n+import moment from 'moment';\n+import GraphQL from 'graphql-client';\n+\n+import {\n+  GITHUB_ISSUE_INFO_QUERY,\n+  GITHUB_PR_INFO_QUERY,\n+  GITHUB_LABEL_INFO_QUERY,\n+  GITHUB_REACTION_INFO_QUERY\n+} from '../script/queries';\n+\n+function getTime(timeString) {\n+  // parse timezone-aware time in string format to number\n+  // e.g. '2017-01-01T00:00:00Z' becomes 1483228800000\n+  // null means the earliest date\n+  if (timeString) {\n+    return moment(timeString).toDate().getTime();\n+  } else {\n+    return 0;\n+  }\n+}\n+\n+function sleep(s) {\n+  return new Promise(resolve => setTimeout(resolve, s * 1000));\n+}\n+\n+// A wrapper for GraphQL client that supports chainable methods.\n+// Concurrency is NOT supported.\n+// sample usages:\n+// 1. fetchAllIssues = await Client.getGraphQLClient()\n+//      .repo(repoOwner, repoName)\n+//      .issues({sort: 'UPDATED_AT'}).\n+//      .fetchAll({per_page: 100});\n+// 2. fetchAllReactions = await Client.getGraphQLClient()\n+//      .repo(repoOwner, repoName)\n+//      .reactions({pr_number, per_review: 20})\n+//      .fetchOne({per_page: 100});\n+\n+class GraphQLClientBase {\n+  constructor(token, debug=false, sleepTime=3, warningThreshold=15) {\n+    this.token = token;\n+    this.GH_GQL_BASE = 'https://api.github.com/graphql';\n+    this.GH_GQL_OPTIONS = {\n+      url: this.GH_GQL_BASE,\n+      headers: token\n+        ? { Authorization: `bearer ${token}` }\n+        : {}\n+    };\n+    this.client = GraphQL(this.GH_GQL_OPTIONS);\n+\n+    // debug mode\n+    this.debug = debug;\n+\n+    // sleep time (sec) before timeout retry\n+    this.sleepTime = sleepTime;\n+\n+    // maximum number of warnings before stop fetching\n+    this.warningThreshold = warningThreshold;\n+\n+  }\n+\n+  repo(repoOwner, repoName) {\n+    this.repoOwner = repoOwner;\n+    this.repoName = repoName;\n+    if (this.debug) {\n+      console.log('repoOwner set:', repoOwner, 'repoName set:', repoName);\n+    }\n+    return this;\n+  }\n+\n+  // First type of queries: ISSUES\n+  issues(config) {\n+    const { sort, direction, earliestDate } = config || {};\n+    // There are three types of order\n+    // https://developer.github.com/v4/enum/issueorderfield/\n+    // COMMENTS, CREATED_AT (default), and UPDATED_AT\n+    this.orderBy = {\n+      field: sort || 'CREATED_AT',\n+      direction: direction || 'ASC'\n+    };\n+    this._fetch = this._fetchIssues;\n+    this.earliestDate = earliestDate;\n+    return this;\n+  }\n+\n+  // Second type of queries: PULLREQUESTS\n+  pullRequests(config) {\n+    const { sort, direction, earliestDate,\n+      ignoreAuthor, ignoreContent } = config || {};\n+    // order of pull requests and issues follow the same rule\n+    // see comment within `issues` method\n+    this.orderBy = {\n+      field: sort || 'CREATED_AT',\n+      direction: direction || 'ASC'\n+    };\n+    this._fetch = this._fetchPullRequests;\n+    this.earliestDate = earliestDate;\n+\n+    // review will be ignored if it matches any string specified here\n+    // it can be a literal or a regular expression\n+    // delimiter: space\n+    if (ignoreAuthor || ignoreAuthor === '') {\n+      this.ignoreAuthor = ignoreAuthor;\n+    } else {\n+      // default value\n+      this.ignoreAuthor = 'gitmate-bot rultor';\n+    }\n+\n+    // review will be ignored if it's written by any author specified here\n+    // delimiter: space\n+    if (ignoreContent || ignoreContent === '') {\n+      this.ignoreContent = ignoreContent;\n+    } else {\n+      // default value\n+      this.ignoreContent = '@gitmate-bot @rultor /^(unack|ack)/g';\n+    }\n+\n+    return this;\n+  }\n+\n+  // Third type of queries: LABELS\n+  labels() {\n+    this._fetch = this._fetchLabels;\n+    return this;\n+  }\n+\n+  // Fourth type of queries: REACTIONS\n+  reactions(config) {\n+    const { pr_number, reviews_count,\n+      comments_count, discussions_per_review } = config || {};\n+    this._fetch = this._fetchReactions;\n+    this.prNumber = pr_number;\n+    // number of comments to fetch per pull request\n+    this.reviewsCount = reviews_count || 20;\n+    // number of discussions to fetch per review\n+    this.discussionsPerReview = discussions_per_review || 10;\n+    // number of comments to fetch per pull request\n+    this.commentsCount = comments_count || 20;\n+    return this;\n+  }\n+\n+  async fetchAll(config) {\n+    const { per_page } = config || {};\n+    this.perPage = per_page || 100;\n+    this.cursor = null;\n+    this.pageCount = 0;\n+    this.fetchedData = null;\n+\n+    if (this._fetch === this._fetchLabels\n+      || this._fetch === this._fetchReactions) {\n+      console.log('warning: only ISSUES and PULL REQUESTS have `fetchAll` method.',\n+        'Will call `fetchOne()` instead.');\n+      return await this.fetchOne(config);\n+    }\n+\n+    // fetch data with pagination\n+    this.pagination = true;\n+    while (this.pagination) {\n+      // clear warning count before every fresh fetch\n+      this.warningCount = 0;\n+      await this._fetch(this.cursor);\n+    }\n+    if (this.debug) {\n+      console.log('owner:', this.repoOwner, 'name:', this.repoName,\n+        'pagination:', this.pagination, 'page count:',\n+        this.pageCount, 'fetching ends.');\n+    }\n+    return this.fetchedData;\n+  }\n+\n+  async fetchOne(config) {\n+    const { per_page } = config || {};\n+    this.perPage = per_page || 100;\n+    this.cursor = null;\n+    this.pageCount = 0;\n+    this.warningCount = 0;\n+    this.fetchedData = null;\n+    // fetch data without pagination\n+    await this._fetch();\n+    return this.fetchedData;\n+  }\n+\n+  _fetchReactions = async () => {\n+    const owner = this.repoOwner;\n+    const name = this.repoName;\n+    const number = this.prNumber;\n+    const reviewsCount = this.reviewsCount ? this.reviewsCount : this.perPage;\n+    const commentsCount = this.commentsCount ? this.commentsCount : this.perPage;\n+    const discussionsPerReview = this.discussionsPerReview;\n+\n+    if (this.debug) {\n+      console.log('\\nfetch reactions, owner:', owner, 'name:', name,\n+        'pull request number', number);\n+    }\n+\n+    let data, errors;\n+    try {\n+      ({ data, errors } = await this.client.query(\n+        GITHUB_REACTION_INFO_QUERY,\n+        {owner, name, number, reviewsCount, discussionsPerReview, commentsCount}\n+      ));\n+    } catch (error) {\n+      console.log('fetch reactions of pr failed',\n+        'owner:', owner, 'name:', name, 'pull request number:', number,\n+        'reviewsCount:', reviewsCount, 'discussionsPerReview', discussionsPerReview,\n+        'commentsCount', commentsCount, 'error:', error);\n+    }\n+\n+    let rawComments;\n+    if (data) {\n+      // update rate limit\n+      this._updateRateLimit(data.rateLimit);\n+      // collect review comments\n+      rawComments = data.repository.pullRequest.reviews.nodes.map(\n+        node => node.comments.nodes);\n+      rawComments = [].concat.apply([], rawComments);\n+      // collect issue comments\n+      rawComments = rawComments.concat(\n+        data.repository.pullRequest.comments.nodes);\n+    } else {\n+      this.warningCount++;\n+      console.log('warning: no available reaction data!',\n+        'owner:', owner, 'name:', name, 'pull request number:', number,\n+        'error:', errors);\n+      return await this._handleWarning(this._fetchReactions);\n+    }\n+    // reactions are wrapped by corresponding comment\n+    this.fetchedData = rawComments;\n+  }\n+\n+  _fetchLabels = async () => {\n+    const owner = this.repoOwner;\n+    const name = this.repoName;\n+\n+    if (this.debug) {\n+      console.log('\\nfetch labels, owner:', owner, 'name:', name);\n+    }\n+\n+    let data, errors;\n+    try {\n+      ({ data, errors } = await this.client.query(\n+        GITHUB_LABEL_INFO_QUERY,\n+        {owner, name}\n+      ));\n+    } catch (error) {\n+      console.log('fetch labels failed',\n+        'owner:', owner, 'name:', name, 'error:', error);\n+    }\n+\n+    if (data && data.repository) {\n+      // update rate limit\n+      this._updateRateLimit(data.rateLimit);\n+\n+      const result = data.repository.labels.nodes.map(node => ({\n+        id: node.id,\n+        name: node.name,\n+        color: node.color,\n+        default: node.isDefault,\n+      }));\n+      this.fetchedData = {\n+        repoOwner: owner,\n+        repoName: name,\n+        labels: result\n+      };\n+    } else {\n+      this.warningCount++;\n+      console.log('warning: no available label data!',\n+        'owner:', owner, 'name:', name, 'error:', errors);\n+      return await this._handleWarning(this._fetchLabels);\n+    }\n+  }\n+\n+  _fetchIssues = async () => {\n+    const owner = this.repoOwner;\n+    const name = this.repoName;\n+    const perPage = this._slowStart();\n+    const cursor = this.cursor;\n+    const orderBy = this.orderBy;\n+    const pageCount = this.pageCount;\n+    const earliestDate = this.earliestDate;\n+\n+    if (this.debug) {\n+      console.log('\\nfetch issues, owner:', owner, 'name:', name,\n+        'cursor:', cursor, 'page count:', pageCount);\n+    }\n+\n+    let data, errors, hasPreviousPage = false, reachDateThreshold = false;\n+    try {\n+      ({ data, errors } = await this.client.query(\n+        GITHUB_ISSUE_INFO_QUERY,\n+        {owner, name, perPage, before: cursor, orderBy}\n+      ));\n+    } catch (error) {\n+      console.log('fetch issue fails, owner:', owner, 'name:', name,\n+        'cursor:', cursor, 'error:', error);\n+    }\n+    if (data && data.repository) {\n+      // update rate limit\n+      this._updateRateLimit(data.rateLimit);\n+\n+      this.pageCount++;\n+      const { nodes, pageInfo } = data.repository.issues;\n+      this.cursor = pageInfo.startCursor;\n+      hasPreviousPage = pageInfo.hasPreviousPage;\n+      const result = nodes.map(node => {\n+        if (getTime(node.updatedAt) < getTime(earliestDate)) {\n+          reachDateThreshold = true;\n+          return null;\n+        }\n+        return this._mapNodeToIssue(node);\n+      }).filter((node) => node);\n+\n+      // store fetched data within this page\n+      if (!this.fetchedData) {\n+        this.fetchedData = [];\n+      }\n+\n+      // if result === [null], skip it\n+      if (result && result.length && result[0]) {\n+        this.fetchedData = this.fetchedData.concat(result);\n+      }\n+\n+      if (!hasPreviousPage || reachDateThreshold) {\n+        // set pagination false to prevent further fetching\n+        this.pagination = false;\n+      }\n+    } else {\n+      this.warningCount += 1;\n+      console.log('Warning: no available data for issues. owner:', owner,\n+        'name:', name, 'pageCount:', pageCount, 'error message:', errors);\n+      return await this._handleWarning(this._fetchIssues);\n+    }\n+  }\n+\n+  _fetchPullRequests = async () => {\n+    const owner = this.repoOwner;\n+    const name = this.repoName;\n+    const perPage = this._slowStart();\n+    const cursor = this.cursor;\n+    const orderBy = this.orderBy;\n+    const pageCount = this.pageCount;\n+    const earliestDate = this.earliestDate;\n+\n+    if (this.debug) {\n+      console.log('\\nfetch pull requests, owner:', owner, 'name:', name,\n+        'cursor:', cursor, 'page count:', pageCount);\n+    }\n+\n+    let data, errors, hasPreviousPage = false, reachDateThreshold = false;\n+    try {\n+      ({ data, errors } = await this.client.query(\n+        GITHUB_PR_INFO_QUERY,\n+        {owner, name, perPage, before: cursor, orderBy}\n+      ));\n+    } catch (error) {\n+      console.log('fetch pull request fails, owner:', owner, 'name:', name,\n+        'cursor:', cursor, 'error:', error);\n+    }\n+    if (data && data.repository) {\n+      // update rate limit\n+      this._updateRateLimit(data.rateLimit);\n+\n+      this.pageCount++;\n+      const { nodes, pageInfo } = data.repository.pullRequests;\n+      this.cursor = pageInfo.startCursor;\n+      hasPreviousPage = pageInfo.hasPreviousPage;\n+      const result = await Promise.all(nodes.map(async node => {\n+        if (getTime(node.updatedAt) < getTime(earliestDate)) {\n+          reachDateThreshold = true;\n+          return null;\n+        }\n+        let info = this._mapNodeToIssue(node);\n+\n+        let rawComments, comments;\n+        // collect review comments\n+        rawComments = node.reviews.nodes.map(node => node.comments.nodes);\n+        rawComments = [].concat.apply([], rawComments);\n+        // collect issue comments\n+        rawComments = rawComments.concat(node.comments.nodes);\n+\n+        // fetch reactions only if there are reactions within that PR\n+        // to reduce API hits.\n+        // trick: a comment has received reaction(s) iff\n+        // reactionGroup.createdAt attribute is not null\n+        const hasReactions = rawComments.reduce((has, rawComment) => {\n+          return has || rawComment.reactionGroups.reduce((flag, node) => {\n+            return (flag || node.createdAt) ? true : false;\n+          }, false);\n+        }, false);\n+\n+        if (hasReactions) {\n+          if (this.debug) {\n+            console.log('pull request has reactions. repoOwner:', owner,\n+              'repoName:', name, 'pullRequest number:', node.number);\n+          }\n+          const number = node.number;\n+          const reviewsCount = Math.min(node.reviews.totalCount, 20);\n+          // max number of discussions within a review\n+          const discussionsPerReview = Math.min(\n+            node.reviews.nodes.reduce(\n+              (max, review) => Math.max(max, review.comments.totalCount), 0),\n+            100);\n+          const commentsCount = Math.min(node.comments.totalCount, 100);\n+\n+          const commentsWithReactions = await new GraphQLClientBase(this.token,\n+            this.debug, this.sleepTime, 3)\n+            .repo(this.repoOwner, this.repoName)\n+            .reactions({pr_number: number,\n+              reviews_count: reviewsCount,\n+              discussions_per_review: discussionsPerReview,\n+              comments_count: commentsCount})\n+            .fetchOne();\n+\n+          // merge rawComments with commentsWithReactions\n+          if (commentsWithReactions && commentsWithReactions.length) {","author":{"login":"andrewda","avatarUrl":"https://avatars1.githubusercontent.com/u/10191084?v=4","name":"Andrew Dassonville"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNTg1NzMwNw==","createdAt":"2018-07-02T02:23:07Z","content":"THUMBS_UP","user":{"login":"li-boxuan","name":"Boxuan Li"}}],"createdAt":"2018-07-01T16:44:07Z","lastEditedAt":null,"updatedAt":"2018-07-01T16:44:07Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTM3MjQwMw==","url":"https://github.com/coala/gh-board/pull/67#discussion_r199372403","bodyText":"The code is wrong, as it leads to 'blank' milestones on the frontend. btw, It was migrated from fetch-issue.js.","diffHunk":"@@ -0,0 +1,612 @@\n+import moment from 'moment';\n+import GraphQL from 'graphql-client';\n+\n+import {\n+  GITHUB_ISSUE_INFO_QUERY,\n+  GITHUB_PR_INFO_QUERY,\n+  GITHUB_LABEL_INFO_QUERY,\n+  GITHUB_REACTION_INFO_QUERY\n+} from '../script/queries';\n+\n+function getTime(timeString) {\n+  // parse timezone-aware time in string format to number\n+  // e.g. '2017-01-01T00:00:00Z' becomes 1483228800000\n+  // null means the earliest date\n+  if (timeString) {\n+    return moment(timeString).toDate().getTime();\n+  } else {\n+    return 0;\n+  }\n+}\n+\n+function sleep(s) {\n+  return new Promise(resolve => setTimeout(resolve, s * 1000));\n+}\n+\n+// A wrapper for GraphQL client that supports chainable methods.\n+// Concurrency is NOT supported.\n+// sample usages:\n+// 1. fetchAllIssues = await Client.getGraphQLClient()\n+//      .repo(repoOwner, repoName)\n+//      .issues({sort: 'UPDATED_AT'}).\n+//      .fetchAll({per_page: 100});\n+// 2. fetchAllReactions = await Client.getGraphQLClient()\n+//      .repo(repoOwner, repoName)\n+//      .reactions({pr_number, per_review: 20})\n+//      .fetchOne({per_page: 100});\n+\n+class GraphQLClientBase {\n+  constructor(token, debug=false, sleepTime=3, warningThreshold=15) {\n+    this.token = token;\n+    this.GH_GQL_BASE = 'https://api.github.com/graphql';\n+    this.GH_GQL_OPTIONS = {\n+      url: this.GH_GQL_BASE,\n+      headers: token\n+        ? { Authorization: `bearer ${token}` }\n+        : {}\n+    };\n+    this.client = GraphQL(this.GH_GQL_OPTIONS);\n+\n+    // debug mode\n+    this.debug = debug;\n+\n+    // sleep time (sec) before timeout retry\n+    this.sleepTime = sleepTime;\n+\n+    // maximum number of warnings before stop fetching\n+    this.warningThreshold = warningThreshold;\n+\n+  }\n+\n+  repo(repoOwner, repoName) {\n+    this.repoOwner = repoOwner;\n+    this.repoName = repoName;\n+    if (this.debug) {\n+      console.log('repoOwner set:', repoOwner, 'repoName set:', repoName);\n+    }\n+    return this;\n+  }\n+\n+  // First type of queries: ISSUES\n+  issues(config) {\n+    const { sort, direction, earliestDate } = config || {};\n+    // There are three types of order\n+    // https://developer.github.com/v4/enum/issueorderfield/\n+    // COMMENTS, CREATED_AT (default), and UPDATED_AT\n+    this.orderBy = {\n+      field: sort || 'CREATED_AT',\n+      direction: direction || 'ASC'\n+    };\n+    this._fetch = this._fetchIssues;\n+    this.earliestDate = earliestDate;\n+    return this;\n+  }\n+\n+  // Second type of queries: PULLREQUESTS\n+  pullRequests(config) {\n+    const { sort, direction, earliestDate,\n+      ignoreAuthor, ignoreContent } = config || {};\n+    // order of pull requests and issues follow the same rule\n+    // see comment within `issues` method\n+    this.orderBy = {\n+      field: sort || 'CREATED_AT',\n+      direction: direction || 'ASC'\n+    };\n+    this._fetch = this._fetchPullRequests;\n+    this.earliestDate = earliestDate;\n+\n+    // review will be ignored if it matches any string specified here\n+    // it can be a literal or a regular expression\n+    // delimiter: space\n+    if (ignoreAuthor || ignoreAuthor === '') {\n+      this.ignoreAuthor = ignoreAuthor;\n+    } else {\n+      // default value\n+      this.ignoreAuthor = 'gitmate-bot rultor';\n+    }\n+\n+    // review will be ignored if it's written by any author specified here\n+    // delimiter: space\n+    if (ignoreContent || ignoreContent === '') {\n+      this.ignoreContent = ignoreContent;\n+    } else {\n+      // default value\n+      this.ignoreContent = '@gitmate-bot @rultor /^(unack|ack)/g';\n+    }\n+\n+    return this;\n+  }\n+\n+  // Third type of queries: LABELS\n+  labels() {\n+    this._fetch = this._fetchLabels;\n+    return this;\n+  }\n+\n+  // Fourth type of queries: REACTIONS\n+  reactions(config) {\n+    const { pr_number, reviews_count,\n+      comments_count, discussions_per_review } = config || {};\n+    this._fetch = this._fetchReactions;\n+    this.prNumber = pr_number;\n+    // number of comments to fetch per pull request\n+    this.reviewsCount = reviews_count || 20;\n+    // number of discussions to fetch per review\n+    this.discussionsPerReview = discussions_per_review || 10;\n+    // number of comments to fetch per pull request\n+    this.commentsCount = comments_count || 20;\n+    return this;\n+  }\n+\n+  async fetchAll(config) {\n+    const { per_page } = config || {};\n+    this.perPage = per_page || 100;\n+    this.cursor = null;\n+    this.pageCount = 0;\n+    this.fetchedData = null;\n+\n+    if (this._fetch === this._fetchLabels\n+      || this._fetch === this._fetchReactions) {\n+      console.log('warning: only ISSUES and PULL REQUESTS have `fetchAll` method.',\n+        'Will call `fetchOne()` instead.');\n+      return await this.fetchOne(config);\n+    }\n+\n+    // fetch data with pagination\n+    this.pagination = true;\n+    while (this.pagination) {\n+      // clear warning count before every fresh fetch\n+      this.warningCount = 0;\n+      await this._fetch(this.cursor);\n+    }\n+    if (this.debug) {\n+      console.log('owner:', this.repoOwner, 'name:', this.repoName,\n+        'pagination:', this.pagination, 'page count:',\n+        this.pageCount, 'fetching ends.');\n+    }\n+    return this.fetchedData;\n+  }\n+\n+  async fetchOne(config) {\n+    const { per_page } = config || {};\n+    this.perPage = per_page || 100;\n+    this.cursor = null;\n+    this.pageCount = 0;\n+    this.warningCount = 0;\n+    this.fetchedData = null;\n+    // fetch data without pagination\n+    await this._fetch();\n+    return this.fetchedData;\n+  }\n+\n+  _fetchReactions = async () => {\n+    const owner = this.repoOwner;\n+    const name = this.repoName;\n+    const number = this.prNumber;\n+    const reviewsCount = this.reviewsCount ? this.reviewsCount : this.perPage;\n+    const commentsCount = this.commentsCount ? this.commentsCount : this.perPage;\n+    const discussionsPerReview = this.discussionsPerReview;\n+\n+    if (this.debug) {\n+      console.log('\\nfetch reactions, owner:', owner, 'name:', name,\n+        'pull request number', number);\n+    }\n+\n+    let data, errors;\n+    try {\n+      ({ data, errors } = await this.client.query(\n+        GITHUB_REACTION_INFO_QUERY,\n+        {owner, name, number, reviewsCount, discussionsPerReview, commentsCount}\n+      ));\n+    } catch (error) {\n+      console.log('fetch reactions of pr failed',\n+        'owner:', owner, 'name:', name, 'pull request number:', number,\n+        'reviewsCount:', reviewsCount, 'discussionsPerReview', discussionsPerReview,\n+        'commentsCount', commentsCount, 'error:', error);\n+    }\n+\n+    let rawComments;\n+    if (data) {\n+      // update rate limit\n+      this._updateRateLimit(data.rateLimit);\n+      // collect review comments\n+      rawComments = data.repository.pullRequest.reviews.nodes.map(\n+        node => node.comments.nodes);\n+      rawComments = [].concat.apply([], rawComments);\n+      // collect issue comments\n+      rawComments = rawComments.concat(\n+        data.repository.pullRequest.comments.nodes);\n+    } else {\n+      this.warningCount++;\n+      console.log('warning: no available reaction data!',\n+        'owner:', owner, 'name:', name, 'pull request number:', number,\n+        'error:', errors);\n+      return await this._handleWarning(this._fetchReactions);\n+    }\n+    // reactions are wrapped by corresponding comment\n+    this.fetchedData = rawComments;\n+  }\n+\n+  _fetchLabels = async () => {\n+    const owner = this.repoOwner;\n+    const name = this.repoName;\n+\n+    if (this.debug) {\n+      console.log('\\nfetch labels, owner:', owner, 'name:', name);\n+    }\n+\n+    let data, errors;\n+    try {\n+      ({ data, errors } = await this.client.query(\n+        GITHUB_LABEL_INFO_QUERY,\n+        {owner, name}\n+      ));\n+    } catch (error) {\n+      console.log('fetch labels failed',\n+        'owner:', owner, 'name:', name, 'error:', error);\n+    }\n+\n+    if (data && data.repository) {\n+      // update rate limit\n+      this._updateRateLimit(data.rateLimit);\n+\n+      const result = data.repository.labels.nodes.map(node => ({\n+        id: node.id,\n+        name: node.name,\n+        color: node.color,\n+        default: node.isDefault,\n+      }));\n+      this.fetchedData = {\n+        repoOwner: owner,\n+        repoName: name,\n+        labels: result\n+      };\n+    } else {\n+      this.warningCount++;\n+      console.log('warning: no available label data!',\n+        'owner:', owner, 'name:', name, 'error:', errors);\n+      return await this._handleWarning(this._fetchLabels);\n+    }\n+  }\n+\n+  _fetchIssues = async () => {\n+    const owner = this.repoOwner;\n+    const name = this.repoName;\n+    const perPage = this._slowStart();\n+    const cursor = this.cursor;\n+    const orderBy = this.orderBy;\n+    const pageCount = this.pageCount;\n+    const earliestDate = this.earliestDate;\n+\n+    if (this.debug) {\n+      console.log('\\nfetch issues, owner:', owner, 'name:', name,\n+        'cursor:', cursor, 'page count:', pageCount);\n+    }\n+\n+    let data, errors, hasPreviousPage = false, reachDateThreshold = false;\n+    try {\n+      ({ data, errors } = await this.client.query(\n+        GITHUB_ISSUE_INFO_QUERY,\n+        {owner, name, perPage, before: cursor, orderBy}\n+      ));\n+    } catch (error) {\n+      console.log('fetch issue fails, owner:', owner, 'name:', name,\n+        'cursor:', cursor, 'error:', error);\n+    }\n+    if (data && data.repository) {\n+      // update rate limit\n+      this._updateRateLimit(data.rateLimit);\n+\n+      this.pageCount++;\n+      const { nodes, pageInfo } = data.repository.issues;\n+      this.cursor = pageInfo.startCursor;\n+      hasPreviousPage = pageInfo.hasPreviousPage;\n+      const result = nodes.map(node => {\n+        if (getTime(node.updatedAt) < getTime(earliestDate)) {\n+          reachDateThreshold = true;\n+          return null;\n+        }\n+        return this._mapNodeToIssue(node);\n+      }).filter((node) => node);\n+\n+      // store fetched data within this page\n+      if (!this.fetchedData) {\n+        this.fetchedData = [];\n+      }\n+\n+      // if result === [null], skip it\n+      if (result && result.length && result[0]) {\n+        this.fetchedData = this.fetchedData.concat(result);\n+      }\n+\n+      if (!hasPreviousPage || reachDateThreshold) {\n+        // set pagination false to prevent further fetching\n+        this.pagination = false;\n+      }\n+    } else {\n+      this.warningCount += 1;\n+      console.log('Warning: no available data for issues. owner:', owner,\n+        'name:', name, 'pageCount:', pageCount, 'error message:', errors);\n+      return await this._handleWarning(this._fetchIssues);\n+    }\n+  }\n+\n+  _fetchPullRequests = async () => {\n+    const owner = this.repoOwner;\n+    const name = this.repoName;\n+    const perPage = this._slowStart();\n+    const cursor = this.cursor;\n+    const orderBy = this.orderBy;\n+    const pageCount = this.pageCount;\n+    const earliestDate = this.earliestDate;\n+\n+    if (this.debug) {\n+      console.log('\\nfetch pull requests, owner:', owner, 'name:', name,\n+        'cursor:', cursor, 'page count:', pageCount);\n+    }\n+\n+    let data, errors, hasPreviousPage = false, reachDateThreshold = false;\n+    try {\n+      ({ data, errors } = await this.client.query(\n+        GITHUB_PR_INFO_QUERY,\n+        {owner, name, perPage, before: cursor, orderBy}\n+      ));\n+    } catch (error) {\n+      console.log('fetch pull request fails, owner:', owner, 'name:', name,\n+        'cursor:', cursor, 'error:', error);\n+    }\n+    if (data && data.repository) {\n+      // update rate limit\n+      this._updateRateLimit(data.rateLimit);\n+\n+      this.pageCount++;\n+      const { nodes, pageInfo } = data.repository.pullRequests;\n+      this.cursor = pageInfo.startCursor;\n+      hasPreviousPage = pageInfo.hasPreviousPage;\n+      const result = await Promise.all(nodes.map(async node => {\n+        if (getTime(node.updatedAt) < getTime(earliestDate)) {\n+          reachDateThreshold = true;\n+          return null;\n+        }\n+        let info = this._mapNodeToIssue(node);\n+\n+        let rawComments, comments;\n+        // collect review comments\n+        rawComments = node.reviews.nodes.map(node => node.comments.nodes);\n+        rawComments = [].concat.apply([], rawComments);\n+        // collect issue comments\n+        rawComments = rawComments.concat(node.comments.nodes);\n+\n+        // fetch reactions only if there are reactions within that PR\n+        // to reduce API hits.\n+        // trick: a comment has received reaction(s) iff\n+        // reactionGroup.createdAt attribute is not null\n+        const hasReactions = rawComments.reduce((has, rawComment) => {\n+          return has || rawComment.reactionGroups.reduce((flag, node) => {\n+            return (flag || node.createdAt) ? true : false;\n+          }, false);\n+        }, false);\n+\n+        if (hasReactions) {\n+          if (this.debug) {\n+            console.log('pull request has reactions. repoOwner:', owner,\n+              'repoName:', name, 'pullRequest number:', node.number);\n+          }\n+          const number = node.number;\n+          const reviewsCount = Math.min(node.reviews.totalCount, 20);\n+          // max number of discussions within a review\n+          const discussionsPerReview = Math.min(\n+            node.reviews.nodes.reduce(\n+              (max, review) => Math.max(max, review.comments.totalCount), 0),\n+            100);\n+          const commentsCount = Math.min(node.comments.totalCount, 100);\n+\n+          const commentsWithReactions = await new GraphQLClientBase(this.token,\n+            this.debug, this.sleepTime, 3)\n+            .repo(this.repoOwner, this.repoName)\n+            .reactions({pr_number: number,\n+              reviews_count: reviewsCount,\n+              discussions_per_review: discussionsPerReview,\n+              comments_count: commentsCount})\n+            .fetchOne();\n+\n+          // merge rawComments with commentsWithReactions\n+          if (commentsWithReactions && commentsWithReactions.length) {\n+            rawComments.forEach((comment, index) => {\n+              if (comment.id !== commentsWithReactions[index].id) {\n+                console.log('warning: comments and reactions do not fit!',\n+                  'pr number:', number, 'comment.id:', comment.id,\n+                  'comment with reactions id:', commentsWithReactions[index].id);\n+              } else {\n+                comment.reactions = commentsWithReactions[index].reactions;\n+              }\n+            });\n+          }\n+        }\n+        // filter out useless reviews\n+        rawComments = rawComments.filter(node => {\n+          let flag = true;\n+          // filter comments that don't need meta-reviews\n+          for (const ignoreContent of this.ignoreContent.split(' ')) {\n+            if (node.bodyText.match(ignoreContent)) {\n+              // filter reviews with specific content\n+              flag = false;\n+            }\n+          }\n+          for (const ignoreAuthor of this.ignoreAuthor.split(' ')) {\n+            if (node.author && node.author.login === ignoreAuthor) {\n+              // filter reviews done by specific authors\n+              flag = false;\n+            }\n+          }\n+          return flag;\n+        });\n+\n+        comments = rawComments.map(node => {\n+          let commentAuthor, reactions;\n+\n+          if (node.author) {\n+            commentAuthor = {\n+              login: node.author.login,\n+              avatarUrl: node.author.avatarUrl,\n+              name: node.author.name\n+            };\n+          } else {\n+            commentAuthor = {\n+              login: null,\n+              avatarUrl: null\n+            };\n+          }\n+\n+          if (node.reactions) reactions = node.reactions.nodes;\n+\n+          return {\n+            id: node.id,\n+            url: node.url,\n+            bodyText: node.bodyText,\n+            diffHunk: node.diffHunk ? node.diffHunk : null,\n+            author: commentAuthor,\n+            reactions,\n+            createdAt: node.createdAt,\n+            lastEditedAt: node.lastEditedAt,\n+            // the native `updatedAt` field of comment is inaccurate\n+            updatedAt: node.lastEditedAt ? node.lastEditedAt : node.createdAt\n+          };\n+        });\n+        info.issue.pullRequest = {\n+          htmlUrl: node.url,\n+          comments\n+        };\n+        return info;\n+      }).filter((node) => node));\n+\n+      // store fetched data within this page\n+      if (!this.fetchedData) {\n+        this.fetchedData = [];\n+      }\n+\n+      // if result === [null], skip it\n+      if (result && result.length && result[0]) {\n+        this.fetchedData = this.fetchedData.concat(result);\n+      }\n+\n+      if (!hasPreviousPage || reachDateThreshold) {\n+        // set pagination false to prevent further fetching\n+        this.pagination = false;\n+      }\n+    } else {\n+      this.warningCount += 1;\n+      console.log('Warning: no available data for pull request. owner:', owner,\n+        'name:', name, 'pageCount:', pageCount, 'error message:', errors);\n+      return await this._handleWarning(this._fetchPullRequests);\n+    }\n+  }\n+\n+  _mapNodeToIssue(node) {\n+    let user, assignee, milestone;\n+\n+    if (node.author) {\n+      user = {\n+        login: node.author.login,\n+        avatarUrl: node.author.avatarUrl\n+      };\n+    } else {\n+      user = {\n+        login: null,\n+        avatarUrl: null\n+      };\n+    }\n+\n+    if (node.assignees.nodes && node.assignees.nodes.length) {\n+      assignee = {\n+        login: node.assignees.nodes[0].login,\n+        avatarUrl: node.assignees.nodes[0].avatarUrl\n+      };\n+    } else {\n+      assignee = null;\n+    }\n+\n+    if (node.milestone) {\n+      milestone = {\n+        title: node.milestone.title,\n+        createdAt: node.milestone.createdAt,\n+        dueOn: node.milestone.dueOn,\n+        state: node.milestone.state.toLowerCase(),\n+        htmlUrl: node.milestone.url,\n+        description: node.milestone.description\n+      };\n+    } else {\n+      milestone = {\n+        title: null,\n+        createdAt: null,\n+        dueOn: null,\n+        state: null,\n+        htmlUrl: null,\n+        description: null\n+      };","author":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4","name":"Boxuan Li"},"reactions":[],"createdAt":"2018-07-02T02:15:58Z","lastEditedAt":"2018-07-02T02:23:39Z","updatedAt":"2018-07-02T02:23:39Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDI2OTM0MA==","url":"https://github.com/coala/gh-board/pull/67#discussion_r200269340","bodyText":"name the file as index.js so we could import without specifying the file name","diffHunk":"@@ -6,7 +6,7 @@ import {\n   GITHUB_PR_INFO_QUERY,\n   GITHUB_LABEL_INFO_QUERY,\n   GITHUB_REACTION_INFO_QUERY\n-} from '../script/queries';\n+} from '../script/queries/export';","author":{"login":"blazeu","avatarUrl":"https://avatars0.githubusercontent.com/u/1438859?v=4","name":"Surya Widi"},"reactions":[],"createdAt":"2018-07-05T08:26:39Z","lastEditedAt":null,"updatedAt":"2018-07-05T08:26:39Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDI3MDUzMQ==","url":"https://github.com/coala/gh-board/pull/67#discussion_r200270531","bodyText":"There's Promise.resolve()\nBut returning whatever directly also wraps it  into promise because it's inside an async function.","diffHunk":"@@ -199,7 +199,30 @@ const issueStore = new class IssueStore extends EventEmitter {\n     }\n     let fetchPromise;\n     if (Client.canCacheLots()) {\n-      fetchPromise = Client.getOcto().repos(repoOwner, repoName).issues.fetchAll(opts);\n+      if (Client.useGraphQL()) {\n+        const [issues, pullRequests] = await Promise.all([\n+          Client.getGraphQLClient()\n+            .repo(repoOwner, repoName)\n+            .issues({sort: 'UPDATED_AT', earliestDate: lastSeenAt})\n+            .fetchAll({per_page: 100}),\n+          Client.getGraphQLClient()\n+            .repo(repoOwner, repoName)\n+            .pullRequests({sort: 'UPDATED_AT', earliestDate: lastSeenAt})\n+            .fetchAll({per_page: 30})\n+        ]);\n+        let result = [];\n+        if (issues) {\n+          result = result.concat(issues);\n+        }\n+        if (pullRequests) {\n+          result = result.concat(pullRequests);\n+        }\n+        fetchPromise = new Promise(resolve => resolve(","author":{"login":"blazeu","avatarUrl":"https://avatars0.githubusercontent.com/u/1438859?v=4","name":"Surya Widi"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNjEzMjE4NA==","createdAt":"2018-07-07T15:36:56Z","content":"THUMBS_UP","user":{"login":"li-boxuan","name":"Boxuan Li"}}],"createdAt":"2018-07-05T08:30:36Z","lastEditedAt":null,"updatedAt":"2018-07-05T08:30:36Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDMzNTAzMA==","url":"https://github.com/coala/gh-board/pull/67#discussion_r200335030","bodyText":"The problem is pre-fetch.js is using index.js. I am planning to use the new client to rebuild pre-fetching, but not now. So for now, I use export.js.","diffHunk":"@@ -6,7 +6,7 @@ import {\n   GITHUB_PR_INFO_QUERY,\n   GITHUB_LABEL_INFO_QUERY,\n   GITHUB_REACTION_INFO_QUERY\n-} from '../script/queries';\n+} from '../script/queries/export';","author":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4","name":"Boxuan Li"},"reactions":[],"createdAt":"2018-07-05T12:35:36Z","lastEditedAt":null,"updatedAt":"2018-07-05T12:35:36Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDU1NTE3NA==","url":"https://github.com/coala/gh-board/pull/67#discussion_r200555174","bodyText":"possibly deferred to a separate followup issue after this is merged ...\nWhat about adding a query parameter to force either GraphQL or standard API ?\nAnd (if still feasible) possibly add a env var which does the same for the pre-fetch and/or developer's local server?","diffHunk":"@@ -191,6 +193,17 @@ class Client extends EventEmitter {\n     let {token, password} = this.getCredentials();\n     return !!token || !!password;\n   }\n+  useGraphQL() {\n+    // use GraphQL when applicable, provided `hasCredentials()` is true\n+    // developers need to change the behaviour here in case they","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNjEzMjMwMA==","createdAt":"2018-07-07T15:44:55Z","content":"HOORAY","user":{"login":"li-boxuan","name":"Boxuan Li"}}],"createdAt":"2018-07-06T05:54:01Z","lastEditedAt":null,"updatedAt":"2018-07-06T05:54:01Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDU1NTY0Nw==","url":"https://github.com/coala/gh-board/pull/67#discussion_r200555647","bodyText":"trailing comma ?","diffHunk":"@@ -0,0 +1,600 @@\n+import moment from 'moment';\n+import GraphQL from 'graphql-client';\n+\n+import {\n+  GITHUB_ISSUE_INFO_QUERY,\n+  GITHUB_PR_INFO_QUERY,\n+  GITHUB_LABEL_INFO_QUERY,\n+  GITHUB_REACTION_INFO_QUERY","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-06T05:57:35Z","lastEditedAt":null,"updatedAt":"2018-07-06T05:57:35Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDU1NTc1OA==","url":"https://github.com/coala/gh-board/pull/67#discussion_r200555758","bodyText":"trailing comma ?","diffHunk":"@@ -0,0 +1,600 @@\n+import moment from 'moment';\n+import GraphQL from 'graphql-client';\n+\n+import {\n+  GITHUB_ISSUE_INFO_QUERY,\n+  GITHUB_PR_INFO_QUERY,\n+  GITHUB_LABEL_INFO_QUERY,\n+  GITHUB_REACTION_INFO_QUERY\n+} from '../script/queries/export';\n+\n+const DEBUG = process.env.NODE_ENV === 'development';\n+\n+function getTime(timeString) {\n+  // parse timezone-aware time in string format to number\n+  // e.g. '2017-01-01T00:00:00Z' becomes 1483228800000\n+  // null means the earliest date\n+  if (timeString) {\n+    return moment(timeString).toDate().getTime();\n+  } else {\n+    return 0;\n+  }\n+}\n+\n+function sleep(s) {\n+  return new Promise(resolve => setTimeout(resolve, s * 1000));\n+}\n+\n+// A wrapper for GraphQL client that supports chainable methods.\n+// Concurrency is NOT supported.\n+// sample usages:\n+// 1. fetchAllIssues = await Client.getGraphQLClient()\n+//      .repo(repoOwner, repoName)\n+//      .issues({sort: 'UPDATED_AT'}).\n+//      .fetchAll({per_page: 100});\n+// 2. fetchAllReactions = await Client.getGraphQLClient()\n+//      .repo(repoOwner, repoName)\n+//      .reactions({pr_number, per_review: 20})\n+//      .fetchOne({per_page: 100});\n+\n+class GraphQLClientBase {\n+  constructor(token, sleepTime = 3, warningThreshold = 15) {\n+    this.token = token;\n+    this.GH_GQL_BASE = 'https://api.github.com/graphql';\n+    this.GH_GQL_OPTIONS = {\n+      url: this.GH_GQL_BASE,\n+      headers: token\n+        ? { Authorization: `bearer ${token}` }\n+        : {}","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-06T05:58:27Z","lastEditedAt":null,"updatedAt":"2018-07-06T05:58:27Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDU1NTkwOQ==","url":"https://github.com/coala/gh-board/pull/67#discussion_r200555909","bodyText":"trailing comma ?\nI'll stop with the trailing comma here, in case you or @blazeu believe they are not appropriate in these contexts.","diffHunk":"@@ -0,0 +1,600 @@\n+import moment from 'moment';\n+import GraphQL from 'graphql-client';\n+\n+import {\n+  GITHUB_ISSUE_INFO_QUERY,\n+  GITHUB_PR_INFO_QUERY,\n+  GITHUB_LABEL_INFO_QUERY,\n+  GITHUB_REACTION_INFO_QUERY\n+} from '../script/queries/export';\n+\n+const DEBUG = process.env.NODE_ENV === 'development';\n+\n+function getTime(timeString) {\n+  // parse timezone-aware time in string format to number\n+  // e.g. '2017-01-01T00:00:00Z' becomes 1483228800000\n+  // null means the earliest date\n+  if (timeString) {\n+    return moment(timeString).toDate().getTime();\n+  } else {\n+    return 0;\n+  }\n+}\n+\n+function sleep(s) {\n+  return new Promise(resolve => setTimeout(resolve, s * 1000));\n+}\n+\n+// A wrapper for GraphQL client that supports chainable methods.\n+// Concurrency is NOT supported.\n+// sample usages:\n+// 1. fetchAllIssues = await Client.getGraphQLClient()\n+//      .repo(repoOwner, repoName)\n+//      .issues({sort: 'UPDATED_AT'}).\n+//      .fetchAll({per_page: 100});\n+// 2. fetchAllReactions = await Client.getGraphQLClient()\n+//      .repo(repoOwner, repoName)\n+//      .reactions({pr_number, per_review: 20})\n+//      .fetchOne({per_page: 100});\n+\n+class GraphQLClientBase {\n+  constructor(token, sleepTime = 3, warningThreshold = 15) {\n+    this.token = token;\n+    this.GH_GQL_BASE = 'https://api.github.com/graphql';\n+    this.GH_GQL_OPTIONS = {\n+      url: this.GH_GQL_BASE,\n+      headers: token\n+        ? { Authorization: `bearer ${token}` }\n+        : {}\n+    };\n+    this.client = GraphQL(this.GH_GQL_OPTIONS);\n+\n+    // sleep time (sec) before timeout retry\n+    this.sleepTime = sleepTime;\n+\n+    // maximum number of warnings before stop fetching\n+    this.warningThreshold = warningThreshold;\n+  }\n+\n+  repo(repoOwner, repoName) {\n+    this.repoOwner = repoOwner;\n+    this.repoName = repoName;\n+    if (DEBUG) {\n+      console.log('repoOwner set:', repoOwner, 'repoName set:', repoName);\n+    }\n+    return this;\n+  }\n+\n+  // First type of queries: ISSUES\n+  issues(config) {\n+    const { sort, direction, earliestDate } = config || {};\n+    // There are three types of order\n+    // https://developer.github.com/v4/enum/issueorderfield/\n+    // COMMENTS, CREATED_AT (default), and UPDATED_AT\n+    this.orderBy = {\n+      field: sort || 'CREATED_AT',\n+      direction: direction || 'ASC'","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNjEzMjE4OA==","createdAt":"2018-07-07T15:37:05Z","content":"THUMBS_UP","user":{"login":"li-boxuan","name":"Boxuan Li"}}],"createdAt":"2018-07-06T05:59:36Z","lastEditedAt":null,"updatedAt":"2018-07-06T05:59:36Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDU1NTk5OQ==","url":"https://github.com/coala/gh-board/pull/67#discussion_r200555999","bodyText":"IMO the sort .. should go on a new line below, so that it lines up with the other items.","diffHunk":"@@ -0,0 +1,600 @@\n+import moment from 'moment';\n+import GraphQL from 'graphql-client';\n+\n+import {\n+  GITHUB_ISSUE_INFO_QUERY,\n+  GITHUB_PR_INFO_QUERY,\n+  GITHUB_LABEL_INFO_QUERY,\n+  GITHUB_REACTION_INFO_QUERY\n+} from '../script/queries/export';\n+\n+const DEBUG = process.env.NODE_ENV === 'development';\n+\n+function getTime(timeString) {\n+  // parse timezone-aware time in string format to number\n+  // e.g. '2017-01-01T00:00:00Z' becomes 1483228800000\n+  // null means the earliest date\n+  if (timeString) {\n+    return moment(timeString).toDate().getTime();\n+  } else {\n+    return 0;\n+  }\n+}\n+\n+function sleep(s) {\n+  return new Promise(resolve => setTimeout(resolve, s * 1000));\n+}\n+\n+// A wrapper for GraphQL client that supports chainable methods.\n+// Concurrency is NOT supported.\n+// sample usages:\n+// 1. fetchAllIssues = await Client.getGraphQLClient()\n+//      .repo(repoOwner, repoName)\n+//      .issues({sort: 'UPDATED_AT'}).\n+//      .fetchAll({per_page: 100});\n+// 2. fetchAllReactions = await Client.getGraphQLClient()\n+//      .repo(repoOwner, repoName)\n+//      .reactions({pr_number, per_review: 20})\n+//      .fetchOne({per_page: 100});\n+\n+class GraphQLClientBase {\n+  constructor(token, sleepTime = 3, warningThreshold = 15) {\n+    this.token = token;\n+    this.GH_GQL_BASE = 'https://api.github.com/graphql';\n+    this.GH_GQL_OPTIONS = {\n+      url: this.GH_GQL_BASE,\n+      headers: token\n+        ? { Authorization: `bearer ${token}` }\n+        : {}\n+    };\n+    this.client = GraphQL(this.GH_GQL_OPTIONS);\n+\n+    // sleep time (sec) before timeout retry\n+    this.sleepTime = sleepTime;\n+\n+    // maximum number of warnings before stop fetching\n+    this.warningThreshold = warningThreshold;\n+  }\n+\n+  repo(repoOwner, repoName) {\n+    this.repoOwner = repoOwner;\n+    this.repoName = repoName;\n+    if (DEBUG) {\n+      console.log('repoOwner set:', repoOwner, 'repoName set:', repoName);\n+    }\n+    return this;\n+  }\n+\n+  // First type of queries: ISSUES\n+  issues(config) {\n+    const { sort, direction, earliestDate } = config || {};\n+    // There are three types of order\n+    // https://developer.github.com/v4/enum/issueorderfield/\n+    // COMMENTS, CREATED_AT (default), and UPDATED_AT\n+    this.orderBy = {\n+      field: sort || 'CREATED_AT',\n+      direction: direction || 'ASC'\n+    };\n+    this._fetch = this._fetchIssues;\n+    this.earliestDate = earliestDate;\n+    return this;\n+  }\n+\n+  // Second type of queries: PULLREQUESTS\n+  pullRequests(config) {\n+    const { sort, direction, earliestDate,","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-06T06:00:19Z","lastEditedAt":null,"updatedAt":"2018-07-06T06:00:19Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDU1NjI4Ng==","url":"https://github.com/coala/gh-board/pull/67#discussion_r200556286","bodyText":"ideally this coala specific config is not in this library, but is provided by separate configuration.","diffHunk":"@@ -0,0 +1,600 @@\n+import moment from 'moment';\n+import GraphQL from 'graphql-client';\n+\n+import {\n+  GITHUB_ISSUE_INFO_QUERY,\n+  GITHUB_PR_INFO_QUERY,\n+  GITHUB_LABEL_INFO_QUERY,\n+  GITHUB_REACTION_INFO_QUERY\n+} from '../script/queries/export';\n+\n+const DEBUG = process.env.NODE_ENV === 'development';\n+\n+function getTime(timeString) {\n+  // parse timezone-aware time in string format to number\n+  // e.g. '2017-01-01T00:00:00Z' becomes 1483228800000\n+  // null means the earliest date\n+  if (timeString) {\n+    return moment(timeString).toDate().getTime();\n+  } else {\n+    return 0;\n+  }\n+}\n+\n+function sleep(s) {\n+  return new Promise(resolve => setTimeout(resolve, s * 1000));\n+}\n+\n+// A wrapper for GraphQL client that supports chainable methods.\n+// Concurrency is NOT supported.\n+// sample usages:\n+// 1. fetchAllIssues = await Client.getGraphQLClient()\n+//      .repo(repoOwner, repoName)\n+//      .issues({sort: 'UPDATED_AT'}).\n+//      .fetchAll({per_page: 100});\n+// 2. fetchAllReactions = await Client.getGraphQLClient()\n+//      .repo(repoOwner, repoName)\n+//      .reactions({pr_number, per_review: 20})\n+//      .fetchOne({per_page: 100});\n+\n+class GraphQLClientBase {\n+  constructor(token, sleepTime = 3, warningThreshold = 15) {\n+    this.token = token;\n+    this.GH_GQL_BASE = 'https://api.github.com/graphql';\n+    this.GH_GQL_OPTIONS = {\n+      url: this.GH_GQL_BASE,\n+      headers: token\n+        ? { Authorization: `bearer ${token}` }\n+        : {}\n+    };\n+    this.client = GraphQL(this.GH_GQL_OPTIONS);\n+\n+    // sleep time (sec) before timeout retry\n+    this.sleepTime = sleepTime;\n+\n+    // maximum number of warnings before stop fetching\n+    this.warningThreshold = warningThreshold;\n+  }\n+\n+  repo(repoOwner, repoName) {\n+    this.repoOwner = repoOwner;\n+    this.repoName = repoName;\n+    if (DEBUG) {\n+      console.log('repoOwner set:', repoOwner, 'repoName set:', repoName);\n+    }\n+    return this;\n+  }\n+\n+  // First type of queries: ISSUES\n+  issues(config) {\n+    const { sort, direction, earliestDate } = config || {};\n+    // There are three types of order\n+    // https://developer.github.com/v4/enum/issueorderfield/\n+    // COMMENTS, CREATED_AT (default), and UPDATED_AT\n+    this.orderBy = {\n+      field: sort || 'CREATED_AT',\n+      direction: direction || 'ASC'\n+    };\n+    this._fetch = this._fetchIssues;\n+    this.earliestDate = earliestDate;\n+    return this;\n+  }\n+\n+  // Second type of queries: PULLREQUESTS\n+  pullRequests(config) {\n+    const { sort, direction, earliestDate,\n+      ignoreAuthor, ignoreContent } = config || {};\n+    // order of pull requests and issues follow the same rule\n+    // see comment within `issues` method\n+    this.orderBy = {\n+      field: sort || 'CREATED_AT',\n+      direction: direction || 'ASC'\n+    };\n+    this._fetch = this._fetchPullRequests;\n+    this.earliestDate = earliestDate;\n+\n+    // review will be ignored if it matches any string specified here\n+    // it can be a literal or a regular expression\n+    // delimiter: space\n+    if (ignoreAuthor || ignoreAuthor === '') {\n+      this.ignoreAuthor = ignoreAuthor;\n+    } else {\n+      // default value\n+      this.ignoreAuthor = 'gitmate-bot rultor';\n+    }\n+\n+    // review will be ignored if it's written by any author specified here\n+    // delimiter: space\n+    if (ignoreContent || ignoreContent === '') {\n+      this.ignoreContent = ignoreContent;\n+    } else {\n+      // default value\n+      this.ignoreContent = '@gitmate-bot @rultor /^(unack|ack)/g';","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNjEzMjAyOA==","createdAt":"2018-07-07T15:23:10Z","content":"THUMBS_UP","user":{"login":"li-boxuan","name":"Boxuan Li"}}],"createdAt":"2018-07-06T06:02:36Z","lastEditedAt":null,"updatedAt":"2018-07-06T06:02:36Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDU1NjM1MQ==","url":"https://github.com/coala/gh-board/pull/67#discussion_r200556351","bodyText":"per consts in pullRequests(config)","diffHunk":"@@ -0,0 +1,600 @@\n+import moment from 'moment';\n+import GraphQL from 'graphql-client';\n+\n+import {\n+  GITHUB_ISSUE_INFO_QUERY,\n+  GITHUB_PR_INFO_QUERY,\n+  GITHUB_LABEL_INFO_QUERY,\n+  GITHUB_REACTION_INFO_QUERY\n+} from '../script/queries/export';\n+\n+const DEBUG = process.env.NODE_ENV === 'development';\n+\n+function getTime(timeString) {\n+  // parse timezone-aware time in string format to number\n+  // e.g. '2017-01-01T00:00:00Z' becomes 1483228800000\n+  // null means the earliest date\n+  if (timeString) {\n+    return moment(timeString).toDate().getTime();\n+  } else {\n+    return 0;\n+  }\n+}\n+\n+function sleep(s) {\n+  return new Promise(resolve => setTimeout(resolve, s * 1000));\n+}\n+\n+// A wrapper for GraphQL client that supports chainable methods.\n+// Concurrency is NOT supported.\n+// sample usages:\n+// 1. fetchAllIssues = await Client.getGraphQLClient()\n+//      .repo(repoOwner, repoName)\n+//      .issues({sort: 'UPDATED_AT'}).\n+//      .fetchAll({per_page: 100});\n+// 2. fetchAllReactions = await Client.getGraphQLClient()\n+//      .repo(repoOwner, repoName)\n+//      .reactions({pr_number, per_review: 20})\n+//      .fetchOne({per_page: 100});\n+\n+class GraphQLClientBase {\n+  constructor(token, sleepTime = 3, warningThreshold = 15) {\n+    this.token = token;\n+    this.GH_GQL_BASE = 'https://api.github.com/graphql';\n+    this.GH_GQL_OPTIONS = {\n+      url: this.GH_GQL_BASE,\n+      headers: token\n+        ? { Authorization: `bearer ${token}` }\n+        : {}\n+    };\n+    this.client = GraphQL(this.GH_GQL_OPTIONS);\n+\n+    // sleep time (sec) before timeout retry\n+    this.sleepTime = sleepTime;\n+\n+    // maximum number of warnings before stop fetching\n+    this.warningThreshold = warningThreshold;\n+  }\n+\n+  repo(repoOwner, repoName) {\n+    this.repoOwner = repoOwner;\n+    this.repoName = repoName;\n+    if (DEBUG) {\n+      console.log('repoOwner set:', repoOwner, 'repoName set:', repoName);\n+    }\n+    return this;\n+  }\n+\n+  // First type of queries: ISSUES\n+  issues(config) {\n+    const { sort, direction, earliestDate } = config || {};\n+    // There are three types of order\n+    // https://developer.github.com/v4/enum/issueorderfield/\n+    // COMMENTS, CREATED_AT (default), and UPDATED_AT\n+    this.orderBy = {\n+      field: sort || 'CREATED_AT',\n+      direction: direction || 'ASC'\n+    };\n+    this._fetch = this._fetchIssues;\n+    this.earliestDate = earliestDate;\n+    return this;\n+  }\n+\n+  // Second type of queries: PULLREQUESTS\n+  pullRequests(config) {\n+    const { sort, direction, earliestDate,\n+      ignoreAuthor, ignoreContent } = config || {};\n+    // order of pull requests and issues follow the same rule\n+    // see comment within `issues` method\n+    this.orderBy = {\n+      field: sort || 'CREATED_AT',\n+      direction: direction || 'ASC'\n+    };\n+    this._fetch = this._fetchPullRequests;\n+    this.earliestDate = earliestDate;\n+\n+    // review will be ignored if it matches any string specified here\n+    // it can be a literal or a regular expression\n+    // delimiter: space\n+    if (ignoreAuthor || ignoreAuthor === '') {\n+      this.ignoreAuthor = ignoreAuthor;\n+    } else {\n+      // default value\n+      this.ignoreAuthor = 'gitmate-bot rultor';\n+    }\n+\n+    // review will be ignored if it's written by any author specified here\n+    // delimiter: space\n+    if (ignoreContent || ignoreContent === '') {\n+      this.ignoreContent = ignoreContent;\n+    } else {\n+      // default value\n+      this.ignoreContent = '@gitmate-bot @rultor /^(unack|ack)/g';\n+    }\n+\n+    return this;\n+  }\n+\n+  // Third type of queries: LABELS\n+  labels() {\n+    this._fetch = this._fetchLabels;\n+    return this;\n+  }\n+\n+  // Fourth type of queries: REACTIONS\n+  reactions(config) {\n+    const { pr_number, reviews_count,","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-06T06:03:08Z","lastEditedAt":null,"updatedAt":"2018-07-06T06:03:08Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDU1NjQ0Ng==","url":"https://github.com/coala/gh-board/pull/67#discussion_r200556446","bodyText":"this is my python brain kicking in ....\nthe || .. here should be indented more so that it doesnt align with the console.log(..) on the next line.","diffHunk":"@@ -0,0 +1,600 @@\n+import moment from 'moment';\n+import GraphQL from 'graphql-client';\n+\n+import {\n+  GITHUB_ISSUE_INFO_QUERY,\n+  GITHUB_PR_INFO_QUERY,\n+  GITHUB_LABEL_INFO_QUERY,\n+  GITHUB_REACTION_INFO_QUERY\n+} from '../script/queries/export';\n+\n+const DEBUG = process.env.NODE_ENV === 'development';\n+\n+function getTime(timeString) {\n+  // parse timezone-aware time in string format to number\n+  // e.g. '2017-01-01T00:00:00Z' becomes 1483228800000\n+  // null means the earliest date\n+  if (timeString) {\n+    return moment(timeString).toDate().getTime();\n+  } else {\n+    return 0;\n+  }\n+}\n+\n+function sleep(s) {\n+  return new Promise(resolve => setTimeout(resolve, s * 1000));\n+}\n+\n+// A wrapper for GraphQL client that supports chainable methods.\n+// Concurrency is NOT supported.\n+// sample usages:\n+// 1. fetchAllIssues = await Client.getGraphQLClient()\n+//      .repo(repoOwner, repoName)\n+//      .issues({sort: 'UPDATED_AT'}).\n+//      .fetchAll({per_page: 100});\n+// 2. fetchAllReactions = await Client.getGraphQLClient()\n+//      .repo(repoOwner, repoName)\n+//      .reactions({pr_number, per_review: 20})\n+//      .fetchOne({per_page: 100});\n+\n+class GraphQLClientBase {\n+  constructor(token, sleepTime = 3, warningThreshold = 15) {\n+    this.token = token;\n+    this.GH_GQL_BASE = 'https://api.github.com/graphql';\n+    this.GH_GQL_OPTIONS = {\n+      url: this.GH_GQL_BASE,\n+      headers: token\n+        ? { Authorization: `bearer ${token}` }\n+        : {}\n+    };\n+    this.client = GraphQL(this.GH_GQL_OPTIONS);\n+\n+    // sleep time (sec) before timeout retry\n+    this.sleepTime = sleepTime;\n+\n+    // maximum number of warnings before stop fetching\n+    this.warningThreshold = warningThreshold;\n+  }\n+\n+  repo(repoOwner, repoName) {\n+    this.repoOwner = repoOwner;\n+    this.repoName = repoName;\n+    if (DEBUG) {\n+      console.log('repoOwner set:', repoOwner, 'repoName set:', repoName);\n+    }\n+    return this;\n+  }\n+\n+  // First type of queries: ISSUES\n+  issues(config) {\n+    const { sort, direction, earliestDate } = config || {};\n+    // There are three types of order\n+    // https://developer.github.com/v4/enum/issueorderfield/\n+    // COMMENTS, CREATED_AT (default), and UPDATED_AT\n+    this.orderBy = {\n+      field: sort || 'CREATED_AT',\n+      direction: direction || 'ASC'\n+    };\n+    this._fetch = this._fetchIssues;\n+    this.earliestDate = earliestDate;\n+    return this;\n+  }\n+\n+  // Second type of queries: PULLREQUESTS\n+  pullRequests(config) {\n+    const { sort, direction, earliestDate,\n+      ignoreAuthor, ignoreContent } = config || {};\n+    // order of pull requests and issues follow the same rule\n+    // see comment within `issues` method\n+    this.orderBy = {\n+      field: sort || 'CREATED_AT',\n+      direction: direction || 'ASC'\n+    };\n+    this._fetch = this._fetchPullRequests;\n+    this.earliestDate = earliestDate;\n+\n+    // review will be ignored if it matches any string specified here\n+    // it can be a literal or a regular expression\n+    // delimiter: space\n+    if (ignoreAuthor || ignoreAuthor === '') {\n+      this.ignoreAuthor = ignoreAuthor;\n+    } else {\n+      // default value\n+      this.ignoreAuthor = 'gitmate-bot rultor';\n+    }\n+\n+    // review will be ignored if it's written by any author specified here\n+    // delimiter: space\n+    if (ignoreContent || ignoreContent === '') {\n+      this.ignoreContent = ignoreContent;\n+    } else {\n+      // default value\n+      this.ignoreContent = '@gitmate-bot @rultor /^(unack|ack)/g';\n+    }\n+\n+    return this;\n+  }\n+\n+  // Third type of queries: LABELS\n+  labels() {\n+    this._fetch = this._fetchLabels;\n+    return this;\n+  }\n+\n+  // Fourth type of queries: REACTIONS\n+  reactions(config) {\n+    const { pr_number, reviews_count,\n+      comments_count, discussions_per_review } = config || {};\n+    this._fetch = this._fetchReactions;\n+    this.prNumber = pr_number;\n+    // number of comments to fetch per pull request\n+    this.reviewsCount = reviews_count || 20;\n+    // number of discussions to fetch per review\n+    this.discussionsPerReview = discussions_per_review || 10;\n+    // number of comments to fetch per pull request\n+    this.commentsCount = comments_count || 20;\n+    return this;\n+  }\n+\n+  async fetchAll(config) {\n+    const { per_page } = config || {};\n+    this.perPage = per_page || 100;\n+    this.cursor = null;\n+    this.pageCount = 0;\n+    this.fetchedData = null;\n+\n+    if (this._fetch === this._fetchLabels\n+      || this._fetch === this._fetchReactions) {","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNjA5NTg5Mg==","createdAt":"2018-07-06T12:34:32Z","content":"THUMBS_UP","user":{"login":"blazeu","name":"Surya Widi"}}],"createdAt":"2018-07-06T06:03:54Z","lastEditedAt":null,"updatedAt":"2018-07-06T06:03:54Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDgxNDk3MA==","url":"https://github.com/coala/gh-board/pull/67#discussion_r200814970","bodyText":"I checked Airbnb style and they recommend trailing commas. I'll add trailing commas and keep in mind in the future.","diffHunk":"@@ -0,0 +1,600 @@\n+import moment from 'moment';\n+import GraphQL from 'graphql-client';\n+\n+import {\n+  GITHUB_ISSUE_INFO_QUERY,\n+  GITHUB_PR_INFO_QUERY,\n+  GITHUB_LABEL_INFO_QUERY,\n+  GITHUB_REACTION_INFO_QUERY\n+} from '../script/queries/export';\n+\n+const DEBUG = process.env.NODE_ENV === 'development';\n+\n+function getTime(timeString) {\n+  // parse timezone-aware time in string format to number\n+  // e.g. '2017-01-01T00:00:00Z' becomes 1483228800000\n+  // null means the earliest date\n+  if (timeString) {\n+    return moment(timeString).toDate().getTime();\n+  } else {\n+    return 0;\n+  }\n+}\n+\n+function sleep(s) {\n+  return new Promise(resolve => setTimeout(resolve, s * 1000));\n+}\n+\n+// A wrapper for GraphQL client that supports chainable methods.\n+// Concurrency is NOT supported.\n+// sample usages:\n+// 1. fetchAllIssues = await Client.getGraphQLClient()\n+//      .repo(repoOwner, repoName)\n+//      .issues({sort: 'UPDATED_AT'}).\n+//      .fetchAll({per_page: 100});\n+// 2. fetchAllReactions = await Client.getGraphQLClient()\n+//      .repo(repoOwner, repoName)\n+//      .reactions({pr_number, per_review: 20})\n+//      .fetchOne({per_page: 100});\n+\n+class GraphQLClientBase {\n+  constructor(token, sleepTime = 3, warningThreshold = 15) {\n+    this.token = token;\n+    this.GH_GQL_BASE = 'https://api.github.com/graphql';\n+    this.GH_GQL_OPTIONS = {\n+      url: this.GH_GQL_BASE,\n+      headers: token\n+        ? { Authorization: `bearer ${token}` }\n+        : {}\n+    };\n+    this.client = GraphQL(this.GH_GQL_OPTIONS);\n+\n+    // sleep time (sec) before timeout retry\n+    this.sleepTime = sleepTime;\n+\n+    // maximum number of warnings before stop fetching\n+    this.warningThreshold = warningThreshold;\n+  }\n+\n+  repo(repoOwner, repoName) {\n+    this.repoOwner = repoOwner;\n+    this.repoName = repoName;\n+    if (DEBUG) {\n+      console.log('repoOwner set:', repoOwner, 'repoName set:', repoName);\n+    }\n+    return this;\n+  }\n+\n+  // First type of queries: ISSUES\n+  issues(config) {\n+    const { sort, direction, earliestDate } = config || {};\n+    // There are three types of order\n+    // https://developer.github.com/v4/enum/issueorderfield/\n+    // COMMENTS, CREATED_AT (default), and UPDATED_AT\n+    this.orderBy = {\n+      field: sort || 'CREATED_AT',\n+      direction: direction || 'ASC'","author":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4","name":"Boxuan Li"},"reactions":[],"createdAt":"2018-07-07T15:20:25Z","lastEditedAt":null,"updatedAt":"2018-07-07T15:20:25Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDgxNTM1OQ==","url":"https://github.com/coala/gh-board/pull/67#discussion_r200815359","bodyText":"Promise.resolve() works. 👍\nfetchPromise = result.map((item) => item.issue); This doesn't work though, not sure if I was doing wrong.","diffHunk":"@@ -199,7 +199,30 @@ const issueStore = new class IssueStore extends EventEmitter {\n     }\n     let fetchPromise;\n     if (Client.canCacheLots()) {\n-      fetchPromise = Client.getOcto().repos(repoOwner, repoName).issues.fetchAll(opts);\n+      if (Client.useGraphQL()) {\n+        const [issues, pullRequests] = await Promise.all([\n+          Client.getGraphQLClient()\n+            .repo(repoOwner, repoName)\n+            .issues({sort: 'UPDATED_AT', earliestDate: lastSeenAt})\n+            .fetchAll({per_page: 100}),\n+          Client.getGraphQLClient()\n+            .repo(repoOwner, repoName)\n+            .pullRequests({sort: 'UPDATED_AT', earliestDate: lastSeenAt})\n+            .fetchAll({per_page: 30})\n+        ]);\n+        let result = [];\n+        if (issues) {\n+          result = result.concat(issues);\n+        }\n+        if (pullRequests) {\n+          result = result.concat(pullRequests);\n+        }\n+        fetchPromise = new Promise(resolve => resolve(","author":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4","name":"Boxuan Li"},"reactions":[],"createdAt":"2018-07-07T15:36:28Z","lastEditedAt":null,"updatedAt":"2018-07-07T15:36:28Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDgxNTQ4Mg==","url":"https://github.com/coala/gh-board/pull/67#discussion_r200815482","bodyText":"You mean those config (reviews_count, comments_count, discussions_per_review) should be pullRequest config?\nThat doesn't work in this way. Although the name is reactions, it is actually fetching pr reviews (together with reactions), since there is no way to get all reactions directly. To reduce API hits, we don't need to fetch a same number of reviews per PR (say, 20 per PR) when fetching reactions, coz that number has been known when fetching pr reviews.","diffHunk":"@@ -0,0 +1,600 @@\n+import moment from 'moment';\n+import GraphQL from 'graphql-client';\n+\n+import {\n+  GITHUB_ISSUE_INFO_QUERY,\n+  GITHUB_PR_INFO_QUERY,\n+  GITHUB_LABEL_INFO_QUERY,\n+  GITHUB_REACTION_INFO_QUERY\n+} from '../script/queries/export';\n+\n+const DEBUG = process.env.NODE_ENV === 'development';\n+\n+function getTime(timeString) {\n+  // parse timezone-aware time in string format to number\n+  // e.g. '2017-01-01T00:00:00Z' becomes 1483228800000\n+  // null means the earliest date\n+  if (timeString) {\n+    return moment(timeString).toDate().getTime();\n+  } else {\n+    return 0;\n+  }\n+}\n+\n+function sleep(s) {\n+  return new Promise(resolve => setTimeout(resolve, s * 1000));\n+}\n+\n+// A wrapper for GraphQL client that supports chainable methods.\n+// Concurrency is NOT supported.\n+// sample usages:\n+// 1. fetchAllIssues = await Client.getGraphQLClient()\n+//      .repo(repoOwner, repoName)\n+//      .issues({sort: 'UPDATED_AT'}).\n+//      .fetchAll({per_page: 100});\n+// 2. fetchAllReactions = await Client.getGraphQLClient()\n+//      .repo(repoOwner, repoName)\n+//      .reactions({pr_number, per_review: 20})\n+//      .fetchOne({per_page: 100});\n+\n+class GraphQLClientBase {\n+  constructor(token, sleepTime = 3, warningThreshold = 15) {\n+    this.token = token;\n+    this.GH_GQL_BASE = 'https://api.github.com/graphql';\n+    this.GH_GQL_OPTIONS = {\n+      url: this.GH_GQL_BASE,\n+      headers: token\n+        ? { Authorization: `bearer ${token}` }\n+        : {}\n+    };\n+    this.client = GraphQL(this.GH_GQL_OPTIONS);\n+\n+    // sleep time (sec) before timeout retry\n+    this.sleepTime = sleepTime;\n+\n+    // maximum number of warnings before stop fetching\n+    this.warningThreshold = warningThreshold;\n+  }\n+\n+  repo(repoOwner, repoName) {\n+    this.repoOwner = repoOwner;\n+    this.repoName = repoName;\n+    if (DEBUG) {\n+      console.log('repoOwner set:', repoOwner, 'repoName set:', repoName);\n+    }\n+    return this;\n+  }\n+\n+  // First type of queries: ISSUES\n+  issues(config) {\n+    const { sort, direction, earliestDate } = config || {};\n+    // There are three types of order\n+    // https://developer.github.com/v4/enum/issueorderfield/\n+    // COMMENTS, CREATED_AT (default), and UPDATED_AT\n+    this.orderBy = {\n+      field: sort || 'CREATED_AT',\n+      direction: direction || 'ASC'\n+    };\n+    this._fetch = this._fetchIssues;\n+    this.earliestDate = earliestDate;\n+    return this;\n+  }\n+\n+  // Second type of queries: PULLREQUESTS\n+  pullRequests(config) {\n+    const { sort, direction, earliestDate,\n+      ignoreAuthor, ignoreContent } = config || {};\n+    // order of pull requests and issues follow the same rule\n+    // see comment within `issues` method\n+    this.orderBy = {\n+      field: sort || 'CREATED_AT',\n+      direction: direction || 'ASC'\n+    };\n+    this._fetch = this._fetchPullRequests;\n+    this.earliestDate = earliestDate;\n+\n+    // review will be ignored if it matches any string specified here\n+    // it can be a literal or a regular expression\n+    // delimiter: space\n+    if (ignoreAuthor || ignoreAuthor === '') {\n+      this.ignoreAuthor = ignoreAuthor;\n+    } else {\n+      // default value\n+      this.ignoreAuthor = 'gitmate-bot rultor';\n+    }\n+\n+    // review will be ignored if it's written by any author specified here\n+    // delimiter: space\n+    if (ignoreContent || ignoreContent === '') {\n+      this.ignoreContent = ignoreContent;\n+    } else {\n+      // default value\n+      this.ignoreContent = '@gitmate-bot @rultor /^(unack|ack)/g';\n+    }\n+\n+    return this;\n+  }\n+\n+  // Third type of queries: LABELS\n+  labels() {\n+    this._fetch = this._fetchLabels;\n+    return this;\n+  }\n+\n+  // Fourth type of queries: REACTIONS\n+  reactions(config) {\n+    const { pr_number, reviews_count,","author":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4","name":"Boxuan Li"},"reactions":[],"createdAt":"2018-07-07T15:42:30Z","lastEditedAt":null,"updatedAt":"2018-07-07T15:42:30Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDgxNTU4Mw==","url":"https://github.com/coala/gh-board/pull/67#discussion_r200815583","bodyText":"I think it could be deferred to a separate follow-up issue as this is worth being tracked by a separate issue.","diffHunk":"@@ -191,6 +193,17 @@ class Client extends EventEmitter {\n     let {token, password} = this.getCredentials();\n     return !!token || !!password;\n   }\n+  useGraphQL() {\n+    // use GraphQL when applicable, provided `hasCredentials()` is true\n+    // developers need to change the behaviour here in case they","author":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4","name":"Boxuan Li"},"reactions":[],"createdAt":"2018-07-07T15:45:55Z","lastEditedAt":null,"updatedAt":"2018-07-07T15:45:55Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTczMjE2Nw==","url":"https://github.com/coala/gh-board/pull/67#discussion_r205732167","bodyText":"Just noting that when I run eslint with airbnb on the new files of this PR (not issue-store.js)...\nnpx install-peerdeps --dev eslint-config-airbnb\n..\n./node_modules/.bin/eslint script/queries/export.js script/queries/github_issue_info.js script/queries/github_label_info.js script/queries/github_pr_info.js script/queries/github_reaction_info.js src/github-client.js src/github-graphql.js\n\n✖ 119 problems (114 errors, 5 warnings)\n  88 errors, 0 warnings potentially fixable with the `--fix` option.\n\ne.g.\nsrc/github-graphql.js:\n   2:1   error  Dependency cycle detected  import/no-cycle\n  15:26  error  Missing trailing comma     comma-dangle\n  22:5   error  Unary operator '++' used   no-plusplus","diffHunk":"@@ -0,0 +1,26 @@\n+import GraphQLClientBase from './github-graphql-base';\n+import Client from './github-client';\n+\n+// global event id\n+let EVENT_ID = 0;\n+\n+class GraphQLClient extends GraphQLClientBase {\n+  _updateRateLimit(rateLimit) {\n+    this.remaining = rateLimit.remaining;\n+    this.limit = rateLimit.limit;\n+    this.resetAt = rateLimit.resetAt;\n+    const emitterRate = {\n+      remaining: this.remaining,\n+      limit: this.limit,\n+      reset: this.resetAt\n+    };\n+    // to match Restful API style\n+    const responseStatus = 200;\n+    // config = {method, path, data, options}\n+    const config = null;\n+    Client.emit('end', EVENT_ID, config, responseStatus, emitterRate);\n+    EVENT_ID++;","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNzExMDgwMA==","createdAt":"2018-07-28T02:31:24Z","content":"THUMBS_UP","user":{"login":"li-boxuan","name":"Boxuan Li"}}],"createdAt":"2018-07-27T10:28:26Z","lastEditedAt":null,"updatedAt":"2018-07-27T10:28:26Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTkzMDk5MA==","url":"https://github.com/coala/gh-board/pull/67#discussion_r205930990","bodyText":"I've fixed errors with src/github-graphql.js.\nRunning the same command now, I am only getting 8 errors with src/github-client.js which are irrelevant to this pr:\n  69:1  error  Expected indentation of 10 spaces but found 8   indent\n  70:1  error  Expected indentation of 12 spaces but found 10  indent\n  71:1  error  Expected indentation of 12 spaces but found 10  indent\n  72:1  error  Expected indentation of 10 spaces but found 8   indent\n  73:1  error  Expected indentation of 10 spaces but found 8   indent\n  74:1  error  Expected indentation of 12 spaces but found 10  indent\n  75:1  error  Expected indentation of 12 spaces but found 10  indent\n  76:1  error  Expected indentation of 10 spaces but found 8   indent\n\nNot sure why you got 119 problems after running eslint.","diffHunk":"@@ -0,0 +1,26 @@\n+import GraphQLClientBase from './github-graphql-base';\n+import Client from './github-client';\n+\n+// global event id\n+let EVENT_ID = 0;\n+\n+class GraphQLClient extends GraphQLClientBase {\n+  _updateRateLimit(rateLimit) {\n+    this.remaining = rateLimit.remaining;\n+    this.limit = rateLimit.limit;\n+    this.resetAt = rateLimit.resetAt;\n+    const emitterRate = {\n+      remaining: this.remaining,\n+      limit: this.limit,\n+      reset: this.resetAt\n+    };\n+    // to match Restful API style\n+    const responseStatus = 200;\n+    // config = {method, path, data, options}\n+    const config = null;\n+    Client.emit('end', EVENT_ID, config, responseStatus, emitterRate);\n+    EVENT_ID++;","author":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4","name":"Boxuan Li"},"reactions":[],"createdAt":"2018-07-28T03:15:35Z","lastEditedAt":null,"updatedAt":"2018-07-28T03:15:35Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwMTUyMjM4OQ==","url":"https://github.com/coala/gh-board/pull/67#issuecomment-401522389","bodyText":"I would add commit(s) to use the newly built client for issue sync during the following week.\nUPDATE:\nAlso, a side note is that I designed chainable methods by intention, in order to match existing https://github.com/philschatz/octokat.js style. And chainable methods look cleaner btw ;)","diffHunk":null,"author":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4","name":"Boxuan Li"},"reactions":[],"createdAt":"2018-06-30T06:58:40Z","lastEditedAt":"2018-06-30T15:00:19Z","updatedAt":"2018-06-30T15:00:19Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwMTUzNjY5Mg==","url":"https://github.com/coala/gh-board/pull/67#issuecomment-401536692","bodyText":"Can we use this in script/fetch-issues.js ?\nimport should be possible in Node http://2ality.com/2017/09/native-esm-node.html","diffHunk":null,"author":{"login":"blazeu","avatarUrl":"https://avatars0.githubusercontent.com/u/1438859?v=4","name":"Surya Widi"},"reactions":[],"createdAt":"2018-06-30T12:00:27Z","lastEditedAt":null,"updatedAt":"2018-06-30T12:00:27Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwMTU0NjIyNQ==","url":"https://github.com/coala/gh-board/pull/67#issuecomment-401546225","bodyText":"Can we use this in script/fetch-issues.js\n\nYes, I am planning to do it later (probably in coding phase 3). ;)","diffHunk":null,"author":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4","name":"Boxuan Li"},"reactions":[],"createdAt":"2018-06-30T14:58:44Z","lastEditedAt":null,"updatedAt":"2018-06-30T14:58:44Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwMTU0OTkzNg==","url":"https://github.com/coala/gh-board/pull/67#issuecomment-401549936","bodyText":"No way of telling if this is working, add tests?","diffHunk":null,"author":{"login":"blazeu","avatarUrl":"https://avatars0.githubusercontent.com/u/1438859?v=4","name":"Surya Widi"},"reactions":[],"createdAt":"2018-06-30T16:06:26Z","lastEditedAt":null,"updatedAt":"2018-06-30T16:06:26Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwMTY1NDczNA==","url":"https://github.com/coala/gh-board/pull/67#issuecomment-401654734","bodyText":"No way of telling if this is working\n\nI'll add issue sync commit in short (today or tomorrow)","diffHunk":null,"author":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4","name":"Boxuan Li"},"reactions":[],"createdAt":"2018-07-02T02:25:18Z","lastEditedAt":null,"updatedAt":"2018-07-02T02:25:18Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwNDU1ODU5NQ==","url":"https://github.com/coala/gh-board/pull/67#issuecomment-404558595","bodyText":"Updated this PR just now. Add TravisBuddy to ignoreAuthor.","diffHunk":null,"author":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4","name":"Boxuan Li"},"reactions":[],"createdAt":"2018-07-12T15:47:03Z","lastEditedAt":null,"updatedAt":"2018-07-12T15:47:03Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwNzc3MjM2Mw==","url":"https://github.com/coala/gh-board/pull/67#issuecomment-407772363","bodyText":"I've rebased this commit, and now gh-board is able to sync reviews.\nc.f. https://deploy-preview-67--coala-gh-board.netlify.com/#/r/coala:gh-board/kanban","diffHunk":null,"author":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4","name":"Boxuan Li"},"reactions":[],"createdAt":"2018-07-25T14:23:26Z","lastEditedAt":"2018-07-25T14:24:43Z","updatedAt":"2018-07-25T14:24:43Z"}]}}},{"repoOwner":"coala","repoName":"gh-board","updatedAtMs":1531379513000,"issue":{"htmlUrl":"https://github.com/coala/gh-board/pull/69","number":69,"title":"Sync gitignore","body":"Fixes #68","comments":4,"createdAt":"2018-07-03T14:03:15Z","updatedAt":"2018-07-12T07:11:53Z","closedAt":"2018-07-04T15:07:16Z","state":"merged","user":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4"},"owner":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4"},"labels":[{"name":"importance/medium","color":"65f23e"},{"name":"process/approved","color":"ededed"},{"name":"size/XS","color":"ededed"},{"name":"type/feature","color":"0052cc"}],"pullRequest":{"htmlUrl":"https://github.com/coala/gh-board/pull/69","comments":[]}}},{"repoOwner":"coala","repoName":"gh-board","updatedAtMs":1531982753000,"issue":{"htmlUrl":"https://github.com/coala/gh-board/pull/70","number":70,"title":"gh-board-gitignore.jj2: Add `src/lib/columns.js`","body":"Added an exception in .moban.dt/gh-board-gitignore.jj2","comments":10,"createdAt":"2018-07-07T09:19:14Z","updatedAt":"2018-07-19T06:45:53Z","closedAt":null,"state":"open","user":{"login":"igagankalra","avatarUrl":"https://avatars0.githubusercontent.com/u/22219148?v=4"},"owner":{"login":"igagankalra","avatarUrl":"https://avatars0.githubusercontent.com/u/22219148?v=4"},"assignee":{"login":"igagankalra","avatarUrl":"https://avatars0.githubusercontent.com/u/22219148?v=4"},"labels":[{"name":"difficulty/newcomer","color":"33a7bf"},{"name":"importance/medium","color":"65f23e"},{"name":"process/wip","color":"ead483"},{"name":"size/XS","color":"ededed"}],"pullRequest":{"htmlUrl":"https://github.com/coala/gh-board/pull/70","comments":[{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDgwOTkyMw==","url":"https://github.com/coala/gh-board/pull/70#discussion_r200809923","bodyText":"! is needed?","diffHunk":"@@ -7,5 +7,6 @@\n *.patch\n *.orig\n *.diff\n+!*/src/lib/columns.js","author":{"login":"sangamcse","avatarUrl":"https://avatars2.githubusercontent.com/u/26381717?v=4","name":"Sangam Kumar"},"reactions":[],"createdAt":"2018-07-07T11:28:16Z","lastEditedAt":null,"updatedAt":"2018-07-07T11:28:16Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDgxMDAyNg==","url":"https://github.com/coala/gh-board/pull/70#discussion_r200810026","bodyText":"yes, to forcefully include it despite other rules which ignore it.","diffHunk":"@@ -7,5 +7,6 @@\n *.patch\n *.orig\n *.diff\n+!*/src/lib/columns.js","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[{"id":"MDg6UmVhY3Rpb24yNjEyOTUyNw==","createdAt":"2018-07-07T11:36:22Z","content":"THUMBS_UP","user":{"login":"sangamcse","name":"Sangam Kumar"}}],"createdAt":"2018-07-07T11:35:45Z","lastEditedAt":null,"updatedAt":"2018-07-07T11:35:45Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTg4MTYzMg==","url":"https://github.com/coala/gh-board/pull/70#discussion_r201881632","bodyText":"Please also add this line to .gitignore (see Travis failure)","diffHunk":"@@ -7,5 +7,6 @@\n *.patch\n *.orig\n *.diff\n+!*/src/lib/columns.js","author":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4","name":"Boxuan Li"},"reactions":[],"createdAt":"2018-07-12T00:51:43Z","lastEditedAt":null,"updatedAt":"2018-07-12T00:51:43Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwMzIwODY4OQ==","url":"https://github.com/coala/gh-board/pull/70#issuecomment-403208689","bodyText":"Go through the newcomer guide http://coala.io/newcomer first. It will help you to write good commit messages.","diffHunk":null,"author":{"login":"sangamcse","avatarUrl":"https://avatars2.githubusercontent.com/u/26381717?v=4","name":"Sangam Kumar"},"reactions":[],"createdAt":"2018-07-07T11:23:13Z","lastEditedAt":null,"updatedAt":"2018-07-07T11:23:13Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwMzIwODc2OA==","url":"https://github.com/coala/gh-board/pull/70#issuecomment-403208768","bodyText":"I have gone through that but how can I solve this one, I don't think it's due to commit message or is it? @sangamcse","diffHunk":null,"author":{"login":"igagankalra","avatarUrl":"https://avatars0.githubusercontent.com/u/22219148?v=4","name":"Gagan Kalra"},"reactions":[],"createdAt":"2018-07-07T11:25:04Z","lastEditedAt":"2018-07-07T11:25:17Z","updatedAt":"2018-07-07T11:25:17Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwMzIwOTMyNg==","url":"https://github.com/coala/gh-board/pull/70#issuecomment-403209326","bodyText":"@igagankalra, you need to adjust your commit message to follow https://coala.io/commit\nDont worry about the moban sync problem.  Someone else will fix that, or we'll show you how to fix that, once your commit is OK.","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"reactions":[],"createdAt":"2018-07-07T11:36:59Z","lastEditedAt":null,"updatedAt":"2018-07-07T11:36:59Z"}]}}},{"repoOwner":"coala","repoName":"gh-board","updatedAtMs":1531551834000,"issue":{"htmlUrl":"https://github.com/coala/gh-board/pull/73","number":73,"title":".travis.yml: Enable keep-history","body":"Closes #52","comments":4,"createdAt":"2018-07-13T00:39:36Z","updatedAt":"2018-07-14T07:03:54Z","closedAt":"2018-07-13T01:51:11Z","state":"merged","user":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4"},"owner":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4"},"assignee":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4"},"labels":[{"name":"enhancement","color":"84b6eb"},{"name":"process/approved","color":"ededed"},{"name":"size/XS","color":"ededed"},{"name":"type/feature","color":"0052cc"}],"pullRequest":{"htmlUrl":"https://github.com/coala/gh-board/pull/73","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDQwNDY5MzQyNg==","url":"https://github.com/coala/gh-board/pull/73#issuecomment-404693426","bodyText":"Ack a295729","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-07-13T00:53:08Z","lastEditedAt":null,"updatedAt":"2018-07-13T00:53:08Z"}]}}},{"repoOwner":"coala","repoName":"gh-board","updatedAtMs":1531897575000,"issue":{"htmlUrl":"https://github.com/coala/gh-board/pull/75","number":75,"title":"run-test.sh: Verify files exist","body":"Verify issues.json and recent-issues.json\nfiles exist after build.\nCloses #74","comments":4,"createdAt":"2018-07-14T02:28:51Z","updatedAt":"2018-07-18T07:06:15Z","closedAt":"2018-07-16T19:01:38Z","state":"merged","user":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4"},"owner":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4"},"labels":[{"name":"bug","color":"ee0701"},{"name":"importance/medium","color":"65f23e"},{"name":"process/approved","color":"ededed"},{"name":"size/XS","color":"ededed"}],"pullRequest":{"htmlUrl":"https://github.com/coala/gh-board/pull/75","comments":[]}}},{"repoOwner":"coala","repoName":"gh-board","updatedAtMs":1531723501000,"issue":{"htmlUrl":"https://github.com/coala/gh-board/pull/77","number":77,"title":".travis.yml: Let moban task not deploy","body":"Fixes #76","comments":5,"createdAt":"2018-07-14T14:02:39Z","updatedAt":"2018-07-16T06:45:01Z","closedAt":"2018-07-15T03:26:22Z","state":"merged","user":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4"},"owner":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4"},"labels":[{"name":"bug","color":"ee0701"},{"name":"importance/medium","color":"65f23e"},{"name":"size/XS","color":"ededed"}],"pullRequest":{"htmlUrl":"https://github.com/coala/gh-board/pull/77","comments":[{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMjUxOTEzMg==","url":"https://github.com/coala/gh-board/pull/77#discussion_r202519132","bodyText":"Keep this.\nYou only need to add deploy: false to the moban job.","diffHunk":"@@ -5,10 +5,35 @@ cache:\n   directories:\n     - \"node_modules\"\n \n-# env forces jobs to be created from the top level settings\n-env:","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-07-14T16:19:31Z","lastEditedAt":null,"updatedAt":"2018-07-14T16:19:31Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwNTAyOTgxMg==","url":"https://github.com/coala/gh-board/pull/77#issuecomment-405029812","bodyText":"Seems travis won't trigger deploy for pull request. See build on my fork for the effect.\nIt triggers deploy not on moban test now.\nhttps://travis-ci.org/li-boxuan/gh-board/jobs/403907887#L4563\nhttps://travis-ci.org/li-boxuan/gh-board/jobs/403907888#L492","diffHunk":null,"author":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4","name":"Boxuan Li"},"createdAt":"2018-07-14T15:17:26Z","lastEditedAt":null,"updatedAt":"2018-07-14T15:17:26Z"}]}}},{"repoOwner":"coala","repoName":"gh-board","updatedAtMs":1532242024000,"issue":{"htmlUrl":"https://github.com/coala/gh-board/pull/79","number":79,"title":"Increase test timeout threshold","body":"Closes #78","comments":4,"createdAt":"2018-07-17T14:05:23Z","updatedAt":"2018-07-22T06:47:04Z","closedAt":"2018-07-19T05:24:09Z","state":"merged","user":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4"},"owner":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4"},"labels":[{"name":"bug","color":"ee0701"},{"name":"importance/medium","color":"65f23e"},{"name":"size/XS","color":"ededed"}],"pullRequest":{"htmlUrl":"https://github.com/coala/gh-board/pull/79","comments":[]}}},{"repoOwner":"coala","repoName":"gh-board","updatedAtMs":1532328511000,"issue":{"htmlUrl":"https://github.com/coala/gh-board/pull/80","number":80,"title":"login-modal.jsx: Add exception for default api url","body":"Set default api url to null if host is Netlify\nCloses #71","comments":7,"createdAt":"2018-07-17T14:22:06Z","updatedAt":"2018-07-23T06:48:31Z","closedAt":"2018-07-23T00:18:10Z","state":"merged","user":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4"},"owner":{"login":"li-boxuan","avatarUrl":"https://avatars2.githubusercontent.com/u/25746010?v=4"},"labels":[{"name":"size/XS","color":"ededed"}],"pullRequest":{"htmlUrl":"https://github.com/coala/gh-board/pull/80","comments":[]}}},{"repoOwner":"coala","repoName":"coala-html","updatedAtMs":1533204946000,"issue":{"htmlUrl":"https://github.com/coala/coala-html/pull/147","number":147,"title":".travis.yml: Enable travis-buddy","body":"Related to coala/meta#114","comments":4,"createdAt":"2018-05-02T19:14:03Z","updatedAt":"2018-08-02T10:15:46Z","closedAt":"2018-05-03T00:31:14Z","state":"merged","user":{"login":"manankalra","avatarUrl":"https://avatars3.githubusercontent.com/u/12759088?v=4"},"owner":{"login":"manankalra","avatarUrl":"https://avatars3.githubusercontent.com/u/12759088?v=4"},"labels":[{"name":"process/approved","color":"009800"},{"name":"size/XS","color":"00DE0F"}],"pullRequest":{"htmlUrl":"https://github.com/coala/coala-html/pull/147","comments":[]}}},{"repoOwner":"coala","repoName":"landing-frontend","updatedAtMs":1533343431000,"issue":{"htmlUrl":"https://github.com/coala/landing-frontend/pull/283","number":283,"title":"update ISSUE_TEMPLATE.md","body":"(I tried to follow what was written i did understand it overall but not perfectly)\nISSUE_TEMPLATE.md written instead of a link\nbasically i just copied what was written on the other side of the link because if someone have a crappy connection he/she won't have to wait for another tab/page to appear (sorry if this pr is useless)\nhave a nice day.","comments":0,"createdAt":"2018-08-03T03:28:59Z","updatedAt":"2018-08-04T00:43:51Z","closedAt":null,"state":"open","user":{"login":"slapash","avatarUrl":"https://avatars0.githubusercontent.com/u/22305318?v=4"},"owner":{"login":"slapash","avatarUrl":"https://avatars0.githubusercontent.com/u/22305318?v=4"},"labels":[{"name":"process/wip","color":"fbca04"},{"name":"size/XS","color":"ededed"}],"pullRequest":{"htmlUrl":"https://github.com/coala/landing-frontend/pull/283","comments":[{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzUzNjIyNQ==","url":"https://github.com/coala/landing-frontend/pull/283#discussion_r207536225","bodyText":"Thanks for your enhancement :), you can use ``` here in replacement of :: in `.rst` file, the current layout is little bit ugly :P","diffHunk":"@@ -1,5 +1,22 @@\n-<!-- Hello! If you're filing a bug, please include every step so as to help us reproduce it on our machines. If you're unsure about how to file an issue, use the issue template. If you need any help regarding usage of coala, check out the documentation or hit us up on chat. You can ignore or delete this text, it is commented and won't appear when the issue is submitted or previewed.\n+Hello! If you're filing a bug, please include every step so as to help us reproduce it on our machines. If you're unsure about how to file an issue, use the issue template.\n+\n+### Overview Description\n+\n+# Steps to Reproduce\n+\n+1.\n+2.\n+3.\n+\n+# Actual Results\n+\n+# Expected Results\n+\n+# Reproducibility\n+\n+# Additional Information:","author":{"login":"RaiVaibhav","avatarUrl":"https://avatars3.githubusercontent.com/u/22278438?v=4","name":"Vaibhav Rai"},"createdAt":"2018-08-03T12:59:15Z","lastEditedAt":null,"updatedAt":"2018-08-03T12:59:15Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNzUzNzAzOA==","url":"https://github.com/coala/landing-frontend/pull/283#discussion_r207537038","bodyText":"Can you reframe the above line?\n-->If you need any help regarding usage of coala, check out the documentation or hit us up on chat. You can ignore or delete this text, it is commented and won't appear when the issue is submitted or previewed.\nIMO your PR is just like enhancement for issue template","diffHunk":"@@ -1,5 +1,22 @@\n-<!-- Hello! If you're filing a bug, please include every step so as to help us reproduce it on our machines. If you're unsure about how to file an issue, use the issue template. If you need any help regarding usage of coala, check out the documentation or hit us up on chat. You can ignore or delete this text, it is commented and won't appear when the issue is submitted or previewed.\n+Hello! If you're filing a bug, please include every step so as to help us reproduce it on our machines. If you're unsure about how to file an issue, use the issue template.","author":{"login":"RaiVaibhav","avatarUrl":"https://avatars3.githubusercontent.com/u/22278438?v=4","name":"Vaibhav Rai"},"createdAt":"2018-08-03T13:02:31Z","lastEditedAt":null,"updatedAt":"2018-08-03T13:02:31Z"}]}}},{"repoOwner":"coala","repoName":"landing-frontend","updatedAtMs":1533209352000,"issue":{"htmlUrl":"https://github.com/coala/landing-frontend/pull/280","number":280,"title":"Use gitignore moban","body":"Related to https://gitlab.com/coala/mobans/issues/31\n\nFor short term contributors: we understand that getting your commits well\ndefined like we require is a hard task and takes some learning. If you\nlook to help without wanting to contribute long term there's no need\nfor you to learn this. Just drop us a message and we'll take care of brushing\nup your stuff for merge!\nChecklist\n\n I read the commit guidelines and I've followed\nthem.\n I ran coala over my code locally. (All commits have to pass\nindividually. It is not sufficient to have \"fixup commits\" on your PR,\nour bot will still report the issues for the previous commit.) You will\nlikely receive a lot of bot comments and build failures if coala does not\npass on every single commit!\n\nAfter you submit your pull request, DO NOT click the 'Update Branch' button.\nWhen asked for a rebase, consult coala.io/rebase\ninstead.\nPlease consider helping us by reviewing other peoples pull requests as well:\n\npick up any PR at https://coala.io/review\nreview it (check https://coala.io/reviewing for more info)\nif you are sure that it needs work, use cobot mark wip <URL> to get it out\nof the review queue.\n\nThe more you review, the more your score will grow at coala.io and we will\nreview your PRs faster!","comments":7,"createdAt":"2018-06-05T15:03:59Z","updatedAt":"2018-08-02T11:29:12Z","closedAt":"2018-06-17T13:36:41Z","state":"merged","user":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"owner":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4"},"labels":[{"name":"process/approved","color":"ededed"},{"name":"size/L","color":"ededed"}],"pullRequest":{"htmlUrl":"https://github.com/coala/landing-frontend/pull/280","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDM5Nzg3Njc5MA==","url":"https://github.com/coala/landing-frontend/pull/280#issuecomment-397876790","bodyText":"Hey! I'm GitMate.io! This pull request is being fastforwarded automatically. Please DO NOT push while fastforward is in progress or your changes would be lost permanently ⚠️","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-06-17T12:49:13Z","lastEditedAt":null,"updatedAt":"2018-06-17T12:49:13Z"},{"id":"MDEyOklzc3VlQ29tbWVudDM5Nzg3Njg3Mw==","url":"https://github.com/coala/landing-frontend/pull/280#issuecomment-397876873","bodyText":"Automated fastforward failed! Please fastforward your pull request manually via the command line.\nReason:\nCommand: git merge --ff-only head/moban\n\nExit Code: 128\n\nCause:\n\nfatal: Not possible to fast-forward, aborting.","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-06-17T12:50:30Z","lastEditedAt":null,"updatedAt":"2018-06-17T12:50:30Z"},{"id":"MDEyOklzc3VlQ29tbWVudDM5Nzg3OTUzOQ==","url":"https://github.com/coala/landing-frontend/pull/280#issuecomment-397879539","bodyText":"Hey! I'm GitMate.io! This pull request is being fastforwarded automatically. Please DO NOT push while fastforward is in progress or your changes would be lost permanently ⚠️","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-06-17T13:35:50Z","lastEditedAt":null,"updatedAt":"2018-06-17T13:35:50Z"},{"id":"MDEyOklzc3VlQ29tbWVudDM5Nzg3OTYyNQ==","url":"https://github.com/coala/landing-frontend/pull/280#issuecomment-397879625","bodyText":"Automated fastforward with GitMate.io was successful! 🎉","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-06-17T13:37:16Z","lastEditedAt":null,"updatedAt":"2018-06-17T13:37:16Z"}]}}},{"repoOwner":"coala","repoName":"landing-frontend","updatedAtMs":1532806515000,"issue":{"htmlUrl":"https://github.com/coala/landing-frontend/pull/281","number":281,"title":"Update Readme.md","body":"Closes #241\n\nFor short term contributors: we understand that getting your commits well\ndefined like we require is a hard task and takes some learning. If you\nlook to help without wanting to contribute long term there's no need\nfor you to learn this. Just drop us a message and we'll take care of brushing\nup your stuff for merge!\nChecklist\n\n I read the commit guidelines and I've followed\nthem.\n I ran coala over my code locally. (All commits have to pass\nindividually. It is not sufficient to have \"fixup commits\" on your PR,\nour bot will still report the issues for the previous commit.) You will\nlikely receive a lot of bot comments and build failures if coala does not\npass on every single commit!\n\nAfter you submit your pull request, DO NOT click the 'Update Branch' button.\nWhen asked for a rebase, consult coala.io/rebase\ninstead.\nPlease consider helping us by reviewing other peoples pull requests as well:\n\npick up any PR at https://coala.io/review\nreview it (check https://coala.io/reviewing for more info)\nif you are sure that it needs work, use cobot mark wip <URL> to get it out\nof the review queue.\n\nThe more you review, the more your score will grow at coala.io and we will\nreview your PRs faster!","comments":3,"createdAt":"2018-06-19T09:15:33Z","updatedAt":"2018-07-28T19:35:15Z","closedAt":null,"state":"open","user":{"login":"sagban","avatarUrl":"https://avatars0.githubusercontent.com/u/22216896?v=4"},"owner":{"login":"sagban","avatarUrl":"https://avatars0.githubusercontent.com/u/22216896?v=4"},"assignee":{"login":"sagban","avatarUrl":"https://avatars0.githubusercontent.com/u/22216896?v=4"},"labels":[{"name":"process/wip","color":"fbca04"},{"name":"size/XS","color":"ededed"}],"pullRequest":{"htmlUrl":"https://github.com/coala/landing-frontend/pull/281","comments":[{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk1MjEwOQ==","url":"https://github.com/coala/landing-frontend/pull/281#discussion_r205952109","bodyText":"We dont want to recommend people use python2\nPeople should only use python3 now","diffHunk":"@@ -1,15 +1,21 @@\n # landing-frontend\n-coala Landing Page - https://gitlab.com/coala/landing is needed as backend\n-\n+This is the coala frontend Landing Page which uses - https://gitlab.com/coala/landing as its backend.\n \n ## Usage\n \n-To run locally:\n-\n+To run locally, first clone the repository:\n+```sh\n     $ git clone https://github.com/coala/landing-frontend.git\n     $ cd landing-frontend\n-    $ python2 -m SimpleHTTPServer 8080\n-\n+```\n+Then to run the server:\n+```sh\n+    $ python2 -m SimpleHTTPServer 8080 #For python 2.x","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-07-28T19:33:41Z","lastEditedAt":null,"updatedAt":"2018-07-28T19:33:41Z"},{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNTk1MjEzNQ==","url":"https://github.com/coala/landing-frontend/pull/281#discussion_r205952135","bodyText":"This repository is the https://coala.io/ website frontend.\nIt uses https://gitlab.com/coala/landing as its backend.","diffHunk":"@@ -1,15 +1,21 @@\n # landing-frontend\n-coala Landing Page - https://gitlab.com/coala/landing is needed as backend\n-\n+This is the coala frontend Landing Page which uses - https://gitlab.com/coala/landing as its backend.","author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-07-28T19:34:40Z","lastEditedAt":null,"updatedAt":"2018-07-28T19:34:40Z"},{"id":"MDEyOklzc3VlQ29tbWVudDM5OTY2NDkwOA==","url":"https://github.com/coala/landing-frontend/pull/281#issuecomment-399664908","bodyText":"@jayvdb can you assigned me some work? According to newcomer guide, now I should work on difficulty/low issue.","diffHunk":null,"author":{"login":"sagban","avatarUrl":"https://avatars0.githubusercontent.com/u/22216896?v=4","name":"Sagar Bansal"},"createdAt":"2018-06-23T10:49:55Z","lastEditedAt":null,"updatedAt":"2018-06-23T10:49:55Z"}]}}},{"repoOwner":"coala","repoName":"landing-frontend","updatedAtMs":1532806776000,"issue":{"htmlUrl":"https://github.com/coala/landing-frontend/pull/238","number":238,"title":"Links below title are now shown properly in mobile view","body":"changed the margin-right form 5px to -30 px\nCloses #85","comments":20,"createdAt":"2017-11-03T12:46:25Z","updatedAt":"2018-07-28T19:39:36Z","closedAt":"2018-07-28T19:39:36Z","state":"closed","user":{"login":"harshant","avatarUrl":"https://avatars2.githubusercontent.com/u/18645807?v=4"},"owner":{"login":"harshant","avatarUrl":"https://avatars2.githubusercontent.com/u/18645807?v=4"},"assignee":{"login":"harshant","avatarUrl":"https://avatars2.githubusercontent.com/u/18645807?v=4"},"labels":[{"name":"difficulty/newcomer","color":"0e8a16"},{"name":"process/wip","color":"fbca04"},{"name":"size/XS","color":"ededed"},{"name":"status/STALE","color":"ededed"}],"pullRequest":{"htmlUrl":"https://github.com/coala/landing-frontend/pull/238","comments":[{"id":"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3Nzk3MjU4MQ==","url":"https://github.com/coala/landing-frontend/pull/238#discussion_r177972581","bodyText":"Please never modify a vendor supplied file.\nFind another method to edit our own style.\nPossibly, you might want to see coalaCSS repo for this kind of issue.","diffHunk":"@@ -5581,7 +5581,8 @@ button.btn-floating {\n   border-radius: 16px;\n   background-color: #e4e4e4;\n   margin-bottom: 5px;\n-  margin-right: 5px;\n+  margin-right: -40px;","author":{"login":"riouwa","avatarUrl":"https://avatars3.githubusercontent.com/u/18546252?v=4","name":"Dwi Satria Utama"},"createdAt":"2018-03-29T07:29:05Z","lastEditedAt":null,"updatedAt":"2018-03-29T07:29:05Z"},{"id":"MDEyOklzc3VlQ29tbWVudDM0MTg4MzQyNg==","url":"https://github.com/coala/landing-frontend/pull/238#issuecomment-341883426","bodyText":"@harshant Please refer to this guide for writing good commit messages. Also you can enable gh-pages from your fork and paste the link here for other to view the changes you have made. That would make the review process smooth. Please do this.","diffHunk":null,"author":{"login":"pradeepgangwar","avatarUrl":"https://avatars1.githubusercontent.com/u/21259802?v=4","name":"Pradeep Gangwar"},"createdAt":"2017-11-04T09:25:39Z","lastEditedAt":null,"updatedAt":"2017-11-04T09:25:39Z"},{"id":"MDEyOklzc3VlQ29tbWVudDM0MzIzNjk4NQ==","url":"https://github.com/coala/landing-frontend/pull/238#issuecomment-343236985","bodyText":"Please fix your commit message","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2017-11-09T17:54:21Z","lastEditedAt":null,"updatedAt":"2017-11-09T17:54:21Z"},{"id":"MDEyOklzc3VlQ29tbWVudDM0MzU2NzM3Nw==","url":"https://github.com/coala/landing-frontend/pull/238#issuecomment-343567377","bodyText":"Added a new commit with some more effective changes and good updated commit message.\nCheckout my second commit .","diffHunk":null,"author":{"login":"harshant","avatarUrl":"https://avatars2.githubusercontent.com/u/18645807?v=4","name":"Harshant Sharma"},"createdAt":"2017-11-10T19:42:17Z","lastEditedAt":"2017-11-10T19:43:23Z","updatedAt":"2017-11-10T19:43:23Z"},{"id":"MDEyOklzc3VlQ29tbWVudDM0MzU2OTI2Mg==","url":"https://github.com/coala/landing-frontend/pull/238#issuecomment-343569262","bodyText":"@harshant Please squash your commits and use short and effective message inside body of commit message. Preferably use less than 60 words.","diffHunk":null,"author":{"login":"pradeepgangwar","avatarUrl":"https://avatars1.githubusercontent.com/u/21259802?v=4","name":"Pradeep Gangwar"},"createdAt":"2017-11-10T19:50:08Z","lastEditedAt":null,"updatedAt":"2017-11-10T19:50:08Z"},{"id":"MDEyOklzc3VlQ29tbWVudDM0Mzc2MDQwNw==","url":"https://github.com/coala/landing-frontend/pull/238#issuecomment-343760407","bodyText":"done","diffHunk":null,"author":{"login":"harshant","avatarUrl":"https://avatars2.githubusercontent.com/u/18645807?v=4","name":"Harshant Sharma"},"createdAt":"2017-11-12T19:24:10Z","lastEditedAt":null,"updatedAt":"2017-11-12T19:24:10Z"},{"id":"MDEyOklzc3VlQ29tbWVudDM0Mzc2MTgyOQ==","url":"https://github.com/coala/landing-frontend/pull/238#issuecomment-343761829","bodyText":"@harshant Nice! squash commits also and it will be ready to land. Also please enable ghpages from your fork and paste the link here to test. It eases review process.","diffHunk":null,"author":{"login":"pradeepgangwar","avatarUrl":"https://avatars1.githubusercontent.com/u/21259802?v=4","name":"Pradeep Gangwar"},"createdAt":"2017-11-12T19:44:40Z","lastEditedAt":"2017-11-12T19:44:52Z","updatedAt":"2017-11-12T19:44:52Z"},{"id":"MDEyOklzc3VlQ29tbWVudDM0MzgyMDUwOA==","url":"https://github.com/coala/landing-frontend/pull/238#issuecomment-343820508","bodyText":"https://harshant.github.io/landing-frontend/#/home\nWhich commit you want to squash more ,I have squashed my second commit message.\nAnd CNAME commits are by mistake they add up to no change","diffHunk":null,"author":{"login":"harshant","avatarUrl":"https://avatars2.githubusercontent.com/u/18645807?v=4","name":"Harshant Sharma"},"createdAt":"2017-11-13T05:48:42Z","lastEditedAt":"2017-11-13T05:52:53Z","updatedAt":"2017-11-13T05:52:53Z"},{"id":"MDEyOklzc3VlQ29tbWVudDM0MzgzMjk5Nw==","url":"https://github.com/coala/landing-frontend/pull/238#issuecomment-343832997","bodyText":"@harshant  Squashing does not mean shortening commit message. It is about wrapping more than 1 commits into a single commit. There should be only one commit per issue. Please read about squashing here\nRest is fine.","diffHunk":null,"author":{"login":"pradeepgangwar","avatarUrl":"https://avatars1.githubusercontent.com/u/21259802?v=4","name":"Pradeep Gangwar"},"createdAt":"2017-11-13T07:14:37Z","lastEditedAt":"2017-11-13T07:15:50Z","updatedAt":"2017-11-13T07:15:50Z"},{"id":"MDEyOklzc3VlQ29tbWVudDM0Mzg1MzcyMg==","url":"https://github.com/coala/landing-frontend/pull/238#issuecomment-343853722","bodyText":"Hey now everything looks fine ,squashed into one commit ,and here is the link\nhttps://harshant.github.io/landing-frontend/#/home","diffHunk":null,"author":{"login":"harshant","avatarUrl":"https://avatars2.githubusercontent.com/u/18645807?v=4","name":"Harshant Sharma"},"createdAt":"2017-11-13T08:59:28Z","lastEditedAt":null,"updatedAt":"2017-11-13T08:59:28Z"},{"id":"MDEyOklzc3VlQ29tbWVudDM0NDAyODI0OQ==","url":"https://github.com/coala/landing-frontend/pull/238#issuecomment-344028249","bodyText":"Hey i want to work on another issue or review an issue ,\ncorobo assign coala/coala-quickstart#190 says you are ineligible","diffHunk":null,"author":{"login":"harshant","avatarUrl":"https://avatars2.githubusercontent.com/u/18645807?v=4","name":"Harshant Sharma"},"createdAt":"2017-11-13T19:22:13Z","lastEditedAt":null,"updatedAt":"2017-11-13T19:22:13Z"},{"id":"MDEyOklzc3VlQ29tbWVudDM0NDAzMDY3NQ==","url":"https://github.com/coala/landing-frontend/pull/238#issuecomment-344030675","bodyText":"you did not reference any issue in the commit message but instead referenced this PR.\nPlease reference the issue this belongs to.","diffHunk":null,"author":{"login":"sims1253","avatarUrl":"https://avatars2.githubusercontent.com/u/6530123?v=4","name":"Maximilian Scholz"},"createdAt":"2017-11-13T19:30:07Z","lastEditedAt":null,"updatedAt":"2017-11-13T19:30:07Z"},{"id":"MDEyOklzc3VlQ29tbWVudDM0NDAzMzM3Ng==","url":"https://github.com/coala/landing-frontend/pull/238#issuecomment-344033376","bodyText":"ok got it #85\nfixing my commit message","diffHunk":null,"author":{"login":"harshant","avatarUrl":"https://avatars2.githubusercontent.com/u/18645807?v=4","name":"Harshant Sharma"},"createdAt":"2017-11-13T19:38:37Z","lastEditedAt":"2017-11-13T19:43:07Z","updatedAt":"2017-11-13T19:43:07Z"},{"id":"MDEyOklzc3VlQ29tbWVudDM0NDAzNTM2OQ==","url":"https://github.com/coala/landing-frontend/pull/238#issuecomment-344035369","bodyText":"done","diffHunk":null,"author":{"login":"harshant","avatarUrl":"https://avatars2.githubusercontent.com/u/18645807?v=4","name":"Harshant Sharma"},"createdAt":"2017-11-13T19:45:28Z","lastEditedAt":null,"updatedAt":"2017-11-13T19:45:28Z"},{"id":"MDEyOklzc3VlQ29tbWVudDM1MDU0NTM3Mw==","url":"https://github.com/coala/landing-frontend/pull/238#issuecomment-350545373","bodyText":"Hello @harshant, just need a little rebase here and rest all the work is 👍","diffHunk":null,"author":{"login":"RaiVaibhav","avatarUrl":"https://avatars3.githubusercontent.com/u/22278438?v=4","name":"Vaibhav Rai"},"createdAt":"2017-12-10T12:36:53Z","lastEditedAt":null,"updatedAt":"2017-12-10T12:36:53Z"},{"id":"MDEyOklzc3VlQ29tbWVudDM1MDgzODI3NA==","url":"https://github.com/coala/landing-frontend/pull/238#issuecomment-350838274","bodyText":"hi @RaiVaibhav , i am not very femiliar with rebase , could you please elaborate further what you want me to do ,i have made commits on master branch , which branch to rebase?","diffHunk":null,"author":{"login":"harshant","avatarUrl":"https://avatars2.githubusercontent.com/u/18645807?v=4","name":"Harshant Sharma"},"createdAt":"2017-12-11T19:53:08Z","lastEditedAt":"2017-12-11T20:07:42Z","updatedAt":"2017-12-11T20:07:42Z"},{"id":"MDEyOklzc3VlQ29tbWVudDM1MTAzMjc5Mw==","url":"https://github.com/coala/landing-frontend/pull/238#issuecomment-351032793","bodyText":"@harshant  please next time open a PR with different branch,\nWhat I do is:\n1.) Update my master branch\n2.) Then update my local branch through master branch.\nFor Git Basics please got through, please read all\nOr got through\nIt will only help you in updating a master branch (Note: The changes you are making will reflect locally, to reflect on GitHub repo you have to push your changes.)\nAfter that, if you have opened a PR through some other branch you have to update your local branch from master branch (I will recommend to not do any changes in your master branch).\nHoping it will help :)","diffHunk":null,"author":{"login":"RaiVaibhav","avatarUrl":"https://avatars3.githubusercontent.com/u/22278438?v=4","name":"Vaibhav Rai"},"createdAt":"2017-12-12T12:06:42Z","lastEditedAt":null,"updatedAt":"2017-12-12T12:06:42Z"},{"id":"MDEyOklzc3VlQ29tbWVudDM3NzE0NjAyMQ==","url":"https://github.com/coala/landing-frontend/pull/238#issuecomment-377146021","bodyText":"Hey! I'm GitMate.io! This pull request is being rebased automatically. Please DO NOT push while rebase is in progress or your changes would be lost permanently ⚠️","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-03-29T07:20:04Z","lastEditedAt":null,"updatedAt":"2018-03-29T07:20:04Z"},{"id":"MDEyOklzc3VlQ29tbWVudDM3NzE0NjA4NQ==","url":"https://github.com/coala/landing-frontend/pull/238#issuecomment-377146085","bodyText":"Automated rebase with GitMate.io was successful! 🎉","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-03-29T07:20:19Z","lastEditedAt":null,"updatedAt":"2018-03-29T07:20:19Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwODYzMDUzNA==","url":"https://github.com/coala/landing-frontend/pull/238#issuecomment-408630534","bodyText":"Closing due to inactivity.","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-07-28T19:39:36Z","lastEditedAt":null,"updatedAt":"2018-07-28T19:39:36Z"}]}}},{"repoOwner":"coala","repoName":"coalaCSS","updatedAtMs":1532806226000,"issue":{"htmlUrl":"https://github.com/coala/coalaCSS/pull/32","number":32,"title":"Change cursor to pointer","body":"This commit changes the cursor type to pointer when the user's mouse\nhovers a clickable class.\nAlso added a misc section to the css file since this change didn't fit\ninto any other category.\nFixes #30","comments":3,"createdAt":"2018-03-13T21:37:04Z","updatedAt":"2018-07-28T19:30:26Z","closedAt":"2018-07-28T19:30:12Z","state":"merged","user":{"login":"guilherme-p","avatarUrl":"https://avatars1.githubusercontent.com/u/31377673?v=4"},"owner":{"login":"guilherme-p","avatarUrl":"https://avatars1.githubusercontent.com/u/31377673?v=4"},"labels":[],"pullRequest":{"htmlUrl":"https://github.com/coala/coalaCSS/pull/32","comments":[]}}},{"repoOwner":"coala","repoName":"coalaCSS","updatedAtMs":1532806679000,"issue":{"htmlUrl":"https://github.com/coala/coalaCSS/pull/19","number":19,"title":"coalaOnline: Style the repository linting input box","body":"@yukiisbored I have edited the commit message and also merged it properly. Please review.","comments":9,"createdAt":"2017-08-07T11:53:33Z","updatedAt":"2018-07-28T19:37:59Z","closedAt":"2018-07-28T19:37:57Z","state":"closed","user":{"login":"sd5869","avatarUrl":"https://avatars1.githubusercontent.com/u/8257951?v=4"},"owner":{"login":"sd5869","avatarUrl":"https://avatars1.githubusercontent.com/u/8257951?v=4"},"labels":[{"name":"process/pending_review","color":"ededed"},{"name":"process/wip","color":"ededed"},{"name":"size/XS","color":"ededed"}],"pullRequest":{"htmlUrl":"https://github.com/coala/coalaCSS/pull/19","comments":[{"id":"MDEyOklzc3VlQ29tbWVudDMyMDc4MDk3Mg==","url":"https://github.com/coala/coalaCSS/pull/19#issuecomment-320780972","bodyText":"@sd5869 please squash your commit messages https://asciinema.org/a/11269","diffHunk":null,"author":{"login":"SanketDG","avatarUrl":"https://avatars3.githubusercontent.com/u/8980971?v=4","name":"Sanket Dasgupta"},"createdAt":"2017-08-07T21:07:52Z","lastEditedAt":null,"updatedAt":"2017-08-07T21:07:52Z"},{"id":"MDEyOklzc3VlQ29tbWVudDMyMDkyNTYzNw==","url":"https://github.com/coala/coalaCSS/pull/19#issuecomment-320925637","bodyText":"@SanketDG Thanks for the link I have done it please review and let me know if there are any improvements to be made.","diffHunk":null,"author":{"login":"sd5869","avatarUrl":"https://avatars1.githubusercontent.com/u/8257951?v=4","name":"Siddharth Dungarwal"},"createdAt":"2017-08-08T11:14:53Z","lastEditedAt":null,"updatedAt":"2017-08-08T11:14:53Z"},{"id":"MDEyOklzc3VlQ29tbWVudDMyMDk1MTI1MQ==","url":"https://github.com/coala/coalaCSS/pull/19#issuecomment-320951251","bodyText":"@sd5869 your commits are not squashed. Please check again","diffHunk":null,"author":{"login":"SanketDG","avatarUrl":"https://avatars3.githubusercontent.com/u/8980971?v=4","name":"Sanket Dasgupta"},"createdAt":"2017-08-08T13:11:08Z","lastEditedAt":"2017-08-08T13:11:31Z","updatedAt":"2017-08-08T13:11:31Z"},{"id":"MDEyOklzc3VlQ29tbWVudDMyNDg0MTM5NA==","url":"https://github.com/coala/coalaCSS/pull/19#issuecomment-324841394","bodyText":"@SanketDG Please check now.","diffHunk":null,"author":{"login":"sd5869","avatarUrl":"https://avatars1.githubusercontent.com/u/8257951?v=4","name":"Siddharth Dungarwal"},"createdAt":"2017-08-25T07:09:30Z","lastEditedAt":null,"updatedAt":"2017-08-25T07:09:30Z"},{"id":"MDEyOklzc3VlQ29tbWVudDMyNDg4NzIyOQ==","url":"https://github.com/coala/coalaCSS/pull/19#issuecomment-324887229","bodyText":"Euhm, your commit message doesn't follow our commit message guidelines.\nSee coala.io/commit for reference.","diffHunk":null,"author":{"login":"yukiisbored","avatarUrl":"https://avatars0.githubusercontent.com/u/18437312?v=4","name":"Muhammad Kaisar Arkhan"},"createdAt":"2017-08-25T10:57:35Z","lastEditedAt":null,"updatedAt":"2017-08-25T10:57:35Z"},{"id":"MDEyOklzc3VlQ29tbWVudDMyOTk3NjE2Ng==","url":"https://github.com/coala/coalaCSS/pull/19#issuecomment-329976166","bodyText":"I read the guide could you tell me what must be the commit message please","diffHunk":null,"author":{"login":"sd5869","avatarUrl":"https://avatars1.githubusercontent.com/u/8257951?v=4","name":"Siddharth Dungarwal"},"createdAt":"2017-09-16T15:42:47Z","lastEditedAt":null,"updatedAt":"2017-09-16T15:42:47Z"},{"id":"MDEyOklzc3VlQ29tbWVudDM1MDQ5NTAwNQ==","url":"https://github.com/coala/coalaCSS/pull/19#issuecomment-350495005","bodyText":"@sd5869 commit message must contain file name in commit shortlog,\npresently file name is inside commit body instead of commit shortlog.","diffHunk":null,"author":{"login":"hemangsk","avatarUrl":"https://avatars3.githubusercontent.com/u/13018570?v=4","name":"Hemang Kumar"},"createdAt":"2017-12-09T18:09:24Z","lastEditedAt":null,"updatedAt":"2017-12-09T18:09:24Z"},{"id":"MDEyOklzc3VlQ29tbWVudDM3NzUyNTEzMg==","url":"https://github.com/coala/coalaCSS/pull/19#issuecomment-377525132","bodyText":"Fixes coala/landing-frontend#188","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-03-30T13:34:10Z","lastEditedAt":null,"updatedAt":"2018-03-30T13:34:10Z"},{"id":"MDEyOklzc3VlQ29tbWVudDQwODYzMDQ2MQ==","url":"https://github.com/coala/coalaCSS/pull/19#issuecomment-408630461","bodyText":"Commit message problem not fixed.\nClosing due to inactivity.","diffHunk":null,"author":{"login":"jayvdb","avatarUrl":"https://avatars1.githubusercontent.com/u/15092?v=4","name":"John Vandenberg"},"createdAt":"2018-07-28T19:37:57Z","lastEditedAt":null,"updatedAt":"2018-07-28T19:37:57Z"}]}}}],"repoLabels":[{"repoOwner":"coala","repoName":"coala","labels":[{"id":"MDU6TGFiZWw5OTc3NjYwNw==","name":"type/bug","color":"e11d21","default":false},{"id":"MDU6TGFiZWwxMDc2MTQyMjc=","name":"type/feature","color":"0052cc","default":false},{"id":"MDU6TGFiZWwxMDc2MTQzMjY=","name":"importance/high","color":"eb6420","default":false},{"id":"MDU6TGFiZWwxMDc2MjE5NzM=","name":"difficulty/newcomer","color":"65C8FF","default":false},{"id":"MDU6TGFiZWwxMDc2MjIwNTE=","name":"status/needs design","color":"5319e7","default":false},{"id":"MDU6TGFiZWwxMjA4ODgxMTA=","name":"type/codestyle","color":"d4c5f9","default":false},{"id":"MDU6TGFiZWwxNDEwMzY3NzQ=","name":"process/pending review","color":"bfe5bf","default":false},{"id":"MDU6TGFiZWwxNzQ3NTIwMjc=","name":"area/bears","color":"eb6420","default":false},{"id":"MDU6TGFiZWwxNzcxMzAwMzY=","name":"status/blocked","color":"e11d21","default":false},{"id":"MDU6TGFiZWwxNzgwNDczODQ=","name":"status/wontfix/accepting patches","color":"aaaaaa","default":false},{"id":"MDU6TGFiZWwxODQ4MTI3OTQ=","name":"status/needs info","color":"006b75","default":false},{"id":"MDU6TGFiZWwyMTQzMzMyMzQ=","name":"area/CI","color":"eb6420","default":false},{"id":"MDU6TGFiZWwyMTc1NTM4ODQ=","name":"bounty","color":"129e5e","default":false},{"id":"MDU6TGFiZWwyMTg0NzU4MDI=","name":"process/approved","color":"009800","default":false},{"id":"MDU6TGFiZWwyMzcxMzE2MjY=","name":"process/wip","color":"fbca04","default":false},{"id":"MDU6TGFiZWwyOTM4NjEwNTQ=","name":"size/XXL","color":"AA0000","default":false},{"id":"MDU6TGFiZWwyOTM4NjEwNTU=","name":"size/XL","color":"FF0000","default":false},{"id":"MDU6TGFiZWwyOTM4NjEwNTY=","name":"size/L","color":"FF8888","default":false},{"id":"MDU6TGFiZWwyOTM4NjEwNTc=","name":"size/M","color":"eb6420","default":false},{"id":"MDU6TGFiZWwyOTM4NjEwNjU=","name":"size/S","color":"B1CF0A","default":false},{"id":"MDU6TGFiZWwyOTM4NjEwNjY=","name":"size/XS","color":"00DE0F","default":false},{"id":"MDU6TGFiZWwzMDg4NTIxOTA=","name":"difficulty/low","color":"207de5","default":false},{"id":"MDU6TGFiZWwzMDg4NTIyOTc=","name":"difficulty/medium","color":"0052cc","default":false},{"id":"MDU6TGFiZWwzMDg4NTIzMjY=","name":"difficulty/high","color":"B319e7","default":false},{"id":"MDU6TGFiZWwzMDg4NTc5NTk=","name":"status/wontfix/not happening","color":"000000","default":false},{"id":"MDU6TGFiZWwzMDg4NTgxMDc=","name":"importance/medium","color":"fbca04","default":false},{"id":"MDU6TGFiZWwzMDg4NTgxOTk=","name":"importance/low","color":"70E870","default":false},{"id":"MDU6TGFiZWwzMDg4NTg4NjA=","name":"area/CLI","color":"006b75","default":false},{"id":"MDU6TGFiZWwzMDg4NTkwMzI=","name":"area/results","color":"eb6420","default":false},{"id":"MDU6TGFiZWwzMDg4NTkwNTQ=","name":"area/actions","color":"207de5","default":false},{"id":"MDU6TGFiZWwzMDg4NTkxMDQ=","name":"area/core","color":"eb6420","default":false},{"id":"MDU6TGFiZWwzMDg4NTk2NjM=","name":"status/duplicate","color":"000000","default":false},{"id":"MDU6TGFiZWwzMDg4NjA4MjA=","name":"importance/critical","color":"e11d21","default":false},{"id":"MDU6TGFiZWwzMDg4NjA4NTY=","name":"area/documentation","color":"bfe5bf","default":false},{"id":"MDU6TGFiZWwzMDg4NjI5MzE=","name":"difficulty/very-high","color":"e11d21","default":false},{"id":"MDU6TGFiZWwzMDkwMDgxMzE=","name":"status/invalid","color":"000000","default":false},{"id":"MDU6TGFiZWwzMDkwNDQ3MjY=","name":"area/tests","color":"bfd4f2","default":false},{"id":"MDU6TGFiZWwzMTUyODUzODU=","name":"area/usability","color":"d4c5f9","default":false},{"id":"MDU6TGFiZWwzMjgxNjg0NDU=","name":"cool and awesome","color":"0052cc","default":false},{"id":"MDU6TGFiZWwzMzYyNzE0Mzc=","name":"status/abandoned","color":"e11d21","default":false},{"id":"MDU6TGFiZWwzNDM1Nzc4NTE=","name":"area/upstream","color":"5319e7","default":false},{"id":"MDU6TGFiZWwzNTg5OTc4ODM=","name":"review carefully!","color":"d93f0b","default":false},{"id":"MDU6TGFiZWwzNzU2NzE5MTk=","name":"status/cant reproduce","color":"006b75","default":false},{"id":"MDU6TGFiZWwzOTQyMDY1NzI=","name":"type/performance","color":"fef2c0","default":false},{"id":"MDU6TGFiZWw0NTI0NDE2MTA=","name":"hacktoberfest","color":"e99695","default":false},{"id":"MDU6TGFiZWw0NzgzOTcwOTY=","name":"area/logging","color":"0052cc","default":false},{"id":"MDU6TGFiZWw0ODAxMjU5NzQ=","name":"platform/windows","color":"0052cc","default":false},{"id":"MDU6TGFiZWw0ODAxMjYwMjQ=","name":"platform/mac","color":"fbca04","default":false},{"id":"MDU6TGFiZWw0ODAxMjYwNjA=","name":"platform/linux","color":"c2e0c6","default":false},{"id":"MDU6TGFiZWw0ODM1MDQzMjk=","name":"initiatives/gci","color":"e99695","default":false},{"id":"MDU6TGFiZWw0ODU0NDkxMzE=","name":"area/languages","color":"d4c5f9","default":false},{"id":"MDU6TGFiZWw0ODk2NTc4MjU=","name":"needs backport","color":"b60205","default":false},{"id":"MDU6TGFiZWw1NTkwMDA2NTM=","name":"area/install","color":"bfdadc","default":false},{"id":"MDU6TGFiZWw1NjYwNTYwOTA=","name":"area/aspects","color":"000000","default":false},{"id":"MDU6TGFiZWw1ODEzOTA5Mzg=","name":"type/breaking-change","color":"b60205","default":false},{"id":"MDU6TGFiZWw1ODk0NDQ2ODg=","name":"status/opaque-fix","color":"006b75","default":false},{"id":"MDU6TGFiZWw1OTM2MDE0Mzg=","name":"regression","color":"b60205","default":false},{"id":"MDU6TGFiZWw2MDQ1OTI1NjI=","name":"importance/trivial","color":"d4c5f9","default":false},{"id":"MDU6TGFiZWw2NTIwNDIyNzU=","name":"area/lintbears","color":"ededed","default":false},{"id":"MDU6TGFiZWw2NTIzOTkyNzQ=","name":"area/config","color":"fbca04","default":false},{"id":"MDU6TGFiZWw2NTI2NzAzMzE=","name":"status/needs discussion","color":"d93f0b","default":false},{"id":"MDU6TGFiZWw2NjY4MjQ4MTg=","name":"status/stale","color":"fbca04","default":false},{"id":"MDU6TGFiZWw4NDA5ODQ4MTA=","name":"area/genericbears","color":"ededed","default":false},{"id":"MDU6TGFiZWw5NTk4NTM4NjE=","name":"status/ci-approved","color":"ededed","default":false},{"id":"MDU6TGFiZWw5NjYwNDY2NzY=","name":"process/needs rebase","color":"e52db1","default":false}]},{"repoOwner":"coala","repoName":"coala-bears","labels":[{"id":"MDU6TGFiZWwzMjcwNDg3MDQ=","name":"size/XXL","color":"AA0000","default":false},{"id":"MDU6TGFiZWwzMjcwNDg3MDU=","name":"size/XL","color":"FF0000","default":false},{"id":"MDU6TGFiZWwzMjcwNDg3MjA=","name":"size/L","color":"FF8888","default":false},{"id":"MDU6TGFiZWwzMjcwNDg3MjE=","name":"size/M","color":"CFB80A","default":false},{"id":"MDU6TGFiZWwzMjcwNDg3MjI=","name":"size/S","color":"B1CF0A","default":false},{"id":"MDU6TGFiZWwzMjcwNDg3MjM=","name":"size/XS","color":"00DE0F","default":false},{"id":"MDU6TGFiZWwzMjczNjcxMTY=","name":"process/pending review","color":"bfe5bf","default":false},{"id":"MDU6TGFiZWwzMjg1NDk2Mjg=","name":"difficulty/high","color":"b319e7","default":false},{"id":"MDU6TGFiZWwzMjg1NDk2OTM=","name":"difficulty/low","color":"207de5","default":false},{"id":"MDU6TGFiZWwzMjg1NDk3Mjg=","name":"difficulty/medium","color":"0052cc","default":false},{"id":"MDU6TGFiZWwzMjg1NDk3Nzg=","name":"difficulty/newcomer","color":"65C8FF","default":false},{"id":"MDU6TGFiZWwzMjg1NDk4MDg=","name":"difficulty/very-high","color":"e11d21","default":false},{"id":"MDU6TGFiZWwzMjk1NDgzNjA=","name":"process/wip","color":"fbca04","default":false},{"id":"MDU6TGFiZWwzMjk1NDgzNzU=","name":"process/approved","color":"009800","default":false},{"id":"MDU6TGFiZWwzMjk2MDc1MDg=","name":"type/bug","color":"e11d21","default":false},{"id":"MDU6TGFiZWwzMjk2MDg1MjY=","name":"type/test","color":"207de5","default":false},{"id":"MDU6TGFiZWwzMjk2MDg5MTQ=","name":"status/blocked","color":"e11d21","default":false},{"id":"MDU6TGFiZWwzMjk2MDkwMDM=","name":"cool and awesome","color":"0052cc","default":false},{"id":"MDU6TGFiZWwzMjk2MDkyODU=","name":"importance/low","color":"70e870","default":false},{"id":"MDU6TGFiZWwzMjk2MDkyODY=","name":"type/feature","color":"0052cc","default":false},{"id":"MDU6TGFiZWwzMjk2MDkzNDM=","name":"importance/high","color":"eb6420","default":false},{"id":"MDU6TGFiZWwzMjk2MDk4MjA=","name":"importance/medium","color":"fbca04","default":false},{"id":"MDU6TGFiZWwzMjk2MDk4Nzk=","name":"type/codestyle","color":"bfd4f2","default":false},{"id":"MDU6TGFiZWwzMjk2MTE5MTA=","name":"status/needs design","color":"207de5","default":false},{"id":"MDU6TGFiZWwzMjk2MTI5MjU=","name":"status/needs info","color":"d4c5f9","default":false},{"id":"MDU6TGFiZWwzMjk2MTg0MzI=","name":"status/wontfix/accepting patches","color":"555555","default":false},{"id":"MDU6TGFiZWwzMjk2MTg0OTA=","name":"status/wontfix/not happening","color":"000000","default":false},{"id":"MDU6TGFiZWwzMjk2MTkwMDc=","name":"status/duplicate","color":"000000","default":false},{"id":"MDU6TGFiZWwzNDg2NTk2MzE=","name":"area/lintbears","color":"fbca04","default":false},{"id":"MDU6TGFiZWwzNDg2NjY2Mzk=","name":"area/documentation","color":"c5def5","default":false},{"id":"MDU6TGFiZWwzNzM3ODc1MzY=","name":"type/dependencies","color":"b60205","default":false},{"id":"MDU6TGFiZWw0MTMxOTIzMjY=","name":"bear proposal","color":"ADFF2F","default":false},{"id":"MDU6TGFiZWw0MzQ3MDk3MDU=","name":"long-term-project","color":"c5def5","default":false},{"id":"MDU6TGFiZWw0MzYzMTQwNDQ=","name":"upstream","color":"fbca04","default":false},{"id":"MDU6TGFiZWw0NDM4MDEzOTY=","name":"review carefully!","color":"d93f0b","default":false},{"id":"MDU6TGFiZWw0NTI0NDE0NjI=","name":"hacktoberfest","color":"b60205","default":false},{"id":"MDU6TGFiZWw0ODM0OTI0NTY=","name":"area/newsettings","color":"006b75","default":false},{"id":"MDU6TGFiZWw0ODM1MDQ5MzQ=","name":"initiatives/gci","color":"e99695","default":false},{"id":"MDU6TGFiZWw1MDkwMjY0MjU=","name":"needs backport","color":"b60205","default":false},{"id":"MDU6TGFiZWw1MjgxMjIzMjY=","name":"area/genericbears","color":"D01975","default":false},{"id":"MDU6TGFiZWw1NjYwNzE5MDc=","name":"area/aspects","color":"000000","default":false},{"id":"MDU6TGFiZWw1ODUzMzI3NDM=","name":"status/invalid","color":"000000","default":false},{"id":"MDU6TGFiZWw1OTQ2NzgyMDM=","name":"regression","color":"b60205","default":false},{"id":"MDU6TGFiZWw1OTQ2Nzg1MzM=","name":"importance/critical","color":"e11d21","default":false},{"id":"MDU6TGFiZWw1OTQ3MzEwMDQ=","name":"area/usability","color":"d4c5f9","default":false},{"id":"MDU6TGFiZWw2MjAxNjU4NzE=","name":"area/ci","color":"d93f0b","default":false},{"id":"MDU6TGFiZWw2MjcxMTYzNTY=","name":"type/performance","color":"0e8a16","default":false},{"id":"MDU6TGFiZWw2ODA4NDE3NjY=","name":"status/STALE","color":"ededed","default":false},{"id":"MDU6TGFiZWw3MDE2NzkwNjI=","name":"area/tests","color":"c5def5","default":false},{"id":"MDU6TGFiZWw3NDE2NzYzNDI=","name":"language/ruby","color":"dd27c8","default":false},{"id":"MDU6TGFiZWw3NDY4NzgxOTQ=","name":"status/needs discussion","color":"ead40e","default":false},{"id":"MDU6TGFiZWw4Njc1NzI1Mjk=","name":"area/install","color":"0b14bc","default":false},{"id":"MDU6TGFiZWw4NzU1ODUyMzk=","name":"status/non-free","color":"8f0dbf","default":false},{"id":"MDU6TGFiZWw5MDY3ODUyNjk=","name":"area/bears","color":"ededed","default":false},{"id":"MDU6TGFiZWw5ODMyMTYyMDQ=","name":"needs rebase","color":"f4cd69","default":false},{"id":"MDU6TGFiZWw5OTg4NjE3NjI=","name":"type/style","color":"168fe0","default":false},{"id":"MDU6TGFiZWwxMDAwNDgxMzgw","name":"type/spelling","color":"50b5f4","default":false}]},{"repoOwner":"coala","repoName":"documentation","labels":[{"id":"MDU6TGFiZWwzNDcxNjk0NTI=","name":"bug","color":"fc2929","default":true},{"id":"MDU6TGFiZWwzNDcxNjk0NTM=","name":"duplicate","color":"cccccc","default":true},{"id":"MDU6TGFiZWwzNDcxNjk0NTQ=","name":"enhancement","color":"84b6eb","default":true},{"id":"MDU6TGFiZWwzNDcxNjk0NTU=","name":"help wanted","color":"159818","default":true},{"id":"MDU6TGFiZWwzNDcxNjk0NTc=","name":"question","color":"cc317c","default":true},{"id":"MDU6TGFiZWw0Mjc0OTIzNjA=","name":"area/documentation","color":"0e8a16","default":false},{"id":"MDU6TGFiZWw0Mjc0OTIzNjE=","name":"cool and awesome","color":"0e8a16","default":false},{"id":"MDU6TGFiZWw0Mjc0OTIzNjI=","name":"difficulty/medium","color":"b60205","default":false},{"id":"MDU6TGFiZWw0Mjc0OTIzNjM=","name":"importance/medium","color":"fbca04","default":false},{"id":"MDU6TGFiZWw0Mjc0OTI3Nzc=","name":"difficulty/newcomer","color":"bfd4f2","default":false},{"id":"MDU6TGFiZWw0Mjc0OTI3Nzg=","name":"importance/low","color":"0052cc","default":false},{"id":"MDU6TGFiZWw0Mjc0OTY0NjQ=","name":"difficulty/low","color":"1d76db","default":false},{"id":"MDU6TGFiZWw0Mjc1MDE2Nzc=","name":"status/needs design","color":"1d76db","default":false},{"id":"MDU6TGFiZWw0Mjc1MDIyNjA=","name":"area/bears","color":"ededed","default":false},{"id":"MDU6TGFiZWw0Mjc1MDI0MDE=","name":"area/usability","color":"ededed","default":false},{"id":"MDU6TGFiZWw0Mjc1MDI0MDI=","name":"importance/critical","color":"b60205","default":false},{"id":"MDU6TGFiZWw0Mjc1MDMzOTg=","name":"importance/high","color":"d93f0b","default":false},{"id":"MDU6TGFiZWw0Mjc1MTA5MTA=","name":"status/blocked","color":"b60205","default":false},{"id":"MDU6TGFiZWw0MzEwMDExMDM=","name":"process/wip","color":"fbca04","default":false},{"id":"MDU6TGFiZWw0MzEwMDExODE=","name":"process/pending review","color":"c2e0c6","default":false},{"id":"MDU6TGFiZWw0MzE0MzQ5NzY=","name":"size/S","color":"1d76db","default":false},{"id":"MDU6TGFiZWw0MzE0MzgxNjg=","name":"size/XS","color":"0e8a16","default":false},{"id":"MDU6TGFiZWw0MzE0NTI5ODI=","name":"process/approved","color":"0e8a16","default":false},{"id":"MDU6TGFiZWw0MzIwNTAyMDE=","name":"size/M","color":"fbca04","default":false},{"id":"MDU6TGFiZWw0NDM1Njc4Mzk=","name":"size/L","color":"f9d0c4","default":false},{"id":"MDU6TGFiZWw0NDQzODgyODI=","name":"size/XL","color":"b60205","default":false},{"id":"MDU6TGFiZWw0NTI0NDIxNDQ=","name":"hacktoberfest","color":"d93f0b","default":false},{"id":"MDU6TGFiZWw0NTYxMTgwNzE=","name":"review carefully!","color":"b60205","default":false},{"id":"MDU6TGFiZWw0NTg1NDUwOTI=","name":"size/XXL","color":"ededed","default":false},{"id":"MDU6TGFiZWw1MTAyNTE0Nzk=","name":"initiatives/gci","color":"f9d0c4","default":false},{"id":"MDU6TGFiZWw2ODA4NDQxODE=","name":"status/stale","color":"ededed","default":false},{"id":"MDU6TGFiZWw3NjE4MjQ3MDA=","name":"status/invalid","color":"000000","default":false},{"id":"MDU6TGFiZWw4MTg0NDUyNjI=","name":"status/needs info","color":"9bf2cf","default":false},{"id":"MDU6TGFiZWw4MzI2ODAwMzk=","name":"status/needs discussion","color":"f4ab8b","default":false},{"id":"MDU6TGFiZWw4NDcxMDQ2MDk=","name":"area/ci","color":"f49093","default":false}]},{"repoOwner":"coala","repoName":"projects","labels":[{"id":"MDU6TGFiZWw1MjAwNDU5MzU=","name":"bug","color":"ee0701","default":true},{"id":"MDU6TGFiZWw1MjAwNDU5MzY=","name":"duplicate","color":"cccccc","default":true},{"id":"MDU6TGFiZWw1MjAwNDU5Mzc=","name":"enhancement","color":"84b6eb","default":true},{"id":"MDU6TGFiZWw1MjAwNDU5Mzg=","name":"help wanted","color":"128A0C","default":true},{"id":"MDU6TGFiZWw1MjAwNDU5Mzk=","name":"invalid","color":"000000","default":true},{"id":"MDU6TGFiZWw1MjAwNDU5NDA=","name":"question","color":"cc317c","default":true},{"id":"MDU6TGFiZWw1MjAwNDU5NDE=","name":"status/wontfix/accepting patches","color":"ffffff","default":false},{"id":"MDU6TGFiZWw1MjAxMDU4MTY=","name":"process/pending review","color":"bfe5bf","default":false},{"id":"MDU6TGFiZWw1MjAxMDU4Mzg=","name":"size/XXL","color":"ededed","default":false},{"id":"MDU6TGFiZWw1MjAxMTI2NDc=","name":"size/S","color":"ededed","default":false},{"id":"MDU6TGFiZWw1MjAxMzA5ODU=","name":"process/wip","color":"fbca04","default":false},{"id":"MDU6TGFiZWw1MjAxMzgzMjY=","name":"process/approved","color":"0e8a16","default":false},{"id":"MDU6TGFiZWw1MjAxNDgxNzc=","name":"size/XS","color":"ededed","default":false},{"id":"MDU6TGFiZWw1MjAxNzM1OTQ=","name":"design","color":"5319e7","default":false},{"id":"MDU6TGFiZWw1MjAxOTc5MjE=","name":"size/M","color":"ededed","default":false},{"id":"MDU6TGFiZWw1MjAyMDYyNTE=","name":"size/L","color":"ededed","default":false},{"id":"MDU6TGFiZWw1MjA0MTEwMTk=","name":"review carefully!","color":"ededed","default":false},{"id":"MDU6TGFiZWw1MjA5Nzk3MTI=","name":"difficulty/newcomer","color":"0e8a16","default":false},{"id":"MDU6TGFiZWw1MjA5Nzk3NjI=","name":"difficulty/low","color":"1d76db","default":false},{"id":"MDU6TGFiZWw1MjE5NDE2MTI=","name":"size/XL","color":"ededed","default":false},{"id":"MDU6TGFiZWw1MjQzODgxMzc=","name":"community_team","color":"5319e7","default":false},{"id":"MDU6TGFiZWw2MTM4ODMyNzI=","name":"Project Proposal","color":"f9d0c4","default":false},{"id":"MDU6TGFiZWw2ODA4NDM5NjY=","name":"status/STALE","color":"ededed","default":false},{"id":"MDU6TGFiZWw3MzAzNzE5NDQ=","name":"initiatives/gci","color":"fc7d0f","default":false},{"id":"MDU6TGFiZWw3MzgxODI0MzY=","name":"upstream","color":"ffb5bd","default":false},{"id":"MDU6TGFiZWw3NTE3NjE0NTk=","name":"importance/high","color":"eb6420","default":false},{"id":"MDU6TGFiZWw4MzYzNjUxNjE=","name":"importance/critical","color":"b60205","default":false},{"id":"MDU6TGFiZWw4MzcxMjA3OTA=","name":"importance/low","color":"2fe055","default":false},{"id":"MDU6TGFiZWw4MzcxNjY3NTk=","name":"difficulty/medium","color":"9dea67","default":false},{"id":"MDU6TGFiZWw4MzcxNzIzOTI=","name":"importance/medium","color":"f2db30","default":false},{"id":"MDU6TGFiZWw4NjIyMDU3MjQ=","name":"status/needs info","color":"71fcb7","default":false},{"id":"MDU6TGFiZWw4NzgxODM1OTc=","name":"status/blocked","color":"e56994","default":false},{"id":"MDU6TGFiZWw5MTIxODM1MTc=","name":"status/needs design","color":"f9a7df","default":false}]},{"repoOwner":"coala","repoName":"devops","labels":[{"id":"MDU6TGFiZWw2MDkyNjQ4MjM=","name":"process/wip","color":"fbca04","default":false},{"id":"MDU6TGFiZWw2MjQyMjkyMzE=","name":"size/XS","color":"00DE0F","default":false},{"id":"MDU6TGFiZWw2MjU3NzY1MzM=","name":"size/S","color":"B1CF0A","default":false},{"id":"MDU6TGFiZWw2MjgxNTMwNjk=","name":"importance/critical","color":"b60205","default":false},{"id":"MDU6TGFiZWw2MjgxNTM3MTA=","name":"importance/high","color":"eb6420","default":false},{"id":"MDU6TGFiZWw2MjgxNTM4NzI=","name":"importance/low","color":"70E870","default":false},{"id":"MDU6TGFiZWw2MjgxNTQwODM=","name":"importance/medium","color":"fbca04","default":false},{"id":"MDU6TGFiZWw2MjgxNTQzMjI=","name":"importance/trivial","color":"d4c5f9","default":false},{"id":"MDU6TGFiZWw2MjgxNTQ4OTc=","name":"size/M","color":"eb6420","default":false},{"id":"MDU6TGFiZWw2MjgxNTUwODE=","name":"size/L","color":"FF8888","default":false},{"id":"MDU6TGFiZWw2MjgxNTU0NjE=","name":"size/XL","color":"FF0000","default":false},{"id":"MDU6TGFiZWw2MjgxOTMwNTQ=","name":"review carefully!","color":"d93f0b","default":false},{"id":"MDU6TGFiZWw2MjgxOTMxNTM=","name":"regression","color":"b60205","default":false},{"id":"MDU6TGFiZWw2MjgxOTM4OTE=","name":"status/blocked","color":"e11d21","default":false},{"id":"MDU6TGFiZWw2MjgxOTQwMjk=","name":"status/cant reproduce","color":"006b75","default":false},{"id":"MDU6TGFiZWw2MjgxOTQxMDI=","name":"status/duplicate","color":"000000","default":false},{"id":"MDU6TGFiZWw2MjgxOTQyMDI=","name":"status/invalid","color":"668866","default":false},{"id":"MDU6TGFiZWw2MjgxOTQzMzA=","name":"status/needs design","color":"5319e7","default":false},{"id":"MDU6TGFiZWw2MjgxOTQ1MDg=","name":"status/needs info","color":"006b75","default":false},{"id":"MDU6TGFiZWw2MjgxOTQ2NTI=","name":"status/opaque-fix","color":"006b75","default":false},{"id":"MDU6TGFiZWw2MjgxOTQ3NTk=","name":"status/wontfix/accepting patches","color":"aaaaaa","default":false},{"id":"MDU6TGFiZWw2MjgxOTQ5MDg=","name":"status/wontfix/not happening","color":"000000","default":false},{"id":"MDU6TGFiZWw2MjgxOTUwMjk=","name":"type/breaking-change","color":"b60205","default":false},{"id":"MDU6TGFiZWw2MjgxOTUyMjA=","name":"type/bug","color":"e11d21","default":false},{"id":"MDU6TGFiZWw2MjgxOTUzOTA=","name":"type/feature","color":"0052cc","default":false},{"id":"MDU6TGFiZWw2MjgxOTU3OTU=","name":"area/security","color":"d4c5f9","default":false},{"id":"MDU6TGFiZWw2MjgxOTYwMzQ=","name":"process/approved","color":"009800","default":false},{"id":"MDU6TGFiZWw2MjgxOTY5Nzg=","name":"scope/internal","color":"D01975","default":false},{"id":"MDU6TGFiZWw2MjgxOTczNjQ=","name":"area/ops","color":"1d76db","default":false},{"id":"MDU6TGFiZWw2MjgxOTg4Nzc=","name":"upstream","color":"fbca04","default":false},{"id":"MDU6TGFiZWw2Mjg0NDk5ODc=","name":"service/venus","color":"5319e7","default":false},{"id":"MDU6TGFiZWw2Mjg0NTAwNDQ=","name":"service/nginx","color":"0e8a16","default":false},{"id":"MDU6TGFiZWw2Mjg0NTAxNTg=","name":"service/cobot","color":"fbca04","default":false},{"id":"MDU6TGFiZWw2Mjg0NTAxODc=","name":"service/cherry-pick-bot","color":"d93f0b","default":false},{"id":"MDU6TGFiZWw2Mjg0NTAzMzU=","name":"type/new service","color":"006b75","default":false},{"id":"MDU6TGFiZWw2Mjg0NTA0NzA=","name":"area/web development","color":"fbca04","default":false},{"id":"MDU6TGFiZWw2Mjg0NTE2MDI=","name":"area/communication","color":"0e8a16","default":false},{"id":"MDU6TGFiZWw2Mjg0NTY3ODQ=","name":"service/landing","color":"b60205","default":false},{"id":"MDU6TGFiZWw2MjkwMjAyMjI=","name":"difficulty/newcomer","color":"65C8FF","default":false},{"id":"MDU6TGFiZWw2MjkwMjAyOTQ=","name":"difficulty/low","color":"207de5","default":false},{"id":"MDU6TGFiZWw2MjkwMjA0MTQ=","name":"difficulty/medium","color":"0052cc","default":false},{"id":"MDU6TGFiZWw2MjkwMjA0Nzg=","name":"difficulty/high","color":"B319e7","default":false},{"id":"MDU6TGFiZWw2MjkwMjA1Mjk=","name":"difficulty/very-high","color":"e11d21","default":false},{"id":"MDU6TGFiZWw2MjkwMjA1NjU=","name":"area/CI","color":"eb6420","default":false},{"id":"MDU6TGFiZWw2MzI5MTU0MTY=","name":"service/corobo","color":"006b75","default":false},{"id":"MDU6TGFiZWw2MzI5MTcyOTQ=","name":"area/CD","color":"006b75","default":false},{"id":"MDU6TGFiZWw2MzI5MTkwNjM=","name":"service/ikari","color":"ab78ff","default":false},{"id":"MDU6TGFiZWw2MzI5MTkzMzI=","name":"area/monitoring","color":"aaff88","default":false},{"id":"MDU6TGFiZWw2MzI5MTk4MjE=","name":"cool and awesome","color":"aaffdd","default":false},{"id":"MDU6TGFiZWw2ODA4NDM4MTA=","name":"status/stale","color":"fbca04","default":false},{"id":"MDU6TGFiZWw2ODU2MDMyOTc=","name":"process/pending review","color":"bfe5bf","default":false},{"id":"MDU6TGFiZWw3MzI4OTUxMTk=","name":"initiatives/gci","color":"936ed3","default":false},{"id":"MDU6TGFiZWw5MjY3OTg3OTc=","name":"process/pending_review","color":"ededed","default":false}]},{"repoOwner":"coala","repoName":"corobo","labels":[{"id":"MDU6TGFiZWw2MDExMDE3NTU=","name":"bug","color":"ee0701","default":true},{"id":"MDU6TGFiZWw2MDExMDE3NTY=","name":"duplicate","color":"cccccc","default":true},{"id":"MDU6TGFiZWw2MDExMDE3NTc=","name":"enhancement","color":"84b6eb","default":true},{"id":"MDU6TGFiZWw2MDExMDE3NTg=","name":"help wanted","color":"128A0C","default":true},{"id":"MDU6TGFiZWw2MDExMDE3NTk=","name":"invalid","color":"000000","default":true},{"id":"MDU6TGFiZWw2MDExMDE3NjA=","name":"question","color":"cc317c","default":true},{"id":"MDU6TGFiZWw2MDExMDE3NjE=","name":"wontfix","color":"000000","default":true},{"id":"MDU6TGFiZWw2MDEzNTc0Mjk=","name":"importance/low","color":"f9d0c4","default":false},{"id":"MDU6TGFiZWw2MDEzNTc0ODc=","name":"importance/high","color":"e99695","default":false},{"id":"MDU6TGFiZWw2MDEzNTc1OTM=","name":"difficulty/low","color":"207de5","default":false},{"id":"MDU6TGFiZWw2MDEzNTc2NzE=","name":"difficulty/medium","color":"0052cc","default":false},{"id":"MDU6TGFiZWw2MDEzNTc3NDk=","name":"difficulty/high","color":"b319e7","default":false},{"id":"MDU6TGFiZWw2MDEzOTE3OTY=","name":"difficulty/very-high","color":"e11d21","default":false},{"id":"MDU6TGFiZWw2MDEzOTMxOTY=","name":"importance/critical","color":"b60205","default":false},{"id":"MDU6TGFiZWw2MDE0MDQ2Mjc=","name":"status/needs design","color":"5319e7","default":false},{"id":"MDU6TGFiZWw2MDM2ODcwMTM=","name":"stretch goal","color":"c2e0c6","default":false},{"id":"MDU6TGFiZWw2MTQyMTk3Mjk=","name":"process/approved","color":"009800","default":false},{"id":"MDU6TGFiZWw2MTQyMTk3NjU=","name":"process/wip","color":"fbca04","default":false},{"id":"MDU6TGFiZWw2MTQ2OTYxMzE=","name":"status/blocked","color":"b60205","default":false},{"id":"MDU6TGFiZWw2MTUyODM2MTU=","name":"ready","color":"ededed","default":false},{"id":"MDU6TGFiZWw2MTUyODUyMzI=","name":"in progress","color":"ededed","default":false},{"id":"MDU6TGFiZWw2MTUzNjgxODU=","name":"documentation","color":"5319e7","default":false},{"id":"MDU6TGFiZWw2MTcwNzUyNDA=","name":"pr available","color":"cccccc","default":false},{"id":"MDU6TGFiZWw2MTg0MTI1ODU=","name":"cool and awesome","color":"5319e7","default":false},{"id":"MDU6TGFiZWw2MTg0MTMzNTk=","name":"plugin proposal","color":"0e8a16","default":false},{"id":"MDU6TGFiZWw2MTg5NjE5MDA=","name":"poll","color":"5319e7","default":false},{"id":"MDU6TGFiZWw2MTk4NTMxNzU=","name":"design","color":"0052cc","default":false},{"id":"MDU6TGFiZWw2MjI2MjMyMzE=","name":"decided","color":"1d76db","default":false},{"id":"MDU6TGFiZWw2MjI3MTg0NTE=","name":"process/pending review","color":"bfe5bf","default":false},{"id":"MDU6TGFiZWw2MjI3MTg1MDE=","name":"size/XS","color":"ededed","default":false},{"id":"MDU6TGFiZWw2MjM0MDU1NTE=","name":"difficulty/newcomer","color":"65c8ff","default":false},{"id":"MDU6TGFiZWw2MjQyMzcwMjQ=","name":"size/S","color":"ededed","default":false},{"id":"MDU6TGFiZWw2MjQ3NzY3ODg=","name":"size/M","color":"ededed","default":false},{"id":"MDU6TGFiZWw2MjY3NDQ0MzY=","name":"deployment","color":"1d76db","default":false},{"id":"MDU6TGFiZWw2MjY4NTIxOTM=","name":"non-existent","color":"ededed","default":false},{"id":"MDU6TGFiZWw2Mjc5NjE1Mjc=","name":"size/L","color":"ededed","default":false},{"id":"MDU6TGFiZWw2MjkyODg1NDY=","name":"size/XL","color":"ededed","default":false},{"id":"MDU6TGFiZWw2MzA0NTUwODk=","name":"size/XXL","color":"ededed","default":false},{"id":"MDU6TGFiZWw2MzIxMzg2ODg=","name":"upstream","color":"b60205","default":false},{"id":"MDU6TGFiZWw2NTc1NjY5MTY=","name":"gsoc2017/phase3","color":"0052cc","default":false},{"id":"MDU6TGFiZWw2ODA4NDM3ODg=","name":"status/STALE","color":"ededed","default":false},{"id":"MDU6TGFiZWw3MjY4ODMyMzQ=","name":"initiatives/gci","color":"f79e9f","default":false},{"id":"MDU6TGFiZWw3Mzk0NDIzNzA=","name":"status/cannot reproduce","color":"000000","default":false},{"id":"MDU6TGFiZWw3NDI4NzcxODA=","name":"importance/medium","color":"ddba61","default":false},{"id":"MDU6TGFiZWw3NTg3MDM2MzA=","name":"area/ui","color":"dd02cf","default":false},{"id":"MDU6TGFiZWw3NTg3MDQzNDU=","name":"area/labhub","color":"63ccf9","default":false},{"id":"MDU6TGFiZWw3NTg3MDUyNDY=","name":"area/security","color":"fc6805","default":false},{"id":"MDU6TGFiZWw3NjE3NTA5NTc=","name":"type/markdown","color":"2a0582","default":false},{"id":"MDU6TGFiZWw3NjE3OTU1NzE=","name":"type/regex","color":"d453e2","default":false},{"id":"MDU6TGFiZWw3NjE5NDI5ODM=","name":"area/errbot","color":"ed3d9b","default":false},{"id":"MDU6TGFiZWw3NjE5NDMzNTQ=","name":"backend/gitter","color":"7cf9c1","default":false},{"id":"MDU6TGFiZWw3NjE5NDQwMDg=","name":"backend/zulip","color":"0a546b","default":false},{"id":"MDU6TGFiZWw3NjE5NjI2ODg=","name":"backend/telegram","color":"e26858","default":false},{"id":"MDU6TGFiZWw3NjIwMTE4MTI=","name":"area/config","color":"60a1db","default":false},{"id":"MDU6TGFiZWw3NjIwMTIyNTM=","name":"area/tests","color":"5facd8","default":false},{"id":"MDU6TGFiZWw3NjIwMjkyMTI=","name":"status/needs info","color":"8e081e","default":false},{"id":"MDU6TGFiZWw3NjI0MTgyNzI=","name":"area/documentation","color":"969bdd","default":false},{"id":"MDU6TGFiZWw3NjY2Mzc1ODM=","name":"area/ci","color":"ab04e8","default":false},{"id":"MDU6TGFiZWw5OTg4NjM0Nzc=","name":"type/style","color":"567c09","default":false}]},{"repoOwner":"coala","repoName":"community","labels":[{"id":"MDU6TGFiZWw3NjYwMTk2MDQ=","name":"bug","color":"ee0701","default":true},{"id":"MDU6TGFiZWw3NjYwMTk2MDU=","name":"duplicate","color":"cccccc","default":true},{"id":"MDU6TGFiZWw3NjYwMTk2MDY=","name":"enhancement","color":"84b6eb","default":true},{"id":"MDU6TGFiZWw3NjYwMTk2MDc=","name":"help wanted","color":"33aa3f","default":true},{"id":"MDU6TGFiZWw3NjYwMTk2MDg=","name":"good first issue","color":"7057ff","default":true},{"id":"MDU6TGFiZWw3NjYwMTk2MDk=","name":"invalid","color":"e6e6e6","default":true},{"id":"MDU6TGFiZWw3NjYwMTk2MTA=","name":"question","color":"cc317c","default":true},{"id":"MDU6TGFiZWw3NjYwMTk2MTE=","name":"wontfix","color":"ffffff","default":true},{"id":"MDU6TGFiZWw3NjYyMTU3OTg=","name":"difficulty/newcomer","color":"65C8FF","default":false},{"id":"MDU6TGFiZWw3NjYyMTU4NzE=","name":"initiatives/gci","color":"ff9549","default":false},{"id":"MDU6TGFiZWw3NjYyMTY0Njc=","name":"difficulty/medium","color":"0052cc","default":false},{"id":"MDU6TGFiZWw3NjYyMzg3OTg=","name":"difficulty/low","color":"207de5","default":false},{"id":"MDU6TGFiZWw3NjYzMjMwMjc=","name":"needs design","color":"db81c7","default":false},{"id":"MDU6TGFiZWw3Njc0MjMzMDE=","name":"process/wip","color":"ededed","default":false},{"id":"MDU6TGFiZWw3Njg2NDc1NDg=","name":"upstream","color":"fcc4c5","default":false},{"id":"MDU6TGFiZWw3Njg3NTEyNzk=","name":"importance/low","color":"9cc6fc","default":false},{"id":"MDU6TGFiZWw3Njg3NTE3Nzc=","name":"importance/high","color":"e0401d","default":false},{"id":"MDU6TGFiZWw3Njk4MDEyMTA=","name":"process/pending review","color":"ededed","default":false},{"id":"MDU6TGFiZWw3Njk4MDEyNDg=","name":"size/S","color":"ededed","default":false},{"id":"MDU6TGFiZWw3Njk4Njc2NDE=","name":"status/blocked","color":"d93f0b","default":false},{"id":"MDU6TGFiZWw3NzAxOTkwODc=","name":"difficulty/high","color":"B319e7","default":false},{"id":"MDU6TGFiZWw3NzAzMDQ4MTY=","name":"size/XS","color":"ededed","default":false},{"id":"MDU6TGFiZWw3NzA0MTk0MTA=","name":"process/approved","color":"ededed","default":false},{"id":"MDU6TGFiZWw3NzI2MTI0MzU=","name":"size/M","color":"ededed","default":false},{"id":"MDU6TGFiZWw3NzM5NDU4NjU=","name":"importance/medium","color":"ccf945","default":false},{"id":"MDU6TGFiZWw3Nzg1OTkxODY=","name":"size/XXL","color":"ededed","default":false},{"id":"MDU6TGFiZWw3Nzg3Mzk5MjY=","name":"size/XL","color":"ededed","default":false},{"id":"MDU6TGFiZWw3ODE1NTY4MzY=","name":"initiatives/gsoc","color":"ed95c1","default":false},{"id":"MDU6TGFiZWw3ODIxMTU0NDM=","name":"size/L","color":"ededed","default":false},{"id":"MDU6TGFiZWw3ODI1Njg2MjA=","name":"status/STALE","color":"ededed","default":false},{"id":"MDU6TGFiZWw5MjI0MDg1NzI=","name":"area/ci","color":"4c95ad","default":false},{"id":"MDU6TGFiZWw5OTg4NjI4MTU=","name":"type/style","color":"93f486","default":false},{"id":"MDU6TGFiZWwxMDA1MjQ0Mjgx","name":"area/tests","color":"7b68dd","default":false}]},{"repoOwner":"coala","repoName":"gci-leaders","labels":[{"id":"MDU6TGFiZWw3NjkyMjg1NTg=","name":"bug","color":"ee0701","default":true},{"id":"MDU6TGFiZWw3NjkyMjg1NTk=","name":"duplicate","color":"cccccc","default":true},{"id":"MDU6TGFiZWw3NjkyMjg1NjA=","name":"enhancement","color":"84b6eb","default":true},{"id":"MDU6TGFiZWw3NjkyMjg1NjE=","name":"help wanted","color":"33aa3f","default":true},{"id":"MDU6TGFiZWw3NjkyMjg1NjI=","name":"good first issue","color":"7057ff","default":true},{"id":"MDU6TGFiZWw3NjkyMjg1NjM=","name":"invalid","color":"e6e6e6","default":true},{"id":"MDU6TGFiZWw3NjkyMjg1NjQ=","name":"question","color":"cc317c","default":true},{"id":"MDU6TGFiZWw3NjkyMjg1NjU=","name":"wontfix","color":"000000","default":true},{"id":"MDU6TGFiZWw3Njk1ODQ5MjM=","name":"difficulty/low","color":"59db91","default":false},{"id":"MDU6TGFiZWw3Njk1ODQ5OTY=","name":"initiatives/gci","color":"98e9f9","default":false},{"id":"MDU6TGFiZWw3Njk1ODY4NTA=","name":"difficulty/newcomer","color":"ffcce2","default":false},{"id":"MDU6TGFiZWw3Njk1OTg5ODY=","name":"difficulty/medium","color":"ff91cd","default":false},{"id":"MDU6TGFiZWw3Njk2NDAyNjg=","name":"difficulty/high","color":"a667f7","default":false},{"id":"MDU6TGFiZWw3Njk2NDExNDk=","name":"status/blocked","color":"cc4158","default":false},{"id":"MDU6TGFiZWw3Njk2NjUzMjE=","name":"process/pending review","color":"c2e0c6","default":false},{"id":"MDU6TGFiZWw3Njk2NjUzNjI=","name":"size/XS","color":"ededed","default":false},{"id":"MDU6TGFiZWw3Njk3MDg3Mjg=","name":"process/approved","color":"0e8a16","default":false},{"id":"MDU6TGFiZWw3Njk5MzE3MTA=","name":"size/S","color":"ededed","default":false},{"id":"MDU6TGFiZWw3NzAxMDE1MjM=","name":"process/wip","color":"fbca04","default":false},{"id":"MDU6TGFiZWw3NzA3MzgyMDU=","name":"area/ui","color":"442cf7","default":false},{"id":"MDU6TGFiZWw3NzA4MTQwMjk=","name":"type/bug","color":"d93f0b","default":false},{"id":"MDU6TGFiZWw3NzA5NDg4ODk=","name":"size/XL","color":"ededed","default":false},{"id":"MDU6TGFiZWw3NzEwOTQ3Njg=","name":"area/i18n","color":"ffccee","default":false},{"id":"MDU6TGFiZWw3NzQ3MTc4OTE=","name":"size/L","color":"ededed","default":false},{"id":"MDU6TGFiZWw3NzQ4ODI2ODM=","name":"size/M","color":"ededed","default":false},{"id":"MDU6TGFiZWw3NzYyNjk4NzM=","name":"size/XXL","color":"ededed","default":false},{"id":"MDU6TGFiZWw3ODE0NTgxMTg=","name":"importance/low","color":"fcf1a6","default":false},{"id":"MDU6TGFiZWw3ODQxMDY0NDM=","name":"status/STALE","color":"ededed","default":false},{"id":"MDU6TGFiZWw5MjU5NDc0NjU=","name":"importance/high","color":"dd007d","default":false}]},{"repoOwner":"coala","repoName":"gh-board","labels":[{"id":"MDU6TGFiZWw3NTM5MzE2OTU=","name":"bug","color":"ee0701","default":true},{"id":"MDU6TGFiZWw3NTM5MzE2OTY=","name":"duplicate","color":"cccccc","default":true},{"id":"MDU6TGFiZWw3NTM5MzE2OTc=","name":"enhancement","color":"84b6eb","default":true},{"id":"MDU6TGFiZWw3NTM5MzE2OTg=","name":"help wanted","color":"33aa3f","default":true},{"id":"MDU6TGFiZWw3NTM5MzE2OTk=","name":"good first issue","color":"7057ff","default":true},{"id":"MDU6TGFiZWw3NTM5MzE3MDA=","name":"invalid","color":"e6e6e6","default":true},{"id":"MDU6TGFiZWw3NTM5MzE3MDE=","name":"question","color":"cc317c","default":true},{"id":"MDU6TGFiZWw3NTM5MzE3MDI=","name":"wontfix","color":"ffffff","default":true},{"id":"MDU6TGFiZWw3NTU4MTU1MzQ=","name":"type/feature","color":"0052cc","default":false},{"id":"MDU6TGFiZWw3NzQyNDUxNDA=","name":"difficulty/low","color":"07eded","default":false},{"id":"MDU6TGFiZWw3NzQyNDU1NDI=","name":"initiatives/gci","color":"e5ce95","default":false},{"id":"MDU6TGFiZWw3ODU0MzEyMDI=","name":"difficulty/medium","color":"d30a8d","default":false},{"id":"MDU6TGFiZWw4NDA0NzA4Njk=","name":"process/wip","color":"ead483","default":false},{"id":"MDU6TGFiZWw4NDQ4NjU2MTg=","name":"process/pending review","color":"ededed","default":false},{"id":"MDU6TGFiZWw4NDQ4NjU2OTE=","name":"size/XS","color":"ededed","default":false},{"id":"MDU6TGFiZWw4NjI0NjY2NTA=","name":"size/XL","color":"ededed","default":false},{"id":"MDU6TGFiZWw5MjAwMjc1NTE=","name":"size/M","color":"ededed","default":false},{"id":"MDU6TGFiZWw5MjAxOTA1NTk=","name":"size/XXL","color":"ededed","default":false},{"id":"MDU6TGFiZWw5MjAyMzc5NDc=","name":"difficulty/high","color":"e88e53","default":false},{"id":"MDU6TGFiZWw5MjIzNjc2Nzg=","name":"importance/medium","color":"65f23e","default":false},{"id":"MDU6TGFiZWw5MjM2MTYxMTQ=","name":"process/approved","color":"ededed","default":false},{"id":"MDU6TGFiZWw5MjU5ODk3ODk=","name":"upstream","color":"6ded77","default":false},{"id":"MDU6TGFiZWw5MzA1Mzc3NzI=","name":"importance/low","color":"1394a0","default":false},{"id":"MDU6TGFiZWw5MzgzMTQ4MjE=","name":"size/S","color":"ededed","default":false},{"id":"MDU6TGFiZWw5NTg5MTUwMDI=","name":"size/L","color":"ededed","default":false},{"id":"MDU6TGFiZWw5NTk1OTUyODA=","name":"difficulty/newcomer","color":"33a7bf","default":false},{"id":"MDU6TGFiZWwxMDExNjQ0Mjg5","name":"area/dependencies","color":"ef88a2","default":false}]},{"repoOwner":"coala","repoName":"coala-html","labels":[{"id":"MDU6TGFiZWwzMjY1MzQ5Nzg=","name":"type/bug","color":"fc2929","default":false},{"id":"MDU6TGFiZWwzMjY1MzQ5Nzk=","name":"status/duplicate","color":"cccccc","default":false},{"id":"MDU6TGFiZWwzMjY1MzQ5ODE=","name":"status/wontfix/accepting patches","color":"777777","default":false},{"id":"MDU6TGFiZWwzMjY1MzQ5ODI=","name":"status/invalid","color":"e6e6e6","default":false},{"id":"MDU6TGFiZWwzMjY1MzQ5ODM=","name":"status/need-design","color":"cc317c","default":false},{"id":"MDU6TGFiZWwzMjY1MzQ5ODQ=","name":"status/wontfix/not happening","color":"000000","default":false},{"id":"MDU6TGFiZWwzMjc0Mzc3NTU=","name":"difficulty/newcomer","color":"009800","default":false},{"id":"MDU6TGFiZWwzMjc0Mzc3NjQ=","name":"difficulty/low","color":"006b75","default":false},{"id":"MDU6TGFiZWwzMjc0Mzc3OTU=","name":"difficulty/medium","color":"fef2c0","default":false},{"id":"MDU6TGFiZWwzMjc0Mzc4MzE=","name":"difficulty/high","color":"eb6420","default":false},{"id":"MDU6TGFiZWwzMjc0Mzc4NzU=","name":"difficulty/very-high","color":"e11d21","default":false},{"id":"MDU6TGFiZWwzMzIzMzIzNzM=","name":"size/XXL","color":"AA0000","default":false},{"id":"MDU6TGFiZWwzMzIzMzIzNzQ=","name":"size/XL","color":"FF0000","default":false},{"id":"MDU6TGFiZWwzMzIzMzIzODI=","name":"size/L","color":"FF8888","default":false},{"id":"MDU6TGFiZWwzMzIzMzIzOTA=","name":"size/M","color":"CFB80A","default":false},{"id":"MDU6TGFiZWwzMzIzMzIzOTE=","name":"size/S","color":"B1CF0A","default":false},{"id":"MDU6TGFiZWwzMzIzMzIzOTk=","name":"size/XS","color":"00DE0F","default":false},{"id":"MDU6TGFiZWwzMzI5NTk1MTI=","name":"process/pending review","color":"c2e0c6","default":false},{"id":"MDU6TGFiZWwzMzMxMzU3NDk=","name":"status/blocked","color":"0052cc","default":false},{"id":"MDU6TGFiZWwzMzMyNDI0NDU=","name":"process/wip","color":"fbca04","default":false},{"id":"MDU6TGFiZWwzMzMzNDE1OTY=","name":"status/needs design","color":"ededed","default":false},{"id":"MDU6TGFiZWw0ODYyMDYxOTQ=","name":"review carefully!","color":"ededed","default":false},{"id":"MDU6TGFiZWw0ODYzMTg0NTQ=","name":"process/approved","color":"009800","default":false},{"id":"MDU6TGFiZWw2ODA4NDQzNjM=","name":"status/STALE","color":"ededed","default":false},{"id":"MDU6TGFiZWw3MzEwMjg5NTk=","name":"initiatives/gci","color":"f78589","default":false}]},{"repoOwner":"coala","repoName":"landing-frontend","labels":[{"id":"MDU6TGFiZWw1MjE2NDU4MTA=","name":"type/bug","color":"ee0701","default":false},{"id":"MDU6TGFiZWw1MjE2NDU4MTE=","name":"status/duplicate","color":"cccccc","default":false},{"id":"MDU6TGFiZWw1MjE2NDU4MTQ=","name":"status/wontfix/not happening","color":"e6e6e6","default":false},{"id":"MDU6TGFiZWw1MjE2NDU4MTU=","name":"needs-design","color":"cc317c","default":false},{"id":"MDU6TGFiZWw1MjE2NDU4MTY=","name":"status/wontfix/accepting patches","color":"ffffff","default":false},{"id":"MDU6TGFiZWw1MjE3MDE0OTc=","name":"difficulty/newcomer","color":"0e8a16","default":false},{"id":"MDU6TGFiZWw1MjE3MDE1MzY=","name":"difficulty/low","color":"1d76db","default":false},{"id":"MDU6TGFiZWw1MzE1MzAwNjE=","name":"process/wip","color":"fbca04","default":false},{"id":"MDU6TGFiZWw1MzE1OTEwMDc=","name":"size/S","color":"ededed","default":false},{"id":"MDU6TGFiZWw1MzE2MTQzODU=","name":"size/XS","color":"ededed","default":false},{"id":"MDU6TGFiZWw1MzE3NDgxNzc=","name":"size/L","color":"ededed","default":false},{"id":"MDU6TGFiZWw1MzE4MzA2ODg=","name":"size/XXL","color":"ededed","default":false},{"id":"MDU6TGFiZWw1MzIxNzM0NTY=","name":"size/M","color":"ededed","default":false},{"id":"MDU6TGFiZWw1MzczNTY1NTk=","name":"size/XL","color":"ededed","default":false},{"id":"MDU6TGFiZWw1MzczNTY1OTE=","name":"review carefully!","color":"ededed","default":false},{"id":"MDU6TGFiZWw2NjM0NzM5Mjg=","name":"process/pending review","color":"c2e0c6","default":false},{"id":"MDU6TGFiZWw2NjkxNjAwOTA=","name":"status/approved","color":"ededed","default":false},{"id":"MDU6TGFiZWw2NjkxNjEwODA=","name":"status/STALE","color":"ededed","default":false},{"id":"MDU6TGFiZWw2ODc1ODI1ODg=","name":"area/documentation","color":"ededed","default":false},{"id":"MDU6TGFiZWw3MDU3ODgwNzM=","name":"needs-discussion","color":"aa52aa","default":false},{"id":"MDU6TGFiZWw3MzAzNTE0NDc=","name":"initiatives/gci","color":"f2d5a4","default":false},{"id":"MDU6TGFiZWw3NDgzMDE3MzE=","name":"difficulty/high","color":"f762d7","default":false},{"id":"MDU6TGFiZWw3ODQ4Mzc1NjQ=","name":"difficulty/medium","color":"dbc255","default":false},{"id":"MDU6TGFiZWw3ODYxOTA3MzM=","name":"process/pending_review","color":"ededed","default":false},{"id":"MDU6TGFiZWw4Njc1Nzc2MzI=","name":"invalid","color":"000000","default":true},{"id":"MDU6TGFiZWw4ODM0MDIxNDI=","name":"process/approved","color":"ededed","default":false},{"id":"MDU6TGFiZWw4OTU1MjU0NDM=","name":"enhancement","color":"097287","default":true}]},{"repoOwner":"coala","repoName":"coalaCSS","labels":[{"id":"MDU6TGFiZWw2MDk0OTkxNzc=","name":"bug","color":"ee0701","default":true},{"id":"MDU6TGFiZWw2MDk0OTkxNzg=","name":"duplicate","color":"cccccc","default":true},{"id":"MDU6TGFiZWw2MDk0OTkxNzk=","name":"enhancement","color":"84b6eb","default":true},{"id":"MDU6TGFiZWw2MDk0OTkxODA=","name":"help wanted","color":"128A0C","default":true},{"id":"MDU6TGFiZWw2MDk0OTkxODE=","name":"invalid","color":"e6e6e6","default":true},{"id":"MDU6TGFiZWw2MDk0OTkxODI=","name":"question","color":"cc317c","default":true},{"id":"MDU6TGFiZWw2MDk0OTkxODM=","name":"wontfix","color":"ffffff","default":true},{"id":"MDU6TGFiZWw2MzAzNTEzNDg=","name":"process/pending_review","color":"ededed","default":false},{"id":"MDU6TGFiZWw2MzAzNTE1MjU=","name":"size/XS","color":"ededed","default":false},{"id":"MDU6TGFiZWw2MzQ3OTgyNTE=","name":"area/landing-frontend","color":"5319e7","default":false},{"id":"MDU6TGFiZWw2MzQ3OTgzMzY=","name":"area/projects","color":"0052cc","default":false},{"id":"MDU6TGFiZWw2MzQ3OTg0ODU=","name":"design","color":"1d76db","default":false},{"id":"MDU6TGFiZWw2MzQ3OTkzMjk=","name":"importance/critical","color":"d93f0b","default":false},{"id":"MDU6TGFiZWw2Mzk0NDkwNTc=","name":"process/wip","color":"ededed","default":false},{"id":"MDU6TGFiZWw2ODEwMjUyMzA=","name":"status/STALE","color":"ededed","default":false},{"id":"MDU6TGFiZWw3MzMwNDk1MjU=","name":"initiatives/gci","color":"ee79f7","default":false},{"id":"MDU6TGFiZWw3Mzk0NjE0Nzc=","name":"difficulty/low","color":"207de5","default":false},{"id":"MDU6TGFiZWw3Mzk0NjE2MDY=","name":"importance/low","color":"99c1dd","default":false},{"id":"MDU6TGFiZWw3Mzk1MDA1OTA=","name":"process/pending review","color":"ededed","default":false},{"id":"MDU6TGFiZWw3NTEzMzIxMzA=","name":"process/approved","color":"ededed","default":false},{"id":"MDU6TGFiZWw4NDkxMjMwMjk=","name":"difficulty/newcomer","color":"65C8FF","default":false},{"id":"MDU6TGFiZWw4NDkxMjM4OTY=","name":"difficulty/medium","color":"0052cc","default":false}]}],"repositories":[{"repoOwner":"coala","repoName":"coala","isPrivate":false,"lastSeenAt":"2018-08-08T04:31:57Z"},{"repoOwner":"coala","repoName":"coala-bears","isPrivate":false,"lastSeenAt":"2018-08-08T05:11:43Z"},{"repoOwner":"coala","repoName":"documentation","isPrivate":false,"lastSeenAt":"2018-08-01T19:32:59Z"},{"repoOwner":"coala","repoName":"projects","isPrivate":false,"lastSeenAt":"2018-08-07T14:45:18Z"},{"repoOwner":"coala","repoName":"devops","isPrivate":false,"lastSeenAt":"2018-08-01T03:31:16Z"},{"repoOwner":"coala","repoName":"corobo","isPrivate":false,"lastSeenAt":"2018-08-08T06:33:01Z"},{"repoOwner":"coala","repoName":"community","isPrivate":false,"lastSeenAt":"2018-08-06T14:24:14Z"},{"repoOwner":"coala","repoName":"gci-leaders","isPrivate":false,"lastSeenAt":"2018-08-06T23:12:04Z"},{"repoOwner":"coala","repoName":"gh-board","isPrivate":false,"lastSeenAt":"2018-08-07T13:54:54Z"},{"repoOwner":"coala","repoName":"coala-html","isPrivate":false,"lastSeenAt":"2018-08-02T10:15:46Z"},{"repoOwner":"coala","repoName":"landing-frontend","isPrivate":false,"lastSeenAt":"2018-08-04T00:43:51Z"},{"repoOwner":"coala","repoName":"coalaCSS","isPrivate":false,"lastSeenAt":"2018-07-28T19:37:59Z"}]}